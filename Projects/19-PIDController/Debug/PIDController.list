
PIDController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800ac28  0800ac28  0001ac28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afa0  0800afa0  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800afa0  0800afa0  0001afa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afa8  0800afa8  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afa8  0800afa8  0001afa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afac  0800afac  0001afac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800afb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b8c  20000208  0800b1b8  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d94  0800b1b8  00020d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028096  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000551b  00000000  00000000  000482ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000160ab  00000000  00000000  0004d7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001508  00000000  00000000  00063898  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000023c0  00000000  00000000  00064da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00026662  00000000  00000000  00067160  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018091  00000000  00000000  0008d7c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d9da1  00000000  00000000  000a5853  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017f5f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056d4  00000000  00000000  0017f670  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ac0c 	.word	0x0800ac0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0800ac0c 	.word	0x0800ac0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <comInit>:

void comInit ( com_t* driver, uint32_t timeout )
{
	uint32_t i = 0;

	driver->rxIndex = 0;
 8000f88:	2200      	movs	r2, #0
	driver->txIndex = 0;
 8000f8a:	e9c0 2200 	strd	r2, r2, [r0]
{
 8000f8e:	b410      	push	{r4}
 8000f90:	f200 140f 	addw	r4, r0, #271	; 0x10f

	driver->rxReady = FALSE;

	driver->timeout = timeout;
 8000f94:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
	driver->rxReady = FALSE;
 8000f98:	7202      	strb	r2, [r0, #8]
 8000f9a:	4621      	mov	r1, r4
	driver->rxTimeoutCounter = 0;
 8000f9c:	60c2      	str	r2, [r0, #12]
 8000f9e:	f100 030f 	add.w	r3, r0, #15

	for ( i = 0; i < BUFFERSIZE; ++i )
	{
		driver->rxBuffer[ i ] = 0;
 8000fa2:	f803 2f01 	strb.w	r2, [r3, #1]!
	for ( i = 0; i < BUFFERSIZE; ++i )
 8000fa6:	428b      	cmp	r3, r1
		driver->txBuffer[ i ] = 0;
 8000fa8:	f804 2f01 	strb.w	r2, [r4, #1]!
	for ( i = 0; i < BUFFERSIZE; ++i )
 8000fac:	d1f9      	bne.n	8000fa2 <comInit+0x1a>
	}
}
 8000fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <comGetData>:

void comGetData ( com_t* driver, uint8_t data )
{
	if ( driver->rxReady == FALSE )
 8000fb4:	7a02      	ldrb	r2, [r0, #8]
 8000fb6:	b9aa      	cbnz	r2, 8000fe4 <comGetData+0x30>
	{
		if ( driver->rxIndex == 0 )
 8000fb8:	6803      	ldr	r3, [r0, #0]
 8000fba:	b933      	cbnz	r3, 8000fca <comGetData+0x16>
		{
			if ( data == 'A' )
 8000fbc:	2941      	cmp	r1, #65	; 0x41
			{
				driver->rxBuffer[ driver->rxIndex ] = data;
				++driver->rxIndex;
 8000fbe:	bf03      	ittte	eq
 8000fc0:	2301      	moveq	r3, #1
				driver->rxBuffer[ driver->rxIndex ] = data;
 8000fc2:	7401      	strbeq	r1, [r0, #16]
				++driver->rxIndex;
 8000fc4:	6003      	streq	r3, [r0, #0]
			}
			else
			{
				driver->rxIndex = 0;
				driver->rxTimeoutCounter = 0;
 8000fc6:	60c3      	strne	r3, [r0, #12]
 8000fc8:	4770      	bx	lr
			}
		}
		else if ( driver->rxIndex == 1 )
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d00b      	beq.n	8000fe6 <comGetData+0x32>
{
 8000fce:	b410      	push	{r4}
				driver->rxTimeoutCounter = 0;
			}
		}
		else
		{
			driver->rxBuffer[ driver->rxIndex ] = data;
 8000fd0:	18c4      	adds	r4, r0, r3
			++driver->rxIndex;
 8000fd2:	3301      	adds	r3, #1
			driver->rxBuffer[ driver->rxIndex ] = data;
 8000fd4:	7421      	strb	r1, [r4, #16]
			++driver->rxIndex;
 8000fd6:	6003      	str	r3, [r0, #0]

			if ( ( driver->rxBuffer[ driver->rxIndex - 2 ] == '\r' ) && ( driver->rxBuffer[ driver->rxIndex - 1 ] == '\n' ) )
 8000fd8:	7be4      	ldrb	r4, [r4, #15]
 8000fda:	2c0d      	cmp	r4, #13
 8000fdc:	d008      	beq.n	8000ff0 <comGetData+0x3c>
				driver->rxTimeoutCounter = 0;
				driver->rxBuffer[ driver->rxIndex ] = 0;
			}
		}
	}
}
 8000fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	4770      	bx	lr
			if ( data == 'T' )
 8000fe6:	2954      	cmp	r1, #84	; 0x54
 8000fe8:	d00a      	beq.n	8001000 <comGetData+0x4c>
				driver->rxIndex = 0;
 8000fea:	6002      	str	r2, [r0, #0]
				driver->rxTimeoutCounter = 0;
 8000fec:	60c2      	str	r2, [r0, #12]
 8000fee:	4770      	bx	lr
			if ( ( driver->rxBuffer[ driver->rxIndex - 2 ] == '\r' ) && ( driver->rxBuffer[ driver->rxIndex - 1 ] == '\n' ) )
 8000ff0:	290a      	cmp	r1, #10
 8000ff2:	d1f4      	bne.n	8000fde <comGetData+0x2a>
				driver->rxBuffer[ driver->rxIndex ] = 0;
 8000ff4:	4403      	add	r3, r0
				driver->rxReady = TRUE;
 8000ff6:	2101      	movs	r1, #1
				driver->rxTimeoutCounter = 0;
 8000ff8:	60c2      	str	r2, [r0, #12]
				driver->rxReady = TRUE;
 8000ffa:	7201      	strb	r1, [r0, #8]
				driver->rxBuffer[ driver->rxIndex ] = 0;
 8000ffc:	741a      	strb	r2, [r3, #16]
}
 8000ffe:	e7ee      	b.n	8000fde <comGetData+0x2a>
				++driver->rxIndex;
 8001000:	2302      	movs	r3, #2
				driver->rxBuffer[ driver->rxIndex ] = data;
 8001002:	7441      	strb	r1, [r0, #17]
				++driver->rxIndex;
 8001004:	6003      	str	r3, [r0, #0]
 8001006:	4770      	bx	lr

08001008 <comTimeoutCounter>:

void comTimeoutCounter ( com_t* driver )
{
	if ( ( driver->rxIndex != 0 ) && ( driver->rxReady == FALSE ) )
 8001008:	6803      	ldr	r3, [r0, #0]
 800100a:	b153      	cbz	r3, 8001022 <comTimeoutCounter+0x1a>
 800100c:	7a02      	ldrb	r2, [r0, #8]
 800100e:	b942      	cbnz	r2, 8001022 <comTimeoutCounter+0x1a>
	{
		++driver->rxTimeoutCounter;
 8001010:	68c3      	ldr	r3, [r0, #12]

		if ( driver->rxTimeoutCounter > driver->timeout )
 8001012:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
		++driver->rxTimeoutCounter;
 8001016:	3301      	adds	r3, #1
		if ( driver->rxTimeoutCounter > driver->timeout )
 8001018:	428b      	cmp	r3, r1
		++driver->rxTimeoutCounter;
 800101a:	60c3      	str	r3, [r0, #12]
		{
			driver->rxIndex = 0;
 800101c:	bf84      	itt	hi
 800101e:	6002      	strhi	r2, [r0, #0]
			driver->rxTimeoutCounter = 0;
 8001020:	60c2      	strhi	r2, [r0, #12]
		}
	}
}
 8001022:	4770      	bx	lr

08001024 <comIsRxBufferReady>:

uint8_t comIsRxBufferReady ( com_t* driver )
{
	return ( driver->rxReady );
}
 8001024:	7a00      	ldrb	r0, [r0, #8]
 8001026:	4770      	bx	lr

08001028 <comRxBufferProcessed>:

void comRxBufferProcessed ( com_t* driver )
{
	driver->rxReady = FALSE;
 8001028:	2300      	movs	r3, #0
 800102a:	7203      	strb	r3, [r0, #8]
	driver->rxIndex = 0;
 800102c:	6003      	str	r3, [r0, #0]
}
 800102e:	4770      	bx	lr

08001030 <comGetTxBufferIndex>:

uint32_t comGetTxBufferIndex ( com_t* driver )
{
	return ( driver->txIndex );
}
 8001030:	6840      	ldr	r0, [r0, #4]
 8001032:	4770      	bx	lr

08001034 <comSetTxBufferIndex>:

void comSetTxBufferIndex ( com_t* driver, uint32_t index )
{
	driver->txIndex = index;
 8001034:	6041      	str	r1, [r0, #4]
}
 8001036:	4770      	bx	lr

08001038 <adcToTemp>:
	__HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, (uint32_t) inp * 10 );
}

float adcToTemp ( uint32_t adcRaw ) //Calculate temperature from 10 bit ADC value
{
	float adcRawVar = adcRaw;
 8001038:	ee07 0a90 	vmov	s15, r0
 800103c:	eef8 6a67 	vcvt.f32.u32	s13, s15
	// T = ( 1 / a + b ( Ln Rt / R25 ) + c ( Ln Rt / R25 ) 2 + d ( Ln Rt / R25 ) ) - 273
	float Vo=3*adcRawVar/4095;
 8001040:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8001044:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001048:	ed9f 5abf 	vldr	s10, [pc, #764]	; 8001348 <adcToTemp+0x310>
	float RtRT25=(Vo*10000/(3-Vo))/30000;
 800104c:	eddf 5abf 	vldr	s11, [pc, #764]	; 800134c <adcToTemp+0x314>
 8001050:	ed9f 6abf 	vldr	s12, [pc, #764]	; 8001350 <adcToTemp+0x318>
	float Vo=3*adcRawVar/4095;
 8001054:	ee86 7a85 	vdiv.f32	s14, s13, s10
{
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800105a:	b085      	sub	sp, #20
	float RtRT25=(Vo*10000/(3-Vo))/30000;
 800105c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001060:	ee27 7a25 	vmul.f32	s14, s14, s11
 8001064:	eec7 6a27 	vdiv.f32	s13, s14, s15

	if((RtRT25<60.16)&&(RtRT25>3.195))
 8001068:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800106c:	ee17 0a90 	vmov	r0, s15
 8001070:	f7ff fa6a 	bl	8000548 <__aeabi_f2d>
 8001074:	a38e      	add	r3, pc, #568	; (adr r3, 80012b0 <adcToTemp+0x278>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	4604      	mov	r4, r0
 800107c:	460d      	mov	r5, r1
 800107e:	f7ff fd2d 	bl	8000adc <__aeabi_dcmplt>
 8001082:	b140      	cbz	r0, 8001096 <adcToTemp+0x5e>
 8001084:	a38c      	add	r3, pc, #560	; (adr r3, 80012b8 <adcToTemp+0x280>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	4620      	mov	r0, r4
 800108c:	4629      	mov	r1, r5
 800108e:	f7ff fd43 	bl	8000b18 <__aeabi_dcmpgt>
 8001092:	2800      	cmp	r0, #0
 8001094:	d139      	bne.n	800110a <adcToTemp+0xd2>
		return((1/(3.3545590E-3+(2.5903082E-4*log(RtRT25))+(4.1929419E-6*pow(log(RtRT25),2))+(-7.1497776E-8*pow(log(RtRT25),3))))-273);
	else if((RtRT25<3.195)&&(RtRT25>0.3636))
 8001096:	a388      	add	r3, pc, #544	; (adr r3, 80012b8 <adcToTemp+0x280>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	4620      	mov	r0, r4
 800109e:	4629      	mov	r1, r5
 80010a0:	f7ff fd1c 	bl	8000adc <__aeabi_dcmplt>
 80010a4:	b148      	cbz	r0, 80010ba <adcToTemp+0x82>
 80010a6:	a386      	add	r3, pc, #536	; (adr r3, 80012c0 <adcToTemp+0x288>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	4620      	mov	r0, r4
 80010ae:	4629      	mov	r1, r5
 80010b0:	f7ff fd32 	bl	8000b18 <__aeabi_dcmpgt>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	f040 8081 	bne.w	80011bc <adcToTemp+0x184>
		return((1/(3.3540178E-3+(2.6021087E-4*log(RtRT25))+(3.5946173E-6*pow(log(RtRT25),2))+(-8.5676875E-8*pow(log(RtRT25),3))))-273);
	else if((RtRT25<0.3636)&&(RtRT25>0.06933))
 80010ba:	a381      	add	r3, pc, #516	; (adr r3, 80012c0 <adcToTemp+0x288>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	4620      	mov	r0, r4
 80010c2:	4629      	mov	r1, r5
 80010c4:	f7ff fd0a 	bl	8000adc <__aeabi_dcmplt>
 80010c8:	b148      	cbz	r0, 80010de <adcToTemp+0xa6>
 80010ca:	a37f      	add	r3, pc, #508	; (adr r3, 80012c8 <adcToTemp+0x290>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	4620      	mov	r0, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	f7ff fd20 	bl	8000b18 <__aeabi_dcmpgt>
 80010d8:	2800      	cmp	r0, #0
 80010da:	f040 80ac 	bne.w	8001236 <adcToTemp+0x1fe>
		return((1/(3.3531474E-3+(2.5743868E-4*log(RtRT25))+(1.7022402E-6*pow(log(RtRT25),2))+(-8.8297492E-8*pow(log(RtRT25),3))))-273);
	else if((RtRT25<0.06933)&&(RtRT25>0.0187))
 80010de:	a37a      	add	r3, pc, #488	; (adr r3, 80012c8 <adcToTemp+0x290>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	4620      	mov	r0, r4
 80010e6:	4629      	mov	r1, r5
 80010e8:	f7ff fcf8 	bl	8000adc <__aeabi_dcmplt>
 80010ec:	b148      	cbz	r0, 8001102 <adcToTemp+0xca>
 80010ee:	a378      	add	r3, pc, #480	; (adr r3, 80012d0 <adcToTemp+0x298>)
 80010f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff fd0e 	bl	8000b18 <__aeabi_dcmpgt>
 80010fc:	2800      	cmp	r0, #0
 80010fe:	f040 812d 	bne.w	800135c <adcToTemp+0x324>
		return((1/(3.3547977E-3+(2.5879299E-4*log(RtRT25))+(1.8964602E-6*pow(log(RtRT25),2))+(-1.1884916E-7*pow(log(RtRT25),3))))-273);
	else
		return(255.0); //Error Value
 8001102:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8001354 <adcToTemp+0x31c>
}
 8001106:	b005      	add	sp, #20
 8001108:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return((1/(3.3545590E-3+(2.5903082E-4*log(RtRT25))+(4.1929419E-6*pow(log(RtRT25),2))+(-7.1497776E-8*pow(log(RtRT25),3))))-273);
 800110a:	ec45 4b10 	vmov	d0, r4, r5
 800110e:	f008 faf1 	bl	80096f4 <log>
 8001112:	ec51 0b10 	vmov	r0, r1, d0
 8001116:	ec45 4b10 	vmov	d0, r4, r5
 800111a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800111e:	f008 fae9 	bl	80096f4 <log>
 8001122:	ec57 6b10 	vmov	r6, r7, d0
 8001126:	ec45 4b10 	vmov	d0, r4, r5
 800112a:	f008 fae3 	bl	80096f4 <log>
 800112e:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 80012d8 <adcToTemp+0x2a0>
 8001132:	f008 fb5f 	bl	80097f4 <pow>
 8001136:	a36a      	add	r3, pc, #424	; (adr r3, 80012e0 <adcToTemp+0x2a8>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001140:	ed8d 0b00 	vstr	d0, [sp]
 8001144:	f7ff fa58 	bl	80005f8 <__aeabi_dmul>
 8001148:	a367      	add	r3, pc, #412	; (adr r3, 80012e8 <adcToTemp+0x2b0>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	f7ff f89d 	bl	800028c <__adddf3>
 8001152:	4632      	mov	r2, r6
 8001154:	4604      	mov	r4, r0
 8001156:	460d      	mov	r5, r1
 8001158:	463b      	mov	r3, r7
 800115a:	4630      	mov	r0, r6
 800115c:	4639      	mov	r1, r7
 800115e:	f7ff fa4b 	bl	80005f8 <__aeabi_dmul>
 8001162:	a363      	add	r3, pc, #396	; (adr r3, 80012f0 <adcToTemp+0x2b8>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fa46 	bl	80005f8 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4620      	mov	r0, r4
 8001172:	4629      	mov	r1, r5
 8001174:	f7ff f88a 	bl	800028c <__adddf3>
 8001178:	a35f      	add	r3, pc, #380	; (adr r3, 80012f8 <adcToTemp+0x2c0>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	4604      	mov	r4, r0
 8001180:	460d      	mov	r5, r1
		return((1/(3.3547977E-3+(2.5879299E-4*log(RtRT25))+(1.8964602E-6*pow(log(RtRT25),2))+(-1.1884916E-7*pow(log(RtRT25),3))))-273);
 8001182:	ed9d 0b00 	vldr	d0, [sp]
 8001186:	ec51 0b10 	vmov	r0, r1, d0
 800118a:	f7ff fa35 	bl	80005f8 <__aeabi_dmul>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4620      	mov	r0, r4
 8001194:	4629      	mov	r1, r5
 8001196:	f7ff f879 	bl	800028c <__adddf3>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	2000      	movs	r0, #0
 80011a0:	496d      	ldr	r1, [pc, #436]	; (8001358 <adcToTemp+0x320>)
 80011a2:	f7ff fb53 	bl	800084c <__aeabi_ddiv>
 80011a6:	a356      	add	r3, pc, #344	; (adr r3, 8001300 <adcToTemp+0x2c8>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff f86c 	bl	8000288 <__aeabi_dsub>
 80011b0:	f7ff fd1a 	bl	8000be8 <__aeabi_d2f>
 80011b4:	ee00 0a10 	vmov	s0, r0
}
 80011b8:	b005      	add	sp, #20
 80011ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return((1/(3.3540178E-3+(2.6021087E-4*log(RtRT25))+(3.5946173E-6*pow(log(RtRT25),2))+(-8.5676875E-8*pow(log(RtRT25),3))))-273);
 80011bc:	ec45 4b10 	vmov	d0, r4, r5
 80011c0:	f008 fa98 	bl	80096f4 <log>
 80011c4:	ec51 0b10 	vmov	r0, r1, d0
 80011c8:	ec45 4b10 	vmov	d0, r4, r5
 80011cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80011d0:	f008 fa90 	bl	80096f4 <log>
 80011d4:	ec57 6b10 	vmov	r6, r7, d0
 80011d8:	ec45 4b10 	vmov	d0, r4, r5
 80011dc:	f008 fa8a 	bl	80096f4 <log>
 80011e0:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80012d8 <adcToTemp+0x2a0>
 80011e4:	f008 fb06 	bl	80097f4 <pow>
 80011e8:	a347      	add	r3, pc, #284	; (adr r3, 8001308 <adcToTemp+0x2d0>)
 80011ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80011f2:	ed8d 0b00 	vstr	d0, [sp]
 80011f6:	f7ff f9ff 	bl	80005f8 <__aeabi_dmul>
 80011fa:	a345      	add	r3, pc, #276	; (adr r3, 8001310 <adcToTemp+0x2d8>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7ff f844 	bl	800028c <__adddf3>
 8001204:	4632      	mov	r2, r6
 8001206:	4604      	mov	r4, r0
 8001208:	460d      	mov	r5, r1
 800120a:	463b      	mov	r3, r7
 800120c:	4630      	mov	r0, r6
 800120e:	4639      	mov	r1, r7
 8001210:	f7ff f9f2 	bl	80005f8 <__aeabi_dmul>
 8001214:	a340      	add	r3, pc, #256	; (adr r3, 8001318 <adcToTemp+0x2e0>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f9ed 	bl	80005f8 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7ff f831 	bl	800028c <__adddf3>
 800122a:	a33d      	add	r3, pc, #244	; (adr r3, 8001320 <adcToTemp+0x2e8>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	4604      	mov	r4, r0
 8001232:	460d      	mov	r5, r1
 8001234:	e7a5      	b.n	8001182 <adcToTemp+0x14a>
		return((1/(3.3531474E-3+(2.5743868E-4*log(RtRT25))+(1.7022402E-6*pow(log(RtRT25),2))+(-8.8297492E-8*pow(log(RtRT25),3))))-273);
 8001236:	ec45 4b10 	vmov	d0, r4, r5
 800123a:	f008 fa5b 	bl	80096f4 <log>
 800123e:	ec51 0b10 	vmov	r0, r1, d0
 8001242:	ec45 4b10 	vmov	d0, r4, r5
 8001246:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800124a:	f008 fa53 	bl	80096f4 <log>
 800124e:	ec57 6b10 	vmov	r6, r7, d0
 8001252:	ec45 4b10 	vmov	d0, r4, r5
 8001256:	f008 fa4d 	bl	80096f4 <log>
 800125a:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80012d8 <adcToTemp+0x2a0>
 800125e:	f008 fac9 	bl	80097f4 <pow>
 8001262:	a331      	add	r3, pc, #196	; (adr r3, 8001328 <adcToTemp+0x2f0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800126c:	ed8d 0b00 	vstr	d0, [sp]
 8001270:	f7ff f9c2 	bl	80005f8 <__aeabi_dmul>
 8001274:	a32e      	add	r3, pc, #184	; (adr r3, 8001330 <adcToTemp+0x2f8>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff f807 	bl	800028c <__adddf3>
 800127e:	4632      	mov	r2, r6
 8001280:	4604      	mov	r4, r0
 8001282:	460d      	mov	r5, r1
 8001284:	463b      	mov	r3, r7
 8001286:	4630      	mov	r0, r6
 8001288:	4639      	mov	r1, r7
 800128a:	f7ff f9b5 	bl	80005f8 <__aeabi_dmul>
 800128e:	a32a      	add	r3, pc, #168	; (adr r3, 8001338 <adcToTemp+0x300>)
 8001290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001294:	f7ff f9b0 	bl	80005f8 <__aeabi_dmul>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	4620      	mov	r0, r4
 800129e:	4629      	mov	r1, r5
 80012a0:	f7fe fff4 	bl	800028c <__adddf3>
 80012a4:	a326      	add	r3, pc, #152	; (adr r3, 8001340 <adcToTemp+0x308>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	4604      	mov	r4, r0
 80012ac:	460d      	mov	r5, r1
 80012ae:	e768      	b.n	8001182 <adcToTemp+0x14a>
 80012b0:	e147ae14 	.word	0xe147ae14
 80012b4:	404e147a 	.word	0x404e147a
 80012b8:	28f5c28f 	.word	0x28f5c28f
 80012bc:	40098f5c 	.word	0x40098f5c
 80012c0:	ef34d6a1 	.word	0xef34d6a1
 80012c4:	3fd74538 	.word	0x3fd74538
 80012c8:	62a1b5c8 	.word	0x62a1b5c8
 80012cc:	3fb1bf9c 	.word	0x3fb1bf9c
 80012d0:	c1bda512 	.word	0xc1bda512
 80012d4:	3f932617 	.word	0x3f932617
 80012d8:	00000000 	.word	0x00000000
 80012dc:	40080000 	.word	0x40080000
 80012e0:	e68ad796 	.word	0xe68ad796
 80012e4:	3f30f9d0 	.word	0x3f30f9d0
 80012e8:	2651f0b0 	.word	0x2651f0b0
 80012ec:	3f6b7b05 	.word	0x3f6b7b05
 80012f0:	17e9b45e 	.word	0x17e9b45e
 80012f4:	3ed19623 	.word	0x3ed19623
 80012f8:	2d59f69c 	.word	0x2d59f69c
 80012fc:	be73314a 	.word	0xbe73314a
 8001300:	00000000 	.word	0x00000000
 8001304:	40711000 	.word	0x40711000
 8001308:	2d3d1c0b 	.word	0x2d3d1c0b
 800130c:	3f310d9d 	.word	0x3f310d9d
 8001310:	985bc406 	.word	0x985bc406
 8001314:	3f6b79e2 	.word	0x3f6b79e2
 8001318:	c2668e6a 	.word	0xc2668e6a
 800131c:	3ece2761 	.word	0x3ece2761
 8001320:	86530344 	.word	0x86530344
 8001324:	be76ffab 	.word	0xbe76ffab
 8001328:	b6196c0a 	.word	0xb6196c0a
 800132c:	3f30df1a 	.word	0x3f30df1a
 8001330:	4d7e4cb2 	.word	0x4d7e4cb2
 8001334:	3f6b780f 	.word	0x3f6b780f
 8001338:	e4a6a429 	.word	0xe4a6a429
 800133c:	3ebc8f10 	.word	0x3ebc8f10
 8001340:	e811a6aa 	.word	0xe811a6aa
 8001344:	be77b3c1 	.word	0xbe77b3c1
 8001348:	457ff000 	.word	0x457ff000
 800134c:	461c4000 	.word	0x461c4000
 8001350:	46ea6000 	.word	0x46ea6000
 8001354:	437f0000 	.word	0x437f0000
 8001358:	3ff00000 	.word	0x3ff00000
		return((1/(3.3547977E-3+(2.5879299E-4*log(RtRT25))+(1.8964602E-6*pow(log(RtRT25),2))+(-1.1884916E-7*pow(log(RtRT25),3))))-273);
 800135c:	ec45 4b10 	vmov	d0, r4, r5
 8001360:	f008 f9c8 	bl	80096f4 <log>
 8001364:	ec51 0b10 	vmov	r0, r1, d0
 8001368:	ec45 4b10 	vmov	d0, r4, r5
 800136c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001370:	f008 f9c0 	bl	80096f4 <log>
 8001374:	ec57 6b10 	vmov	r6, r7, d0
 8001378:	ec45 4b10 	vmov	d0, r4, r5
 800137c:	f008 f9ba 	bl	80096f4 <log>
 8001380:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80013d8 <adcToTemp+0x3a0>
 8001384:	f008 fa36 	bl	80097f4 <pow>
 8001388:	a315      	add	r3, pc, #84	; (adr r3, 80013e0 <adcToTemp+0x3a8>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001392:	ed8d 0b00 	vstr	d0, [sp]
 8001396:	f7ff f92f 	bl	80005f8 <__aeabi_dmul>
 800139a:	a313      	add	r3, pc, #76	; (adr r3, 80013e8 <adcToTemp+0x3b0>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7fe ff74 	bl	800028c <__adddf3>
 80013a4:	4632      	mov	r2, r6
 80013a6:	4604      	mov	r4, r0
 80013a8:	460d      	mov	r5, r1
 80013aa:	463b      	mov	r3, r7
 80013ac:	4630      	mov	r0, r6
 80013ae:	4639      	mov	r1, r7
 80013b0:	f7ff f922 	bl	80005f8 <__aeabi_dmul>
 80013b4:	a30e      	add	r3, pc, #56	; (adr r3, 80013f0 <adcToTemp+0x3b8>)
 80013b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ba:	f7ff f91d 	bl	80005f8 <__aeabi_dmul>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4620      	mov	r0, r4
 80013c4:	4629      	mov	r1, r5
 80013c6:	f7fe ff61 	bl	800028c <__adddf3>
 80013ca:	a30b      	add	r3, pc, #44	; (adr r3, 80013f8 <adcToTemp+0x3c0>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	4604      	mov	r4, r0
 80013d2:	460d      	mov	r5, r1
 80013d4:	e6d5      	b.n	8001182 <adcToTemp+0x14a>
 80013d6:	bf00      	nop
 80013d8:	00000000 	.word	0x00000000
 80013dc:	40080000 	.word	0x40080000
 80013e0:	6db1218b 	.word	0x6db1218b
 80013e4:	3f30f5d3 	.word	0x3f30f5d3
 80013e8:	4cff8ecb 	.word	0x4cff8ecb
 80013ec:	3f6b7b85 	.word	0x3f6b7b85
 80013f0:	0aa0b008 	.word	0x0aa0b008
 80013f4:	3ebfd13c 	.word	0x3ebfd13c
 80013f8:	88b075bc 	.word	0x88b075bc
 80013fc:	be7fe740 	.word	0xbe7fe740

08001400 <appLevelComProcessor>:

void appLevelComProcessor ( com_t *driver )
{
 8001400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if ( strstr ( ( char* ) driver->rxBuffer, "AT+PIDPRM=" ) != 0 )
 8001404:	f100 0510 	add.w	r5, r0, #16
{
 8001408:	b087      	sub	sp, #28
 800140a:	4604      	mov	r4, r0
	if ( strstr ( ( char* ) driver->rxBuffer, "AT+PIDPRM=" ) != 0 )
 800140c:	494b      	ldr	r1, [pc, #300]	; (800153c <appLevelComProcessor+0x13c>)
 800140e:	4628      	mov	r0, r5
 8001410:	f005 fbd3 	bl	8006bba <strstr>
 8001414:	bb48      	cbnz	r0, 800146a <appLevelComProcessor+0x6a>
		pidChangeCoefficients ( &pid, kpLocal, kiLocal, kdLocal, tsLocal );

		strcpy ( ( char* ) driver->txBuffer, "OK\r\n" );
		driver->txIndex = strlen ( ( char* ) driver->txBuffer );
	}
	else if ( strstr ( ( char* ) driver->rxBuffer, "AT+SETPOINT=" ) != 0 )
 8001416:	494a      	ldr	r1, [pc, #296]	; (8001540 <appLevelComProcessor+0x140>)
 8001418:	4628      	mov	r0, r5
 800141a:	f005 fbce 	bl	8006bba <strstr>
 800141e:	4606      	mov	r6, r0
 8001420:	b968      	cbnz	r0, 800143e <appLevelComProcessor+0x3e>
		temperatureSetPoint = atof ( ( char* ) driver->rxBuffer + 12 );

		strcpy ( ( char* ) driver->txBuffer, "OK\r\n" );
		driver->txIndex = strlen ( ( char* ) driver->txBuffer );
	}
	else if ( strstr ( ( char* ) driver->rxBuffer, "AT+CONTROL=" ) != 0 )
 8001422:	4948      	ldr	r1, [pc, #288]	; (8001544 <appLevelComProcessor+0x144>)
 8001424:	4628      	mov	r0, r5
 8001426:	f005 fbc8 	bl	8006bba <strstr>
 800142a:	2800      	cmp	r0, #0
 800142c:	d069      	beq.n	8001502 <appLevelComProcessor+0x102>
	{
		if ( driver->rxBuffer [ 11 ] == '1' )
 800142e:	7ee3      	ldrb	r3, [r4, #27]
 8001430:	2b31      	cmp	r3, #49	; 0x31
		{
			controlActivation = TRUE;
 8001432:	4b45      	ldr	r3, [pc, #276]	; (8001548 <appLevelComProcessor+0x148>)
 8001434:	bf06      	itte	eq
 8001436:	2201      	moveq	r2, #1
 8001438:	701a      	strbeq	r2, [r3, #0]
		}
		else
		{
			controlActivation = FALSE;
 800143a:	701e      	strbne	r6, [r3, #0]
 800143c:	e055      	b.n	80014ea <appLevelComProcessor+0xea>
		temperatureSetPoint = atof ( ( char* ) driver->rxBuffer + 12 );
 800143e:	f104 001c 	add.w	r0, r4, #28
 8001442:	f004 fe33 	bl	80060ac <atof>
 8001446:	ec51 0b10 	vmov	r0, r1, d0
 800144a:	f7ff fbcd 	bl	8000be8 <__aeabi_d2f>
		strcpy ( ( char* ) driver->txBuffer, "OK\r\n" );
 800144e:	4b3f      	ldr	r3, [pc, #252]	; (800154c <appLevelComProcessor+0x14c>)
		temperatureSetPoint = atof ( ( char* ) driver->rxBuffer + 12 );
 8001450:	4a3f      	ldr	r2, [pc, #252]	; (8001550 <appLevelComProcessor+0x150>)
 8001452:	6010      	str	r0, [r2, #0]
		strcpy ( ( char* ) driver->txBuffer, "OK\r\n" );
 8001454:	791a      	ldrb	r2, [r3, #4]
 8001456:	6818      	ldr	r0, [r3, #0]
 8001458:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		driver->txIndex = strlen ( ( char* ) driver->txBuffer );
 800145c:	2304      	movs	r3, #4
		strcpy ( ( char* ) driver->txBuffer, "OK\r\n" );
 800145e:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		driver->txIndex = strlen ( ( char* ) driver->txBuffer );
 8001462:	6063      	str	r3, [r4, #4]
	{

		sprintf ( ( char* ) driver->txBuffer, "+TEMPERATURE=%.2f,%d\r\n", temperatureFiltered, ( int ) HAL_GetTick ( ) );
		driver->txIndex = strlen ( ( char* ) driver->txBuffer );
	}
}
 8001464:	b007      	add	sp, #28
 8001466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		tempPtr += ( strlen ( "AT+PIDPRM=" ) );
 800146a:	f104 051a 	add.w	r5, r4, #26
		kpLocal = atof ( tempPtr );
 800146e:	4628      	mov	r0, r5
 8001470:	f004 fe1c 	bl	80060ac <atof>
		tempPtr = strstr ( tempPtr, "," ) + 1;
 8001474:	212c      	movs	r1, #44	; 0x2c
 8001476:	4628      	mov	r0, r5
		kpLocal = atof ( tempPtr );
 8001478:	ec57 6b10 	vmov	r6, r7, d0
		tempPtr = strstr ( tempPtr, "," ) + 1;
 800147c:	f005 fb90 	bl	8006ba0 <strchr>
 8001480:	1c45      	adds	r5, r0, #1
		kiLocal = atof ( tempPtr );
 8001482:	4628      	mov	r0, r5
 8001484:	f004 fe12 	bl	80060ac <atof>
		tempPtr = strstr ( tempPtr, "," ) + 1;
 8001488:	212c      	movs	r1, #44	; 0x2c
 800148a:	4628      	mov	r0, r5
		kiLocal = atof ( tempPtr );
 800148c:	ec59 8b10 	vmov	r8, r9, d0
		tempPtr = strstr ( tempPtr, "," ) + 1;
 8001490:	f005 fb86 	bl	8006ba0 <strchr>
 8001494:	1c45      	adds	r5, r0, #1
		kdLocal = atof ( tempPtr );
 8001496:	4628      	mov	r0, r5
 8001498:	f004 fe08 	bl	80060ac <atof>
		tempPtr = strstr ( tempPtr, "," ) + 1;
 800149c:	212c      	movs	r1, #44	; 0x2c
 800149e:	4628      	mov	r0, r5
		kdLocal = atof ( tempPtr );
 80014a0:	ec5b ab10 	vmov	sl, fp, d0
		tempPtr = strstr ( tempPtr, "," ) + 1;
 80014a4:	f005 fb7c 	bl	8006ba0 <strchr>
		tsLocal = atof ( tempPtr );
 80014a8:	3001      	adds	r0, #1
 80014aa:	f004 fdff 	bl	80060ac <atof>
 80014ae:	ec51 0b10 	vmov	r0, r1, d0
 80014b2:	f7ff fb99 	bl	8000be8 <__aeabi_d2f>
		kdLocal = atof ( tempPtr );
 80014b6:	4659      	mov	r1, fp
		tsLocal = atof ( tempPtr );
 80014b8:	9005      	str	r0, [sp, #20]
		kdLocal = atof ( tempPtr );
 80014ba:	4650      	mov	r0, sl
 80014bc:	f7ff fb94 	bl	8000be8 <__aeabi_d2f>
		kiLocal = atof ( tempPtr );
 80014c0:	4649      	mov	r1, r9
		kdLocal = atof ( tempPtr );
 80014c2:	9004      	str	r0, [sp, #16]
		kiLocal = atof ( tempPtr );
 80014c4:	4640      	mov	r0, r8
 80014c6:	f7ff fb8f 	bl	8000be8 <__aeabi_d2f>
		kpLocal = atof ( tempPtr );
 80014ca:	4639      	mov	r1, r7
		kiLocal = atof ( tempPtr );
 80014cc:	9003      	str	r0, [sp, #12]
		kpLocal = atof ( tempPtr );
 80014ce:	4630      	mov	r0, r6
 80014d0:	f7ff fb8a 	bl	8000be8 <__aeabi_d2f>
		pidChangeCoefficients ( &pid, kpLocal, kiLocal, kdLocal, tsLocal );
 80014d4:	eddd 1a05 	vldr	s3, [sp, #20]
 80014d8:	ed9d 1a04 	vldr	s2, [sp, #16]
 80014dc:	eddd 0a03 	vldr	s1, [sp, #12]
 80014e0:	ee00 0a10 	vmov	s0, r0
 80014e4:	481b      	ldr	r0, [pc, #108]	; (8001554 <appLevelComProcessor+0x154>)
 80014e6:	f000 fd87 	bl	8001ff8 <pidChangeCoefficients>
		strcpy ( ( char* ) driver->txBuffer, "OK\r\n" );
 80014ea:	4b18      	ldr	r3, [pc, #96]	; (800154c <appLevelComProcessor+0x14c>)
 80014ec:	6818      	ldr	r0, [r3, #0]
 80014ee:	791b      	ldrb	r3, [r3, #4]
 80014f0:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		driver->txIndex = strlen ( ( char* )driver->txBuffer );
 80014f4:	2204      	movs	r2, #4
		strcpy ( ( char* ) driver->txBuffer, "OK\r\n" );
 80014f6:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		driver->txIndex = strlen ( ( char* )driver->txBuffer );
 80014fa:	6062      	str	r2, [r4, #4]
}
 80014fc:	b007      	add	sp, #28
 80014fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else if ( strstr ( ( char* ) driver->rxBuffer, "AT+TEMPERATURE?" ) != 0 )
 8001502:	4628      	mov	r0, r5
 8001504:	4914      	ldr	r1, [pc, #80]	; (8001558 <appLevelComProcessor+0x158>)
 8001506:	f005 fb58 	bl	8006bba <strstr>
 800150a:	2800      	cmp	r0, #0
 800150c:	d0aa      	beq.n	8001464 <appLevelComProcessor+0x64>
		sprintf ( ( char* ) driver->txBuffer, "+TEMPERATURE=%.2f,%d\r\n", temperatureFiltered, ( int ) HAL_GetTick ( ) );
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <appLevelComProcessor+0x15c>)
 8001510:	6818      	ldr	r0, [r3, #0]
 8001512:	f7ff f819 	bl	8000548 <__aeabi_f2d>
 8001516:	460f      	mov	r7, r1
 8001518:	4606      	mov	r6, r0
 800151a:	f000 fe25 	bl	8002168 <HAL_GetTick>
 800151e:	f504 7588 	add.w	r5, r4, #272	; 0x110
 8001522:	9000      	str	r0, [sp, #0]
 8001524:	4632      	mov	r2, r6
 8001526:	463b      	mov	r3, r7
 8001528:	490d      	ldr	r1, [pc, #52]	; (8001560 <appLevelComProcessor+0x160>)
 800152a:	4628      	mov	r0, r5
 800152c:	f005 fb18 	bl	8006b60 <siprintf>
		driver->txIndex = strlen ( ( char* ) driver->txBuffer );
 8001530:	4628      	mov	r0, r5
 8001532:	f7fe fe4d 	bl	80001d0 <strlen>
 8001536:	6060      	str	r0, [r4, #4]
}
 8001538:	e794      	b.n	8001464 <appLevelComProcessor+0x64>
 800153a:	bf00      	nop
 800153c:	0800ac28 	.word	0x0800ac28
 8001540:	0800ac3c 	.word	0x0800ac3c
 8001544:	0800ac4c 	.word	0x0800ac4c
 8001548:	20000228 	.word	0x20000228
 800154c:	0800ac34 	.word	0x0800ac34
 8001550:	20000004 	.word	0x20000004
 8001554:	2000024c 	.word	0x2000024c
 8001558:	0800ac58 	.word	0x0800ac58
 800155c:	20000230 	.word	0x20000230
 8001560:	0800ac68 	.word	0x0800ac68

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	2400      	movs	r4, #0
{
 8001568:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 800156e:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001572:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001576:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800157a:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <SystemClock_Config+0xa4>)
 8001580:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001582:	9407      	str	r4, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001584:	9403      	str	r4, [sp, #12]
 8001586:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001588:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800158c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001590:	6411      	str	r1, [r2, #64]	; 0x40
 8001592:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001594:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001598:	9201      	str	r2, [sp, #4]
 800159a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	9402      	str	r4, [sp, #8]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015ac:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ae:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015b4:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015bc:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015be:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c0:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80015c2:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015c4:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015c8:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015cc:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ce:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d0:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015d2:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015d4:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f002 fb89 	bl	8003cec <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	210f      	movs	r1, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015dc:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e4:	e9cd 1507 	strd	r1, r5, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015e8:	a807      	add	r0, sp, #28
 80015ea:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ec:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f2:	f002 fd8f 	bl	8004114 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80015f6:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f8:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80015fa:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80015fc:	e9cd 3504 	strd	r3, r5, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001600:	f002 fe46 	bl	8004290 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001604:	b018      	add	sp, #96	; 0x60
 8001606:	bd70      	pop	{r4, r5, r6, pc}
 8001608:	40023800 	.word	0x40023800
 800160c:	40007000 	.word	0x40007000

08001610 <main>:
{
 8001610:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	2400      	movs	r4, #0
{
 8001616:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8001618:	f000 fd80 	bl	800211c <HAL_Init>
  SystemClock_Config();
 800161c:	f7ff ffa2 	bl	8001564 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8001624:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001628:	4eba      	ldr	r6, [pc, #744]	; (8001914 <main+0x304>)
 800162a:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800162e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001630:	48b9      	ldr	r0, [pc, #740]	; (8001918 <main+0x308>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001632:	f8df 833c 	ldr.w	r8, [pc, #828]	; 8001970 <main+0x360>
  hadc1.Instance = ADC1;
 8001636:	4fb9      	ldr	r7, [pc, #740]	; (800191c <main+0x30c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001638:	f043 0310 	orr.w	r3, r3, #16
 800163c:	6333      	str	r3, [r6, #48]	; 0x30
 800163e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001648:	9402      	str	r4, [sp, #8]
 800164a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6333      	str	r3, [r6, #48]	; 0x30
 8001652:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001654:	f003 0304 	and.w	r3, r3, #4
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800165c:	9403      	str	r4, [sp, #12]
 800165e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001664:	6333      	str	r3, [r6, #48]	; 0x30
 8001666:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800166c:	9303      	str	r3, [sp, #12]
 800166e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	9404      	str	r4, [sp, #16]
 8001672:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6333      	str	r3, [r6, #48]	; 0x30
 800167a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	9304      	str	r3, [sp, #16]
 8001682:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	9405      	str	r4, [sp, #20]
 8001686:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6333      	str	r3, [r6, #48]	; 0x30
 800168e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	9305      	str	r3, [sp, #20]
 8001696:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001698:	9406      	str	r4, [sp, #24]
 800169a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800169c:	f043 0308 	orr.w	r3, r3, #8
 80016a0:	6333      	str	r3, [r6, #48]	; 0x30
 80016a2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80016a4:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80016a8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016aa:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80016ac:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ae:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80016b0:	f001 faf0 	bl	8002c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016b4:	2201      	movs	r2, #1
 80016b6:	4611      	mov	r1, r2
 80016b8:	4899      	ldr	r0, [pc, #612]	; (8001920 <main+0x310>)
 80016ba:	f001 faeb 	bl	8002c94 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80016be:	4622      	mov	r2, r4
 80016c0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80016c4:	4897      	ldr	r0, [pc, #604]	; (8001924 <main+0x314>)
 80016c6:	f001 fae5 	bl	8002c94 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80016ce:	f04f 0b08 	mov.w	fp, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016d2:	a909      	add	r1, sp, #36	; 0x24
 80016d4:	4890      	ldr	r0, [pc, #576]	; (8001918 <main+0x308>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016da:	e9cd b909 	strd	fp, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016de:	f001 f9d5 	bl	8002a8c <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016e2:	a909      	add	r1, sp, #36	; 0x24
 80016e4:	488e      	ldr	r0, [pc, #568]	; (8001920 <main+0x310>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2502      	movs	r5, #2
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016e8:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f001 f9ca 	bl	8002a8c <HAL_GPIO_Init>
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80016f8:	a909      	add	r1, sp, #36	; 0x24
 80016fa:	4889      	ldr	r0, [pc, #548]	; (8001920 <main+0x310>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001702:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001706:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800170a:	f001 f9bf 	bl	8002a8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170e:	a909      	add	r1, sp, #36	; 0x24
 8001710:	4885      	ldr	r0, [pc, #532]	; (8001928 <main+0x318>)
  GPIO_InitStruct.Pin = B1_Pin;
 8001712:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001716:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800171a:	f001 f9b7 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800171e:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001720:	a909      	add	r1, sp, #36	; 0x24
 8001722:	4882      	ldr	r0, [pc, #520]	; (800192c <main+0x31c>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001724:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800172a:	f001 f9af 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001732:	a909      	add	r1, sp, #36	; 0x24
 8001734:	487d      	ldr	r0, [pc, #500]	; (800192c <main+0x31c>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001736:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	e9cd 540a 	strd	r5, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001740:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001742:	f001 f9a3 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001746:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800174a:	a909      	add	r1, sp, #36	; 0x24
 800174c:	4875      	ldr	r0, [pc, #468]	; (8001924 <main+0x314>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174e:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001754:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001756:	f001 f999 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800175a:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800175c:	a909      	add	r1, sp, #36	; 0x24
 800175e:	4871      	ldr	r0, [pc, #452]	; (8001924 <main+0x314>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001760:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001766:	f001 f991 	bl	8002a8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800176a:	a909      	add	r1, sp, #36	; 0x24
 800176c:	486a      	ldr	r0, [pc, #424]	; (8001918 <main+0x308>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001770:	e9cd 5809 	strd	r5, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001774:	f001 f98a 	bl	8002a8c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001778:	4b6d      	ldr	r3, [pc, #436]	; (8001930 <main+0x320>)
  hi2c1.Init.ClockSpeed = 100000;
 800177a:	496e      	ldr	r1, [pc, #440]	; (8001934 <main+0x324>)
  hi2c1.Instance = I2C1;
 800177c:	4d6e      	ldr	r5, [pc, #440]	; (8001938 <main+0x328>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800177e:	609c      	str	r4, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001780:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001784:	4618      	mov	r0, r3
  hi2c1.Init.ClockSpeed = 100000;
 8001786:	e9c3 5100 	strd	r5, r1, [r3]
  hi2c1.Init.OwnAddress1 = 0;
 800178a:	60dc      	str	r4, [r3, #12]
  hi2c1.Init.OwnAddress2 = 0;
 800178c:	e9c3 4405 	strd	r4, r4, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001790:	e9c3 4407 	strd	r4, r4, [r3, #28]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001794:	611a      	str	r2, [r3, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001796:	f001 ff87 	bl	80036a8 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 800179a:	4b68      	ldr	r3, [pc, #416]	; (800193c <main+0x32c>)
 800179c:	4968      	ldr	r1, [pc, #416]	; (8001940 <main+0x330>)
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800179e:	4a69      	ldr	r2, [pc, #420]	; (8001944 <main+0x334>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80017a0:	609c      	str	r4, [r3, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80017a2:	f44f 7500 	mov.w	r5, #512	; 0x200
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80017a6:	4618      	mov	r0, r3
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80017a8:	60dc      	str	r4, [r3, #12]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80017aa:	e9c3 4406 	strd	r4, r4, [r3, #24]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80017ae:	621c      	str	r4, [r3, #32]
  hi2s3.Instance = SPI3;
 80017b0:	6019      	str	r1, [r3, #0]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80017b2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80017b4:	605d      	str	r5, [r3, #4]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80017b6:	611d      	str	r5, [r3, #16]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80017b8:	f002 f836 	bl	8003828 <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 80017bc:	4b62      	ldr	r3, [pc, #392]	; (8001948 <main+0x338>)
 80017be:	4963      	ldr	r1, [pc, #396]	; (800194c <main+0x33c>)
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017c0:	619d      	str	r5, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c2:	f44f 7282 	mov.w	r2, #260	; 0x104
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017c6:	4618      	mov	r0, r3
  hspi1.Init.CRCPolynomial = 10;
 80017c8:	f04f 0a0a 	mov.w	sl, #10
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017cc:	e9c3 1200 	strd	r1, r2, [r3]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017d4:	e9c3 4404 	strd	r4, r4, [r3, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d8:	e9c3 4407 	strd	r4, r4, [r3, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017dc:	e9c3 4409 	strd	r4, r4, [r3, #36]	; 0x24
  hspi1.Init.CRCPolynomial = 10;
 80017e0:	f8c3 a02c 	str.w	sl, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017e4:	f002 fe24 	bl	8004430 <HAL_SPI_Init>
  MX_USB_HOST_Init();
 80017e8:	f004 fb22 	bl	8005e30 <MX_USB_HOST_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ec:	9400      	str	r4, [sp, #0]
 80017ee:	6b33      	ldr	r3, [r6, #48]	; 0x30
  htim3.Instance = TIM3;
 80017f0:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8001974 <main+0x364>
  huart2.Instance = USART2;
 80017f4:	4d56      	ldr	r5, [pc, #344]	; (8001950 <main+0x340>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017fa:	6333      	str	r3, [r6, #48]	; 0x30
 80017fc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80017fe:	4e55      	ldr	r6, [pc, #340]	; (8001954 <main+0x344>)
 8001800:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001804:	4622      	mov	r2, r4
 8001806:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001808:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800180a:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 800180c:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800180e:	f000 ff1f 	bl	8002650 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001812:	2038      	movs	r0, #56	; 0x38
 8001814:	f000 ff52 	bl	80026bc <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001818:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc1.Instance = ADC1;
 800181c:	494e      	ldr	r1, [pc, #312]	; (8001958 <main+0x348>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800181e:	4b4f      	ldr	r3, [pc, #316]	; (800195c <main+0x34c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001820:	607a      	str	r2, [r7, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001822:	4638      	mov	r0, r7
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001824:	60bc      	str	r4, [r7, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001826:	613c      	str	r4, [r7, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001828:	f887 4020 	strb.w	r4, [r7, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800182c:	62fc      	str	r4, [r7, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800182e:	60fc      	str	r4, [r7, #12]
  hadc1.Instance = ADC1;
 8001830:	6039      	str	r1, [r7, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 8001834:	9409      	str	r4, [sp, #36]	; 0x24
 8001836:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 800183a:	940c      	str	r4, [sp, #48]	; 0x30
  hadc1.Init.ContinuousConvMode = ENABLE;
 800183c:	f887 9018 	strb.w	r9, [r7, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001840:	f8c7 901c 	str.w	r9, [r7, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001844:	f887 9030 	strb.w	r9, [r7, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001848:	f8c7 9014 	str.w	r9, [r7, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800184c:	f000 fca4 	bl	8002198 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001850:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001852:	4638      	mov	r0, r7
 8001854:	a909      	add	r1, sp, #36	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001856:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 1;
 8001858:	e9cd 9909 	strd	r9, r9, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800185c:	f000 fe3e 	bl	80024dc <HAL_ADC_ConfigChannel>
  htim3.Instance = TIM3;
 8001860:	4b3f      	ldr	r3, [pc, #252]	; (8001960 <main+0x350>)
 8001862:	f8c8 3000 	str.w	r3, [r8]
  htim3.Init.Period = 999;
 8001866:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800186a:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Prescaler = 83;
 800186c:	2153      	movs	r1, #83	; 0x53
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800186e:	4640      	mov	r0, r8
  htim3.Init.Period = 999;
 8001870:	f8c8 200c 	str.w	r2, [r8, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001874:	f8c8 3018 	str.w	r3, [r8, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800187a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800187e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001882:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001886:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	9408      	str	r4, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	f8c8 4008 	str.w	r4, [r8, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188e:	f8c8 4010 	str.w	r4, [r8, #16]
  htim3.Init.Prescaler = 83;
 8001892:	f8c8 1004 	str.w	r1, [r8, #4]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001896:	f003 f811 	bl	80048bc <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800189a:	a907      	add	r1, sp, #28
 800189c:	4640      	mov	r0, r8
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189e:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a2:	f003 f8d5 	bl	8004a50 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a8:	a909      	add	r1, sp, #36	; 0x24
 80018aa:	4622      	mov	r2, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018ac:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ae:	4640      	mov	r0, r8
  sConfigOC.Pulse = 499;
 80018b0:	f240 13f3 	movw	r3, #499	; 0x1f3
 80018b4:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b6:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ba:	f003 f84d 	bl	8004958 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80018be:	4640      	mov	r0, r8
 80018c0:	f000 fa98 	bl	8001df4 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80018c4:	4a27      	ldr	r2, [pc, #156]	; (8001964 <main+0x354>)
  htim7.Instance = TIM7;
 80018c6:	4f28      	ldr	r7, [pc, #160]	; (8001968 <main+0x358>)
  huart2.Instance = USART2;
 80018c8:	602a      	str	r2, [r5, #0]
  huart2.Init.BaudRate = 115200;
 80018ca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018ce:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 80018d0:	606b      	str	r3, [r5, #4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d2:	4628      	mov	r0, r5
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80018d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d8:	60ac      	str	r4, [r5, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018da:	e9c5 4403 	strd	r4, r4, [r5, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018de:	61ac      	str	r4, [r5, #24]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e0:	616a      	str	r2, [r5, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80018e2:	61eb      	str	r3, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018e4:	f003 f976 	bl	8004bd4 <HAL_UART_Init>
  htim7.Instance = TIM7;
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <main+0x35c>)
 80018ea:	603b      	str	r3, [r7, #0]
  htim7.Init.Prescaler = 167;
 80018ec:	22a7      	movs	r2, #167	; 0xa7
  htim7.Init.Period = 9999;
 80018ee:	f242 730f 	movw	r3, #9999	; 0x270f
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018f2:	4638      	mov	r0, r7
  htim7.Init.Period = 9999;
 80018f4:	60fb      	str	r3, [r7, #12]
  htim7.Init.Prescaler = 167;
 80018f6:	607a      	str	r2, [r7, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f8:	60bc      	str	r4, [r7, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	61bc      	str	r4, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fc:	9409      	str	r4, [sp, #36]	; 0x24
 80018fe:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001900:	f002 ffc0 	bl	8004884 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001904:	a909      	add	r1, sp, #36	; 0x24
 8001906:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800190c:	f003 f8a0 	bl	8004a50 <HAL_TIMEx_MasterConfigSynchronization>
  HAL_UART_Receive_IT ( &huart2, &u2rx, 1 );
 8001910:	464a      	mov	r2, r9
 8001912:	e031      	b.n	8001978 <main+0x368>
 8001914:	40023800 	.word	0x40023800
 8001918:	40021000 	.word	0x40021000
 800191c:	20000534 	.word	0x20000534
 8001920:	40020800 	.word	0x40020800
 8001924:	40020c00 	.word	0x40020c00
 8001928:	40020000 	.word	0x40020000
 800192c:	40020400 	.word	0x40020400
 8001930:	2000028c 	.word	0x2000028c
 8001934:	000186a0 	.word	0x000186a0
 8001938:	40005400 	.word	0x40005400
 800193c:	200006b4 	.word	0x200006b4
 8001940:	40003c00 	.word	0x40003c00
 8001944:	00017700 	.word	0x00017700
 8001948:	200005dc 	.word	0x200005dc
 800194c:	40013000 	.word	0x40013000
 8001950:	20000634 	.word	0x20000634
 8001954:	200002e0 	.word	0x200002e0
 8001958:	40012000 	.word	0x40012000
 800195c:	0f000001 	.word	0x0f000001
 8001960:	40000400 	.word	0x40000400
 8001964:	40004400 	.word	0x40004400
 8001968:	20000674 	.word	0x20000674
 800196c:	40001400 	.word	0x40001400
 8001970:	10120000 	.word	0x10120000
 8001974:	200004f4 	.word	0x200004f4
 8001978:	4922      	ldr	r1, [pc, #136]	; (8001a04 <main+0x3f4>)
 800197a:	4628      	mov	r0, r5
 800197c:	f003 f97c 	bl	8004c78 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT ( &htim7 );
 8001980:	4638      	mov	r0, r7
 8001982:	f002 fe1f 	bl	80045c4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start ( &htim3, TIM_CHANNEL_1 );
 8001986:	4621      	mov	r1, r4
 8001988:	4640      	mov	r0, r8
 800198a:	f002 fe55 	bl	8004638 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, 0 );
 800198e:	f8d8 3000 	ldr.w	r3, [r8]
  pidInit ( &pid, KP, KI, KD, TS, 50, -50, 50, -50, 100, 0 );
 8001992:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8001a08 <main+0x3f8>
 8001996:	eddf 3a1d 	vldr	s7, [pc, #116]	; 8001a0c <main+0x3fc>
 800199a:	ed9f 3a1d 	vldr	s6, [pc, #116]	; 8001a10 <main+0x400>
  __HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, 0 );
 800199e:	635c      	str	r4, [r3, #52]	; 0x34
  pidInit ( &pid, KP, KI, KD, TS, 50, -50, 50, -50, 100, 0 );
 80019a0:	eeb0 1a64 	vmov.f32	s2, s9
 80019a4:	eef0 2a63 	vmov.f32	s5, s7
 80019a8:	eeb0 2a43 	vmov.f32	s4, s6
 80019ac:	ed9f 4a19 	vldr	s8, [pc, #100]	; 8001a14 <main+0x404>
 80019b0:	eddf 1a19 	vldr	s3, [pc, #100]	; 8001a18 <main+0x408>
 80019b4:	4819      	ldr	r0, [pc, #100]	; (8001a1c <main+0x40c>)
 80019b6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80019ba:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80019be:	f000 fb03 	bl	8001fc8 <pidInit>
  comInit ( &com, 10 );
 80019c2:	4651      	mov	r1, sl
 80019c4:	4630      	mov	r0, r6
 80019c6:	f7ff fadf 	bl	8000f88 <comInit>
	  if ( comIsRxBufferReady ( &com ) == TRUE )
 80019ca:	4634      	mov	r4, r6
			  HAL_UART_Transmit_IT ( &huart2, com.txBuffer, com.txIndex );
 80019cc:	f506 7788 	add.w	r7, r6, #272	; 0x110
	  if ( comIsRxBufferReady ( &com ) == TRUE )
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7ff fb27 	bl	8001024 <comIsRxBufferReady>
 80019d6:	2801      	cmp	r0, #1
 80019d8:	d1fa      	bne.n	80019d0 <main+0x3c0>
		  appLevelComProcessor ( &com );
 80019da:	4620      	mov	r0, r4
 80019dc:	f7ff fd10 	bl	8001400 <appLevelComProcessor>
		  if ( comGetTxBufferIndex ( &com ) != 0 )
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fb25 	bl	8001030 <comGetTxBufferIndex>
 80019e6:	b918      	cbnz	r0, 80019f0 <main+0x3e0>
		  comRxBufferProcessed ( &com );
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff fb1d 	bl	8001028 <comRxBufferProcessed>
 80019ee:	e7ef      	b.n	80019d0 <main+0x3c0>
			  HAL_UART_Transmit_IT ( &huart2, com.txBuffer, com.txIndex );
 80019f0:	4639      	mov	r1, r7
 80019f2:	88b2      	ldrh	r2, [r6, #4]
 80019f4:	4628      	mov	r0, r5
 80019f6:	f003 f91d 	bl	8004c34 <HAL_UART_Transmit_IT>
			  comSetTxBufferIndex ( &com, 0 );
 80019fa:	2100      	movs	r1, #0
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff fb19 	bl	8001034 <comSetTxBufferIndex>
 8001a02:	e7f1      	b.n	80019e8 <main+0x3d8>
 8001a04:	20000234 	.word	0x20000234
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	c2480000 	.word	0xc2480000
 8001a10:	42480000 	.word	0x42480000
 8001a14:	42c80000 	.word	0x42c80000
 8001a18:	3c23d70a 	.word	0x3c23d70a
 8001a1c:	2000024c 	.word	0x2000024c

08001a20 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a20:	b508      	push	{r3, lr}
    if ( htim->Instance == TIM7 )
 8001a22:	6802      	ldr	r2, [r0, #0]
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d000      	beq.n	8001a2c <HAL_TIM_PeriodElapsedCallback+0xc>

    	HAL_ADC_Start_DMA ( &hadc1, (uint32_t *)&adcRawValue, 1 );

    	comTimeoutCounter ( &com );
    }
}
 8001a2a:	bd08      	pop	{r3, pc}
    	temperature = adcToTemp ( adcRawValue );
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	f7ff fb02 	bl	8001038 <adcToTemp>
    	temperatureFiltered = ( temperature * filterRate ) +  ( temperatureFiltered * ( 1 - filterRate ) );
 8001a34:	4a27      	ldr	r2, [pc, #156]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001a36:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001a38:	ed92 7a00 	vldr	s14, [r2]
 8001a3c:	ed93 6a00 	vldr	s12, [r3]
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 8001a40:	4926      	ldr	r1, [pc, #152]	; (8001adc <HAL_TIM_PeriodElapsedCallback+0xbc>)
    	temperature = adcToTemp ( adcRawValue );
 8001a42:	4a27      	ldr	r2, [pc, #156]	; (8001ae0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 8001a44:	edd1 6a00 	vldr	s13, [r1]
    	temperature = adcToTemp ( adcRawValue );
 8001a48:	ed82 0a00 	vstr	s0, [r2]
    	temperatureFiltered = ( temperature * filterRate ) +  ( temperatureFiltered * ( 1 - filterRate ) );
 8001a4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 8001a54:	4823      	ldr	r0, [pc, #140]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
    	temperatureFiltered = ( temperature * filterRate ) +  ( temperatureFiltered * ( 1 - filterRate ) );
 8001a56:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001a5a:	eee0 7a07 	vfma.f32	s15, s0, s14
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 8001a5e:	ee36 0ae7 	vsub.f32	s0, s13, s15
    	temperatureFiltered = ( temperature * filterRate ) +  ( temperatureFiltered * ( 1 - filterRate ) );
 8001a62:	edc3 7a00 	vstr	s15, [r3]
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 8001a66:	f000 fad1 	bl	800200c <pidControl>
    	if ( controlActivation == TRUE )
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d00d      	beq.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x6e>
	__HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, (uint32_t) inp * 10 );
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2200      	movs	r2, #0
 8001a78:	635a      	str	r2, [r3, #52]	; 0x34
    	HAL_ADC_Start_DMA ( &hadc1, (uint32_t *)&adcRawValue, 1 );
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4914      	ldr	r1, [pc, #80]	; (8001ad0 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001a7e:	481c      	ldr	r0, [pc, #112]	; (8001af0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001a80:	f000 fc3c 	bl	80022fc <HAL_ADC_Start_DMA>
    	comTimeoutCounter ( &com );
 8001a84:	481b      	ldr	r0, [pc, #108]	; (8001af4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
}
 8001a86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	comTimeoutCounter ( &com );
 8001a8a:	f7ff babd 	b.w	8001008 <comTimeoutCounter>
    		powerDriver ( pidGetOutput ( &pid ) );
 8001a8e:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001a90:	f000 fb1c 	bl	80020cc <pidGetOutput>
	if ( inp > 100 )
 8001a94:	eddf 7a18 	vldr	s15, [pc, #96]	; 8001af8 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8001a98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aa0:	dc0f      	bgt.n	8001ac2 <HAL_TIM_PeriodElapsedCallback+0xa2>
	else if (inp < 0 )
 8001aa2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d40d      	bmi.n	8001ac8 <HAL_TIM_PeriodElapsedCallback+0xa8>
 8001aac:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8001ab0:	ee17 3a90 	vmov	r3, s15
 8001ab4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001ab8:	005b      	lsls	r3, r3, #1
	__HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, (uint32_t) inp * 10 );
 8001aba:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001abc:	6812      	ldr	r2, [r2, #0]
 8001abe:	6353      	str	r3, [r2, #52]	; 0x34
 8001ac0:	e7db      	b.n	8001a7a <HAL_TIM_PeriodElapsedCallback+0x5a>
	if ( inp > 100 )
 8001ac2:	f240 33de 	movw	r3, #990	; 0x3de
 8001ac6:	e7f8      	b.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x9a>
	else if (inp < 0 )
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e7f6      	b.n	8001aba <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001acc:	40001400 	.word	0x40001400
 8001ad0:	20000224 	.word	0x20000224
 8001ad4:	20000000 	.word	0x20000000
 8001ad8:	20000230 	.word	0x20000230
 8001adc:	20000004 	.word	0x20000004
 8001ae0:	2000022c 	.word	0x2000022c
 8001ae4:	2000024c 	.word	0x2000024c
 8001ae8:	20000228 	.word	0x20000228
 8001aec:	200004f4 	.word	0x200004f4
 8001af0:	20000534 	.word	0x20000534
 8001af4:	200002e0 	.word	0x200002e0
 8001af8:	42c80000 	.word	0x42c80000

08001afc <HAL_UART_TxCpltCallback>:
{
    if ( huart->Instance == USART2 )
    {

    }
}
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop

08001b00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if ( huart->Instance == USART2 )
 8001b00:	6802      	ldr	r2, [r0, #0]
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <HAL_UART_RxCpltCallback+0x24>)
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d000      	beq.n	8001b0a <HAL_UART_RxCpltCallback+0xa>
 8001b08:	4770      	bx	lr
{
 8001b0a:	b510      	push	{r4, lr}
    {
    	comGetData ( &com, u2rx );
 8001b0c:	4c06      	ldr	r4, [pc, #24]	; (8001b28 <HAL_UART_RxCpltCallback+0x28>)
 8001b0e:	4807      	ldr	r0, [pc, #28]	; (8001b2c <HAL_UART_RxCpltCallback+0x2c>)
 8001b10:	7821      	ldrb	r1, [r4, #0]
 8001b12:	f7ff fa4f 	bl	8000fb4 <comGetData>

        HAL_UART_Receive_IT ( &huart2, &u2rx, 1 );
 8001b16:	4621      	mov	r1, r4
 8001b18:	2201      	movs	r2, #1
 8001b1a:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_UART_RxCpltCallback+0x30>)
    }
}
 8001b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_UART_Receive_IT ( &huart2, &u2rx, 1 );
 8001b20:	f003 b8aa 	b.w	8004c78 <HAL_UART_Receive_IT>
 8001b24:	40004400 	.word	0x40004400
 8001b28:	20000234 	.word	0x20000234
 8001b2c:	200002e0 	.word	0x200002e0
 8001b30:	20000634 	.word	0x20000634

08001b34 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_MspInit+0x34>)
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	9100      	str	r1, [sp, #0]
 8001b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b46:	645a      	str	r2, [r3, #68]	; 0x44
 8001b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b4a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b4e:	9200      	str	r2, [sp, #0]
 8001b50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	9101      	str	r1, [sp, #4]
 8001b54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b66:	b002      	add	sp, #8
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b70:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8001b72:	6802      	ldr	r2, [r0, #0]
 8001b74:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_ADC_MspInit+0x94>)
{
 8001b76:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001b7a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001b80:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001b84:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC1)
 8001b86:	d001      	beq.n	8001b8c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b88:	b008      	add	sp, #32
 8001b8a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b8c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001b90:	9401      	str	r4, [sp, #4]
 8001b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 8001b94:	4d1c      	ldr	r5, [pc, #112]	; (8001c08 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44
 8001b9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b9e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001ba2:	9201      	str	r2, [sp, #4]
 8001ba4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	9402      	str	r4, [sp, #8]
 8001ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001baa:	f042 0201 	orr.w	r2, r2, #1
 8001bae:	631a      	str	r2, [r3, #48]	; 0x30
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bb8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bbc:	9303      	str	r3, [sp, #12]
 8001bbe:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc2:	4812      	ldr	r0, [pc, #72]	; (8001c0c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc4:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f000 ff60 	bl	8002a8c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001bcc:	4810      	ldr	r0, [pc, #64]	; (8001c10 <HAL_ADC_MspInit+0xa0>)
 8001bce:	6028      	str	r0, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bdc:	4628      	mov	r0, r5
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bde:	606c      	str	r4, [r5, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be0:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001be4:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be8:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bea:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bee:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001bf0:	f000 fd8c 	bl	800270c <HAL_DMA_Init>
 8001bf4:	b918      	cbnz	r0, 8001bfe <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001bf6:	63b5      	str	r5, [r6, #56]	; 0x38
 8001bf8:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8001bfa:	b008      	add	sp, #32
 8001bfc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001bfe:	f7ff ff99 	bl	8001b34 <Error_Handler>
 8001c02:	e7f8      	b.n	8001bf6 <HAL_ADC_MspInit+0x86>
 8001c04:	40012000 	.word	0x40012000
 8001c08:	2000057c 	.word	0x2000057c
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40026410 	.word	0x40026410

08001c14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c14:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8001c16:	6802      	ldr	r2, [r0, #0]
 8001c18:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <HAL_I2C_MspInit+0x64>)
{
 8001c1a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8001c1e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001c24:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001c28:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001c2a:	d001      	beq.n	8001c30 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c2c:	b008      	add	sp, #32
 8001c2e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c30:	4d12      	ldr	r5, [pc, #72]	; (8001c7c <HAL_I2C_MspInit+0x68>)
 8001c32:	9401      	str	r4, [sp, #4]
 8001c34:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	4812      	ldr	r0, [pc, #72]	; (8001c80 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	632b      	str	r3, [r5, #48]	; 0x30
 8001c3e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001c40:	f003 0302 	and.w	r3, r3, #2
 8001c44:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c46:	f44f 7210 	mov.w	r2, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4a:	2312      	movs	r3, #18
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c4c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c50:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c52:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c56:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5a:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f000 ff16 	bl	8002a8c <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c60:	9402      	str	r4, [sp, #8]
 8001c62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c68:	642b      	str	r3, [r5, #64]	; 0x40
 8001c6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001c6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c70:	9302      	str	r3, [sp, #8]
 8001c72:	9b02      	ldr	r3, [sp, #8]
}
 8001c74:	b008      	add	sp, #32
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
 8001c78:	40005400 	.word	0x40005400
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020400 	.word	0x40020400

08001c84 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001c84:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2s->Instance==SPI3)
 8001c86:	6802      	ldr	r2, [r0, #0]
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_I2S_MspInit+0x8c>)
{
 8001c8a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8c:	2400      	movs	r4, #0
  if(hi2s->Instance==SPI3)
 8001c8e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c90:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001c94:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001c98:	9407      	str	r4, [sp, #28]
  if(hi2s->Instance==SPI3)
 8001c9a:	d001      	beq.n	8001ca0 <HAL_I2S_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c9c:	b008      	add	sp, #32
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ca0:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001ca4:	9400      	str	r4, [sp, #0]
 8001ca6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ca8:	481a      	ldr	r0, [pc, #104]	; (8001d14 <HAL_I2S_MspInit+0x90>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cb2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001cb6:	9200      	str	r2, [sp, #0]
 8001cb8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	9401      	str	r4, [sp, #4]
 8001cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc6:	f002 0201 	and.w	r2, r2, #1
 8001cca:	9201      	str	r2, [sp, #4]
 8001ccc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	9402      	str	r4, [sp, #8]
 8001cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd2:	f042 0204 	orr.w	r2, r2, #4
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ce2:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ce4:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001ce6:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce8:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cea:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001cf0:	f000 fecc 	bl	8002a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001cf4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cf8:	a903      	add	r1, sp, #12
 8001cfa:	4807      	ldr	r0, [pc, #28]	; (8001d18 <HAL_I2S_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cfe:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d00:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d04:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d06:	f000 fec1 	bl	8002a8c <HAL_GPIO_Init>
}
 8001d0a:	b008      	add	sp, #32
 8001d0c:	bd70      	pop	{r4, r5, r6, pc}
 8001d0e:	bf00      	nop
 8001d10:	40003c00 	.word	0x40003c00
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40020800 	.word	0x40020800

08001d1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d1c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8001d1e:	6801      	ldr	r1, [r0, #0]
 8001d20:	4a16      	ldr	r2, [pc, #88]	; (8001d7c <HAL_SPI_MspInit+0x60>)
{
 8001d22:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8001d26:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001d2c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001d30:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001d32:	d001      	beq.n	8001d38 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d34:	b009      	add	sp, #36	; 0x24
 8001d36:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d38:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d40:	480f      	ldr	r0, [pc, #60]	; (8001d80 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001d46:	6451      	str	r1, [r2, #68]	; 0x44
 8001d48:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001d4a:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8001d4e:	9101      	str	r1, [sp, #4]
 8001d50:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d52:	9302      	str	r3, [sp, #8]
 8001d54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d56:	f043 0301 	orr.w	r3, r3, #1
 8001d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d64:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d66:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d68:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d6a:	24e0      	movs	r4, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d6e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d74:	f000 fe8a 	bl	8002a8c <HAL_GPIO_Init>
}
 8001d78:	b009      	add	sp, #36	; 0x24
 8001d7a:	bd30      	pop	{r4, r5, pc}
 8001d7c:	40013000 	.word	0x40013000
 8001d80:	40020000 	.word	0x40020000

08001d84 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8001d84:	6802      	ldr	r2, [r0, #0]
 8001d86:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_TIM_PWM_MspInit+0x2c>)
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d000      	beq.n	8001d8e <HAL_TIM_PWM_MspInit+0xa>
 8001d8c:	4770      	bx	lr
{
 8001d8e:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d90:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8001d94:	2200      	movs	r2, #0
 8001d96:	9201      	str	r2, [sp, #4]
 8001d98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d9a:	f042 0202 	orr.w	r2, r2, #2
 8001d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	9301      	str	r3, [sp, #4]
 8001da8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001daa:	b002      	add	sp, #8
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40000400 	.word	0x40000400

08001db4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 8001db4:	6802      	ldr	r2, [r0, #0]
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_TIM_Base_MspInit+0x3c>)
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d000      	beq.n	8001dbe <HAL_TIM_Base_MspInit+0xa>
 8001dbc:	4770      	bx	lr
{
 8001dbe:	b500      	push	{lr}
 8001dc0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 8001dc8:	9201      	str	r2, [sp, #4]
 8001dca:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001dcc:	f041 0120 	orr.w	r1, r1, #32
 8001dd0:	6419      	str	r1, [r3, #64]	; 0x40
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd4:	f003 0320 	and.w	r3, r3, #32
 8001dd8:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001dda:	4611      	mov	r1, r2
 8001ddc:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001dde:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001de0:	f000 fc36 	bl	8002650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001de4:	2037      	movs	r0, #55	; 0x37
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001de6:	b003      	add	sp, #12
 8001de8:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001dec:	f000 bc66 	b.w	80026bc <HAL_NVIC_EnableIRQ>
 8001df0:	40001400 	.word	0x40001400

08001df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8001df6:	6801      	ldr	r1, [r0, #0]
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_TIM_MspPostInit+0x4c>)
{
 8001dfa:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8001dfe:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001e04:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001e08:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8001e0a:	d001      	beq.n	8001e10 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e0c:	b006      	add	sp, #24
 8001e0e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e10:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e18:	480a      	ldr	r0, [pc, #40]	; (8001e44 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e20:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e28:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e2c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e2e:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e30:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f000 fe29 	bl	8002a8c <HAL_GPIO_Init>
}
 8001e3a:	b006      	add	sp, #24
 8001e3c:	bd10      	pop	{r4, pc}
 8001e3e:	bf00      	nop
 8001e40:	40000400 	.word	0x40000400
 8001e44:	40020800 	.word	0x40020800

08001e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e48:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8001e4a:	6802      	ldr	r2, [r0, #0]
 8001e4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <HAL_UART_MspInit+0x78>)
{
 8001e4e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8001e52:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e54:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001e58:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001e5c:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART2)
 8001e5e:	d001      	beq.n	8001e64 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e60:	b008      	add	sp, #32
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e64:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001e68:	9401      	str	r4, [sp, #4]
 8001e6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6c:	4815      	ldr	r0, [pc, #84]	; (8001ec4 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
 8001e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e76:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001e7a:	9201      	str	r2, [sp, #4]
 8001e7c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	9402      	str	r4, [sp, #8]
 8001e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e82:	f042 0201 	orr.w	r2, r2, #1
 8001e86:	631a      	str	r2, [r3, #48]	; 0x30
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e90:	220c      	movs	r2, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e96:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e9c:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9e:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ea0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	e9cd 5205 	strd	r5, r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea8:	f000 fdf0 	bl	8002a8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eac:	4622      	mov	r2, r4
 8001eae:	4621      	mov	r1, r4
 8001eb0:	2026      	movs	r0, #38	; 0x26
 8001eb2:	f000 fbcd 	bl	8002650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001eb6:	2026      	movs	r0, #38	; 0x26
 8001eb8:	f000 fc00 	bl	80026bc <HAL_NVIC_EnableIRQ>
}
 8001ebc:	b008      	add	sp, #32
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	40004400 	.word	0x40004400
 8001ec4:	40020000 	.word	0x40020000

08001ec8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop

08001ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ecc:	e7fe      	b.n	8001ecc <HardFault_Handler>
 8001ece:	bf00      	nop

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	e7fe      	b.n	8001ed0 <MemManage_Handler>
 8001ed2:	bf00      	nop

08001ed4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed4:	e7fe      	b.n	8001ed4 <BusFault_Handler>
 8001ed6:	bf00      	nop

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	e7fe      	b.n	8001ed8 <UsageFault_Handler>
 8001eda:	bf00      	nop

08001edc <SVC_Handler>:
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop

08001ee0 <DebugMon_Handler>:
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop

08001ee4 <PendSV_Handler>:
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop

08001ee8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 b932 	b.w	8002150 <HAL_IncTick>

08001eec <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eec:	4801      	ldr	r0, [pc, #4]	; (8001ef4 <USART2_IRQHandler+0x8>)
 8001eee:	f002 bf25 	b.w	8004d3c <HAL_UART_IRQHandler>
 8001ef2:	bf00      	nop
 8001ef4:	20000634 	.word	0x20000634

08001ef8 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ef8:	4801      	ldr	r0, [pc, #4]	; (8001f00 <TIM7_IRQHandler+0x8>)
 8001efa:	f002 bba7 	b.w	800464c <HAL_TIM_IRQHandler>
 8001efe:	bf00      	nop
 8001f00:	20000674 	.word	0x20000674

08001f04 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f04:	4801      	ldr	r0, [pc, #4]	; (8001f0c <DMA2_Stream0_IRQHandler+0x8>)
 8001f06:	f000 bceb 	b.w	80028e0 <HAL_DMA_IRQHandler>
 8001f0a:	bf00      	nop
 8001f0c:	2000057c 	.word	0x2000057c

08001f10 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001f10:	4801      	ldr	r0, [pc, #4]	; (8001f18 <OTG_FS_IRQHandler+0x8>)
 8001f12:	f000 bfd1 	b.w	8002eb8 <HAL_HCD_IRQHandler>
 8001f16:	bf00      	nop
 8001f18:	20000acc 	.word	0x20000acc

08001f1c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f1c:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <_sbrk+0x34>)
{
 8001f1e:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8001f20:	6813      	ldr	r3, [r2, #0]
 8001f22:	b133      	cbz	r3, 8001f32 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001f24:	4418      	add	r0, r3
 8001f26:	4669      	mov	r1, sp
 8001f28:	4288      	cmp	r0, r1
 8001f2a:	d808      	bhi.n	8001f3e <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001f2c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <_sbrk+0x38>)
 8001f34:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001f36:	4418      	add	r0, r3
 8001f38:	4669      	mov	r1, sp
 8001f3a:	4288      	cmp	r0, r1
 8001f3c:	d9f6      	bls.n	8001f2c <_sbrk+0x10>
		errno = ENOMEM;
 8001f3e:	f004 f8b9 	bl	80060b4 <__errno>
 8001f42:	230c      	movs	r3, #12
 8001f44:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	bd08      	pop	{r3, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000238 	.word	0x20000238
 8001f54:	20000d98 	.word	0x20000d98

08001f58 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <SystemInit+0x18>)
 8001f5a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f5e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f62:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f6a:	6099      	str	r1, [r3, #8]
#endif
}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f7a:	e003      	b.n	8001f84 <LoopCopyDataInit>

08001f7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f82:	3104      	adds	r1, #4

08001f84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f84:	480b      	ldr	r0, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f86:	4b0c      	ldr	r3, [pc, #48]	; (8001fb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f8c:	d3f6      	bcc.n	8001f7c <CopyDataInit>
  ldr  r2, =_sbss
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f90:	e002      	b.n	8001f98 <LoopFillZerobss>

08001f92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f94:	f842 3b04 	str.w	r3, [r2], #4

08001f98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f9c:	d3f9      	bcc.n	8001f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f9e:	f7ff ffdb 	bl	8001f58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f004 f88d 	bl	80060c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7ff fb33 	bl	8001610 <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fb0:	0800afb0 	.word	0x0800afb0
  ldr  r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fb8:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 8001fbc:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 8001fc0:	20000d94 	.word	0x20000d94

08001fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC_IRQHandler>
	...

08001fc8 <pidInit>:
 * @about: Initialize pid structure.
 */
void pidInit ( pidc_t* driver, float kp, float ki, float kd, float ts, float iPartMaxLimit, float iPartMinLimit,
                float dPartMaxLimit, float dPartMinLimit, float pidOutputMaxLimit, float pidOutputMinLimit )
{
    driver->output = pidOutputMinLimit;
 8001fc8:	edc0 4a02 	vstr	s9, [r0, #8]

    // Coefficients.
    driver->kp = kp;
 8001fcc:	ed80 0a03 	vstr	s0, [r0, #12]
    driver->ki = ki;
 8001fd0:	edc0 0a04 	vstr	s1, [r0, #16]
    driver->kd = kd;
 8001fd4:	ed80 1a05 	vstr	s2, [r0, #20]

    driver->ts = ts;
 8001fd8:	edc0 1a06 	vstr	s3, [r0, #24]

    // Limits of integral part.
    driver->iMax = iPartMaxLimit;
 8001fdc:	ed80 2a07 	vstr	s4, [r0, #28]
    driver->iMin = iPartMinLimit;
 8001fe0:	edc0 2a08 	vstr	s5, [r0, #32]
    
    // Limits of derivative part.
    driver->dMax = dPartMaxLimit;
 8001fe4:	ed80 3a09 	vstr	s6, [r0, #36]	; 0x24
    driver->dMin = dPartMinLimit;
 8001fe8:	edc0 3a0a 	vstr	s7, [r0, #40]	; 0x28

    // Limits of PID output value.
    driver->pidMax = pidOutputMaxLimit;
 8001fec:	ed80 4a0e 	vstr	s8, [r0, #56]	; 0x38
    driver->pidMin = pidOutputMinLimit;
 8001ff0:	edc0 4a0f 	vstr	s9, [r0, #60]	; 0x3c
}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop

08001ff8 <pidChangeCoefficients>:
 * @about: Changes PID coefficients.
 */
void pidChangeCoefficients ( pidc_t* driver, float kp, float ki, float kd, float ts )
{
    // Coefficients.
    driver->kp = kp;
 8001ff8:	ed80 0a03 	vstr	s0, [r0, #12]
    driver->ki = ki;
 8001ffc:	edc0 0a04 	vstr	s1, [r0, #16]
    driver->kd = kd;
 8002000:	ed80 1a05 	vstr	s2, [r0, #20]

    driver->ts = ts;
 8002004:	edc0 1a06 	vstr	s3, [r0, #24]
}
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <pidControl>:

    // Calculate proportional part
    driver->partP = driver->error;

    // Calculate integral part
    driver->partI += ( driver->error * driver->ts );
 800200c:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8002010:	edd0 5a06 	vldr	s11, [r0, #24]

    // Control integral range
    if ( driver->partI > driver->iMax )
 8002014:	edd0 7a07 	vldr	s15, [r0, #28]
    driver->error = error;
 8002018:	ed80 0a00 	vstr	s0, [r0]
    driver->partI += ( driver->error * driver->ts );
 800201c:	eea5 7a80 	vfma.f32	s14, s11, s0
    driver->partP = driver->error;
 8002020:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
    if ( driver->partI > driver->iMax )
 8002024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    driver->partI += ( driver->error * driver->ts );
 800202c:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
    if ( driver->partI > driver->iMax )
 8002030:	dc06      	bgt.n	8002040 <pidControl+0x34>
    {
        driver->partI = driver->iMax;
    }
    else if ( driver->partI < driver->iMin )
 8002032:	edd0 7a08 	vldr	s15, [r0, #32]
 8002036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d53d      	bpl.n	80020bc <pidControl+0xb0>
    {
        driver->partI = driver->iMin;
 8002040:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    {
        /* Intentionally blank. */
    }

    // Calculate derivative part
    driver->partD = ( ( driver->error - driver->lastError ) / driver->ts );
 8002044:	edd0 6a01 	vldr	s13, [r0, #4]
    
    // Control derivative range
    if ( driver->partD > driver->dMax )
 8002048:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    driver->partD = ( ( driver->error - driver->lastError ) / driver->ts );
 800204c:	ee70 6a66 	vsub.f32	s13, s0, s13
 8002050:	ee86 6aa5 	vdiv.f32	s12, s13, s11
    if ( driver->partD > driver->dMax )
 8002054:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8002058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    driver->partD = ( ( driver->error - driver->lastError ) / driver->ts );
 800205c:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    if ( driver->partD > driver->dMax )
 8002060:	dc06      	bgt.n	8002070 <pidControl+0x64>
    {
        driver->partD = driver->dMax;
    }
    else if ( driver->partD < driver->dMin )
 8002062:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8002066:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	d522      	bpl.n	80020b6 <pidControl+0xaa>
    {
        driver->partD = driver->dMin;
 8002070:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
        /* Intentionally blank. */
    }

    // Calculate PID output value
    driver->output = ( driver->kp * driver->partP ) +
                        ( driver->ki * driver->partI ) +
 8002074:	ed90 5a04 	vldr	s10, [r0, #16]
    driver->output = ( driver->kp * driver->partP ) +
 8002078:	edd0 5a03 	vldr	s11, [r0, #12]
                        ( driver->ki * driver->partI ) +
 800207c:	ed90 6a05 	vldr	s12, [r0, #20]
                        ( driver->kd * driver->partD );

    // Control PID range
    if ( driver->output > driver->pidMax )
 8002080:	edd0 6a0e 	vldr	s13, [r0, #56]	; 0x38
                        ( driver->ki * driver->partI ) +
 8002084:	ee67 7a85 	vmul.f32	s15, s15, s10
    driver->output = ( driver->kp * driver->partP ) +
 8002088:	eee5 7a80 	vfma.f32	s15, s11, s0
                        ( driver->ki * driver->partI ) +
 800208c:	eee6 7a07 	vfma.f32	s15, s12, s14
    if ( driver->output > driver->pidMax )
 8002090:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    driver->output = ( driver->kp * driver->partP ) +
 8002098:	edc0 7a02 	vstr	s15, [r0, #8]
    if ( driver->output > driver->pidMax )
 800209c:	dc11      	bgt.n	80020c2 <pidControl+0xb6>
    {
        driver->output = driver->pidMax;
    }
    else if ( driver->output < driver->pidMin )
 800209e:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
    {
        /* Intentionally blank. */
    }

    // Save current error for next iteration over lastError
    driver->lastError = driver->error;
 80020a2:	ed80 0a01 	vstr	s0, [r0, #4]
    else if ( driver->output < driver->pidMin )
 80020a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        driver->output = driver->pidMin;
 80020ae:	bf48      	it	mi
 80020b0:	ed80 7a02 	vstrmi	s14, [r0, #8]
}
 80020b4:	4770      	bx	lr
 80020b6:	eeb0 7a46 	vmov.f32	s14, s12
 80020ba:	e7db      	b.n	8002074 <pidControl+0x68>
 80020bc:	eef0 7a47 	vmov.f32	s15, s14
 80020c0:	e7c0      	b.n	8002044 <pidControl+0x38>
        driver->output = driver->pidMax;
 80020c2:	edc0 6a02 	vstr	s13, [r0, #8]
    driver->lastError = driver->error;
 80020c6:	ed80 0a01 	vstr	s0, [r0, #4]
}
 80020ca:	4770      	bx	lr

080020cc <pidGetOutput>:
 * @about:
 */
float pidGetOutput ( pidc_t* driver )
{
    return ( driver->output );
}
 80020cc:	ed90 0a02 	vldr	s0, [r0, #8]
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop

080020d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d6:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <HAL_InitTick+0x3c>)
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_InitTick+0x40>)
 80020da:	7812      	ldrb	r2, [r2, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
{
 80020de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e4:	fbb0 f0f2 	udiv	r0, r0, r2
 80020e8:	fbb3 f0f0 	udiv	r0, r3, r0
 80020ec:	f000 faf4 	bl	80026d8 <HAL_SYSTICK_Config>
 80020f0:	b908      	cbnz	r0, 80020f6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	2d0f      	cmp	r5, #15
 80020f4:	d901      	bls.n	80020fa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80020f6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80020f8:	bd38      	pop	{r3, r4, r5, pc}
 80020fa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fc:	4602      	mov	r2, r0
 80020fe:	4629      	mov	r1, r5
 8002100:	f04f 30ff 	mov.w	r0, #4294967295
 8002104:	f000 faa4 	bl	8002650 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_InitTick+0x44>)
 800210a:	4620      	mov	r0, r4
 800210c:	601d      	str	r5, [r3, #0]
}
 800210e:	bd38      	pop	{r3, r4, r5, pc}
 8002110:	2000000c 	.word	0x2000000c
 8002114:	20000008 	.word	0x20000008
 8002118:	20000010 	.word	0x20000010

0800211c <HAL_Init>:
{
 800211c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800211e:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_Init+0x30>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002126:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800212e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002136:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002138:	2003      	movs	r0, #3
 800213a:	f000 fa77 	bl	800262c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800213e:	2000      	movs	r0, #0
 8002140:	f7ff ffc8 	bl	80020d4 <HAL_InitTick>
  HAL_MspInit();
 8002144:	f7ff fcf8 	bl	8001b38 <HAL_MspInit>
}
 8002148:	2000      	movs	r0, #0
 800214a:	bd08      	pop	{r3, pc}
 800214c:	40023c00 	.word	0x40023c00

08002150 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002150:	4a03      	ldr	r2, [pc, #12]	; (8002160 <HAL_IncTick+0x10>)
 8002152:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_IncTick+0x14>)
 8002154:	6811      	ldr	r1, [r2, #0]
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	440b      	add	r3, r1
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	200006fc 	.word	0x200006fc
 8002164:	2000000c 	.word	0x2000000c

08002168 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002168:	4b01      	ldr	r3, [pc, #4]	; (8002170 <HAL_GetTick+0x8>)
 800216a:	6818      	ldr	r0, [r3, #0]
}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200006fc 	.word	0x200006fc

08002174 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002174:	b538      	push	{r3, r4, r5, lr}
 8002176:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff fff6 	bl	8002168 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800217e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8002180:	d002      	beq.n	8002188 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <HAL_Delay+0x20>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	1b40      	subs	r0, r0, r5
 800218e:	42a0      	cmp	r0, r4
 8002190:	d3fa      	bcc.n	8002188 <HAL_Delay+0x14>
  {
  }
}
 8002192:	bd38      	pop	{r3, r4, r5, pc}
 8002194:	2000000c 	.word	0x2000000c

08002198 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002198:	2800      	cmp	r0, #0
 800219a:	f000 8091 	beq.w	80022c0 <HAL_ADC_Init+0x128>
{
 800219e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021a0:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80021a2:	4604      	mov	r4, r0
 80021a4:	2d00      	cmp	r5, #0
 80021a6:	f000 8081 	beq.w	80022ac <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021ac:	06db      	lsls	r3, r3, #27
 80021ae:	d504      	bpl.n	80021ba <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021b0:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 80021b2:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80021b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 80021b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 80021ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021bc:	494d      	ldr	r1, [pc, #308]	; (80022f4 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021be:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021c0:	4d4d      	ldr	r5, [pc, #308]	; (80022f8 <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 80021c2:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80021c6:	f022 0202 	bic.w	r2, r2, #2
 80021ca:	f042 0202 	orr.w	r2, r2, #2
 80021ce:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021d0:	684a      	ldr	r2, [r1, #4]
 80021d2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80021d6:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021d8:	684a      	ldr	r2, [r1, #4]
 80021da:	6860      	ldr	r0, [r4, #4]
 80021dc:	4302      	orrs	r2, r0
 80021de:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021e0:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021e2:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021e4:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021e6:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021e8:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 80021ec:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80021f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021f6:	6858      	ldr	r0, [r3, #4]
 80021f8:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 80021fc:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021fe:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002200:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002202:	4339      	orrs	r1, r7
 8002204:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002206:	6899      	ldr	r1, [r3, #8]
 8002208:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800220c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800220e:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002210:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002212:	ea42 0206 	orr.w	r2, r2, r6
 8002216:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002218:	d054      	beq.n	80022c4 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800221a:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800221c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800221e:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8002222:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	4310      	orrs	r0, r2
 8002228:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800222a:	6899      	ldr	r1, [r3, #8]
 800222c:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8002230:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	432a      	orrs	r2, r5
 8002236:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002238:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800223a:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800223c:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002240:	f021 0102 	bic.w	r1, r1, #2
 8002244:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 800224c:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800224e:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002250:	2800      	cmp	r0, #0
 8002252:	d140      	bne.n	80022d6 <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002254:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002258:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800225c:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800225e:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002262:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002264:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800226a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800226c:	3d01      	subs	r5, #1
 800226e:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8002272:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002274:	6898      	ldr	r0, [r3, #8]
 8002276:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 800227a:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800227c:	6899      	ldr	r1, [r3, #8]
 800227e:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 8002282:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002284:	6899      	ldr	r1, [r3, #8]
 8002286:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800228a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800228c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800228e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002290:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8002294:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002296:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80022a4:	2300      	movs	r3, #0
 80022a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80022aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 80022ac:	f7ff fc60 	bl	8001b70 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 80022b4:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022b8:	06db      	lsls	r3, r3, #27
 80022ba:	f53f af79 	bmi.w	80021b0 <HAL_ADC_Init+0x18>
 80022be:	e77c      	b.n	80021ba <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 80022c0:	2001      	movs	r0, #1
}
 80022c2:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e7b0      	b.n	8002238 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022da:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022dc:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022e4:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	3901      	subs	r1, #1
 80022ea:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	e7b3      	b.n	800225a <HAL_ADC_Init+0xc2>
 80022f2:	bf00      	nop
 80022f4:	40012300 	.word	0x40012300
 80022f8:	0f000001 	.word	0x0f000001

080022fc <HAL_ADC_Start_DMA>:
{
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 80022fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002302:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8002304:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8002306:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002308:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 800230a:	f000 8081 	beq.w	8002410 <HAL_ADC_Start_DMA+0x114>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800230e:	6805      	ldr	r5, [r0, #0]
 8002310:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 8002312:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002314:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 8002316:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800231a:	d414      	bmi.n	8002346 <HAL_ADC_Start_DMA+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800231c:	4b40      	ldr	r3, [pc, #256]	; (8002420 <HAL_ADC_Start_DMA+0x124>)
 800231e:	4e41      	ldr	r6, [pc, #260]	; (8002424 <HAL_ADC_Start_DMA+0x128>)
 8002320:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8002322:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002324:	fba6 6404 	umull	r6, r4, r6, r4
 8002328:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 800232a:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800232e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8002332:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002334:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8002336:	9b01      	ldr	r3, [sp, #4]
 8002338:	b12b      	cbz	r3, 8002346 <HAL_ADC_Start_DMA+0x4a>
      counter--;
 800233a:	9c01      	ldr	r4, [sp, #4]
 800233c:	3c01      	subs	r4, #1
 800233e:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8002340:	9c01      	ldr	r4, [sp, #4]
 8002342:	2c00      	cmp	r4, #0
 8002344:	d1f9      	bne.n	800233a <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002346:	68ab      	ldr	r3, [r5, #8]
 8002348:	07de      	lsls	r6, r3, #31
 800234a:	d543      	bpl.n	80023d4 <HAL_ADC_Start_DMA+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 800234c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800234e:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8002352:	f024 0401 	bic.w	r4, r4, #1
 8002356:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800235a:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800235c:	686b      	ldr	r3, [r5, #4]
 800235e:	055c      	lsls	r4, r3, #21
 8002360:	d505      	bpl.n	800236e <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002362:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002364:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002368:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800236c:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800236e:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002370:	4e2d      	ldr	r6, [pc, #180]	; (8002428 <HAL_ADC_Start_DMA+0x12c>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002372:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002376:	bf1c      	itt	ne
 8002378:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 800237a:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 800237e:	6443      	str	r3, [r0, #68]	; 0x44
 8002380:	4604      	mov	r4, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002382:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002384:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 8002386:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002388:	4a28      	ldr	r2, [pc, #160]	; (800242c <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 800238a:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800238e:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002390:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002392:	4e27      	ldr	r6, [pc, #156]	; (8002430 <HAL_ADC_Start_DMA+0x134>)
 8002394:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002396:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800239a:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800239c:	686e      	ldr	r6, [r5, #4]
 800239e:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 80023a2:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023a4:	68ae      	ldr	r6, [r5, #8]
 80023a6:	f446 7680 	orr.w	r6, r6, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023aa:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023ac:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023ae:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 80023b2:	f000 fa45 	bl	8002840 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <HAL_ADC_Start_DMA+0x138>)
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	06d2      	lsls	r2, r2, #27
 80023bc:	d10d      	bne.n	80023da <HAL_ADC_Start_DMA+0xde>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023be:	6822      	ldr	r2, [r4, #0]
 80023c0:	491d      	ldr	r1, [pc, #116]	; (8002438 <HAL_ADC_Start_DMA+0x13c>)
 80023c2:	428a      	cmp	r2, r1
 80023c4:	d01b      	beq.n	80023fe <HAL_ADC_Start_DMA+0x102>
 80023c6:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80023ca:	428a      	cmp	r2, r1
 80023cc:	d023      	beq.n	8002416 <HAL_ADC_Start_DMA+0x11a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023ce:	491b      	ldr	r1, [pc, #108]	; (800243c <HAL_ADC_Start_DMA+0x140>)
 80023d0:	428a      	cmp	r2, r1
 80023d2:	d00f      	beq.n	80023f4 <HAL_ADC_Start_DMA+0xf8>
  return HAL_OK;
 80023d4:	2000      	movs	r0, #0
}
 80023d6:	b003      	add	sp, #12
 80023d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	4a16      	ldr	r2, [pc, #88]	; (8002438 <HAL_ADC_Start_DMA+0x13c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d1f8      	bne.n	80023d4 <HAL_ADC_Start_DMA+0xd8>
 80023e2:	6898      	ldr	r0, [r3, #8]
 80023e4:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80023e8:	d1f4      	bne.n	80023d4 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	e7f0      	b.n	80023d6 <HAL_ADC_Start_DMA+0xda>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	d8ea      	bhi.n	80023d4 <HAL_ADC_Start_DMA+0xd8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80023fe:	6890      	ldr	r0, [r2, #8]
 8002400:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002404:	d1e6      	bne.n	80023d4 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002406:	6893      	ldr	r3, [r2, #8]
 8002408:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800240c:	6093      	str	r3, [r2, #8]
 800240e:	e7e2      	b.n	80023d6 <HAL_ADC_Start_DMA+0xda>
  __HAL_LOCK(hadc);
 8002410:	2002      	movs	r0, #2
}
 8002412:	b003      	add	sp, #12
 8002414:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	06db      	lsls	r3, r3, #27
 800241a:	d0f0      	beq.n	80023fe <HAL_ADC_Start_DMA+0x102>
 800241c:	e7da      	b.n	80023d4 <HAL_ADC_Start_DMA+0xd8>
 800241e:	bf00      	nop
 8002420:	20000008 	.word	0x20000008
 8002424:	431bde83 	.word	0x431bde83
 8002428:	08002471 	.word	0x08002471
 800242c:	08002449 	.word	0x08002449
 8002430:	08002459 	.word	0x08002459
 8002434:	40012300 	.word	0x40012300
 8002438:	40012000 	.word	0x40012000
 800243c:	40012200 	.word	0x40012200

08002440 <HAL_ADC_ConvCpltCallback>:
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop

08002444 <HAL_ADC_ConvHalfCpltCallback>:
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002448:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800244a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800244c:	f7ff fffa 	bl	8002444 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002450:	bd08      	pop	{r3, pc}
 8002452:	bf00      	nop

08002454 <HAL_ADC_ErrorCallback>:
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop

08002458 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002458:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800245a:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800245c:	2340      	movs	r3, #64	; 0x40
 800245e:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002460:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002468:	f7ff fff4 	bl	8002454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800246c:	bd08      	pop	{r3, pc}
 800246e:	bf00      	nop

08002470 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002470:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002474:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8002478:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800247a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800247c:	d123      	bne.n	80024c6 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800247e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002482:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002486:	688a      	ldr	r2, [r1, #8]
 8002488:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800248c:	d117      	bne.n	80024be <ADC_DMAConvCplt+0x4e>
 800248e:	7e1a      	ldrb	r2, [r3, #24]
 8002490:	b9aa      	cbnz	r2, 80024be <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002492:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002494:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8002498:	d002      	beq.n	80024a0 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800249a:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800249c:	0550      	lsls	r0, r2, #21
 800249e:	d40e      	bmi.n	80024be <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80024a0:	684a      	ldr	r2, [r1, #4]
 80024a2:	f022 0220 	bic.w	r2, r2, #32
 80024a6:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b2:	04d1      	lsls	r1, r2, #19
 80024b4:	d403      	bmi.n	80024be <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024b8:	f042 0201 	orr.w	r2, r2, #1
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff ffbe 	bl	8002440 <HAL_ADC_ConvCpltCallback>
}
 80024c4:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024c6:	06d2      	lsls	r2, r2, #27
 80024c8:	d404      	bmi.n	80024d4 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80024cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ffbd 	bl	8002454 <HAL_ADC_ErrorCallback>
}
 80024da:	bd10      	pop	{r4, pc}

080024dc <HAL_ADC_ConfigChannel>:
{
 80024dc:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 80024de:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80024e2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80024e4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80024e6:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80024e8:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80024ea:	f000 8095 	beq.w	8002618 <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024ee:	680d      	ldr	r5, [r1, #0]
 80024f0:	688a      	ldr	r2, [r1, #8]
 80024f2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 80024f4:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024f6:	2d09      	cmp	r5, #9
 80024f8:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 80024fa:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024fe:	d829      	bhi.n	8002554 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002500:	691c      	ldr	r4, [r3, #16]
 8002502:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8002506:	f04f 0c07 	mov.w	ip, #7
 800250a:	fa0c fc06 	lsl.w	ip, ip, r6
 800250e:	ea24 040c 	bic.w	r4, r4, ip
 8002512:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002514:	691c      	ldr	r4, [r3, #16]
 8002516:	fa02 f606 	lsl.w	r6, r2, r6
 800251a:	4326      	orrs	r6, r4
 800251c:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800251e:	684e      	ldr	r6, [r1, #4]
 8002520:	2e06      	cmp	r6, #6
 8002522:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8002526:	d82a      	bhi.n	800257e <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002528:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800252a:	3a05      	subs	r2, #5
 800252c:	241f      	movs	r4, #31
 800252e:	4094      	lsls	r4, r2
 8002530:	ea21 0104 	bic.w	r1, r1, r4
 8002534:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002536:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002538:	fa07 f202 	lsl.w	r2, r7, r2
 800253c:	430a      	orrs	r2, r1
 800253e:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002540:	4a37      	ldr	r2, [pc, #220]	; (8002620 <HAL_ADC_ConfigChannel+0x144>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d02d      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 8002546:	2300      	movs	r3, #0
 8002548:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800254c:	4618      	mov	r0, r3
}
 800254e:	b002      	add	sp, #8
 8002550:	bcf0      	pop	{r4, r5, r6, r7}
 8002552:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002554:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8002558:	68dc      	ldr	r4, [r3, #12]
 800255a:	3e1e      	subs	r6, #30
 800255c:	f04f 0c07 	mov.w	ip, #7
 8002560:	fa0c fc06 	lsl.w	ip, ip, r6
 8002564:	ea24 040c 	bic.w	r4, r4, ip
 8002568:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800256a:	68dc      	ldr	r4, [r3, #12]
 800256c:	fa02 f606 	lsl.w	r6, r2, r6
 8002570:	4326      	orrs	r6, r4
 8002572:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 8002574:	684e      	ldr	r6, [r1, #4]
 8002576:	2e06      	cmp	r6, #6
 8002578:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 800257c:	d9d4      	bls.n	8002528 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800257e:	2e0c      	cmp	r6, #12
 8002580:	d835      	bhi.n	80025ee <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002582:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 8002586:	211f      	movs	r1, #31
 8002588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258a:	40a1      	lsls	r1, r4
 800258c:	ea22 0201 	bic.w	r2, r2, r1
 8002590:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002592:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002594:	fa07 f204 	lsl.w	r2, r7, r4
 8002598:	430a      	orrs	r2, r1
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800259c:	4a20      	ldr	r2, [pc, #128]	; (8002620 <HAL_ADC_ConfigChannel+0x144>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d1d1      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x6a>
 80025a2:	2d12      	cmp	r5, #18
 80025a4:	d031      	beq.n	800260a <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025a6:	f1a5 0310 	sub.w	r3, r5, #16
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d8cb      	bhi.n	8002546 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025ae:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_ADC_ConfigChannel+0x148>)
 80025b0:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025b2:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025b8:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80025ba:	d1c4      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025bc:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <HAL_ADC_ConfigChannel+0x14c>)
 80025be:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80025c2:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f202 3283 	addw	r2, r2, #899	; 0x383
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	0c9b      	lsrs	r3, r3, #18
 80025d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80025da:	9b01      	ldr	r3, [sp, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0b2      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80025e0:	9b01      	ldr	r3, [sp, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80025e6:	9b01      	ldr	r3, [sp, #4]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f9      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x104>
 80025ec:	e7ab      	b.n	8002546 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025ee:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80025f2:	241f      	movs	r4, #31
 80025f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f6:	408c      	lsls	r4, r1
 80025f8:	ea22 0204 	bic.w	r2, r2, r4
 80025fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025fe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002600:	fa07 f201 	lsl.w	r2, r7, r1
 8002604:	4322      	orrs	r2, r4
 8002606:	62da      	str	r2, [r3, #44]	; 0x2c
 8002608:	e79a      	b.n	8002540 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800260a:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800260e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002612:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8002616:	e796      	b.n	8002546 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8002618:	2002      	movs	r0, #2
}
 800261a:	b002      	add	sp, #8
 800261c:	bcf0      	pop	{r4, r5, r6, r7}
 800261e:	4770      	bx	lr
 8002620:	40012000 	.word	0x40012000
 8002624:	40012300 	.word	0x40012300
 8002628:	20000008 	.word	0x20000008

0800262c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800262c:	4a07      	ldr	r2, [pc, #28]	; (800264c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800262e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002630:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8002634:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002636:	0200      	lsls	r0, r0, #8
 8002638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800263c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002644:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002646:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002650:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <HAL_NVIC_SetPriority+0x64>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002658:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800265a:	f1c3 0507 	rsb	r5, r3, #7
 800265e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002660:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002664:	bf28      	it	cs
 8002666:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002668:	2c06      	cmp	r4, #6
 800266a:	d919      	bls.n	80026a0 <HAL_NVIC_SetPriority+0x50>
 800266c:	3b03      	subs	r3, #3
 800266e:	f04f 34ff 	mov.w	r4, #4294967295
 8002672:	409c      	lsls	r4, r3
 8002674:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	40aa      	lsls	r2, r5
 800267e:	ea21 0102 	bic.w	r1, r1, r2
 8002682:	fa01 f203 	lsl.w	r2, r1, r3
 8002686:	4322      	orrs	r2, r4
 8002688:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800268a:	2800      	cmp	r0, #0
 800268c:	b2d2      	uxtb	r2, r2
 800268e:	db0a      	blt.n	80026a6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002690:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002694:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002698:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800269c:	bc30      	pop	{r4, r5}
 800269e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a0:	2400      	movs	r4, #0
 80026a2:	4623      	mov	r3, r4
 80026a4:	e7e8      	b.n	8002678 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_NVIC_SetPriority+0x68>)
 80026a8:	f000 000f 	and.w	r0, r0, #15
 80026ac:	4403      	add	r3, r0
 80026ae:	761a      	strb	r2, [r3, #24]
 80026b0:	bc30      	pop	{r4, r5}
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00
 80026b8:	e000ecfc 	.word	0xe000ecfc

080026bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026bc:	2800      	cmp	r0, #0
 80026be:	db07      	blt.n	80026d0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c0:	f000 011f 	and.w	r1, r0, #31
 80026c4:	2301      	movs	r3, #1
 80026c6:	0940      	lsrs	r0, r0, #5
 80026c8:	4a02      	ldr	r2, [pc, #8]	; (80026d4 <HAL_NVIC_EnableIRQ+0x18>)
 80026ca:	408b      	lsls	r3, r1
 80026cc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000e100 	.word	0xe000e100

080026d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d8:	3801      	subs	r0, #1
 80026da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80026de:	d20e      	bcs.n	80026fe <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e4:	4c08      	ldr	r4, [pc, #32]	; (8002708 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e6:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e8:	20f0      	movs	r0, #240	; 0xf0
 80026ea:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ee:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f6:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80026f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026fc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80026fe:	2001      	movs	r0, #1
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff fd2a 	bl	8002168 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002714:	2c00      	cmp	r4, #0
 8002716:	d054      	beq.n	80027c2 <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002718:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800271a:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800271c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002720:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8002722:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8002724:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8002728:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800272c:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800272e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002730:	e005      	b.n	800273e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002732:	f7ff fd19 	bl	8002168 <HAL_GetTick>
 8002736:	1b40      	subs	r0, r0, r5
 8002738:	2805      	cmp	r0, #5
 800273a:	d83b      	bhi.n	80027b4 <HAL_DMA_Init+0xa8>
 800273c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	07d1      	lsls	r1, r2, #31
 8002742:	d4f6      	bmi.n	8002732 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002744:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002748:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800274c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274e:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 8002750:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002752:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002754:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002758:	430a      	orrs	r2, r1
 800275a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800275c:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800275e:	4835      	ldr	r0, [pc, #212]	; (8002834 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002760:	4332      	orrs	r2, r6
 8002762:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002764:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002766:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002768:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800276a:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276c:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002770:	d029      	beq.n	80027c6 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002772:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002774:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002776:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800277a:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800277c:	b2da      	uxtb	r2, r3
 800277e:	482e      	ldr	r0, [pc, #184]	; (8002838 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 8002780:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002782:	3a10      	subs	r2, #16
 8002784:	fba0 1202 	umull	r1, r2, r0, r2
 8002788:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800278a:	492c      	ldr	r1, [pc, #176]	; (800283c <HAL_DMA_Init+0x130>)
 800278c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002790:	5c89      	ldrb	r1, [r1, r2]
 8002792:	65e1      	str	r1, [r4, #92]	; 0x5c
 8002794:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 8002798:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800279a:	bf88      	it	hi
 800279c:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800279e:	223f      	movs	r2, #63	; 0x3f
 80027a0:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 80027a2:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a4:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027a6:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80027a8:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027aa:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ac:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80027ae:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80027b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b6:	2220      	movs	r2, #32
 80027b8:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80027ba:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80027c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80027c2:	2001      	movs	r0, #1
}
 80027c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027c6:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 80027ca:	4301      	orrs	r1, r0
 80027cc:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 80027ce:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 80027d0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80027d2:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80027d4:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d8:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80027dc:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027de:	2800      	cmp	r0, #0
 80027e0:	d0cc      	beq.n	800277c <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027e2:	b17e      	cbz	r6, 8002804 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027e4:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80027e8:	d016      	beq.n	8002818 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80027ea:	2d02      	cmp	r5, #2
 80027ec:	d903      	bls.n	80027f6 <HAL_DMA_Init+0xea>
 80027ee:	2d03      	cmp	r5, #3
 80027f0:	d1c4      	bne.n	800277c <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f2:	01c2      	lsls	r2, r0, #7
 80027f4:	d5c2      	bpl.n	800277c <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 80027f6:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027f8:	2240      	movs	r2, #64	; 0x40
 80027fa:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 80027fc:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 80027fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8002802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8002804:	2d01      	cmp	r5, #1
 8002806:	d003      	beq.n	8002810 <HAL_DMA_Init+0x104>
 8002808:	d3f3      	bcc.n	80027f2 <HAL_DMA_Init+0xe6>
 800280a:	2d02      	cmp	r5, #2
 800280c:	d1b6      	bne.n	800277c <HAL_DMA_Init+0x70>
 800280e:	e7f0      	b.n	80027f2 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002810:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002814:	d1b2      	bne.n	800277c <HAL_DMA_Init+0x70>
 8002816:	e7ee      	b.n	80027f6 <HAL_DMA_Init+0xea>
    switch (tmp)
 8002818:	2d03      	cmp	r5, #3
 800281a:	d8af      	bhi.n	800277c <HAL_DMA_Init+0x70>
 800281c:	a201      	add	r2, pc, #4	; (adr r2, 8002824 <HAL_DMA_Init+0x118>)
 800281e:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8002822:	bf00      	nop
 8002824:	080027f7 	.word	0x080027f7
 8002828:	080027f3 	.word	0x080027f3
 800282c:	080027f7 	.word	0x080027f7
 8002830:	08002811 	.word	0x08002811
 8002834:	f010803f 	.word	0xf010803f
 8002838:	aaaaaaab 	.word	0xaaaaaaab
 800283c:	0800ac98 	.word	0x0800ac98

08002840 <HAL_DMA_Start_IT>:
{
 8002840:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8002842:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002846:	2c01      	cmp	r4, #1
 8002848:	d035      	beq.n	80028b6 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 800284a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800284e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8002850:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8002852:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8002854:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002858:	d127      	bne.n	80028aa <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800285a:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800285c:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800285e:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002860:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002864:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002866:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002868:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800286a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800286e:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002870:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002872:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8002874:	bf0a      	itet	eq
 8002876:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002878:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 800287a:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800287c:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800287e:	bf18      	it	ne
 8002880:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002882:	233f      	movs	r3, #63	; 0x3f
 8002884:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 8002886:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002888:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800288a:	6823      	ldr	r3, [r4, #0]
 800288c:	f043 0316 	orr.w	r3, r3, #22
 8002890:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002892:	b11a      	cbz	r2, 800289c <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002894:	6823      	ldr	r3, [r4, #0]
 8002896:	f043 0308 	orr.w	r3, r3, #8
 800289a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2000      	movs	r0, #0
}
 80028a6:	bcf0      	pop	{r4, r5, r6, r7}
 80028a8:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 80028aa:	2300      	movs	r3, #0
 80028ac:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80028b0:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80028b2:	2002      	movs	r0, #2
}
 80028b4:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80028b6:	2002      	movs	r0, #2
}
 80028b8:	bcf0      	pop	{r4, r5, r6, r7}
 80028ba:	4770      	bx	lr

080028bc <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028bc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d003      	beq.n	80028cc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80028c8:	2001      	movs	r0, #1
 80028ca:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80028cc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80028ce:	2305      	movs	r3, #5
 80028d0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80028d4:	6813      	ldr	r3, [r2, #0]
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80028dc:	2000      	movs	r0, #0
}
 80028de:	4770      	bx	lr

080028e0 <HAL_DMA_IRQHandler>:
{
 80028e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028e2:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 80028e4:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028e6:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 80028e8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ea:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80028ec:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028ee:	4965      	ldr	r1, [pc, #404]	; (8002a84 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028f0:	2208      	movs	r2, #8
 80028f2:	409a      	lsls	r2, r3
 80028f4:	422a      	tst	r2, r5
{
 80028f6:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80028f8:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028fa:	d003      	beq.n	8002904 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028fc:	6801      	ldr	r1, [r0, #0]
 80028fe:	6808      	ldr	r0, [r1, #0]
 8002900:	0740      	lsls	r0, r0, #29
 8002902:	d459      	bmi.n	80029b8 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002904:	2201      	movs	r2, #1
 8002906:	409a      	lsls	r2, r3
 8002908:	422a      	tst	r2, r5
 800290a:	d003      	beq.n	8002914 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800290c:	6821      	ldr	r1, [r4, #0]
 800290e:	6949      	ldr	r1, [r1, #20]
 8002910:	0608      	lsls	r0, r1, #24
 8002912:	d474      	bmi.n	80029fe <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	2204      	movs	r2, #4
 8002916:	409a      	lsls	r2, r3
 8002918:	422a      	tst	r2, r5
 800291a:	d003      	beq.n	8002924 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800291c:	6821      	ldr	r1, [r4, #0]
 800291e:	6809      	ldr	r1, [r1, #0]
 8002920:	0789      	lsls	r1, r1, #30
 8002922:	d466      	bmi.n	80029f2 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002924:	2210      	movs	r2, #16
 8002926:	409a      	lsls	r2, r3
 8002928:	422a      	tst	r2, r5
 800292a:	d003      	beq.n	8002934 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800292c:	6821      	ldr	r1, [r4, #0]
 800292e:	6808      	ldr	r0, [r1, #0]
 8002930:	0700      	lsls	r0, r0, #28
 8002932:	d44b      	bmi.n	80029cc <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002934:	2220      	movs	r2, #32
 8002936:	409a      	lsls	r2, r3
 8002938:	422a      	tst	r2, r5
 800293a:	d014      	beq.n	8002966 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800293c:	6821      	ldr	r1, [r4, #0]
 800293e:	6808      	ldr	r0, [r1, #0]
 8002940:	06c0      	lsls	r0, r0, #27
 8002942:	d510      	bpl.n	8002966 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002944:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002946:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800294a:	2a05      	cmp	r2, #5
 800294c:	d063      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800294e:	680b      	ldr	r3, [r1, #0]
 8002950:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002954:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002956:	d07e      	beq.n	8002a56 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002958:	0319      	lsls	r1, r3, #12
 800295a:	f140 8089 	bpl.w	8002a70 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800295e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002960:	b10b      	cbz	r3, 8002966 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8002962:	4620      	mov	r0, r4
 8002964:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002966:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002968:	b323      	cbz	r3, 80029b4 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800296a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800296c:	07da      	lsls	r2, r3, #31
 800296e:	d51a      	bpl.n	80029a6 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8002970:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8002972:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8002974:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002978:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800297a:	4943      	ldr	r1, [pc, #268]	; (8002a88 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 800297c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002980:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8002984:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002986:	0ab6      	lsrs	r6, r6, #10
 8002988:	e002      	b.n	8002990 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	07db      	lsls	r3, r3, #31
 800298e:	d504      	bpl.n	800299a <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8002990:	9b01      	ldr	r3, [sp, #4]
 8002992:	3301      	adds	r3, #1
 8002994:	42b3      	cmp	r3, r6
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	d9f7      	bls.n	800298a <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800299a:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 800299c:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 800299e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80029a2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80029a6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80029a8:	b123      	cbz	r3, 80029b4 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80029aa:	4620      	mov	r0, r4
}
 80029ac:	b003      	add	sp, #12
 80029ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80029b2:	4718      	bx	r3
}
 80029b4:	b003      	add	sp, #12
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029b8:	6808      	ldr	r0, [r1, #0]
 80029ba:	f020 0004 	bic.w	r0, r0, #4
 80029be:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029c0:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	6562      	str	r2, [r4, #84]	; 0x54
 80029ca:	e79b      	b.n	8002904 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029cc:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ce:	680a      	ldr	r2, [r1, #0]
 80029d0:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029d4:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029d6:	d118      	bne.n	8002a0a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d8:	05d2      	lsls	r2, r2, #23
 80029da:	d403      	bmi.n	80029e4 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029dc:	680a      	ldr	r2, [r1, #0]
 80029de:	f022 0208 	bic.w	r2, r2, #8
 80029e2:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80029e4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	d0a4      	beq.n	8002934 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80029ea:	4620      	mov	r0, r4
 80029ec:	4790      	blx	r2
 80029ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80029f0:	e7a0      	b.n	8002934 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029f2:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029f4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80029f6:	f042 0204 	orr.w	r2, r2, #4
 80029fa:	6562      	str	r2, [r4, #84]	; 0x54
 80029fc:	e792      	b.n	8002924 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029fe:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a02:	f042 0202 	orr.w	r2, r2, #2
 8002a06:	6562      	str	r2, [r4, #84]	; 0x54
 8002a08:	e784      	b.n	8002914 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a0a:	0311      	lsls	r1, r2, #12
 8002a0c:	d5ea      	bpl.n	80029e4 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a0e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002a10:	2a00      	cmp	r2, #0
 8002a12:	d1ea      	bne.n	80029ea <HAL_DMA_IRQHandler+0x10a>
 8002a14:	e78e      	b.n	8002934 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a16:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a18:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a1a:	f022 0216 	bic.w	r2, r2, #22
 8002a1e:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a20:	694a      	ldr	r2, [r1, #20]
 8002a22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a26:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a28:	b338      	cbz	r0, 8002a7a <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2a:	680a      	ldr	r2, [r1, #0]
 8002a2c:	f022 0208 	bic.w	r2, r2, #8
 8002a30:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a32:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8002a34:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8002a3a:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002a3c:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a3e:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8002a40:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002a44:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	d0b3      	beq.n	80029b4 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8002a4c:	4620      	mov	r0, r4
}
 8002a4e:	b003      	add	sp, #12
 8002a50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8002a54:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a56:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002a5a:	d180      	bne.n	800295e <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a5c:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a60:	f022 0210 	bic.w	r2, r2, #16
 8002a64:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8002a66:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002a6a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8002a6e:	e776      	b.n	800295e <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8002a70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f47f af75 	bne.w	8002962 <HAL_DMA_IRQHandler+0x82>
 8002a78:	e775      	b.n	8002966 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a7a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002a7c:	2a00      	cmp	r2, #0
 8002a7e:	d1d4      	bne.n	8002a2a <HAL_DMA_IRQHandler+0x14a>
 8002a80:	e7d7      	b.n	8002a32 <HAL_DMA_IRQHandler+0x152>
 8002a82:	bf00      	nop
 8002a84:	20000008 	.word	0x20000008
 8002a88:	1b4e81b5 	.word	0x1b4e81b5

08002a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a90:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a94:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8002c8c <HAL_GPIO_Init+0x200>
{
 8002a98:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	2400      	movs	r4, #0
 8002a9c:	e003      	b.n	8002aa6 <HAL_GPIO_Init+0x1a>
 8002a9e:	3401      	adds	r4, #1
 8002aa0:	2c10      	cmp	r4, #16
 8002aa2:	f000 808c 	beq.w	8002bbe <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d1f5      	bne.n	8002a9e <HAL_GPIO_Init+0x12>
 8002ab2:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ab6:	f026 0910 	bic.w	r9, r6, #16
 8002aba:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8002abe:	2303      	movs	r3, #3
 8002ac0:	f109 37ff 	add.w	r7, r9, #4294967295
 8002ac4:	fa03 f30c 	lsl.w	r3, r3, ip
 8002ac8:	2f01      	cmp	r7, #1
 8002aca:	ea6f 0303 	mvn.w	r3, r3
 8002ace:	fa05 f50c 	lsl.w	r5, r5, ip
 8002ad2:	d977      	bls.n	8002bc4 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 8002ad4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ad6:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ad8:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002ada:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8002adc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ade:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ae2:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae4:	fa05 f30c 	lsl.w	r3, r5, ip
 8002ae8:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8002aea:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002aec:	00f3      	lsls	r3, r6, #3
 8002aee:	d5d6      	bpl.n	8002a9e <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af0:	4d5f      	ldr	r5, [pc, #380]	; (8002c70 <HAL_GPIO_Init+0x1e4>)
 8002af2:	2300      	movs	r3, #0
 8002af4:	9301      	str	r3, [sp, #4]
 8002af6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002afc:	646b      	str	r3, [r5, #68]	; 0x44
 8002afe:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8002b00:	f024 0303 	bic.w	r3, r4, #3
 8002b04:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8002b08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b0c:	9501      	str	r5, [sp, #4]
 8002b0e:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b12:	f004 0503 	and.w	r5, r4, #3
 8002b16:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b1a:	4d56      	ldr	r5, [pc, #344]	; (8002c74 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1c:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002b1e:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b22:	270f      	movs	r7, #15
 8002b24:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b28:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b2a:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b2e:	d01f      	beq.n	8002b70 <HAL_GPIO_Init+0xe4>
 8002b30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b34:	42a8      	cmp	r0, r5
 8002b36:	d076      	beq.n	8002c26 <HAL_GPIO_Init+0x19a>
 8002b38:	4d4f      	ldr	r5, [pc, #316]	; (8002c78 <HAL_GPIO_Init+0x1ec>)
 8002b3a:	42a8      	cmp	r0, r5
 8002b3c:	d079      	beq.n	8002c32 <HAL_GPIO_Init+0x1a6>
 8002b3e:	4d4f      	ldr	r5, [pc, #316]	; (8002c7c <HAL_GPIO_Init+0x1f0>)
 8002b40:	42a8      	cmp	r0, r5
 8002b42:	d07c      	beq.n	8002c3e <HAL_GPIO_Init+0x1b2>
 8002b44:	4d4e      	ldr	r5, [pc, #312]	; (8002c80 <HAL_GPIO_Init+0x1f4>)
 8002b46:	42a8      	cmp	r0, r5
 8002b48:	d07f      	beq.n	8002c4a <HAL_GPIO_Init+0x1be>
 8002b4a:	4d4e      	ldr	r5, [pc, #312]	; (8002c84 <HAL_GPIO_Init+0x1f8>)
 8002b4c:	42a8      	cmp	r0, r5
 8002b4e:	f000 8082 	beq.w	8002c56 <HAL_GPIO_Init+0x1ca>
 8002b52:	4d4d      	ldr	r5, [pc, #308]	; (8002c88 <HAL_GPIO_Init+0x1fc>)
 8002b54:	42a8      	cmp	r0, r5
 8002b56:	f000 8084 	beq.w	8002c62 <HAL_GPIO_Init+0x1d6>
 8002b5a:	f8df c134 	ldr.w	ip, [pc, #308]	; 8002c90 <HAL_GPIO_Init+0x204>
 8002b5e:	4560      	cmp	r0, ip
 8002b60:	bf0c      	ite	eq
 8002b62:	f04f 0c07 	moveq.w	ip, #7
 8002b66:	f04f 0c08 	movne.w	ip, #8
 8002b6a:	fa0c f509 	lsl.w	r5, ip, r9
 8002b6e:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b70:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8002b72:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b78:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8002b7a:	bf54      	ite	pl
 8002b7c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8002b7e:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8002b80:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8002b84:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b88:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8002b8a:	bf54      	ite	pl
 8002b8c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8002b8e:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8002b90:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b94:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b98:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	bf54      	ite	pl
 8002b9c:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8002b9e:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8002ba0:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8002ba4:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ba8:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002baa:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8002bae:	bf54      	ite	pl
 8002bb0:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8002bb2:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb4:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8002bb6:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bba:	f47f af74 	bne.w	8002aa6 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8002bbe:	b003      	add	sp, #12
 8002bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002bc4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc6:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bca:	68cf      	ldr	r7, [r1, #12]
 8002bcc:	fa07 f70c 	lsl.w	r7, r7, ip
 8002bd0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8002bd4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002bd6:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bda:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bde:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002be2:	40a7      	lsls	r7, r4
 8002be4:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002be8:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002bea:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bec:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bee:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf0:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8002bf4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bf6:	f47f af71 	bne.w	8002adc <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8002bfa:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8002bfe:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c02:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8002c06:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0a:	00bf      	lsls	r7, r7, #2
 8002c0c:	f04f 0b0f 	mov.w	fp, #15
 8002c10:	fa0b fb07 	lsl.w	fp, fp, r7
 8002c14:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c18:	690d      	ldr	r5, [r1, #16]
 8002c1a:	40bd      	lsls	r5, r7
 8002c1c:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8002c20:	f8c9 5020 	str.w	r5, [r9, #32]
 8002c24:	e75a      	b.n	8002adc <HAL_GPIO_Init+0x50>
 8002c26:	f04f 0c01 	mov.w	ip, #1
 8002c2a:	fa0c f509 	lsl.w	r5, ip, r9
 8002c2e:	432f      	orrs	r7, r5
 8002c30:	e79e      	b.n	8002b70 <HAL_GPIO_Init+0xe4>
 8002c32:	f04f 0c02 	mov.w	ip, #2
 8002c36:	fa0c f509 	lsl.w	r5, ip, r9
 8002c3a:	432f      	orrs	r7, r5
 8002c3c:	e798      	b.n	8002b70 <HAL_GPIO_Init+0xe4>
 8002c3e:	f04f 0c03 	mov.w	ip, #3
 8002c42:	fa0c f509 	lsl.w	r5, ip, r9
 8002c46:	432f      	orrs	r7, r5
 8002c48:	e792      	b.n	8002b70 <HAL_GPIO_Init+0xe4>
 8002c4a:	f04f 0c04 	mov.w	ip, #4
 8002c4e:	fa0c f509 	lsl.w	r5, ip, r9
 8002c52:	432f      	orrs	r7, r5
 8002c54:	e78c      	b.n	8002b70 <HAL_GPIO_Init+0xe4>
 8002c56:	f04f 0c05 	mov.w	ip, #5
 8002c5a:	fa0c f509 	lsl.w	r5, ip, r9
 8002c5e:	432f      	orrs	r7, r5
 8002c60:	e786      	b.n	8002b70 <HAL_GPIO_Init+0xe4>
 8002c62:	f04f 0c06 	mov.w	ip, #6
 8002c66:	fa0c f509 	lsl.w	r5, ip, r9
 8002c6a:	432f      	orrs	r7, r5
 8002c6c:	e780      	b.n	8002b70 <HAL_GPIO_Init+0xe4>
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020000 	.word	0x40020000
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40021400 	.word	0x40021400
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40013c00 	.word	0x40013c00
 8002c90:	40021c00 	.word	0x40021c00

08002c94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c94:	b902      	cbnz	r2, 8002c98 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c96:	0409      	lsls	r1, r1, #16
 8002c98:	6181      	str	r1, [r0, #24]
  }
}
 8002c9a:	4770      	bx	lr

08002c9c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002ca0:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
{
 8002ca4:	b084      	sub	sp, #16
  __HAL_LOCK(hhcd);
 8002ca6:	2c01      	cmp	r4, #1
{
 8002ca8:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8002cac:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8002cb0:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8002cb4:	d02b      	beq.n	8002d0e <HAL_HCD_HC_Init+0x72>
 8002cb6:	4605      	mov	r5, r0
  hhcd->hc[ch_num].do_ping = 0U;
 8002cb8:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8002cbc:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8002cc0:	f04f 0800 	mov.w	r8, #0
  __HAL_LOCK(hhcd);
 8002cc4:	2001      	movs	r0, #1
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002cc6:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8002cca:	f885 02b8 	strb.w	r0, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002cce:	f002 067f 	and.w	r6, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002cd2:	bf08      	it	eq
 8002cd4:	4640      	moveq	r0, r8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002cd6:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002cda:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8002cde:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8002ce2:	f884 e03f 	strb.w	lr, [r4, #63]	; 0x3f
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8002ce6:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002cea:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].do_ping = 0U;
 8002cee:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d

  status =  USB_HC_Init(hhcd->Instance,
 8002cf2:	6828      	ldr	r0, [r5, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002cf4:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
  status =  USB_HC_Init(hhcd->Instance,
 8002cf8:	e9cd e901 	strd	lr, r9, [sp, #4]
 8002cfc:	f8cd c000 	str.w	ip, [sp]
 8002d00:	f002 fa52 	bl	80051a8 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002d04:	f885 82b8 	strb.w	r8, [r5, #696]	; 0x2b8

  return status;
}
 8002d08:	b004      	add	sp, #16
 8002d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8002d0e:	2002      	movs	r0, #2
}
 8002d10:	b004      	add	sp, #16
 8002d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d16:	bf00      	nop

08002d18 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8002d18:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d00b      	beq.n	8002d38 <HAL_HCD_HC_Halt+0x20>
{
 8002d20:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8002d22:	2301      	movs	r3, #1
 8002d24:	4604      	mov	r4, r0
 8002d26:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d2a:	6800      	ldr	r0, [r0, #0]
 8002d2c:	f002 fbbc 	bl	80054a8 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d30:	2000      	movs	r0, #0
 8002d32:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 8002d36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002d38:	2002      	movs	r0, #2
}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_HCD_Init>:
  if (hhcd == NULL)
 8002d3c:	2800      	cmp	r0, #0
 8002d3e:	d04a      	beq.n	8002dd6 <HAL_HCD_Init+0x9a>
{
 8002d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d44:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8002d48:	6804      	ldr	r4, [r0, #0]
{
 8002d4a:	b08a      	sub	sp, #40	; 0x28
 8002d4c:	4607      	mov	r7, r0
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d4e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d039      	beq.n	8002dca <HAL_HCD_Init+0x8e>
 8002d56:	4620      	mov	r0, r4
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d60:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d62:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 8002d66:	bf08      	it	eq
 8002d68:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8002d6a:	f002 f915 	bl	8004f98 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d6e:	f854 6b10 	ldr.w	r6, [r4], #16
 8002d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d74:	466d      	mov	r5, sp
 8002d76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d84:	f107 0804 	add.w	r8, r7, #4
 8002d88:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002d8c:	4630      	mov	r0, r6
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d8e:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d90:	f002 f8b6 	bl	8004f00 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d94:	2101      	movs	r1, #1
 8002d96:	6838      	ldr	r0, [r7, #0]
 8002d98:	f002 f906 	bl	8004fa8 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d9c:	f856 cb10 	ldr.w	ip, [r6], #16
 8002da0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002da2:	466d      	mov	r5, sp
 8002da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db2:	4660      	mov	r0, ip
 8002db4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002db8:	f002 f96a 	bl	8005090 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8002dbc:	2301      	movs	r3, #1
  return HAL_OK;
 8002dbe:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8002dc0:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 8002dc4:	b00a      	add	sp, #40	; 0x28
 8002dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8002dca:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8002dce:	f003 f851 	bl	8005e74 <HAL_HCD_MspInit>
 8002dd2:	6838      	ldr	r0, [r7, #0]
 8002dd4:	e7c0      	b.n	8002d58 <HAL_HCD_Init+0x1c>
    return HAL_ERROR;
 8002dd6:	2001      	movs	r0, #1
}
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop

08002ddc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002dde:	008c      	lsls	r4, r1, #2
 8002de0:	1865      	adds	r5, r4, r1
 8002de2:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
{
 8002de6:	f89d c014 	ldrb.w	ip, [sp, #20]
 8002dea:	9f06      	ldr	r7, [sp, #24]
 8002dec:	f8bd 601c 	ldrh.w	r6, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002df0:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002df4:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f

  if (token == 0U)
 8002df8:	f1bc 0f00 	cmp.w	ip, #0
 8002dfc:	d120      	bne.n	8002e40 <HAL_HCD_HC_SubmitRequest+0x64>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002dfe:	f04f 0c03 	mov.w	ip, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002e02:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002e04:	f885 c042 	strb.w	ip, [r5, #66]	; 0x42
  switch (ep_type)
 8002e08:	d024      	beq.n	8002e54 <HAL_HCD_HC_SubmitRequest+0x78>
 8002e0a:	4563      	cmp	r3, ip
 8002e0c:	d022      	beq.n	8002e54 <HAL_HCD_HC_SubmitRequest+0x78>
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d02b      	beq.n	8002e6a <HAL_HCD_HC_SubmitRequest+0x8e>

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002e12:	1863      	adds	r3, r4, r1
 8002e14:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e18:	2228      	movs	r2, #40	; 0x28
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e1a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e1e:	2400      	movs	r4, #0
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e20:	fb02 0101 	mla	r1, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
 8002e24:	e9c3 7611 	strd	r7, r6, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e28:	7c02      	ldrb	r2, [r0, #16]
 8002e2a:	6800      	ldr	r0, [r0, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002e2c:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8002e30:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e32:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e36:	3138      	adds	r1, #56	; 0x38
}
 8002e38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e3c:	f002 ba54 	b.w	80052e8 <USB_HC_StartXfer>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e40:	f04f 0e02 	mov.w	lr, #2
 8002e44:	f885 e042 	strb.w	lr, [r5, #66]	; 0x42
  switch (ep_type)
 8002e48:	2b03      	cmp	r3, #3
 8002e4a:	d8e2      	bhi.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x36>
 8002e4c:	e8df f003 	tbb	[pc, r3]
 8002e50:	02020d1c 	.word	0x02020d1c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e54:	1863      	adds	r3, r4, r1
 8002e56:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
      if (direction == 0U)
 8002e5a:	b96a      	cbnz	r2, 8002e78 <HAL_HCD_HC_SubmitRequest+0x9c>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e5c:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8002e60:	b13d      	cbz	r5, 8002e72 <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e68:	e7d3      	b.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x36>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e6a:	1863      	adds	r3, r4, r1
 8002e6c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8002e76:	e7cc      	b.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x36>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002e78:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002e7c:	2a00      	cmp	r2, #0
 8002e7e:	d0f8      	beq.n	8002e72 <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e86:	e7c4      	b.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x36>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002e88:	f1bc 0f01 	cmp.w	ip, #1
 8002e8c:	d1c1      	bne.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x36>
 8002e8e:	2a00      	cmp	r2, #0
 8002e90:	d1bf      	bne.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x36>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002e92:	1863      	adds	r3, r4, r1
 8002e94:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (length == 0U)
 8002e98:	b946      	cbnz	r6, 8002eac <HAL_HCD_HC_SubmitRequest+0xd0>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002e9a:	f883 c051 	strb.w	ip, [r3, #81]	; 0x51
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e9e:	1863      	adds	r3, r4, r1
 8002ea0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eaa:	e7b2      	b.n	8002e12 <HAL_HCD_HC_SubmitRequest+0x36>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002eac:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8002eb0:	2d00      	cmp	r5, #0
 8002eb2:	d0de      	beq.n	8002e72 <HAL_HCD_HC_SubmitRequest+0x96>
 8002eb4:	e7f3      	b.n	8002e9e <HAL_HCD_HC_SubmitRequest+0xc2>
 8002eb6:	bf00      	nop

08002eb8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ebc:	6805      	ldr	r5, [r0, #0]
{
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f002 f89e 	bl	8005004 <USB_GetMode>
 8002ec8:	2801      	cmp	r0, #1
 8002eca:	d002      	beq.n	8002ed2 <HAL_HCD_IRQHandler+0x1a>
      HCD_RXQLVL_IRQHandler(hhcd);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
  }
}
 8002ecc:	b005      	add	sp, #20
 8002ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002ed2:	6820      	ldr	r0, [r4, #0]
 8002ed4:	f002 f892 	bl	8004ffc <USB_ReadInterrupts>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d0f7      	beq.n	8002ecc <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002edc:	6820      	ldr	r0, [r4, #0]
 8002ede:	f002 f88d 	bl	8004ffc <USB_ReadInterrupts>
 8002ee2:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ee6:	6820      	ldr	r0, [r4, #0]
 8002ee8:	bf1c      	itt	ne
 8002eea:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 8002eee:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ef0:	f002 f884 	bl	8004ffc <USB_ReadInterrupts>
 8002ef4:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ef8:	6820      	ldr	r0, [r4, #0]
 8002efa:	bf1c      	itt	ne
 8002efc:	f44f 1380 	movne.w	r3, #1048576	; 0x100000
 8002f00:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002f02:	f002 f87b 	bl	8004ffc <USB_ReadInterrupts>
 8002f06:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	bf1c      	itt	ne
 8002f0e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002f12:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002f14:	f002 f872 	bl	8004ffc <USB_ReadInterrupts>
 8002f18:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	bf1c      	itt	ne
 8002f20:	2302      	movne	r3, #2
 8002f22:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002f24:	f002 f86a 	bl	8004ffc <USB_ReadInterrupts>
 8002f28:	0083      	lsls	r3, r0, #2
 8002f2a:	f100 8113 	bmi.w	8003154 <HAL_HCD_IRQHandler+0x29c>
 8002f2e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f30:	f002 f864 	bl	8004ffc <USB_ReadInterrupts>
 8002f34:	01c7      	lsls	r7, r0, #7
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f36:	6826      	ldr	r6, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f38:	f100 80ce 	bmi.w	80030d8 <HAL_HCD_IRQHandler+0x220>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f3c:	4630      	mov	r0, r6
 8002f3e:	f002 f85d 	bl	8004ffc <USB_ReadInterrupts>
 8002f42:	0701      	lsls	r1, r0, #28
 8002f44:	f100 811c 	bmi.w	8003180 <HAL_HCD_IRQHandler+0x2c8>
 8002f48:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f4a:	f002 f857 	bl	8004ffc <USB_ReadInterrupts>
 8002f4e:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f52:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f54:	d13e      	bne.n	8002fd4 <HAL_HCD_IRQHandler+0x11c>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f56:	f002 f851 	bl	8004ffc <USB_ReadInterrupts>
 8002f5a:	06c3      	lsls	r3, r0, #27
 8002f5c:	d5b6      	bpl.n	8002ecc <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f5e:	6825      	ldr	r5, [r4, #0]
 8002f60:	69ab      	ldr	r3, [r5, #24]
 8002f62:	f023 0310 	bic.w	r3, r3, #16
 8002f66:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8002f68:	6a2e      	ldr	r6, [r5, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f6a:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8002f6e:	2a02      	cmp	r2, #2
 8002f70:	d12b      	bne.n	8002fca <HAL_HCD_IRQHandler+0x112>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f72:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f76:	f1b8 0f00 	cmp.w	r8, #0
 8002f7a:	d026      	beq.n	8002fca <HAL_HCD_IRQHandler+0x112>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002f7c:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002f80:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8002f84:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8002f88:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f8a:	b1f1      	cbz	r1, 8002fca <HAL_HCD_IRQHandler+0x112>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002f8c:	4642      	mov	r2, r8
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f002 f822 	bl	8004fd8 <USB_ReadPacket>
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002f94:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8002f98:	0173      	lsls	r3, r6, #5
 8002f9a:	18e9      	adds	r1, r5, r3
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002f9c:	6c78      	ldr	r0, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002f9e:	690e      	ldr	r6, [r1, #16]
 8002fa0:	4abe      	ldr	r2, [pc, #760]	; (800329c <HAL_HCD_IRQHandler+0x3e4>)
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002fa2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002fa4:	4440      	add	r0, r8
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002fa6:	4441      	add	r1, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002fa8:	4032      	ands	r2, r6
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002faa:	6478      	str	r0, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002fac:	64f9      	str	r1, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002fae:	b15a      	cbz	r2, 8002fc8 <HAL_HCD_IRQHandler+0x110>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fb0:	58ea      	ldr	r2, [r5, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fb2:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fb6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002fba:	50ea      	str	r2, [r5, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fbc:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002fc0:	f083 0301 	eor.w	r3, r3, #1
 8002fc4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8002fc8:	6825      	ldr	r5, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fca:	69ab      	ldr	r3, [r5, #24]
 8002fcc:	f043 0310 	orr.w	r3, r3, #16
 8002fd0:	61ab      	str	r3, [r5, #24]
 8002fd2:	e77b      	b.n	8002ecc <HAL_HCD_IRQHandler+0x14>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fd4:	f002 fa62 	bl	800549c <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fd8:	68a1      	ldr	r1, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fda:	4680      	mov	r8, r0
 8002fdc:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fde:	2900      	cmp	r1, #0
 8002fe0:	f000 80ca 	beq.w	8003178 <HAL_HCD_IRQHandler+0x2c0>
 8002fe4:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8002fe8:	2600      	movs	r6, #0
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002fea:	f04f 0902 	mov.w	r9, #2
 8002fee:	e03a      	b.n	8003066 <HAL_HCD_IRQHandler+0x1ae>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ff0:	075b      	lsls	r3, r3, #29
 8002ff2:	f140 80cc 	bpl.w	800318e <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002ff6:	2304      	movs	r3, #4
 8002ff8:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	60fb      	str	r3, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	059b      	lsls	r3, r3, #22
 8003006:	f100 8100 	bmi.w	800320a <HAL_HCD_IRQHandler+0x352>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	07d8      	lsls	r0, r3, #31
 800300e:	f140 80cc 	bpl.w	80031aa <HAL_HCD_IRQHandler+0x2f2>
    if (hhcd->Init.dma_enable != 0U)
 8003012:	6923      	ldr	r3, [r4, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f040 819a 	bne.w	800334e <HAL_HCD_IRQHandler+0x496>
 800301a:	ea4f 038a 	mov.w	r3, sl, lsl #2
    hhcd->hc[ch_num].state = HC_XFRC;
 800301e:	eb03 010a 	add.w	r1, r3, sl
 8003022:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003026:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8003028:	f04f 0c01 	mov.w	ip, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 800302c:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 800302e:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003032:	f8c7 c008 	str.w	ip, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003036:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 800303a:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 800303e:	f000 814d 	beq.w	80032dc <HAL_HCD_IRQHandler+0x424>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003042:	2803      	cmp	r0, #3
 8003044:	f000 8237 	beq.w	80034b6 <HAL_HCD_IRQHandler+0x5fe>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8003048:	4453      	add	r3, sl
 800304a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800304e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8003052:	f082 0201 	eor.w	r2, r2, #1
 8003056:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800305a:	6820      	ldr	r0, [r4, #0]
 800305c:	68a1      	ldr	r1, [r4, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800305e:	3601      	adds	r6, #1
 8003060:	42b1      	cmp	r1, r6
 8003062:	f240 8089 	bls.w	8003178 <HAL_HCD_IRQHandler+0x2c0>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003066:	f006 030f 	and.w	r3, r6, #15
 800306a:	fa28 f303 	lsr.w	r3, r8, r3
 800306e:	07da      	lsls	r2, r3, #31
 8003070:	d5f5      	bpl.n	800305e <HAL_HCD_IRQHandler+0x1a6>
 8003072:	0173      	lsls	r3, r6, #5
 8003074:	fa5f fa86 	uxtb.w	sl, r6
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003078:	595b      	ldr	r3, [r3, r5]
 800307a:	ea4f 1b4a 	mov.w	fp, sl, lsl #5
 800307e:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8003082:	eb02 070b 	add.w	r7, r2, fp
 8003086:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800308a:	68bb      	ldr	r3, [r7, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800308c:	d1b0      	bne.n	8002ff0 <HAL_HCD_IRQHandler+0x138>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800308e:	f013 0304 	ands.w	r3, r3, #4
 8003092:	f040 8083 	bne.w	800319c <HAL_HCD_IRQHandler+0x2e4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003096:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800309a:	f01c 0c20 	ands.w	ip, ip, #32
 800309e:	f000 80c2 	beq.w	8003226 <HAL_HCD_IRQHandler+0x36e>
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030a2:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030a6:	f04f 0c20 	mov.w	ip, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030aa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80030ae:	f8c7 c008 	str.w	ip, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80030b2:	f892 c03d 	ldrb.w	ip, [r2, #61]	; 0x3d
 80030b6:	f1bc 0f01 	cmp.w	ip, #1
 80030ba:	d1d0      	bne.n	800305e <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].do_ping = 0U;
 80030bc:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030c0:	68fb      	ldr	r3, [r7, #12]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80030c2:	f882 905c 	strb.w	r9, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030c6:	f043 0302 	orr.w	r3, r3, #2
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ca:	4651      	mov	r1, sl
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030cc:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030ce:	f002 f9eb 	bl	80054a8 <USB_HC_Halt>
 80030d2:	6820      	ldr	r0, [r4, #0]
 80030d4:	68a1      	ldr	r1, [r4, #8]
 80030d6:	e7c2      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80030d8:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80030dc:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80030de:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80030e2:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80030e4:	9b03      	ldr	r3, [sp, #12]
 80030e6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80030ea:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030ec:	9b02      	ldr	r3, [sp, #8]
 80030ee:	0798      	lsls	r0, r3, #30
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030f0:	4637      	mov	r7, r6
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80030f2:	d507      	bpl.n	8003104 <HAL_HCD_IRQHandler+0x24c>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80030f4:	9b02      	ldr	r3, [sp, #8]
 80030f6:	07d9      	lsls	r1, r3, #31
 80030f8:	f100 8137 	bmi.w	800336a <HAL_HCD_IRQHandler+0x4b2>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80030fc:	9b03      	ldr	r3, [sp, #12]
 80030fe:	f043 0302 	orr.w	r3, r3, #2
 8003102:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003104:	9b02      	ldr	r3, [sp, #8]
 8003106:	071a      	lsls	r2, r3, #28
 8003108:	d518      	bpl.n	800313c <HAL_HCD_IRQHandler+0x284>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800310a:	9b03      	ldr	r3, [sp, #12]
 800310c:	f043 0308 	orr.w	r3, r3, #8
 8003110:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003112:	9b02      	ldr	r3, [sp, #8]
 8003114:	075b      	lsls	r3, r3, #29
 8003116:	f140 8130 	bpl.w	800337a <HAL_HCD_IRQHandler+0x4c2>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800311a:	69a1      	ldr	r1, [r4, #24]
 800311c:	2902      	cmp	r1, #2
 800311e:	f000 813e 	beq.w	800339e <HAL_HCD_IRQHandler+0x4e6>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003122:	68e3      	ldr	r3, [r4, #12]
 8003124:	2b01      	cmp	r3, #1
        {
          USBx_HOST->HFIR = 60000U;
 8003126:	bf04      	itt	eq
 8003128:	f64e 2360 	movweq	r3, #60000	; 0xea60
 800312c:	f8c6 3404 	streq.w	r3, [r6, #1028]	; 0x404
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003130:	4620      	mov	r0, r4
 8003132:	f002 fef7 	bl	8005f24 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003136:	4620      	mov	r0, r4
 8003138:	f002 feea 	bl	8005f10 <HAL_HCD_Connect_Callback>
 800313c:	6826      	ldr	r6, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800313e:	9b02      	ldr	r3, [sp, #8]
 8003140:	0698      	lsls	r0, r3, #26
 8003142:	d503      	bpl.n	800314c <HAL_HCD_IRQHandler+0x294>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003144:	9b03      	ldr	r3, [sp, #12]
 8003146:	f043 0320 	orr.w	r3, r3, #32
 800314a:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800314c:	9b03      	ldr	r3, [sp, #12]
 800314e:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8003152:	e6f3      	b.n	8002f3c <HAL_HCD_IRQHandler+0x84>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003154:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8003158:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800315c:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8003160:	4620      	mov	r0, r4
 8003162:	f002 fed9 	bl	8005f18 <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003166:	2101      	movs	r1, #1
 8003168:	6820      	ldr	r0, [r4, #0]
 800316a:	f001 ff4f 	bl	800500c <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800316e:	6820      	ldr	r0, [r4, #0]
 8003170:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003174:	6143      	str	r3, [r0, #20]
 8003176:	e6db      	b.n	8002f30 <HAL_HCD_IRQHandler+0x78>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003178:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317c:	6143      	str	r3, [r0, #20]
 800317e:	e6ea      	b.n	8002f56 <HAL_HCD_IRQHandler+0x9e>
      HAL_HCD_SOF_Callback(hhcd);
 8003180:	4620      	mov	r0, r4
 8003182:	f002 fec1 	bl	8005f08 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003186:	6820      	ldr	r0, [r4, #0]
 8003188:	2308      	movs	r3, #8
 800318a:	6143      	str	r3, [r0, #20]
 800318c:	e6dd      	b.n	8002f4a <HAL_HCD_IRQHandler+0x92>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	0699      	lsls	r1, r3, #26
 8003192:	f140 8085 	bpl.w	80032a0 <HAL_HCD_IRQHandler+0x3e8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003196:	2320      	movs	r3, #32
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	e732      	b.n	8003002 <HAL_HCD_IRQHandler+0x14a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800319c:	2304      	movs	r3, #4
 800319e:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f043 0302 	orr.w	r3, r3, #2
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	e759      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	0799      	lsls	r1, r3, #30
 80031ae:	f140 80a2 	bpl.w	80032f6 <HAL_HCD_IRQHandler+0x43e>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031b2:	ea4f 038a 	mov.w	r3, sl, lsl #2
 80031b6:	eb03 000a 	add.w	r0, r3, sl
 80031ba:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031be:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031c2:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031c6:	f02c 0c02 	bic.w	ip, ip, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031ca:	2901      	cmp	r1, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031cc:	f8c7 c00c 	str.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031d0:	f000 80e2 	beq.w	8003398 <HAL_HCD_IRQHandler+0x4e0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80031d4:	2905      	cmp	r1, #5
 80031d6:	f000 80df 	beq.w	8003398 <HAL_HCD_IRQHandler+0x4e0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80031da:	2906      	cmp	r1, #6
 80031dc:	f000 8135 	beq.w	800344a <HAL_HCD_IRQHandler+0x592>
 80031e0:	2908      	cmp	r1, #8
 80031e2:	f000 8132 	beq.w	800344a <HAL_HCD_IRQHandler+0x592>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80031e6:	2903      	cmp	r1, #3
 80031e8:	f000 81c0 	beq.w	800356c <HAL_HCD_IRQHandler+0x6b4>
 80031ec:	2328      	movs	r3, #40	; 0x28
 80031ee:	fb03 430a 	mla	r3, r3, sl, r4
 80031f2:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80031f6:	f8c7 9008 	str.w	r9, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031fa:	460a      	mov	r2, r1
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80031fc:	4620      	mov	r0, r4
 80031fe:	4651      	mov	r1, sl
 8003200:	f002 fe8e 	bl	8005f20 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003204:	6820      	ldr	r0, [r4, #0]
 8003206:	68a1      	ldr	r1, [r4, #8]
 8003208:	e729      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800320a:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800320c:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800320e:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003212:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003214:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003216:	f002 f947 	bl	80054a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800321a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	68a1      	ldr	r1, [r4, #8]
 8003224:	e71b      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	065b      	lsls	r3, r3, #25
 800322a:	f100 80db 	bmi.w	80033e4 <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8003234:	f040 80ef 	bne.w	8003416 <HAL_HCD_IRQHandler+0x55e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003238:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800323c:	f01c 0f01 	tst.w	ip, #1
 8003240:	f040 8125 	bne.w	800348e <HAL_HCD_IRQHandler+0x5d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f013 0308 	ands.w	r3, r3, #8
 800324a:	f040 816c 	bne.w	8003526 <HAL_HCD_IRQHandler+0x66e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800324e:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8003252:	f01c 0f10 	tst.w	ip, #16
 8003256:	f000 813e 	beq.w	80034d6 <HAL_HCD_IRQHandler+0x61e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800325a:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 800325e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    hhcd->hc[ch_num].state = HC_NAK;
 8003262:	2103      	movs	r1, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003264:	6593      	str	r3, [r2, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003266:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 800326a:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800326e:	b943      	cbnz	r3, 8003282 <HAL_HCD_IRQHandler+0x3ca>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003270:	2328      	movs	r3, #40	; 0x28
 8003272:	fb03 430a 	mla	r3, r3, sl, r4
 8003276:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800327a:	b912      	cbnz	r2, 8003282 <HAL_HCD_IRQHandler+0x3ca>
        hhcd->hc[ch_num].do_ping = 1U;
 800327c:	2201      	movs	r2, #1
 800327e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003288:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800328a:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328c:	f002 f90c 	bl	80054a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003290:	2310      	movs	r3, #16
 8003292:	60bb      	str	r3, [r7, #8]
 8003294:	6820      	ldr	r0, [r4, #0]
 8003296:	68a1      	ldr	r1, [r4, #8]
 8003298:	e6e1      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
 800329a:	bf00      	nop
 800329c:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	071b      	lsls	r3, r3, #28
 80032a4:	f100 8086 	bmi.w	80033b4 <HAL_HCD_IRQHandler+0x4fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	0559      	lsls	r1, r3, #21
 80032ac:	f57f aea9 	bpl.w	8003002 <HAL_HCD_IRQHandler+0x14a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	9201      	str	r2, [sp, #4]
 80032b4:	f043 0302 	orr.w	r3, r3, #2
 80032b8:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ba:	4651      	mov	r1, sl
 80032bc:	f002 f8f4 	bl	80054a8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032c0:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032c4:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032c6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032ca:	60b9      	str	r1, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032cc:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032d2:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032d6:	9a01      	ldr	r2, [sp, #4]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	e692      	b.n	8003002 <HAL_HCD_IRQHandler+0x14a>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032dc:	68fa      	ldr	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032de:	6820      	ldr	r0, [r4, #0]
 80032e0:	9301      	str	r3, [sp, #4]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032e2:	f042 0202 	orr.w	r2, r2, #2
 80032e6:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032e8:	4651      	mov	r1, sl
 80032ea:	f002 f8dd 	bl	80054a8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032ee:	2210      	movs	r2, #16
 80032f0:	60ba      	str	r2, [r7, #8]
 80032f2:	9b01      	ldr	r3, [sp, #4]
 80032f4:	e6a8      	b.n	8003048 <HAL_HCD_IRQHandler+0x190>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	6820      	ldr	r0, [r4, #0]
 80032fa:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 80032fe:	f040 808c 	bne.w	800341a <HAL_HCD_IRQHandler+0x562>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	06d2      	lsls	r2, r2, #27
 8003306:	f57f af7e 	bpl.w	8003206 <HAL_HCD_IRQHandler+0x34e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800330a:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 800330e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8003312:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8003316:	2a03      	cmp	r2, #3
 8003318:	f000 811b 	beq.w	8003552 <HAL_HCD_IRQHandler+0x69a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800331c:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8003320:	d111      	bne.n	8003346 <HAL_HCD_IRQHandler+0x48e>
      if (hhcd->Init.dma_enable == 0U)
 8003322:	6923      	ldr	r3, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003324:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8003326:	b973      	cbnz	r3, 8003346 <HAL_HCD_IRQHandler+0x48e>
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003328:	68fb      	ldr	r3, [r7, #12]
        hhcd->hc[ch_num].state = HC_NAK;
 800332a:	2228      	movs	r2, #40	; 0x28
 800332c:	fb02 420a 	mla	r2, r2, sl, r4
 8003330:	f04f 0c03 	mov.w	ip, #3
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003334:	f043 0302 	orr.w	r3, r3, #2
        hhcd->hc[ch_num].state = HC_NAK;
 8003338:	f882 c05d 	strb.w	ip, [r2, #93]	; 0x5d
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800333c:	4651      	mov	r1, sl
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800333e:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003340:	f002 f8b2 	bl	80054a8 <USB_HC_Halt>
 8003344:	6820      	ldr	r0, [r4, #0]
 8003346:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003348:	2310      	movs	r3, #16
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	e687      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800334e:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8003352:	eb03 010a 	add.w	r1, r3, sl
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003356:	6938      	ldr	r0, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003358:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800335c:	f3c0 0c12 	ubfx	ip, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003360:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8003362:	eba0 000c 	sub.w	r0, r0, ip
 8003366:	64c8      	str	r0, [r1, #76]	; 0x4c
 8003368:	e659      	b.n	800301e <HAL_HCD_IRQHandler+0x166>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800336a:	69b3      	ldr	r3, [r6, #24]
 800336c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003370:	61b3      	str	r3, [r6, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8003372:	4620      	mov	r0, r4
 8003374:	f002 fdcc 	bl	8005f10 <HAL_HCD_Connect_Callback>
 8003378:	e6c0      	b.n	80030fc <HAL_HCD_IRQHandler+0x244>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800337a:	4620      	mov	r0, r4
 800337c:	f002 fdd6 	bl	8005f2c <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003380:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8003384:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003388:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800338c:	6826      	ldr	r6, [r4, #0]
 800338e:	69b3      	ldr	r3, [r6, #24]
 8003390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003394:	61b3      	str	r3, [r6, #24]
 8003396:	e6d2      	b.n	800313e <HAL_HCD_IRQHandler+0x286>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003398:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 800339c:	e72b      	b.n	80031f6 <HAL_HCD_IRQHandler+0x33e>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800339e:	9b02      	ldr	r3, [sp, #8]
 80033a0:	6820      	ldr	r0, [r4, #0]
 80033a2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80033a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033aa:	bf18      	it	ne
 80033ac:	2101      	movne	r1, #1
 80033ae:	f001 fe2d 	bl	800500c <USB_InitFSLSPClkSel>
 80033b2:	e6bd      	b.n	8003130 <HAL_HCD_IRQHandler+0x278>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	9201      	str	r2, [sp, #4]
    hhcd->hc[ch_num].state = HC_STALL;
 80033b8:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 80033bc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033c0:	f043 0302 	orr.w	r3, r3, #2
 80033c4:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80033c6:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033ca:	f04f 0e10 	mov.w	lr, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033ce:	2308      	movs	r3, #8
    hhcd->hc[ch_num].state = HC_STALL;
 80033d0:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80033d4:	f8c7 e008 	str.w	lr, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033d8:	4651      	mov	r1, sl
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80033da:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033dc:	f002 f864 	bl	80054a8 <USB_HC_Halt>
 80033e0:	9a01      	ldr	r2, [sp, #4]
 80033e2:	e60e      	b.n	8003002 <HAL_HCD_IRQHandler+0x14a>
    hhcd->hc[ch_num].state = HC_NYET;
 80033e4:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 80033e8:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    hhcd->hc[ch_num].do_ping = 1U;
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f2:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033f4:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033f8:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].state = HC_NYET;
 80033fc:	f04f 0c04 	mov.w	ip, #4
 8003400:	f883 c05d 	strb.w	ip, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003404:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003406:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003408:	f002 f84e 	bl	80054a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800340c:	2340      	movs	r3, #64	; 0x40
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	6820      	ldr	r0, [r4, #0]
 8003412:	68a1      	ldr	r1, [r4, #8]
 8003414:	e623      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	e6f9      	b.n	800320e <HAL_HCD_IRQHandler+0x356>
    hhcd->hc[ch_num].ErrCnt++;
 800341a:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 800341e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003422:	68f9      	ldr	r1, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003424:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003426:	f041 0c02 	orr.w	ip, r1, #2
    hhcd->hc[ch_num].ErrCnt++;
 800342a:	3201      	adds	r2, #1
    hhcd->hc[ch_num].state = HC_XACTERR;
 800342c:	f04f 0e06 	mov.w	lr, #6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003430:	f8c7 c00c 	str.w	ip, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003434:	4651      	mov	r1, sl
    hhcd->hc[ch_num].ErrCnt++;
 8003436:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003438:	f883 e05d 	strb.w	lr, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800343c:	f002 f834 	bl	80054a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	6820      	ldr	r0, [r4, #0]
 8003446:	68a1      	ldr	r1, [r4, #8]
 8003448:	e609      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].ErrCnt++;
 800344a:	eb03 000a 	add.w	r0, r3, sl
 800344e:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8003452:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003454:	3101      	adds	r1, #1
 8003456:	6581      	str	r1, [r0, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003458:	2903      	cmp	r1, #3
        hhcd->hc[ch_num].ErrCnt = 0U;
 800345a:	f04f 0128 	mov.w	r1, #40	; 0x28
 800345e:	fb01 410a 	mla	r1, r1, sl, r4
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003462:	d973      	bls.n	800354c <HAL_HCD_IRQHandler+0x694>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003464:	f04f 0c00 	mov.w	ip, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003468:	2004      	movs	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 800346a:	f8c1 c058 	str.w	ip, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800346e:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003472:	f852 000b 	ldr.w	r0, [r2, fp]
 8003476:	4453      	add	r3, sl
 8003478:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800347c:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003480:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003484:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003488:	f842 000b 	str.w	r0, [r2, fp]
 800348c:	e6b3      	b.n	80031f6 <HAL_HCD_IRQHandler+0x33e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800348e:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003490:	eb0a 0b8a 	add.w	fp, sl, sl, lsl #2
 8003494:	eb04 0bcb 	add.w	fp, r4, fp, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003498:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 800349c:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a0:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80034a2:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034a4:	f002 f800 	bl	80054a8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80034a8:	2301      	movs	r3, #1
 80034aa:	60bb      	str	r3, [r7, #8]
 80034ac:	6820      	ldr	r0, [r4, #0]
 80034ae:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80034b0:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
 80034b4:	e5d3      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034b6:	f852 000b 	ldr.w	r0, [r2, fp]
 80034ba:	9301      	str	r3, [sp, #4]
 80034bc:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80034c0:	f842 000b 	str.w	r0, [r2, fp]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80034c4:	f881 c05c 	strb.w	ip, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80034c8:	4662      	mov	r2, ip
 80034ca:	4651      	mov	r1, sl
 80034cc:	4620      	mov	r0, r4
 80034ce:	f002 fd27 	bl	8005f20 <HAL_HCD_HC_NotifyURBChange_Callback>
 80034d2:	9b01      	ldr	r3, [sp, #4]
 80034d4:	e5b8      	b.n	8003048 <HAL_HCD_IRQHandler+0x190>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	061b      	lsls	r3, r3, #24
 80034da:	d456      	bmi.n	800358a <HAL_HCD_IRQHandler+0x6d2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	055b      	lsls	r3, r3, #21
 80034e0:	d465      	bmi.n	80035ae <HAL_HCD_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	079b      	lsls	r3, r3, #30
 80034e6:	f57f adba 	bpl.w	800305e <HAL_HCD_IRQHandler+0x1a6>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034ea:	2128      	movs	r1, #40	; 0x28
 80034ec:	fb01 410a 	mla	r1, r1, sl, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034f0:	68f8      	ldr	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034f2:	f891 305d 	ldrb.w	r3, [r1, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034f6:	f020 0002 	bic.w	r0, r0, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034fa:	2b01      	cmp	r3, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80034fc:	60f8      	str	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80034fe:	d06e      	beq.n	80035de <HAL_HCD_IRQHandler+0x726>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003500:	2b03      	cmp	r3, #3
 8003502:	d069      	beq.n	80035d8 <HAL_HCD_IRQHandler+0x720>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003504:	2b04      	cmp	r3, #4
 8003506:	d067      	beq.n	80035d8 <HAL_HCD_IRQHandler+0x720>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003508:	2b05      	cmp	r3, #5
 800350a:	f000 808c 	beq.w	8003626 <HAL_HCD_IRQHandler+0x76e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800350e:	2b06      	cmp	r3, #6
 8003510:	d073      	beq.n	80035fa <HAL_HCD_IRQHandler+0x742>
 8003512:	2b08      	cmp	r3, #8
 8003514:	d071      	beq.n	80035fa <HAL_HCD_IRQHandler+0x742>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003516:	2328      	movs	r3, #40	; 0x28
 8003518:	fb03 430a 	mla	r3, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800351c:	f8c7 9008 	str.w	r9, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003520:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8003524:	e66a      	b.n	80031fc <HAL_HCD_IRQHandler+0x344>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003526:	2308      	movs	r3, #8
 8003528:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003530:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003532:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003534:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003538:	f001 ffb6 	bl	80054a8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800353c:	eb04 03ca 	add.w	r3, r4, sl, lsl #3
 8003540:	2205      	movs	r2, #5
 8003542:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8003546:	6820      	ldr	r0, [r4, #0]
 8003548:	68a1      	ldr	r1, [r4, #8]
 800354a:	e588      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800354c:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
 8003550:	e78f      	b.n	8003472 <HAL_HCD_IRQHandler+0x5ba>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003552:	68fa      	ldr	r2, [r7, #12]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003554:	2128      	movs	r1, #40	; 0x28
 8003556:	fb01 410a 	mla	r1, r1, sl, r4
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800355a:	f042 0202 	orr.w	r2, r2, #2
      hhcd->hc[ch_num].ErrCnt = 0U;
 800355e:	658b      	str	r3, [r1, #88]	; 0x58
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003560:	4651      	mov	r1, sl
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003562:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003564:	f001 ffa0 	bl	80054a8 <USB_HC_Halt>
 8003568:	6820      	ldr	r0, [r4, #0]
 800356a:	e6ec      	b.n	8003346 <HAL_HCD_IRQHandler+0x48e>
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800356c:	f852 300b 	ldr.w	r3, [r2, fp]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003570:	2128      	movs	r1, #40	; 0x28
 8003572:	fb01 410a 	mla	r1, r1, sl, r4
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003576:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800357a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800357e:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003582:	f842 300b 	str.w	r3, [r2, fp]
 8003586:	2102      	movs	r1, #2
 8003588:	e635      	b.n	80031f6 <HAL_HCD_IRQHandler+0x33e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003590:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003592:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003594:	f001 ff88 	bl	80054a8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003598:	2328      	movs	r3, #40	; 0x28
 800359a:	fb03 4a0a 	mla	sl, r3, sl, r4
 800359e:	2206      	movs	r2, #6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035a0:	2380      	movs	r3, #128	; 0x80
    hhcd->hc[ch_num].state = HC_XACTERR;
 80035a2:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 80035a6:	6820      	ldr	r0, [r4, #0]
 80035a8:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	e557      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b4:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035b6:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035b8:	f001 ff76 	bl	80054a8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035bc:	2328      	movs	r3, #40	; 0x28
 80035be:	fb03 4a0a 	mla	sl, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035c2:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035c8:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80035ce:	60ba      	str	r2, [r7, #8]
 80035d0:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80035d2:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 80035d6:	e542      	b.n	800305e <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80035d8:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
 80035dc:	e79b      	b.n	8003516 <HAL_HCD_IRQHandler+0x65e>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035de:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80035e2:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80035e6:	1e93      	subs	r3, r2, #2
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d894      	bhi.n	8003516 <HAL_HCD_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80035ec:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
 80035f0:	f083 0301 	eor.w	r3, r3, #1
 80035f4:	f881 3051 	strb.w	r3, [r1, #81]	; 0x51
 80035f8:	e78d      	b.n	8003516 <HAL_HCD_IRQHandler+0x65e>
      hhcd->hc[ch_num].ErrCnt++;
 80035fa:	2328      	movs	r3, #40	; 0x28
 80035fc:	fb03 430a 	mla	r3, r3, sl, r4
 8003600:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8003602:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003604:	2903      	cmp	r1, #3
      hhcd->hc[ch_num].ErrCnt++;
 8003606:	6599      	str	r1, [r3, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003608:	d910      	bls.n	800362c <HAL_HCD_IRQHandler+0x774>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800360a:	2000      	movs	r0, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800360c:	2104      	movs	r1, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 800360e:	6598      	str	r0, [r3, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003610:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003614:	f852 300b 	ldr.w	r3, [r2, fp]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003618:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800361c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003620:	f842 300b 	str.w	r3, [r2, fp]
 8003624:	e777      	b.n	8003516 <HAL_HCD_IRQHandler+0x65e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003626:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
 800362a:	e774      	b.n	8003516 <HAL_HCD_IRQHandler+0x65e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800362c:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8003630:	e7f0      	b.n	8003614 <HAL_HCD_IRQHandler+0x75c>
 8003632:	bf00      	nop

08003634 <HAL_HCD_Start>:
{
 8003634:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8003636:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800363a:	2b01      	cmp	r3, #1
 800363c:	d00e      	beq.n	800365c <HAL_HCD_Start+0x28>
 800363e:	4604      	mov	r4, r0
 8003640:	2501      	movs	r5, #1
 8003642:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003646:	6800      	ldr	r0, [r0, #0]
 8003648:	f001 fc9e 	bl	8004f88 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800364c:	4629      	mov	r1, r5
 800364e:	6820      	ldr	r0, [r4, #0]
 8003650:	f001 fcfa 	bl	8005048 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003654:	2000      	movs	r0, #0
 8003656:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800365a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 800365c:	2002      	movs	r0, #2
}
 800365e:	bd38      	pop	{r3, r4, r5, pc}

08003660 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8003660:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8003664:	2b01      	cmp	r3, #1
 8003666:	d00b      	beq.n	8003680 <HAL_HCD_Stop+0x20>
{
 8003668:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 800366a:	2301      	movs	r3, #1
 800366c:	4604      	mov	r4, r0
 800366e:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003672:	6800      	ldr	r0, [r0, #0]
 8003674:	f001 ff76 	bl	8005564 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003678:	2000      	movs	r0, #0
 800367a:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800367e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8003680:	2002      	movs	r0, #2
}
 8003682:	4770      	bx	lr

08003684 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8003684:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003688:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800368c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop

08003694 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8003694:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003698:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800369c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800369e:	4770      	bx	lr

080036a0 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80036a0:	6800      	ldr	r0, [r0, #0]
 80036a2:	f001 bd7b 	b.w	800519c <USB_GetCurrentFrame>
 80036a6:	bf00      	nop

080036a8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036a8:	2800      	cmp	r0, #0
 80036aa:	f000 809f 	beq.w	80037ec <HAL_I2C_Init+0x144>
{
 80036ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036b0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036b4:	4604      	mov	r4, r0
 80036b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 808f 	beq.w	80037de <HAL_I2C_Init+0x136>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c0:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e0:	f000 fdb6 	bl	8004250 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036e4:	6861      	ldr	r1, [r4, #4]
 80036e6:	4b4b      	ldr	r3, [pc, #300]	; (8003814 <HAL_I2C_Init+0x16c>)
 80036e8:	4299      	cmp	r1, r3
 80036ea:	d84b      	bhi.n	8003784 <HAL_I2C_Init+0xdc>
 80036ec:	4b4a      	ldr	r3, [pc, #296]	; (8003818 <HAL_I2C_Init+0x170>)
 80036ee:	4298      	cmp	r0, r3
 80036f0:	d97a      	bls.n	80037e8 <HAL_I2C_Init+0x140>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036f2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80036f4:	4b49      	ldr	r3, [pc, #292]	; (800381c <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036f6:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80036f8:	fba3 6300 	umull	r6, r3, r3, r0
 80036fc:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036fe:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003702:	431d      	orrs	r5, r3
 8003704:	6055      	str	r5, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003706:	6a15      	ldr	r5, [r2, #32]
 8003708:	3301      	adds	r3, #1
 800370a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800370e:	432b      	orrs	r3, r5
 8003710:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003712:	69d5      	ldr	r5, [r2, #28]
 8003714:	0049      	lsls	r1, r1, #1
 8003716:	1e43      	subs	r3, r0, #1
 8003718:	fbb3 f3f1 	udiv	r3, r3, r1
 800371c:	3301      	adds	r3, #1
 800371e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003722:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8003726:	2b04      	cmp	r3, #4
 8003728:	bf38      	it	cc
 800372a:	2304      	movcc	r3, #4
 800372c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003730:	432b      	orrs	r3, r5
 8003732:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003734:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8003738:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800373a:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800373c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8003740:	432b      	orrs	r3, r5
 8003742:	4303      	orrs	r3, r0
 8003744:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003746:	6890      	ldr	r0, [r2, #8]
 8003748:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800374a:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800374c:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8003750:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003754:	4329      	orrs	r1, r5
 8003756:	4301      	orrs	r1, r0
 8003758:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800375a:	68d1      	ldr	r1, [r2, #12]
 800375c:	69a0      	ldr	r0, [r4, #24]
 800375e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003762:	4303      	orrs	r3, r0
 8003764:	430b      	orrs	r3, r1
 8003766:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003768:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376a:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 800376c:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8003770:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 8003772:	6011      	str	r1, [r2, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8003774:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003776:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003778:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800377c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800377e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003784:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_I2C_Init+0x178>)
 8003786:	4298      	cmp	r0, r3
 8003788:	d92e      	bls.n	80037e8 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378e:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003790:	4f24      	ldr	r7, [pc, #144]	; (8003824 <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003792:	fba3 5300 	umull	r5, r3, r3, r0
 8003796:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003798:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800379c:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800379e:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037a2:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037a4:	fb03 f305 	mul.w	r3, r3, r5
 80037a8:	fba7 5303 	umull	r5, r3, r7, r3
 80037ac:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037ae:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037b0:	099b      	lsrs	r3, r3, #6
 80037b2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80037b6:	3301      	adds	r3, #1
 80037b8:	432b      	orrs	r3, r5
 80037ba:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037bc:	69d5      	ldr	r5, [r2, #28]
 80037be:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80037c2:	3801      	subs	r0, #1
 80037c4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80037c8:	b996      	cbnz	r6, 80037f0 <HAL_I2C_Init+0x148>
 80037ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80037ce:	fbb0 f0f1 	udiv	r0, r0, r1
 80037d2:	3001      	adds	r0, #1
 80037d4:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80037d8:	b9c0      	cbnz	r0, 800380c <HAL_I2C_Init+0x164>
 80037da:	2301      	movs	r3, #1
 80037dc:	e7a8      	b.n	8003730 <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 80037de:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80037e2:	f7fe fa17 	bl	8001c14 <HAL_I2C_MspInit>
 80037e6:	e76b      	b.n	80036c0 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 80037e8:	2001      	movs	r0, #1
}
 80037ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80037ec:	2001      	movs	r0, #1
}
 80037ee:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037f0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80037f4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80037f8:	fbb0 f0f1 	udiv	r0, r0, r1
 80037fc:	3001      	adds	r0, #1
 80037fe:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003802:	2800      	cmp	r0, #0
 8003804:	d0e9      	beq.n	80037da <HAL_I2C_Init+0x132>
 8003806:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 800380a:	e791      	b.n	8003730 <HAL_I2C_Init+0x88>
 800380c:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 8003810:	e78e      	b.n	8003730 <HAL_I2C_Init+0x88>
 8003812:	bf00      	nop
 8003814:	000186a0 	.word	0x000186a0
 8003818:	001e847f 	.word	0x001e847f
 800381c:	431bde83 	.word	0x431bde83
 8003820:	003d08ff 	.word	0x003d08ff
 8003824:	10624dd3 	.word	0x10624dd3

08003828 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003828:	2800      	cmp	r0, #0
 800382a:	f000 8085 	beq.w	8003938 <HAL_I2S_Init+0x110>
{
 800382e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003830:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003834:	4604      	mov	r4, r0
 8003836:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800383a:	2b00      	cmp	r3, #0
 800383c:	d075      	beq.n	800392a <HAL_I2S_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800383e:	2202      	movs	r2, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003840:	6821      	ldr	r1, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 8003842:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003846:	69c8      	ldr	r0, [r1, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003848:	6963      	ldr	r3, [r4, #20]
 800384a:	68e5      	ldr	r5, [r4, #12]
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800384c:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 8003850:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003854:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003856:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8003858:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800385a:	d027      	beq.n	80038ac <HAL_I2S_Init+0x84>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800385c:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 800385e:	2d00      	cmp	r5, #0
 8003860:	bf0c      	ite	eq
 8003862:	2510      	moveq	r5, #16
 8003864:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003866:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003868:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 800386a:	bf98      	it	ls
 800386c:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800386e:	f000 fdaf 	bl	80043d0 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003872:	6922      	ldr	r2, [r4, #16]
 8003874:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003878:	d060      	beq.n	800393c <HAL_I2S_Init+0x114>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800387a:	fbb0 f0f5 	udiv	r0, r0, r5
 800387e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003882:	0043      	lsls	r3, r0, #1
 8003884:	6960      	ldr	r0, [r4, #20]
 8003886:	fbb3 f3f0 	udiv	r3, r3, r0
 800388a:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800388c:	4935      	ldr	r1, [pc, #212]	; (8003964 <HAL_I2S_Init+0x13c>)
 800388e:	fba1 1303 	umull	r1, r3, r1, r3
 8003892:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003894:	0859      	lsrs	r1, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003896:	1e88      	subs	r0, r1, #2
 8003898:	28fd      	cmp	r0, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800389a:	f003 0301 	and.w	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800389e:	d95a      	bls.n	8003956 <HAL_I2S_Init+0x12e>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038a0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80038a2:	f043 0310 	orr.w	r3, r3, #16
 80038a6:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 80038a8:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 80038aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ac:	6922      	ldr	r2, [r4, #16]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038ae:	69a7      	ldr	r7, [r4, #24]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038b0:	f8d4 e020 	ldr.w	lr, [r4, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038b4:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8003978 <HAL_I2S_Init+0x150>
 80038b8:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038bc:	4313      	orrs	r3, r2
 80038be:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038c0:	ea46 0300 	orr.w	r3, r6, r0
 80038c4:	69ca      	ldr	r2, [r1, #28]
 80038c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038ca:	433b      	orrs	r3, r7
 80038cc:	432b      	orrs	r3, r5
 80038ce:	ea02 020c 	and.w	r2, r2, ip
 80038d2:	4313      	orrs	r3, r2
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038d4:	f1be 0f01 	cmp.w	lr, #1
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038d8:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038da:	d120      	bne.n	800391e <HAL_I2S_Init+0xf6>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038dc:	4a22      	ldr	r2, [pc, #136]	; (8003968 <HAL_I2S_Init+0x140>)
 80038de:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_I2S_Init+0x144>)
 80038e0:	4291      	cmp	r1, r2
 80038e2:	bf0c      	ite	eq
 80038e4:	4619      	moveq	r1, r3
 80038e6:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038ea:	4b21      	ldr	r3, [pc, #132]	; (8003970 <HAL_I2S_Init+0x148>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038ec:	69ca      	ldr	r2, [r1, #28]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80038ee:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038f0:	ea02 020c 	and.w	r2, r2, ip
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038f4:	f04f 0c02 	mov.w	ip, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038f8:	61ca      	str	r2, [r1, #28]
 80038fa:	ea40 0307 	orr.w	r3, r0, r7
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80038fe:	f8c1 c020 	str.w	ip, [r1, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003902:	69ca      	ldr	r2, [r1, #28]
 8003904:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003908:	432b      	orrs	r3, r5
 800390a:	4313      	orrs	r3, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800390c:	f436 7000 	bics.w	r0, r6, #512	; 0x200
 8003910:	b29b      	uxth	r3, r3
 8003912:	bf14      	ite	ne
 8003914:	2200      	movne	r2, #0
 8003916:	f44f 7280 	moveq.w	r2, #256	; 0x100
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800391a:	4313      	orrs	r3, r2
 800391c:	61cb      	str	r3, [r1, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800391e:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8003920:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003922:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003924:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800392a:	4b12      	ldr	r3, [pc, #72]	; (8003974 <HAL_I2S_Init+0x14c>)
    hi2s->Lock = HAL_UNLOCKED;
 800392c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003930:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8003932:	f7fe f9a7 	bl	8001c84 <HAL_I2S_MspInit>
 8003936:	e782      	b.n	800383e <HAL_I2S_Init+0x16>
    return HAL_ERROR;
 8003938:	2001      	movs	r0, #1
}
 800393a:	4770      	bx	lr
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800393c:	68e3      	ldr	r3, [r4, #12]
 800393e:	6961      	ldr	r1, [r4, #20]
 8003940:	b173      	cbz	r3, 8003960 <HAL_I2S_Init+0x138>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003942:	00ad      	lsls	r5, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003944:	fbb0 f0f5 	udiv	r0, r0, r5
 8003948:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800394c:	0043      	lsls	r3, r0, #1
 800394e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003952:	3305      	adds	r3, #5
 8003954:	e79a      	b.n	800388c <HAL_I2S_Init+0x64>
 8003956:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800395a:	68e5      	ldr	r5, [r4, #12]
 800395c:	6821      	ldr	r1, [r4, #0]
 800395e:	e7a6      	b.n	80038ae <HAL_I2S_Init+0x86>
 8003960:	00ed      	lsls	r5, r5, #3
 8003962:	e7ef      	b.n	8003944 <HAL_I2S_Init+0x11c>
 8003964:	cccccccd 	.word	0xcccccccd
 8003968:	40003800 	.word	0x40003800
 800396c:	40003400 	.word	0x40003400
 8003970:	08003a95 	.word	0x08003a95
 8003974:	08003989 	.word	0x08003989
 8003978:	fffff040 	.word	0xfffff040

0800397c <HAL_I2S_TxCpltCallback>:
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop

08003980 <HAL_I2S_RxCpltCallback>:
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop

08003984 <HAL_I2S_ErrorCallback>:
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop

08003988 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003988:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800398a:	6803      	ldr	r3, [r0, #0]
{
 800398c:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003992:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003996:	2a04      	cmp	r2, #4
{
 8003998:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800399a:	d034      	beq.n	8003a06 <I2S_IRQHandler+0x7e>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800399c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80039a0:	2b03      	cmp	r3, #3
 80039a2:	d001      	beq.n	80039a8 <I2S_IRQHandler+0x20>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039a4:	b004      	add	sp, #16
 80039a6:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80039a8:	9b01      	ldr	r3, [sp, #4]
 80039aa:	079b      	lsls	r3, r3, #30
 80039ac:	d510      	bpl.n	80039d0 <I2S_IRQHandler+0x48>
 80039ae:	6823      	ldr	r3, [r4, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	0610      	lsls	r0, r2, #24
 80039b4:	d50c      	bpl.n	80039d0 <I2S_IRQHandler+0x48>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80039b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80039b8:	f831 2b02 	ldrh.w	r2, [r1], #2
 80039bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 80039c0:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80039c2:	3a01      	subs	r2, #1
 80039c4:	b292      	uxth	r2, r2
 80039c6:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80039c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80039ca:	b292      	uxth	r2, r2
 80039cc:	2a00      	cmp	r2, #0
 80039ce:	d049      	beq.n	8003a64 <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80039d0:	9b01      	ldr	r3, [sp, #4]
 80039d2:	0719      	lsls	r1, r3, #28
 80039d4:	d5e6      	bpl.n	80039a4 <I2S_IRQHandler+0x1c>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	0692      	lsls	r2, r2, #26
 80039dc:	d5e2      	bpl.n	80039a4 <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039de:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039e0:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e6:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039e8:	9103      	str	r1, [sp, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80039ee:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80039f0:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80039f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80039f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7ff ffc0 	bl	8003984 <HAL_I2S_ErrorCallback>
}
 8003a04:	e7ce      	b.n	80039a4 <I2S_IRQHandler+0x1c>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a06:	9a01      	ldr	r2, [sp, #4]
 8003a08:	07d1      	lsls	r1, r2, #31
 8003a0a:	d50e      	bpl.n	8003a2a <I2S_IRQHandler+0xa2>
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	0652      	lsls	r2, r2, #25
 8003a10:	d50b      	bpl.n	8003a2a <I2S_IRQHandler+0xa2>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a12:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 8003a1a:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 8003a1c:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003a1e:	3a01      	subs	r2, #1
 8003a20:	b292      	uxth	r2, r2
 8003a22:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8003a24:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8003a26:	b292      	uxth	r2, r2
 8003a28:	b33a      	cbz	r2, 8003a7a <I2S_IRQHandler+0xf2>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a2a:	9b01      	ldr	r3, [sp, #4]
 8003a2c:	0659      	lsls	r1, r3, #25
 8003a2e:	d5b5      	bpl.n	800399c <I2S_IRQHandler+0x14>
 8003a30:	6823      	ldr	r3, [r4, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	0692      	lsls	r2, r2, #26
 8003a36:	d5b1      	bpl.n	800399c <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a38:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a3a:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a3c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a40:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a42:	9102      	str	r1, [sp, #8]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	9202      	str	r2, [sp, #8]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4c:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a4e:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8003a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a54:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003a56:	f043 0302 	orr.w	r3, r3, #2
 8003a5a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f7ff ff91 	bl	8003984 <HAL_I2S_ErrorCallback>
 8003a62:	e79b      	b.n	800399c <I2S_IRQHandler+0x14>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a64:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003a66:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a6c:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8003a6e:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8003a70:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8003a74:	f7ff ff82 	bl	800397c <HAL_I2S_TxCpltCallback>
 8003a78:	e7aa      	b.n	80039d0 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a7a:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003a7c:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a82:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003a84:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8003a88:	f7ff ff7a 	bl	8003980 <HAL_I2S_RxCpltCallback>
 8003a8c:	e7cd      	b.n	8003a2a <I2S_IRQHandler+0xa2>
 8003a8e:	bf00      	nop

08003a90 <HAL_I2SEx_TxRxCpltCallback>:
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop

08003a94 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a94:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a96:	4a93      	ldr	r2, [pc, #588]	; (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a98:	6805      	ldr	r5, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a9a:	4b93      	ldr	r3, [pc, #588]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a9c:	68a9      	ldr	r1, [r5, #8]
{
 8003a9e:	b087      	sub	sp, #28
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003aa0:	4295      	cmp	r5, r2
 8003aa2:	bf18      	it	ne
 8003aa4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003aa8:	9100      	str	r1, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003aaa:	6899      	ldr	r1, [r3, #8]
 8003aac:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003aae:	6869      	ldr	r1, [r5, #4]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ab0:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003ab2:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003ab4:	6859      	ldr	r1, [r3, #4]
 8003ab6:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ab8:	f432 7200 	bics.w	r2, r2, #512	; 0x200
{
 8003abc:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003abe:	d075      	beq.n	8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x118>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ac0:	9a01      	ldr	r2, [sp, #4]
 8003ac2:	0791      	lsls	r1, r2, #30
 8003ac4:	d51a      	bpl.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 8003ac6:	9a03      	ldr	r2, [sp, #12]
 8003ac8:	0612      	lsls	r2, r2, #24
 8003aca:	d517      	bpl.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003acc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8003ace:	1c91      	adds	r1, r2, #2
 8003ad0:	8812      	ldrh	r2, [r2, #0]
 8003ad2:	6241      	str	r1, [r0, #36]	; 0x24
 8003ad4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ad6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	b292      	uxth	r2, r2
 8003adc:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ade:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003ae0:	b292      	uxth	r2, r2
 8003ae2:	b95a      	cbnz	r2, 8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aea:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003aec:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	b923      	cbnz	r3, 8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af8:	f7ff ffca 	bl	8003a90 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003afc:	9b00      	ldr	r3, [sp, #0]
 8003afe:	07db      	lsls	r3, r3, #31
 8003b00:	d51c      	bpl.n	8003b3c <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 8003b02:	9b02      	ldr	r3, [sp, #8]
 8003b04:	065d      	lsls	r5, r3, #25
 8003b06:	d519      	bpl.n	8003b3c <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003b08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b0a:	6822      	ldr	r2, [r4, #0]
 8003b0c:	1c98      	adds	r0, r3, #2
 8003b0e:	68d1      	ldr	r1, [r2, #12]
 8003b10:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003b12:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8003b14:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003b16:	3b01      	subs	r3, #1
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b1c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	b963      	cbnz	r3, 8003b3c <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b22:	6853      	ldr	r3, [r2, #4]
 8003b24:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003b28:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8003b2a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	b92b      	cbnz	r3, 8003b3c <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b30:	2301      	movs	r3, #1
 8003b32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b36:	4620      	mov	r0, r4
 8003b38:	f7ff ffaa 	bl	8003a90 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b3c:	9b00      	ldr	r3, [sp, #0]
 8003b3e:	0658      	lsls	r0, r3, #25
 8003b40:	d51b      	bpl.n	8003b7a <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 8003b42:	9b02      	ldr	r3, [sp, #8]
 8003b44:	0699      	lsls	r1, r3, #26
 8003b46:	d518      	bpl.n	8003b7a <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b48:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b4a:	4866      	ldr	r0, [pc, #408]	; (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b4c:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b4e:	4b66      	ldr	r3, [pc, #408]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b50:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b54:	4282      	cmp	r2, r0
 8003b56:	bf18      	it	ne
 8003b58:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b5c:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b5e:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003b60:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b66:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003b68:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b6e:	f043 0302 	orr.w	r3, r3, #2
 8003b72:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003b74:	4620      	mov	r0, r4
 8003b76:	f7ff ff05 	bl	8003984 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b7a:	9b01      	ldr	r3, [sp, #4]
 8003b7c:	071a      	lsls	r2, r3, #28
 8003b7e:	d56e      	bpl.n	8003c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8003b80:	9b03      	ldr	r3, [sp, #12]
 8003b82:	069b      	lsls	r3, r3, #26
 8003b84:	d56b      	bpl.n	8003c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	4956      	ldr	r1, [pc, #344]	; (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8003b8a:	4b57      	ldr	r3, [pc, #348]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8003b8c:	428a      	cmp	r2, r1
 8003b8e:	bf18      	it	ne
 8003b90:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 8003b94:	2001      	movs	r0, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8003b9c:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b9e:	6853      	ldr	r3, [r2, #4]
 8003ba0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003ba4:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003ba6:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 8003baa:	e04e      	b.n	8003c4a <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003bac:	9b00      	ldr	r3, [sp, #0]
 8003bae:	079a      	lsls	r2, r3, #30
 8003bb0:	d502      	bpl.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 8003bb2:	9b02      	ldr	r3, [sp, #8]
 8003bb4:	061b      	lsls	r3, r3, #24
 8003bb6:	d477      	bmi.n	8003ca8 <HAL_I2SEx_FullDuplex_IRQHandler+0x214>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003bb8:	9b01      	ldr	r3, [sp, #4]
 8003bba:	07d8      	lsls	r0, r3, #31
 8003bbc:	d502      	bpl.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8003bbe:	9b03      	ldr	r3, [sp, #12]
 8003bc0:	0659      	lsls	r1, r3, #25
 8003bc2:	d44e      	bmi.n	8003c62 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ce>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003bc4:	9b01      	ldr	r3, [sp, #4]
 8003bc6:	065a      	lsls	r2, r3, #25
 8003bc8:	d522      	bpl.n	8003c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
 8003bca:	9b03      	ldr	r3, [sp, #12]
 8003bcc:	069b      	lsls	r3, r3, #26
 8003bce:	d51f      	bpl.n	8003c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd0:	6823      	ldr	r3, [r4, #0]
 8003bd2:	4944      	ldr	r1, [pc, #272]	; (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8003bd4:	4a44      	ldr	r2, [pc, #272]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8003bd6:	428b      	cmp	r3, r1
 8003bd8:	bf18      	it	ne
 8003bda:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bde:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003be0:	6851      	ldr	r1, [r2, #4]
 8003be2:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8003be6:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bee:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bf0:	9004      	str	r0, [sp, #16]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	9204      	str	r2, [sp, #16]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8003bfa:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003bfc:	9a04      	ldr	r2, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8003bfe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c02:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003c04:	f043 0302 	orr.w	r3, r3, #2
 8003c08:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f7ff feba 	bl	8003984 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c10:	9b00      	ldr	r3, [sp, #0]
 8003c12:	071d      	lsls	r5, r3, #28
 8003c14:	d523      	bpl.n	8003c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8003c16:	9b02      	ldr	r3, [sp, #8]
 8003c18:	0698      	lsls	r0, r3, #26
 8003c1a:	d520      	bpl.n	8003c5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c1c:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c1e:	4831      	ldr	r0, [pc, #196]	; (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c20:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c22:	4a31      	ldr	r2, [pc, #196]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c24:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c28:	4283      	cmp	r3, r0
 8003c2a:	bf18      	it	ne
 8003c2c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c30:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c32:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c34:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c36:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8003c3a:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c3c:	9005      	str	r0, [sp, #20]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8003c42:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003c44:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8003c46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c4a:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003c4c:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003c4e:	f043 0304 	orr.w	r3, r3, #4
 8003c52:	6463      	str	r3, [r4, #68]	; 0x44
}
 8003c54:	b007      	add	sp, #28
 8003c56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8003c5a:	f7ff be93 	b.w	8003984 <HAL_I2S_ErrorCallback>
}
 8003c5e:	b007      	add	sp, #28
 8003c60:	bd30      	pop	{r4, r5, pc}
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c62:	6820      	ldr	r0, [r4, #0]
 8003c64:	491f      	ldr	r1, [pc, #124]	; (8003ce4 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8003c68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c6a:	4288      	cmp	r0, r1
 8003c6c:	bf18      	it	ne
 8003c6e:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8003c72:	1c98      	adds	r0, r3, #2
 8003c74:	68d1      	ldr	r1, [r2, #12]
 8003c76:	62e0      	str	r0, [r4, #44]	; 0x2c
 8003c78:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8003c7a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c82:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d19c      	bne.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c8a:	6853      	ldr	r3, [r2, #4]
 8003c8c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003c90:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8003c92:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d194      	bne.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	f7ff fef5 	bl	8003a90 <HAL_I2SEx_TxRxCpltCallback>
 8003ca6:	e78d      	b.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ca8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003caa:	1c9a      	adds	r2, r3, #2
 8003cac:	881b      	ldrh	r3, [r3, #0]
 8003cae:	6242      	str	r2, [r0, #36]	; 0x24
 8003cb0:	60eb      	str	r3, [r5, #12]
  hi2s->TxXferCount--;
 8003cb2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8003cba:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f47f af7a 	bne.w	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cc4:	686b      	ldr	r3, [r5, #4]
 8003cc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cca:	606b      	str	r3, [r5, #4]
    if (hi2s->RxXferCount == 0U)
 8003ccc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f af71 	bne.w	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
      hi2s->State = HAL_I2S_STATE_READY;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cdc:	f7ff fed8 	bl	8003a90 <HAL_I2SEx_TxRxCpltCallback>
 8003ce0:	e76a      	b.n	8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 8003ce2:	bf00      	nop
 8003ce4:	40003800 	.word	0x40003800
 8003ce8:	40003400 	.word	0x40003400

08003cec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cec:	2800      	cmp	r0, #0
 8003cee:	f000 8132 	beq.w	8003f56 <HAL_RCC_OscConfig+0x26a>
{
 8003cf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf6:	6803      	ldr	r3, [r0, #0]
 8003cf8:	07dd      	lsls	r5, r3, #31
{
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cfe:	d52f      	bpl.n	8003d60 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d00:	49ac      	ldr	r1, [pc, #688]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003d02:	688a      	ldr	r2, [r1, #8]
 8003d04:	f002 020c 	and.w	r2, r2, #12
 8003d08:	2a04      	cmp	r2, #4
 8003d0a:	f000 80ea 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0e:	688a      	ldr	r2, [r1, #8]
 8003d10:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d14:	2a08      	cmp	r2, #8
 8003d16:	f000 80e0 	beq.w	8003eda <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1a:	6863      	ldr	r3, [r4, #4]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d20:	f000 80e9 	beq.w	8003ef6 <HAL_RCC_OscConfig+0x20a>
 8003d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d28:	f000 8178 	beq.w	800401c <HAL_RCC_OscConfig+0x330>
 8003d2c:	4da1      	ldr	r5, [pc, #644]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003d2e:	682a      	ldr	r2, [r5, #0]
 8003d30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d34:	602a      	str	r2, [r5, #0]
 8003d36:	682a      	ldr	r2, [r5, #0]
 8003d38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d3c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	f040 80de 	bne.w	8003f00 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fe fa10 	bl	8002168 <HAL_GetTick>
 8003d48:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d4a:	e005      	b.n	8003d58 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fe fa0c 	bl	8002168 <HAL_GetTick>
 8003d50:	1b80      	subs	r0, r0, r6
 8003d52:	2864      	cmp	r0, #100	; 0x64
 8003d54:	f200 80f2 	bhi.w	8003f3c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d58:	682b      	ldr	r3, [r5, #0]
 8003d5a:	039b      	lsls	r3, r3, #14
 8003d5c:	d4f6      	bmi.n	8003d4c <HAL_RCC_OscConfig+0x60>
 8003d5e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d60:	079f      	lsls	r7, r3, #30
 8003d62:	d475      	bmi.n	8003e50 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d64:	071a      	lsls	r2, r3, #28
 8003d66:	d515      	bpl.n	8003d94 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d68:	6963      	ldr	r3, [r4, #20]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 80a5 	beq.w	8003eba <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d70:	4b91      	ldr	r3, [pc, #580]	; (8003fb8 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d72:	4d90      	ldr	r5, [pc, #576]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8003d78:	f7fe f9f6 	bl	8002168 <HAL_GetTick>
 8003d7c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7e:	e005      	b.n	8003d8c <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d80:	f7fe f9f2 	bl	8002168 <HAL_GetTick>
 8003d84:	1b80      	subs	r0, r0, r6
 8003d86:	2802      	cmp	r0, #2
 8003d88:	f200 80d8 	bhi.w	8003f3c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003d8e:	079b      	lsls	r3, r3, #30
 8003d90:	d5f6      	bpl.n	8003d80 <HAL_RCC_OscConfig+0x94>
 8003d92:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d94:	0758      	lsls	r0, r3, #29
 8003d96:	d53b      	bpl.n	8003e10 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d98:	4a86      	ldr	r2, [pc, #536]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003d9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003d9c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8003da0:	f040 80db 	bne.w	8003f5a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da4:	9301      	str	r3, [sp, #4]
 8003da6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	6413      	str	r3, [r2, #64]	; 0x40
 8003dae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	9301      	str	r3, [sp, #4]
 8003db6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003db8:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dba:	4d80      	ldr	r5, [pc, #512]	; (8003fbc <HAL_RCC_OscConfig+0x2d0>)
 8003dbc:	682a      	ldr	r2, [r5, #0]
 8003dbe:	05d1      	lsls	r1, r2, #23
 8003dc0:	f140 80ac 	bpl.w	8003f1c <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc4:	68a3      	ldr	r3, [r4, #8]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	f000 80c9 	beq.w	8003f5e <HAL_RCC_OscConfig+0x272>
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	f000 812f 	beq.w	8004030 <HAL_RCC_OscConfig+0x344>
 8003dd2:	4d78      	ldr	r5, [pc, #480]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003dd4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003dd6:	f022 0201 	bic.w	r2, r2, #1
 8003dda:	672a      	str	r2, [r5, #112]	; 0x70
 8003ddc:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003dde:	f022 0204 	bic.w	r2, r2, #4
 8003de2:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	f040 80bf 	bne.w	8003f68 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dea:	f7fe f9bd 	bl	8002168 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dee:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003df2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df4:	e006      	b.n	8003e04 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df6:	f7fe f9b7 	bl	8002168 <HAL_GetTick>
 8003dfa:	eba0 0008 	sub.w	r0, r0, r8
 8003dfe:	42b8      	cmp	r0, r7
 8003e00:	f200 809c 	bhi.w	8003f3c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003e06:	0798      	lsls	r0, r3, #30
 8003e08:	d4f5      	bmi.n	8003df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e0a:	2e00      	cmp	r6, #0
 8003e0c:	f040 80dc 	bne.w	8003fc8 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e10:	69a0      	ldr	r0, [r4, #24]
 8003e12:	b1c8      	cbz	r0, 8003e48 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e14:	4d67      	ldr	r5, [pc, #412]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003e16:	68aa      	ldr	r2, [r5, #8]
 8003e18:	f002 020c 	and.w	r2, r2, #12
 8003e1c:	2a08      	cmp	r2, #8
 8003e1e:	f000 80d9 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e22:	4a67      	ldr	r2, [pc, #412]	; (8003fc0 <HAL_RCC_OscConfig+0x2d4>)
 8003e24:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e26:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003e28:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e2a:	f000 810b 	beq.w	8004044 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2e:	f7fe f99b 	bl	8002168 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e32:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003e34:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e36:	e004      	b.n	8003e42 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fe f996 	bl	8002168 <HAL_GetTick>
 8003e3c:	1b40      	subs	r0, r0, r5
 8003e3e:	2802      	cmp	r0, #2
 8003e40:	d87c      	bhi.n	8003f3c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	019b      	lsls	r3, r3, #6
 8003e46:	d4f7      	bmi.n	8003e38 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003e48:	2000      	movs	r0, #0
}
 8003e4a:	b002      	add	sp, #8
 8003e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e50:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003e52:	6891      	ldr	r1, [r2, #8]
 8003e54:	f011 0f0c 	tst.w	r1, #12
 8003e58:	d024      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	6891      	ldr	r1, [r2, #8]
 8003e5c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e60:	2908      	cmp	r1, #8
 8003e62:	d01c      	beq.n	8003e9e <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e64:	68e3      	ldr	r3, [r4, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 8092 	beq.w	8003f90 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b55      	ldr	r3, [pc, #340]	; (8003fc4 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6e:	4d51      	ldr	r5, [pc, #324]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e74:	f7fe f978 	bl	8002168 <HAL_GetTick>
 8003e78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7a:	e004      	b.n	8003e86 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e7c:	f7fe f974 	bl	8002168 <HAL_GetTick>
 8003e80:	1b80      	subs	r0, r0, r6
 8003e82:	2802      	cmp	r0, #2
 8003e84:	d85a      	bhi.n	8003f3c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	682b      	ldr	r3, [r5, #0]
 8003e88:	0798      	lsls	r0, r3, #30
 8003e8a:	d5f7      	bpl.n	8003e7c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	682b      	ldr	r3, [r5, #0]
 8003e8e:	6922      	ldr	r2, [r4, #16]
 8003e90:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003e94:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003e98:	602b      	str	r3, [r5, #0]
 8003e9a:	6823      	ldr	r3, [r4, #0]
 8003e9c:	e762      	b.n	8003d64 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e9e:	6852      	ldr	r2, [r2, #4]
 8003ea0:	0256      	lsls	r6, r2, #9
 8003ea2:	d4df      	bmi.n	8003e64 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea4:	4a43      	ldr	r2, [pc, #268]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	0795      	lsls	r5, r2, #30
 8003eaa:	d54b      	bpl.n	8003f44 <HAL_RCC_OscConfig+0x258>
 8003eac:	68e2      	ldr	r2, [r4, #12]
 8003eae:	2a01      	cmp	r2, #1
 8003eb0:	d048      	beq.n	8003f44 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 8003eb2:	2001      	movs	r0, #1
}
 8003eb4:	b002      	add	sp, #8
 8003eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003eba:	4a3f      	ldr	r2, [pc, #252]	; (8003fb8 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ebc:	4d3d      	ldr	r5, [pc, #244]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8003ebe:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003ec0:	f7fe f952 	bl	8002168 <HAL_GetTick>
 8003ec4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec6:	e004      	b.n	8003ed2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec8:	f7fe f94e 	bl	8002168 <HAL_GetTick>
 8003ecc:	1b80      	subs	r0, r0, r6
 8003ece:	2802      	cmp	r0, #2
 8003ed0:	d834      	bhi.n	8003f3c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003ed4:	079f      	lsls	r7, r3, #30
 8003ed6:	d4f7      	bmi.n	8003ec8 <HAL_RCC_OscConfig+0x1dc>
 8003ed8:	e75b      	b.n	8003d92 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eda:	684a      	ldr	r2, [r1, #4]
 8003edc:	0250      	lsls	r0, r2, #9
 8003ede:	f57f af1c 	bpl.w	8003d1a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ee2:	4a34      	ldr	r2, [pc, #208]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	0391      	lsls	r1, r2, #14
 8003ee8:	f57f af3a 	bpl.w	8003d60 <HAL_RCC_OscConfig+0x74>
 8003eec:	6862      	ldr	r2, [r4, #4]
 8003eee:	2a00      	cmp	r2, #0
 8003ef0:	f47f af36 	bne.w	8003d60 <HAL_RCC_OscConfig+0x74>
 8003ef4:	e7dd      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ef6:	4a2f      	ldr	r2, [pc, #188]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003ef8:	6813      	ldr	r3, [r2, #0]
 8003efa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003efe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f00:	f7fe f932 	bl	8002168 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f04:	4d2b      	ldr	r5, [pc, #172]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8003f06:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f08:	e004      	b.n	8003f14 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f0a:	f7fe f92d 	bl	8002168 <HAL_GetTick>
 8003f0e:	1b80      	subs	r0, r0, r6
 8003f10:	2864      	cmp	r0, #100	; 0x64
 8003f12:	d813      	bhi.n	8003f3c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	039a      	lsls	r2, r3, #14
 8003f18:	d5f7      	bpl.n	8003f0a <HAL_RCC_OscConfig+0x21e>
 8003f1a:	e720      	b.n	8003d5e <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1c:	682a      	ldr	r2, [r5, #0]
 8003f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f22:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8003f24:	f7fe f920 	bl	8002168 <HAL_GetTick>
 8003f28:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2a:	682b      	ldr	r3, [r5, #0]
 8003f2c:	05da      	lsls	r2, r3, #23
 8003f2e:	f53f af49 	bmi.w	8003dc4 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f32:	f7fe f919 	bl	8002168 <HAL_GetTick>
 8003f36:	1bc0      	subs	r0, r0, r7
 8003f38:	2802      	cmp	r0, #2
 8003f3a:	d9f6      	bls.n	8003f2a <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8003f3c:	2003      	movs	r0, #3
}
 8003f3e:	b002      	add	sp, #8
 8003f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f44:	491b      	ldr	r1, [pc, #108]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003f46:	6920      	ldr	r0, [r4, #16]
 8003f48:	680a      	ldr	r2, [r1, #0]
 8003f4a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003f4e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003f52:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f54:	e706      	b.n	8003d64 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8003f56:	2001      	movs	r0, #1
}
 8003f58:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8003f5a:	2600      	movs	r6, #0
 8003f5c:	e72d      	b.n	8003dba <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5e:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
 8003f60:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003f68:	f7fe f8fe 	bl	8002168 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6c:	4d11      	ldr	r5, [pc, #68]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8003f6e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f70:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f74:	e005      	b.n	8003f82 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f76:	f7fe f8f7 	bl	8002168 <HAL_GetTick>
 8003f7a:	eba0 0008 	sub.w	r0, r0, r8
 8003f7e:	42b8      	cmp	r0, r7
 8003f80:	d8dc      	bhi.n	8003f3c <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f82:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003f84:	079b      	lsls	r3, r3, #30
 8003f86:	d5f6      	bpl.n	8003f76 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8003f88:	2e00      	cmp	r6, #0
 8003f8a:	f43f af41 	beq.w	8003e10 <HAL_RCC_OscConfig+0x124>
 8003f8e:	e01b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8003f90:	4a0c      	ldr	r2, [pc, #48]	; (8003fc4 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	4d08      	ldr	r5, [pc, #32]	; (8003fb4 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8003f94:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003f96:	f7fe f8e7 	bl	8002168 <HAL_GetTick>
 8003f9a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9c:	e004      	b.n	8003fa8 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f9e:	f7fe f8e3 	bl	8002168 <HAL_GetTick>
 8003fa2:	1b80      	subs	r0, r0, r6
 8003fa4:	2802      	cmp	r0, #2
 8003fa6:	d8c9      	bhi.n	8003f3c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa8:	682b      	ldr	r3, [r5, #0]
 8003faa:	0799      	lsls	r1, r3, #30
 8003fac:	d4f7      	bmi.n	8003f9e <HAL_RCC_OscConfig+0x2b2>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	e6d8      	b.n	8003d64 <HAL_RCC_OscConfig+0x78>
 8003fb2:	bf00      	nop
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	42470e80 	.word	0x42470e80
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	42470060 	.word	0x42470060
 8003fc4:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fc8:	4a35      	ldr	r2, [pc, #212]	; (80040a0 <HAL_RCC_OscConfig+0x3b4>)
 8003fca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd2:	e71d      	b.n	8003e10 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd4:	2801      	cmp	r0, #1
 8003fd6:	f43f af6d 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->CFGR;
 8003fda:	68ab      	ldr	r3, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fdc:	69e2      	ldr	r2, [r4, #28]
 8003fde:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003fe2:	4291      	cmp	r1, r2
 8003fe4:	f47f af65 	bne.w	8003eb2 <HAL_RCC_OscConfig+0x1c6>
 8003fe8:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fea:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fee:	4291      	cmp	r1, r2
 8003ff0:	f47f af5f 	bne.w	8003eb2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ff4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ff8:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ffa:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ffc:	428a      	cmp	r2, r1
 8003ffe:	f47f af58 	bne.w	8003eb2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004002:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004004:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004008:	4291      	cmp	r1, r2
 800400a:	f47f af52 	bne.w	8003eb2 <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800400e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004010:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8004014:	1a18      	subs	r0, r3, r0
 8004016:	bf18      	it	ne
 8004018:	2001      	movne	r0, #1
 800401a:	e74b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800401c:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_RCC_OscConfig+0x3b4>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e767      	b.n	8003f00 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <HAL_RCC_OscConfig+0x3b4>)
 8004032:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004034:	f042 0204 	orr.w	r2, r2, #4
 8004038:	671a      	str	r2, [r3, #112]	; 0x70
 800403a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	671a      	str	r2, [r3, #112]	; 0x70
 8004042:	e791      	b.n	8003f68 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8004044:	f7fe f890 	bl	8002168 <HAL_GetTick>
 8004048:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404a:	e005      	b.n	8004058 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800404c:	f7fe f88c 	bl	8002168 <HAL_GetTick>
 8004050:	1b80      	subs	r0, r0, r6
 8004052:	2802      	cmp	r0, #2
 8004054:	f63f af72 	bhi.w	8003f3c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	0199      	lsls	r1, r3, #6
 800405c:	d4f6      	bmi.n	800404c <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800405e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8004062:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8004066:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004068:	4c0d      	ldr	r4, [pc, #52]	; (80040a0 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800406a:	4333      	orrs	r3, r6
 800406c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004070:	0852      	lsrs	r2, r2, #1
 8004072:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004076:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004078:	490a      	ldr	r1, [pc, #40]	; (80040a4 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800407a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800407e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004080:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004082:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8004084:	f7fe f870 	bl	8002168 <HAL_GetTick>
 8004088:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408a:	e005      	b.n	8004098 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800408c:	f7fe f86c 	bl	8002168 <HAL_GetTick>
 8004090:	1b40      	subs	r0, r0, r5
 8004092:	2802      	cmp	r0, #2
 8004094:	f63f af52 	bhi.w	8003f3c <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	019a      	lsls	r2, r3, #6
 800409c:	d5f6      	bpl.n	800408c <HAL_RCC_OscConfig+0x3a0>
 800409e:	e6d3      	b.n	8003e48 <HAL_RCC_OscConfig+0x15c>
 80040a0:	40023800 	.word	0x40023800
 80040a4:	42470060 	.word	0x42470060

080040a8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a8:	4917      	ldr	r1, [pc, #92]	; (8004108 <HAL_RCC_GetSysClockFreq+0x60>)
{
 80040aa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040ac:	688b      	ldr	r3, [r1, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d01b      	beq.n	80040ee <HAL_RCC_GetSysClockFreq+0x46>
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d117      	bne.n	80040ea <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040ba:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040bc:	684b      	ldr	r3, [r1, #4]
 80040be:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040c6:	d114      	bne.n	80040f2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040c8:	6849      	ldr	r1, [r1, #4]
 80040ca:	4810      	ldr	r0, [pc, #64]	; (800410c <HAL_RCC_GetSysClockFreq+0x64>)
 80040cc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80040d0:	fba1 0100 	umull	r0, r1, r1, r0
 80040d4:	f7fc fdd8 	bl	8000c88 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040d8:	4b0b      	ldr	r3, [pc, #44]	; (8004108 <HAL_RCC_GetSysClockFreq+0x60>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80040e0:	3301      	adds	r3, #1
 80040e2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80040e4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80040e8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80040ea:	4808      	ldr	r0, [pc, #32]	; (800410c <HAL_RCC_GetSysClockFreq+0x64>)
}
 80040ec:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80040ee:	4808      	ldr	r0, [pc, #32]	; (8004110 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80040f0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f2:	684b      	ldr	r3, [r1, #4]
 80040f4:	4806      	ldr	r0, [pc, #24]	; (8004110 <HAL_RCC_GetSysClockFreq+0x68>)
 80040f6:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80040fa:	fba3 0100 	umull	r0, r1, r3, r0
 80040fe:	2300      	movs	r3, #0
 8004100:	f7fc fdc2 	bl	8000c88 <__aeabi_uldivmod>
 8004104:	e7e8      	b.n	80040d8 <HAL_RCC_GetSysClockFreq+0x30>
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800
 800410c:	00f42400 	.word	0x00f42400
 8004110:	007a1200 	.word	0x007a1200

08004114 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004114:	b160      	cbz	r0, 8004130 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004116:	4a49      	ldr	r2, [pc, #292]	; (800423c <HAL_RCC_ClockConfig+0x128>)
 8004118:	6813      	ldr	r3, [r2, #0]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	428b      	cmp	r3, r1
 8004120:	d208      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004122:	b2cb      	uxtb	r3, r1
 8004124:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	428b      	cmp	r3, r1
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8004130:	2001      	movs	r0, #1
}
 8004132:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004134:	6803      	ldr	r3, [r0, #0]
{
 8004136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413a:	079d      	lsls	r5, r3, #30
 800413c:	d514      	bpl.n	8004168 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800413e:	075c      	lsls	r4, r3, #29
 8004140:	d504      	bpl.n	800414c <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004142:	4c3f      	ldr	r4, [pc, #252]	; (8004240 <HAL_RCC_ClockConfig+0x12c>)
 8004144:	68a2      	ldr	r2, [r4, #8]
 8004146:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800414a:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414c:	071a      	lsls	r2, r3, #28
 800414e:	d504      	bpl.n	800415a <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004150:	4c3b      	ldr	r4, [pc, #236]	; (8004240 <HAL_RCC_ClockConfig+0x12c>)
 8004152:	68a2      	ldr	r2, [r4, #8]
 8004154:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004158:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800415a:	4c39      	ldr	r4, [pc, #228]	; (8004240 <HAL_RCC_ClockConfig+0x12c>)
 800415c:	6885      	ldr	r5, [r0, #8]
 800415e:	68a2      	ldr	r2, [r4, #8]
 8004160:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004164:	432a      	orrs	r2, r5
 8004166:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004168:	07df      	lsls	r7, r3, #31
 800416a:	4604      	mov	r4, r0
 800416c:	460d      	mov	r5, r1
 800416e:	d522      	bpl.n	80041b6 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004170:	6842      	ldr	r2, [r0, #4]
 8004172:	2a01      	cmp	r2, #1
 8004174:	d057      	beq.n	8004226 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004176:	1e93      	subs	r3, r2, #2
 8004178:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800417a:	4b31      	ldr	r3, [pc, #196]	; (8004240 <HAL_RCC_ClockConfig+0x12c>)
 800417c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800417e:	d959      	bls.n	8004234 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004180:	0799      	lsls	r1, r3, #30
 8004182:	d525      	bpl.n	80041d0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004184:	4e2e      	ldr	r6, [pc, #184]	; (8004240 <HAL_RCC_ClockConfig+0x12c>)
 8004186:	68b3      	ldr	r3, [r6, #8]
 8004188:	f023 0303 	bic.w	r3, r3, #3
 800418c:	4313      	orrs	r3, r2
 800418e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004190:	f7fd ffea 	bl	8002168 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004194:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004198:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e005      	b.n	80041a8 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fd ffe4 	bl	8002168 <HAL_GetTick>
 80041a0:	eba0 0008 	sub.w	r0, r0, r8
 80041a4:	42b8      	cmp	r0, r7
 80041a6:	d843      	bhi.n	8004230 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041a8:	68b3      	ldr	r3, [r6, #8]
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80041b4:	d1f2      	bne.n	800419c <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <HAL_RCC_ClockConfig+0x128>)
 80041b8:	6813      	ldr	r3, [r2, #0]
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	42ab      	cmp	r3, r5
 80041c0:	d909      	bls.n	80041d6 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	b2eb      	uxtb	r3, r5
 80041c4:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041c6:	6813      	ldr	r3, [r2, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	42ab      	cmp	r3, r5
 80041ce:	d002      	beq.n	80041d6 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 80041d0:	2001      	movs	r0, #1
}
 80041d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d6:	6823      	ldr	r3, [r4, #0]
 80041d8:	075a      	lsls	r2, r3, #29
 80041da:	d506      	bpl.n	80041ea <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041dc:	4918      	ldr	r1, [pc, #96]	; (8004240 <HAL_RCC_ClockConfig+0x12c>)
 80041de:	68e0      	ldr	r0, [r4, #12]
 80041e0:	688a      	ldr	r2, [r1, #8]
 80041e2:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80041e6:	4302      	orrs	r2, r0
 80041e8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ea:	071b      	lsls	r3, r3, #28
 80041ec:	d412      	bmi.n	8004214 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ee:	f7ff ff5b 	bl	80040a8 <HAL_RCC_GetSysClockFreq>
 80041f2:	4b13      	ldr	r3, [pc, #76]	; (8004240 <HAL_RCC_ClockConfig+0x12c>)
 80041f4:	4c13      	ldr	r4, [pc, #76]	; (8004244 <HAL_RCC_ClockConfig+0x130>)
 80041f6:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80041f8:	4913      	ldr	r1, [pc, #76]	; (8004248 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041fa:	4a14      	ldr	r2, [pc, #80]	; (800424c <HAL_RCC_ClockConfig+0x138>)
 80041fc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004200:	5ce3      	ldrb	r3, [r4, r3]
 8004202:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8004206:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004208:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 800420a:	f7fd ff63 	bl	80020d4 <HAL_InitTick>
  return HAL_OK;
 800420e:	2000      	movs	r0, #0
}
 8004210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004214:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x12c>)
 8004216:	6921      	ldr	r1, [r4, #16]
 8004218:	6893      	ldr	r3, [r2, #8]
 800421a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800421e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004222:	6093      	str	r3, [r2, #8]
 8004224:	e7e3      	b.n	80041ee <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004226:	4b06      	ldr	r3, [pc, #24]	; (8004240 <HAL_RCC_ClockConfig+0x12c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	039e      	lsls	r6, r3, #14
 800422c:	d4aa      	bmi.n	8004184 <HAL_RCC_ClockConfig+0x70>
 800422e:	e7cf      	b.n	80041d0 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8004230:	2003      	movs	r0, #3
 8004232:	e7ed      	b.n	8004210 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004234:	0198      	lsls	r0, r3, #6
 8004236:	d4a5      	bmi.n	8004184 <HAL_RCC_ClockConfig+0x70>
 8004238:	e7ca      	b.n	80041d0 <HAL_RCC_ClockConfig+0xbc>
 800423a:	bf00      	nop
 800423c:	40023c00 	.word	0x40023c00
 8004240:	40023800 	.word	0x40023800
 8004244:	0800ac80 	.word	0x0800ac80
 8004248:	20000010 	.word	0x20000010
 800424c:	20000008 	.word	0x20000008

08004250 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004252:	4a05      	ldr	r2, [pc, #20]	; (8004268 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004254:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004256:	4905      	ldr	r1, [pc, #20]	; (800426c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004258:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800425c:	6808      	ldr	r0, [r1, #0]
 800425e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004260:	40d8      	lsrs	r0, r3
 8004262:	4770      	bx	lr
 8004264:	40023800 	.word	0x40023800
 8004268:	0800ac90 	.word	0x0800ac90
 800426c:	20000008 	.word	0x20000008

08004270 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004270:	4b04      	ldr	r3, [pc, #16]	; (8004284 <HAL_RCC_GetPCLK2Freq+0x14>)
 8004272:	4a05      	ldr	r2, [pc, #20]	; (8004288 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004274:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8004276:	4905      	ldr	r1, [pc, #20]	; (800428c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004278:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800427c:	6808      	ldr	r0, [r1, #0]
 800427e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004280:	40d8      	lsrs	r0, r3
 8004282:	4770      	bx	lr
 8004284:	40023800 	.word	0x40023800
 8004288:	0800ac90 	.word	0x0800ac90
 800428c:	20000008 	.word	0x20000008

08004290 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004292:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004294:	6800      	ldr	r0, [r0, #0]
 8004296:	f010 0f05 	tst.w	r0, #5
{
 800429a:	b083      	sub	sp, #12
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800429c:	d15c      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800429e:	f010 0002 	ands.w	r0, r0, #2
 80042a2:	d101      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x18>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80042a4:	b003      	add	sp, #12
 80042a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 80042a8:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    PWR->CR |= PWR_CR_DBP;
 80042aa:	4c46      	ldr	r4, [pc, #280]	; (80043c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80042ac:	2200      	movs	r2, #0
 80042ae:	9201      	str	r2, [sp, #4]
 80042b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042b6:	641a      	str	r2, [r3, #64]	; 0x40
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042be:	9301      	str	r3, [sp, #4]
 80042c0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c8:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80042ca:	f7fd ff4d 	bl	8002168 <HAL_GetTick>
 80042ce:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80042d2:	f7fd ff49 	bl	8002168 <HAL_GetTick>
 80042d6:	1b80      	subs	r0, r0, r6
 80042d8:	2802      	cmp	r0, #2
 80042da:	d83a      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	05d9      	lsls	r1, r3, #23
 80042e0:	d5f7      	bpl.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042e2:	4937      	ldr	r1, [pc, #220]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042e4:	68eb      	ldr	r3, [r5, #12]
 80042e6:	6f0a      	ldr	r2, [r1, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042e8:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80042ec:	f403 7040 	and.w	r0, r3, #768	; 0x300
 80042f0:	d010      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x84>
 80042f2:	4282      	cmp	r2, r0
 80042f4:	d00e      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x84>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042f6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80042f8:	4a33      	ldr	r2, [pc, #204]	; (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x138>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80042fe:	2401      	movs	r4, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004300:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8004302:	6014      	str	r4, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004304:	6010      	str	r0, [r2, #0]
      RCC->BDCR = tmpreg1;
 8004306:	670b      	str	r3, [r1, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004308:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 800430a:	07da      	lsls	r2, r3, #31
 800430c:	d413      	bmi.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 800430e:	68eb      	ldr	r3, [r5, #12]
 8004310:	f403 7040 	and.w	r0, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004314:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8004318:	d047      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x11a>
 800431a:	4929      	ldr	r1, [pc, #164]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431c:	688a      	ldr	r2, [r1, #8]
 800431e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8004322:	608a      	str	r2, [r1, #8]
 8004324:	4a26      	ldr	r2, [pc, #152]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004326:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8004328:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432c:	430b      	orrs	r3, r1
  return HAL_OK;
 800432e:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004330:	6713      	str	r3, [r2, #112]	; 0x70
}
 8004332:	b003      	add	sp, #12
 8004334:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004336:	460c      	mov	r4, r1
        tickstart = HAL_GetTick();
 8004338:	f7fd ff16 	bl	8002168 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800433c:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004340:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004342:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8004344:	079b      	lsls	r3, r3, #30
 8004346:	d4e2      	bmi.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fd ff0e 	bl	8002168 <HAL_GetTick>
 800434c:	1bc0      	subs	r0, r0, r7
 800434e:	42b0      	cmp	r0, r6
 8004350:	d9f7      	bls.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        return HAL_TIMEOUT;
 8004352:	2003      	movs	r0, #3
}
 8004354:	b003      	add	sp, #12
 8004356:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8004358:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800435a:	4c19      	ldr	r4, [pc, #100]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_DISABLE();
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8004360:	f7fd ff02 	bl	8002168 <HAL_GetTick>
 8004364:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004366:	e004      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xe2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004368:	f7fd fefe 	bl	8002168 <HAL_GetTick>
 800436c:	1b80      	subs	r0, r0, r6
 800436e:	2802      	cmp	r0, #2
 8004370:	d8ef      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	011f      	lsls	r7, r3, #4
 8004376:	d4f7      	bmi.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004378:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    __HAL_RCC_PLLI2S_ENABLE();
 800437c:	4a13      	ldr	r2, [pc, #76]	; (80043cc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800437e:	4e10      	ldr	r6, [pc, #64]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004380:	071b      	lsls	r3, r3, #28
 8004382:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 8004386:	2101      	movs	r1, #1
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004388:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800438c:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 800438e:	f7fd feeb 	bl	8002168 <HAL_GetTick>
 8004392:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004394:	e004      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004396:	f7fd fee7 	bl	8002168 <HAL_GetTick>
 800439a:	1b00      	subs	r0, r0, r4
 800439c:	2802      	cmp	r0, #2
 800439e:	d8d8      	bhi.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043a0:	6833      	ldr	r3, [r6, #0]
 80043a2:	0118      	lsls	r0, r3, #4
 80043a4:	d5f7      	bpl.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043a6:	6828      	ldr	r0, [r5, #0]
 80043a8:	e779      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xe>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80043aa:	4805      	ldr	r0, [pc, #20]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80043ac:	6882      	ldr	r2, [r0, #8]
 80043ae:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80043b2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80043b6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80043ba:	430a      	orrs	r2, r1
 80043bc:	6082      	str	r2, [r0, #8]
 80043be:	e7b1      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x94>
 80043c0:	40023800 	.word	0x40023800
 80043c4:	40007000 	.word	0x40007000
 80043c8:	42470e40 	.word	0x42470e40
 80043cc:	42470068 	.word	0x42470068

080043d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80043d0:	2801      	cmp	r0, #1
 80043d2:	d109      	bne.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80043d4:	4a12      	ldr	r2, [pc, #72]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80043d6:	6893      	ldr	r3, [r2, #8]
      switch (srcclk)
 80043d8:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 80043dc:	d006      	beq.n	80043ec <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 80043de:	2b01      	cmp	r3, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80043e0:	4810      	ldr	r0, [pc, #64]	; (8004424 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 80043e2:	bf18      	it	ne
 80043e4:	2000      	movne	r0, #0
 80043e6:	4770      	bx	lr
 80043e8:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80043ea:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043ec:	6853      	ldr	r3, [r2, #4]
 80043ee:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043f2:	6853      	ldr	r3, [r2, #4]
 80043f4:	bf14      	ite	ne
 80043f6:	480c      	ldrne	r0, [pc, #48]	; (8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80043f8:	480c      	ldreq	r0, [pc, #48]	; (800442c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>)
 80043fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043fe:	fbb0 f0f3 	udiv	r0, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8004404:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004408:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800440c:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8004410:	fb00 f002 	mul.w	r0, r0, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004414:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8004418:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	00bb8000 	.word	0x00bb8000
 8004428:	007a1200 	.word	0x007a1200
 800442c:	00f42400 	.word	0x00f42400

08004430 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004430:	2800      	cmp	r0, #0
 8004432:	d03b      	beq.n	80044ac <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004434:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004438:	2300      	movs	r3, #0
{
 800443a:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 800443c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8004440:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004442:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004444:	b362      	cbz	r2, 80044a0 <HAL_SPI_Init+0x70>
 8004446:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004448:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800444c:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8004450:	432b      	orrs	r3, r5
 8004452:	4313      	orrs	r3, r2
 8004454:	6962      	ldr	r2, [r4, #20]
 8004456:	69e5      	ldr	r5, [r4, #28]
 8004458:	6a26      	ldr	r6, [r4, #32]
 800445a:	430b      	orrs	r3, r1
 800445c:	4313      	orrs	r3, r2
 800445e:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8004460:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004462:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8004464:	2502      	movs	r5, #2
 8004466:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800446a:	4333      	orrs	r3, r6
 800446c:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8004470:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004472:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004474:	0c12      	lsrs	r2, r2, #16
 8004476:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004478:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800447c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800447e:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8004480:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8004484:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004486:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004488:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800448a:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800448c:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800448e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8004492:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004494:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 8004496:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004498:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800449a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 800449e:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80044a0:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80044a4:	f7fd fc3a 	bl	8001d1c <HAL_SPI_MspInit>
 80044a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80044aa:	e7cd      	b.n	8004448 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80044ac:	2001      	movs	r0, #1
}
 80044ae:	4770      	bx	lr

080044b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044b4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80044b6:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b8:	4d14      	ldr	r5, [pc, #80]	; (800450c <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ba:	f024 0401 	bic.w	r4, r4, #1
 80044be:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80044c0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80044c2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80044c4:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80044c6:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044ca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044ce:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80044d0:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 80044d4:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d8:	d00a      	beq.n	80044f0 <TIM_OC1_SetConfig+0x40>
 80044da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044de:	42a8      	cmp	r0, r5
 80044e0:	d006      	beq.n	80044f0 <TIM_OC1_SetConfig+0x40>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044e2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80044e4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80044e6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80044e8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 80044ea:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80044ec:	6203      	str	r3, [r0, #32]
}
 80044ee:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80044f0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80044f2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80044f6:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80044f8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044fc:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004500:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004502:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004506:	432c      	orrs	r4, r5
 8004508:	e7eb      	b.n	80044e2 <TIM_OC1_SetConfig+0x32>
 800450a:	bf00      	nop
 800450c:	40010000 	.word	0x40010000

08004510 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004512:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004514:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8004516:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004518:	4d15      	ldr	r5, [pc, #84]	; (8004570 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800451a:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800451e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8004520:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004522:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004524:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004526:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800452a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800452e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004530:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004534:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004538:	d00a      	beq.n	8004550 <TIM_OC3_SetConfig+0x40>
 800453a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800453e:	42a8      	cmp	r0, r5
 8004540:	d006      	beq.n	8004550 <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004542:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004544:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004546:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004548:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 800454a:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800454c:	6203      	str	r3, [r0, #32]
}
 800454e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004550:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004552:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004556:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800455a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800455e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004562:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004564:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004568:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 800456c:	e7e9      	b.n	8004542 <TIM_OC3_SetConfig+0x32>
 800456e:	bf00      	nop
 8004570:	40010000 	.word	0x40010000

08004574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004574:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004576:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004578:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800457a:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800457c:	4d10      	ldr	r5, [pc, #64]	; (80045c0 <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800457e:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8004582:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8004584:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004586:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004588:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800458a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800458e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004592:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004594:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004598:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459c:	d00a      	beq.n	80045b4 <TIM_OC4_SetConfig+0x40>
 800459e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045a2:	42a8      	cmp	r0, r5
 80045a4:	d006      	beq.n	80045b4 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045a6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045a8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80045aa:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80045ac:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80045ae:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80045b0:	6203      	str	r3, [r0, #32]
}
 80045b2:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045b4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045b6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045ba:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80045be:	e7f2      	b.n	80045a6 <TIM_OC4_SetConfig+0x32>
 80045c0:	40010000 	.word	0x40010000

080045c4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045c4:	6803      	ldr	r3, [r0, #0]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d4:	2a06      	cmp	r2, #6
 80045d6:	d003      	beq.n	80045e0 <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]
}
 80045e0:	2000      	movs	r0, #0
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIM_OC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80045e4:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045e6:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045e8:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045ea:	f001 011f 	and.w	r1, r1, #31
 80045ee:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 80045f2:	ea20 0001 	bic.w	r0, r0, r1
{
 80045f6:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80045f8:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045fa:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045fc:	4c0c      	ldr	r4, [pc, #48]	; (8004630 <HAL_TIM_OC_Start+0x4c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045fe:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004600:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004602:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004604:	d00f      	beq.n	8004626 <HAL_TIM_OC_Start+0x42>
 8004606:	4a0b      	ldr	r2, [pc, #44]	; (8004634 <HAL_TIM_OC_Start+0x50>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d00c      	beq.n	8004626 <HAL_TIM_OC_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004612:	2a06      	cmp	r2, #6
 8004614:	d003      	beq.n	800461e <HAL_TIM_OC_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
}
 800461e:	2000      	movs	r0, #0
 8004620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004624:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8004626:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004628:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800462c:	645a      	str	r2, [r3, #68]	; 0x44
 800462e:	e7ed      	b.n	800460c <HAL_TIM_OC_Start+0x28>
 8004630:	40010000 	.word	0x40010000
 8004634:	40010400 	.word	0x40010400

08004638 <HAL_TIM_PWM_Start>:
 8004638:	f7ff bfd4 	b.w	80045e4 <HAL_TIM_OC_Start>

0800463c <HAL_TIM_OC_DelayElapsedCallback>:
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop

08004640 <HAL_TIM_IC_CaptureCallback>:
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop

08004644 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop

08004648 <HAL_TIM_TriggerCallback>:
 8004648:	4770      	bx	lr
 800464a:	bf00      	nop

0800464c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800464c:	6803      	ldr	r3, [r0, #0]
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	0791      	lsls	r1, r2, #30
{
 8004652:	b510      	push	{r4, lr}
 8004654:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004656:	d502      	bpl.n	800465e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	0792      	lsls	r2, r2, #30
 800465c:	d45f      	bmi.n	800471e <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	0750      	lsls	r0, r2, #29
 8004662:	d502      	bpl.n	800466a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	0751      	lsls	r1, r2, #29
 8004668:	d446      	bmi.n	80046f8 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	0712      	lsls	r2, r2, #28
 800466e:	d502      	bpl.n	8004676 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	0710      	lsls	r0, r2, #28
 8004674:	d42e      	bmi.n	80046d4 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	06d2      	lsls	r2, r2, #27
 800467a:	d502      	bpl.n	8004682 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	06d0      	lsls	r0, r2, #27
 8004680:	d418      	bmi.n	80046b4 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	07d1      	lsls	r1, r2, #31
 8004686:	d502      	bpl.n	800468e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	07d2      	lsls	r2, r2, #31
 800468c:	d45d      	bmi.n	800474a <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	0610      	lsls	r0, r2, #24
 8004692:	d502      	bpl.n	800469a <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	0611      	lsls	r1, r2, #24
 8004698:	d45f      	bmi.n	800475a <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	0652      	lsls	r2, r2, #25
 800469e:	d502      	bpl.n	80046a6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046a0:	68da      	ldr	r2, [r3, #12]
 80046a2:	0650      	lsls	r0, r2, #25
 80046a4:	d461      	bmi.n	800476a <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	0691      	lsls	r1, r2, #26
 80046aa:	d502      	bpl.n	80046b2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046ac:	68da      	ldr	r2, [r3, #12]
 80046ae:	0692      	lsls	r2, r2, #26
 80046b0:	d443      	bmi.n	800473a <HAL_TIM_IRQHandler+0xee>
}
 80046b2:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046b4:	f06f 0210 	mvn.w	r2, #16
 80046b8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046ba:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046bc:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046be:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046c2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80046c4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046c6:	d064      	beq.n	8004792 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80046c8:	f7ff ffba 	bl	8004640 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046cc:	2200      	movs	r2, #0
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	7722      	strb	r2, [r4, #28]
 80046d2:	e7d6      	b.n	8004682 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046d4:	f06f 0208 	mvn.w	r2, #8
 80046d8:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046dc:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046de:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046e0:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80046e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046e4:	d152      	bne.n	800478c <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	f7ff ffa9 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ea:	4620      	mov	r0, r4
 80046ec:	f7ff ffaa 	bl	8004644 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f0:	2200      	movs	r2, #0
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	7722      	strb	r2, [r4, #28]
 80046f6:	e7be      	b.n	8004676 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80046f8:	f06f 0204 	mvn.w	r2, #4
 80046fc:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046fe:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004700:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004702:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004706:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004708:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800470a:	d13c      	bne.n	8004786 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800470c:	f7ff ff96 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004710:	4620      	mov	r0, r4
 8004712:	f7ff ff97 	bl	8004644 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004716:	2200      	movs	r2, #0
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	7722      	strb	r2, [r4, #28]
 800471c:	e7a5      	b.n	800466a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800471e:	f06f 0202 	mvn.w	r2, #2
 8004722:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004724:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004726:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004728:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800472c:	d025      	beq.n	800477a <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800472e:	f7ff ff87 	bl	8004640 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004732:	2200      	movs	r2, #0
 8004734:	6823      	ldr	r3, [r4, #0]
 8004736:	7722      	strb	r2, [r4, #28]
 8004738:	e791      	b.n	800465e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800473a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800473e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004740:	611a      	str	r2, [r3, #16]
}
 8004742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004746:	f000 b9c9 	b.w	8004adc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800474a:	f06f 0201 	mvn.w	r2, #1
 800474e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004750:	4620      	mov	r0, r4
 8004752:	f7fd f965 	bl	8001a20 <HAL_TIM_PeriodElapsedCallback>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	e799      	b.n	800468e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800475a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800475e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004760:	4620      	mov	r0, r4
 8004762:	f000 f9bd 	bl	8004ae0 <HAL_TIMEx_BreakCallback>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	e797      	b.n	800469a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800476a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800476e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004770:	4620      	mov	r0, r4
 8004772:	f7ff ff69 	bl	8004648 <HAL_TIM_TriggerCallback>
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	e795      	b.n	80046a6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800477a:	f7ff ff5f 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800477e:	4620      	mov	r0, r4
 8004780:	f7ff ff60 	bl	8004644 <HAL_TIM_PWM_PulseFinishedCallback>
 8004784:	e7d5      	b.n	8004732 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	f7ff ff5b 	bl	8004640 <HAL_TIM_IC_CaptureCallback>
 800478a:	e7c4      	b.n	8004716 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800478c:	f7ff ff58 	bl	8004640 <HAL_TIM_IC_CaptureCallback>
 8004790:	e7ae      	b.n	80046f0 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004792:	f7ff ff53 	bl	800463c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004796:	4620      	mov	r0, r4
 8004798:	f7ff ff54 	bl	8004644 <HAL_TIM_PWM_PulseFinishedCallback>
 800479c:	e796      	b.n	80046cc <HAL_TIM_IRQHandler+0x80>
 800479e:	bf00      	nop

080047a0 <TIM_Base_SetConfig>:
{
 80047a0:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047a2:	4e36      	ldr	r6, [pc, #216]	; (800487c <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 80047a4:	6803      	ldr	r3, [r0, #0]
 80047a6:	694d      	ldr	r5, [r1, #20]
 80047a8:	688c      	ldr	r4, [r1, #8]
 80047aa:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ac:	42b0      	cmp	r0, r6
 80047ae:	d055      	beq.n	800485c <TIM_Base_SetConfig+0xbc>
 80047b0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80047b4:	d029      	beq.n	800480a <TIM_Base_SetConfig+0x6a>
 80047b6:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80047ba:	42b0      	cmp	r0, r6
 80047bc:	d037      	beq.n	800482e <TIM_Base_SetConfig+0x8e>
 80047be:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80047c2:	42b0      	cmp	r0, r6
 80047c4:	d033      	beq.n	800482e <TIM_Base_SetConfig+0x8e>
 80047c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80047ca:	42b0      	cmp	r0, r6
 80047cc:	d02f      	beq.n	800482e <TIM_Base_SetConfig+0x8e>
 80047ce:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80047d2:	42b0      	cmp	r0, r6
 80047d4:	d02b      	beq.n	800482e <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047d6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80047da:	42b0      	cmp	r0, r6
 80047dc:	d013      	beq.n	8004806 <TIM_Base_SetConfig+0x66>
 80047de:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80047e2:	42b0      	cmp	r0, r6
 80047e4:	d00f      	beq.n	8004806 <TIM_Base_SetConfig+0x66>
 80047e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80047ea:	42b0      	cmp	r0, r6
 80047ec:	d00b      	beq.n	8004806 <TIM_Base_SetConfig+0x66>
 80047ee:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80047f2:	42b0      	cmp	r0, r6
 80047f4:	d007      	beq.n	8004806 <TIM_Base_SetConfig+0x66>
 80047f6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80047fa:	42b0      	cmp	r0, r6
 80047fc:	d003      	beq.n	8004806 <TIM_Base_SetConfig+0x66>
 80047fe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004802:	42b0      	cmp	r0, r6
 8004804:	d109      	bne.n	800481a <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004806:	68c9      	ldr	r1, [r1, #12]
 8004808:	e004      	b.n	8004814 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 800480a:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800480c:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004812:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004818:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800481e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004820:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004822:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004824:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004826:	2301      	movs	r3, #1
 8004828:	6143      	str	r3, [r0, #20]
}
 800482a:	bcf0      	pop	{r4, r5, r6, r7}
 800482c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800482e:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004830:	4f13      	ldr	r7, [pc, #76]	; (8004880 <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004836:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004838:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800483a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004840:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004844:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004846:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 8004848:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800484a:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800484c:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800484e:	d1ea      	bne.n	8004826 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8004850:	690b      	ldr	r3, [r1, #16]
 8004852:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004854:	2301      	movs	r3, #1
 8004856:	6143      	str	r3, [r0, #20]
}
 8004858:	bcf0      	pop	{r4, r5, r6, r7}
 800485a:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800485c:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800485e:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004864:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800486c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004870:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8004872:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004874:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004876:	6282      	str	r2, [r0, #40]	; 0x28
 8004878:	e7ea      	b.n	8004850 <TIM_Base_SetConfig+0xb0>
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40010400 	.word	0x40010400

08004884 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004884:	b1b8      	cbz	r0, 80048b6 <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004886:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800488a:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800488c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004890:	4604      	mov	r4, r0
 8004892:	b15b      	cbz	r3, 80048ac <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	2302      	movs	r3, #2
 8004896:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800489a:	6820      	ldr	r0, [r4, #0]
 800489c:	1d21      	adds	r1, r4, #4
 800489e:	f7ff ff7f 	bl	80047a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80048a2:	2301      	movs	r3, #1
 80048a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80048a8:	2000      	movs	r0, #0
}
 80048aa:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80048ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80048b0:	f7fd fa80 	bl	8001db4 <HAL_TIM_Base_MspInit>
 80048b4:	e7ee      	b.n	8004894 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80048b6:	2001      	movs	r0, #1
}
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop

080048bc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80048bc:	b1b8      	cbz	r0, 80048ee <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80048be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80048c2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80048c4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80048c8:	4604      	mov	r4, r0
 80048ca:	b15b      	cbz	r3, 80048e4 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	2302      	movs	r3, #2
 80048ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d2:	6820      	ldr	r0, [r4, #0]
 80048d4:	1d21      	adds	r1, r4, #4
 80048d6:	f7ff ff63 	bl	80047a0 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80048da:	2301      	movs	r3, #1
 80048dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80048e0:	2000      	movs	r0, #0
}
 80048e2:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80048e4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80048e8:	f7fd fa4c 	bl	8001d84 <HAL_TIM_PWM_MspInit>
 80048ec:	e7ee      	b.n	80048cc <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 80048ee:	2001      	movs	r0, #1
}
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop

080048f4 <TIM_OC2_SetConfig>:
{
 80048f4:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f6:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048f8:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048fa:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048fc:	4d15      	ldr	r5, [pc, #84]	; (8004954 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048fe:	f024 0410 	bic.w	r4, r4, #16
 8004902:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8004904:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004906:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004908:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800490a:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800490e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004912:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004914:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004918:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800491c:	d00a      	beq.n	8004934 <TIM_OC2_SetConfig+0x40>
 800491e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004922:	42a8      	cmp	r0, r5
 8004924:	d006      	beq.n	8004934 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8004926:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004928:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800492a:	6182      	str	r2, [r0, #24]
}
 800492c:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 800492e:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004930:	6203      	str	r3, [r0, #32]
}
 8004932:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004934:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800493a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800493e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004942:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004946:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004948:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800494c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004950:	e7e9      	b.n	8004926 <TIM_OC2_SetConfig+0x32>
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000

08004958 <HAL_TIM_PWM_ConfigChannel>:
{
 8004958:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800495a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800495e:	2b01      	cmp	r3, #1
 8004960:	d074      	beq.n	8004a4c <HAL_TIM_PWM_ConfigChannel+0xf4>
 8004962:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004964:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004966:	2101      	movs	r1, #1
 8004968:	4604      	mov	r4, r0
 800496a:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800496e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8004972:	2a0c      	cmp	r2, #12
 8004974:	d819      	bhi.n	80049aa <HAL_TIM_PWM_ConfigChannel+0x52>
 8004976:	e8df f002 	tbb	[pc, r2]
 800497a:	1807      	.short	0x1807
 800497c:	18381818 	.word	0x18381818
 8004980:	18511818 	.word	0x18511818
 8004984:	1818      	.short	0x1818
 8004986:	1f          	.byte	0x1f
 8004987:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004988:	4629      	mov	r1, r5
 800498a:	6800      	ldr	r0, [r0, #0]
 800498c:	f7ff fd90 	bl	80044b0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004990:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004992:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004994:	6999      	ldr	r1, [r3, #24]
 8004996:	f041 0108 	orr.w	r1, r1, #8
 800499a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800499c:	6999      	ldr	r1, [r3, #24]
 800499e:	f021 0104 	bic.w	r1, r1, #4
 80049a2:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	4302      	orrs	r2, r0
 80049a8:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80049aa:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80049ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80049ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80049b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80049b6:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049b8:	4629      	mov	r1, r5
 80049ba:	6800      	ldr	r0, [r0, #0]
 80049bc:	f7ff fdda 	bl	8004574 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049c0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049c2:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049c4:	69d9      	ldr	r1, [r3, #28]
 80049c6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80049ca:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049cc:	69d9      	ldr	r1, [r3, #28]
 80049ce:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80049d2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80049da:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80049dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80049de:	2301      	movs	r3, #1
 80049e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80049e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80049e8:	e7e5      	b.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049ea:	4629      	mov	r1, r5
 80049ec:	6800      	ldr	r0, [r0, #0]
 80049ee:	f7ff ff81 	bl	80048f4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049f4:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f6:	6999      	ldr	r1, [r3, #24]
 80049f8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80049fc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049fe:	6999      	ldr	r1, [r3, #24]
 8004a00:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004a04:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004a0c:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004a0e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a10:	2301      	movs	r3, #1
 8004a12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a16:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8004a1a:	e7cc      	b.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a1c:	4629      	mov	r1, r5
 8004a1e:	6800      	ldr	r0, [r0, #0]
 8004a20:	f7ff fd76 	bl	8004510 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a24:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a26:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a28:	69d9      	ldr	r1, [r3, #28]
 8004a2a:	f041 0108 	orr.w	r1, r1, #8
 8004a2e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a30:	69d9      	ldr	r1, [r3, #28]
 8004a32:	f021 0104 	bic.w	r1, r1, #4
 8004a36:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	4302      	orrs	r2, r0
 8004a3c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004a3e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004a46:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8004a4a:	e7b4      	b.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8004a4c:	2002      	movs	r0, #2
}
 8004a4e:	bd38      	pop	{r3, r4, r5, pc}

08004a50 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d03a      	beq.n	8004ace <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a58:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5a:	2202      	movs	r2, #2
{
 8004a5c:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004a62:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a64:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a66:	4d1b      	ldr	r5, [pc, #108]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8004a68:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a6e:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a70:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8004a72:	f04f 0601 	mov.w	r6, #1
 8004a76:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 8004a7a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7c:	d019      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d016      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004a84:	4a14      	ldr	r2, [pc, #80]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004a8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00f      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004a92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004a9a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004aa2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8004aaa:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d104      	bne.n	8004abc <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ab2:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ab8:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aba:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004abc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ac4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8004ac8:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8004aca:	4618      	mov	r0, r3
}
 8004acc:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004ace:	2002      	movs	r0, #2
}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40000400 	.word	0x40000400

08004adc <HAL_TIMEx_CommutCallback>:
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop

08004ae0 <HAL_TIMEx_BreakCallback>:
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop

08004ae4 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae4:	6802      	ldr	r2, [r0, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ae6:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae8:	6911      	ldr	r1, [r2, #16]
{
 8004aea:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aec:	68c5      	ldr	r5, [r0, #12]
 8004aee:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 8004af2:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af4:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af8:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004afa:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004afc:	6965      	ldr	r5, [r4, #20]
 8004afe:	4303      	orrs	r3, r0
 8004b00:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004b02:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b06:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 8004b08:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b0c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8004b0e:	430b      	orrs	r3, r1
 8004b10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b12:	6953      	ldr	r3, [r2, #20]
 8004b14:	69a1      	ldr	r1, [r4, #24]
 8004b16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b1a:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b20:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b22:	4b2a      	ldr	r3, [pc, #168]	; (8004bcc <UART_SetConfig+0xe8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b24:	d023      	beq.n	8004b6e <UART_SetConfig+0x8a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d01e      	beq.n	8004b68 <UART_SetConfig+0x84>
 8004b2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d01a      	beq.n	8004b68 <UART_SetConfig+0x84>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b32:	f7ff fb8d 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b36:	6863      	ldr	r3, [r4, #4]
 8004b38:	2219      	movs	r2, #25
 8004b3a:	fba0 0102 	umull	r0, r1, r0, r2
 8004b3e:	009a      	lsls	r2, r3, #2
 8004b40:	0f9b      	lsrs	r3, r3, #30
 8004b42:	f7fc f8a1 	bl	8000c88 <__aeabi_uldivmod>
 8004b46:	4922      	ldr	r1, [pc, #136]	; (8004bd0 <UART_SetConfig+0xec>)
 8004b48:	6824      	ldr	r4, [r4, #0]
 8004b4a:	fba1 3200 	umull	r3, r2, r1, r0
 8004b4e:	0952      	lsrs	r2, r2, #5
 8004b50:	2364      	movs	r3, #100	; 0x64
 8004b52:	fb03 0312 	mls	r3, r3, r2, r0
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	3332      	adds	r3, #50	; 0x32
 8004b5a:	fba1 1303 	umull	r1, r3, r1, r3
 8004b5e:	0112      	lsls	r2, r2, #4
 8004b60:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8004b64:	60a3      	str	r3, [r4, #8]
    }
  }
}
 8004b66:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7ff fb82 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	e7e3      	b.n	8004b36 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d028      	beq.n	8004bc4 <UART_SetConfig+0xe0>
 8004b72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d024      	beq.n	8004bc4 <UART_SetConfig+0xe0>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b7a:	f7ff fb69 	bl	8004250 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b7e:	6862      	ldr	r2, [r4, #4]
 8004b80:	4d13      	ldr	r5, [pc, #76]	; (8004bd0 <UART_SetConfig+0xec>)
 8004b82:	1892      	adds	r2, r2, r2
 8004b84:	f04f 0119 	mov.w	r1, #25
 8004b88:	f04f 0600 	mov.w	r6, #0
 8004b8c:	eb46 0306 	adc.w	r3, r6, r6
 8004b90:	fba0 0101 	umull	r0, r1, r0, r1
 8004b94:	f7fc f878 	bl	8000c88 <__aeabi_uldivmod>
 8004b98:	fba5 3200 	umull	r3, r2, r5, r0
 8004b9c:	0951      	lsrs	r1, r2, #5
 8004b9e:	2364      	movs	r3, #100	; 0x64
 8004ba0:	fb03 0311 	mls	r3, r3, r1, r0
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	3332      	adds	r3, #50	; 0x32
 8004ba8:	fba5 2303 	umull	r2, r3, r5, r3
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	f003 0207 	and.w	r2, r3, #7
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	6824      	ldr	r4, [r4, #0]
 8004bb6:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004bba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bbe:	4413      	add	r3, r2
 8004bc0:	60a3      	str	r3, [r4, #8]
}
 8004bc2:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bc4:	f7ff fb54 	bl	8004270 <HAL_RCC_GetPCLK2Freq>
 8004bc8:	e7d9      	b.n	8004b7e <UART_SetConfig+0x9a>
 8004bca:	bf00      	nop
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	51eb851f 	.word	0x51eb851f

08004bd4 <HAL_UART_Init>:
  if (huart == NULL)
 8004bd4:	b360      	cbz	r0, 8004c30 <HAL_UART_Init+0x5c>
{
 8004bd6:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004bd8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004bdc:	4604      	mov	r4, r0
 8004bde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004be2:	b303      	cbz	r3, 8004c26 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8004be4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004be6:	2324      	movs	r3, #36	; 0x24
 8004be8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004bec:	68d3      	ldr	r3, [r2, #12]
 8004bee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bf2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	f7ff ff75 	bl	8004ae4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bfa:	6823      	ldr	r3, [r4, #0]
 8004bfc:	691a      	ldr	r2, [r3, #16]
 8004bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c02:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c0a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004c0c:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0e:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c10:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004c12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c16:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8004c18:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1a:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004c1c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004c20:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8004c24:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8004c26:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004c2a:	f7fd f90d 	bl	8001e48 <HAL_UART_MspInit>
 8004c2e:	e7d9      	b.n	8004be4 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 8004c30:	2001      	movs	r0, #1
}
 8004c32:	4770      	bx	lr

08004c34 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8004c34:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d118      	bne.n	8004c6e <HAL_UART_Transmit_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8004c3c:	b1c9      	cbz	r1, 8004c72 <HAL_UART_Transmit_IT+0x3e>
 8004c3e:	b1c2      	cbz	r2, 8004c72 <HAL_UART_Transmit_IT+0x3e>
    __HAL_LOCK(huart);
 8004c40:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d012      	beq.n	8004c6e <HAL_UART_Transmit_IT+0x3a>
{
 8004c48:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4a:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004c4c:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 8004c4e:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c50:	2421      	movs	r4, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c52:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c54:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004c58:	68ec      	ldr	r4, [r5, #12]
    huart->pTxBuffPtr = pData;
 8004c5a:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004c5c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    huart->TxXferSize = Size;
 8004c60:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UNLOCK(huart);
 8004c62:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    return HAL_OK;
 8004c66:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004c68:	60ec      	str	r4, [r5, #12]
}
 8004c6a:	bc30      	pop	{r4, r5}
 8004c6c:	4770      	bx	lr
    return HAL_BUSY;
 8004c6e:	2002      	movs	r0, #2
}
 8004c70:	4770      	bx	lr
      return HAL_ERROR;
 8004c72:	2001      	movs	r0, #1
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop

08004c78 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c78:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004c7c:	2b20      	cmp	r3, #32
 8004c7e:	d120      	bne.n	8004cc2 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8004c80:	b309      	cbz	r1, 8004cc6 <HAL_UART_Receive_IT+0x4e>
 8004c82:	b302      	cbz	r2, 8004cc6 <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 8004c84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d01a      	beq.n	8004cc2 <HAL_UART_Receive_IT+0x4a>
{
 8004c8c:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8e:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c90:	6804      	ldr	r4, [r0, #0]
    huart->RxXferCount = Size;
 8004c92:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c94:	2522      	movs	r5, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c96:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c98:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c9c:	68e5      	ldr	r5, [r4, #12]
    huart->RxXferSize = Size;
 8004c9e:	8582      	strh	r2, [r0, #44]	; 0x2c
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004ca0:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    huart->pRxBuffPtr = pData;
 8004ca4:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UNLOCK(huart);
 8004ca6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004caa:	60e5      	str	r5, [r4, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004cac:	6962      	ldr	r2, [r4, #20]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	6162      	str	r2, [r4, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cb4:	68e2      	ldr	r2, [r4, #12]
 8004cb6:	f042 0220 	orr.w	r2, r2, #32
    return HAL_OK;
 8004cba:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004cbc:	60e2      	str	r2, [r4, #12]
}
 8004cbe:	bc30      	pop	{r4, r5}
 8004cc0:	4770      	bx	lr
    return HAL_BUSY;
 8004cc2:	2002      	movs	r0, #2
}
 8004cc4:	4770      	bx	lr
      return HAL_ERROR;
 8004cc6:	2001      	movs	r0, #1
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop

08004ccc <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004ccc:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cce:	6884      	ldr	r4, [r0, #8]
 8004cd0:	6901      	ldr	r1, [r0, #16]
 8004cd2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cd4:	6802      	ldr	r2, [r0, #0]
 8004cd6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004cda:	d020      	beq.n	8004d1e <UART_Receive_IT.part.1+0x52>
 8004cdc:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cde:	6852      	ldr	r2, [r2, #4]
 8004ce0:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ce2:	b9c9      	cbnz	r1, 8004d18 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ce4:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8004ce6:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004cee:	b98b      	cbnz	r3, 8004d14 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004cf0:	6802      	ldr	r2, [r0, #0]
 8004cf2:	68d1      	ldr	r1, [r2, #12]
 8004cf4:	f021 0120 	bic.w	r1, r1, #32
 8004cf8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004cfa:	68d1      	ldr	r1, [r2, #12]
 8004cfc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004d00:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d02:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004d04:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d06:	f021 0101 	bic.w	r1, r1, #1
 8004d0a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004d0c:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8004d10:	f7fc fef6 	bl	8001b00 <HAL_UART_RxCpltCallback>
}
 8004d14:	2000      	movs	r0, #0
 8004d16:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d1c:	e7e2      	b.n	8004ce4 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d1e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d20:	b929      	cbnz	r1, 8004d2e <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d26:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8004d2a:	6283      	str	r3, [r0, #40]	; 0x28
 8004d2c:	e7db      	b.n	8004ce6 <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8004d34:	6283      	str	r3, [r0, #40]	; 0x28
 8004d36:	e7d6      	b.n	8004ce6 <UART_Receive_IT.part.1+0x1a>

08004d38 <HAL_UART_ErrorCallback>:
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop

08004d3c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d3c:	6803      	ldr	r3, [r0, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
{
 8004d40:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8004d42:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d44:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d46:	6959      	ldr	r1, [r3, #20]
{
 8004d48:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004d4a:	d047      	beq.n	8004ddc <HAL_UART_IRQHandler+0xa0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d4c:	f011 0101 	ands.w	r1, r1, #1
 8004d50:	461e      	mov	r6, r3
 8004d52:	d04c      	beq.n	8004dee <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d54:	07d3      	lsls	r3, r2, #31
 8004d56:	d505      	bpl.n	8004d64 <HAL_UART_IRQHandler+0x28>
 8004d58:	05e8      	lsls	r0, r5, #23
 8004d5a:	d503      	bpl.n	8004d64 <HAL_UART_IRQHandler+0x28>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d64:	0753      	lsls	r3, r2, #29
 8004d66:	d574      	bpl.n	8004e52 <HAL_UART_IRQHandler+0x116>
 8004d68:	b129      	cbz	r1, 8004d76 <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d6c:	0790      	lsls	r0, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d6e:	f043 0302 	orr.w	r3, r3, #2
 8004d72:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d74:	d471      	bmi.n	8004e5a <HAL_UART_IRQHandler+0x11e>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d76:	0710      	lsls	r0, r2, #28
 8004d78:	d503      	bpl.n	8004d82 <HAL_UART_IRQHandler+0x46>
 8004d7a:	06ab      	lsls	r3, r5, #26
 8004d7c:	d472      	bmi.n	8004e64 <HAL_UART_IRQHandler+0x128>
 8004d7e:	2900      	cmp	r1, #0
 8004d80:	d170      	bne.n	8004e64 <HAL_UART_IRQHandler+0x128>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d031      	beq.n	8004dec <HAL_UART_IRQHandler+0xb0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d88:	0690      	lsls	r0, r2, #26
 8004d8a:	d501      	bpl.n	8004d90 <HAL_UART_IRQHandler+0x54>
 8004d8c:	06a9      	lsls	r1, r5, #26
 8004d8e:	d472      	bmi.n	8004e76 <HAL_UART_IRQHandler+0x13a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d90:	6975      	ldr	r5, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d92:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004d94:	0712      	lsls	r2, r2, #28
 8004d96:	d402      	bmi.n	8004d9e <HAL_UART_IRQHandler+0x62>
 8004d98:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8004d9c:	d078      	beq.n	8004e90 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d9e:	68f3      	ldr	r3, [r6, #12]
 8004da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004da4:	60f3      	str	r3, [r6, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	6973      	ldr	r3, [r6, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8004da8:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	6173      	str	r3, [r6, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8004db0:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db4:	6973      	ldr	r3, [r6, #20]
 8004db6:	065b      	lsls	r3, r3, #25
 8004db8:	d559      	bpl.n	8004e6e <HAL_UART_IRQHandler+0x132>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dba:	6973      	ldr	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 8004dbc:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc2:	6173      	str	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	d052      	beq.n	8004e6e <HAL_UART_IRQHandler+0x132>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dc8:	4b3a      	ldr	r3, [pc, #232]	; (8004eb4 <HAL_UART_IRQHandler+0x178>)
 8004dca:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dcc:	f7fd fd76 	bl	80028bc <HAL_DMA_Abort_IT>
 8004dd0:	b160      	cbz	r0, 8004dec <HAL_UART_IRQHandler+0xb0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd2:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8004dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8004dda:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ddc:	0696      	lsls	r6, r2, #26
 8004dde:	d509      	bpl.n	8004df4 <HAL_UART_IRQHandler+0xb8>
 8004de0:	06a9      	lsls	r1, r5, #26
 8004de2:	d507      	bpl.n	8004df4 <HAL_UART_IRQHandler+0xb8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004de4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004de8:	2b22      	cmp	r3, #34	; 0x22
 8004dea:	d04d      	beq.n	8004e88 <HAL_UART_IRQHandler+0x14c>
}
 8004dec:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004dee:	f415 7f90 	tst.w	r5, #288	; 0x120
 8004df2:	d1af      	bne.n	8004d54 <HAL_UART_IRQHandler+0x18>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004df4:	0616      	lsls	r6, r2, #24
 8004df6:	d40e      	bmi.n	8004e16 <HAL_UART_IRQHandler+0xda>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004df8:	0651      	lsls	r1, r2, #25
 8004dfa:	d5f7      	bpl.n	8004dec <HAL_UART_IRQHandler+0xb0>
 8004dfc:	066a      	lsls	r2, r5, #25
 8004dfe:	d5f5      	bpl.n	8004dec <HAL_UART_IRQHandler+0xb0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e00:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004e02:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e08:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004e0a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8004e10:	f7fc fe74 	bl	8001afc <HAL_UART_TxCpltCallback>
}
 8004e14:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e16:	0628      	lsls	r0, r5, #24
 8004e18:	d5ee      	bpl.n	8004df8 <HAL_UART_IRQHandler+0xbc>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e1a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004e1e:	2a21      	cmp	r2, #33	; 0x21
 8004e20:	d1e4      	bne.n	8004dec <HAL_UART_IRQHandler+0xb0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e22:	68a1      	ldr	r1, [r4, #8]
 8004e24:	6a22      	ldr	r2, [r4, #32]
 8004e26:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004e2a:	d036      	beq.n	8004e9a <HAL_UART_IRQHandler+0x15e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e2c:	1c51      	adds	r1, r2, #1
 8004e2e:	6221      	str	r1, [r4, #32]
 8004e30:	7812      	ldrb	r2, [r2, #0]
 8004e32:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004e34:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004e36:	3a01      	subs	r2, #1
 8004e38:	b292      	uxth	r2, r2
 8004e3a:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004e3c:	2a00      	cmp	r2, #0
 8004e3e:	d1d5      	bne.n	8004dec <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e46:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e48:	68da      	ldr	r2, [r3, #12]
 8004e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e4e:	60da      	str	r2, [r3, #12]
}
 8004e50:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e52:	0793      	lsls	r3, r2, #30
 8004e54:	d58f      	bpl.n	8004d76 <HAL_UART_IRQHandler+0x3a>
 8004e56:	2900      	cmp	r1, #0
 8004e58:	d08d      	beq.n	8004d76 <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004e62:	e788      	b.n	8004d76 <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e66:	f043 0308 	orr.w	r3, r3, #8
 8004e6a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004e6c:	e789      	b.n	8004d82 <HAL_UART_IRQHandler+0x46>
            HAL_UART_ErrorCallback(huart);
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f7ff ff62 	bl	8004d38 <HAL_UART_ErrorCallback>
}
 8004e74:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e76:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8004e7a:	2b22      	cmp	r3, #34	; 0x22
 8004e7c:	d188      	bne.n	8004d90 <HAL_UART_IRQHandler+0x54>
 8004e7e:	4620      	mov	r0, r4
 8004e80:	f7ff ff24 	bl	8004ccc <UART_Receive_IT.part.1>
 8004e84:	6826      	ldr	r6, [r4, #0]
 8004e86:	e783      	b.n	8004d90 <HAL_UART_IRQHandler+0x54>
}
 8004e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e8c:	f7ff bf1e 	b.w	8004ccc <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8004e90:	4620      	mov	r0, r4
 8004e92:	f7ff ff51 	bl	8004d38 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e96:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8004e98:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e9a:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004e9c:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e9e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004ea2:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004ea4:	b910      	cbnz	r0, 8004eac <HAL_UART_IRQHandler+0x170>
        huart->pTxBuffPtr += 2U;
 8004ea6:	3202      	adds	r2, #2
 8004ea8:	6222      	str	r2, [r4, #32]
 8004eaa:	e7c3      	b.n	8004e34 <HAL_UART_IRQHandler+0xf8>
        huart->pTxBuffPtr += 1U;
 8004eac:	3201      	adds	r2, #1
 8004eae:	6222      	str	r2, [r4, #32]
 8004eb0:	e7c0      	b.n	8004e34 <HAL_UART_IRQHandler+0xf8>
 8004eb2:	bf00      	nop
 8004eb4:	08004eb9 	.word	0x08004eb9

08004eb8 <UART_DMAAbortOnError>:
{
 8004eb8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004eba:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8004ec0:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8004ec2:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004ec4:	f7ff ff38 	bl	8004d38 <HAL_UART_ErrorCallback>
}
 8004ec8:	bd08      	pop	{r3, pc}
 8004eca:	bf00      	nop

08004ecc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ecc:	4b0b      	ldr	r3, [pc, #44]	; (8004efc <USB_CoreReset+0x30>)
 8004ece:	e001      	b.n	8004ed4 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	d010      	beq.n	8004ef6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ed4:	6902      	ldr	r2, [r0, #16]
 8004ed6:	2a00      	cmp	r2, #0
 8004ed8:	dafa      	bge.n	8004ed0 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eda:	6903      	ldr	r3, [r0, #16]
 8004edc:	4a07      	ldr	r2, [pc, #28]	; (8004efc <USB_CoreReset+0x30>)
 8004ede:	f043 0301 	orr.w	r3, r3, #1
 8004ee2:	6103      	str	r3, [r0, #16]
 8004ee4:	e001      	b.n	8004eea <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 8004ee6:	3a01      	subs	r2, #1
 8004ee8:	d005      	beq.n	8004ef6 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004eea:	6903      	ldr	r3, [r0, #16]
 8004eec:	f013 0301 	ands.w	r3, r3, #1
 8004ef0:	d1f9      	bne.n	8004ee6 <USB_CoreReset+0x1a>

  return HAL_OK;
 8004ef2:	4618      	mov	r0, r3
}
 8004ef4:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004ef6:	2003      	movs	r0, #3
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	00030d40 	.word	0x00030d40

08004f00 <USB_CoreInit>:
{
 8004f00:	b084      	sub	sp, #16
 8004f02:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f04:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 8004f06:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f08:	2d01      	cmp	r5, #1
{
 8004f0a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8004f0e:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f10:	d122      	bne.n	8004f58 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f12:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8004f14:	9a11      	ldr	r2, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f1a:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f1c:	68c3      	ldr	r3, [r0, #12]
 8004f1e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004f22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f26:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f28:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004f2a:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f2c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004f30:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004f32:	d023      	beq.n	8004f7c <USB_CoreInit+0x7c>
    ret = USB_CoreReset(USBx);
 8004f34:	4608      	mov	r0, r1
 8004f36:	f7ff ffc9 	bl	8004ecc <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004f3a:	9b08      	ldr	r3, [sp, #32]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d107      	bne.n	8004f50 <USB_CoreInit+0x50>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f40:	688b      	ldr	r3, [r1, #8]
 8004f42:	f043 0306 	orr.w	r3, r3, #6
 8004f46:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f48:	688b      	ldr	r3, [r1, #8]
 8004f4a:	f043 0320 	orr.w	r3, r3, #32
 8004f4e:	608b      	str	r3, [r1, #8]
}
 8004f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f54:	b004      	add	sp, #16
 8004f56:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f58:	68c3      	ldr	r3, [r0, #12]
 8004f5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f5e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004f60:	f7ff ffb4 	bl	8004ecc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f66:	b923      	cbnz	r3, 8004f72 <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f68:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6e:	638b      	str	r3, [r1, #56]	; 0x38
 8004f70:	e7e3      	b.n	8004f3a <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f72:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f78:	638b      	str	r3, [r1, #56]	; 0x38
 8004f7a:	e7de      	b.n	8004f3a <USB_CoreInit+0x3a>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f7c:	68c3      	ldr	r3, [r0, #12]
 8004f7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f82:	60c3      	str	r3, [r0, #12]
 8004f84:	e7d6      	b.n	8004f34 <USB_CoreInit+0x34>
 8004f86:	bf00      	nop

08004f88 <USB_EnableGlobalInt>:
{
 8004f88:	4602      	mov	r2, r0
}
 8004f8a:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004f8c:	6893      	ldr	r3, [r2, #8]
 8004f8e:	f043 0301 	orr.w	r3, r3, #1
 8004f92:	6093      	str	r3, [r2, #8]
}
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop

08004f98 <USB_DisableGlobalInt>:
{
 8004f98:	4602      	mov	r2, r0
}
 8004f9a:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004f9c:	6893      	ldr	r3, [r2, #8]
 8004f9e:	f023 0301 	bic.w	r3, r3, #1
 8004fa2:	6093      	str	r3, [r2, #8]
}
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop

08004fa8 <USB_SetCurrentMode>:
{
 8004fa8:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004faa:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004fac:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004fae:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004fb2:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004fb4:	d00b      	beq.n	8004fce <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8004fb6:	b941      	cbnz	r1, 8004fca <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004fb8:	68c3      	ldr	r3, [r0, #12]
 8004fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004fbe:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004fc0:	2032      	movs	r0, #50	; 0x32
 8004fc2:	f7fd f8d7 	bl	8002174 <HAL_Delay>
  return HAL_OK;
 8004fc6:	2000      	movs	r0, #0
}
 8004fc8:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8004fca:	2001      	movs	r0, #1
}
 8004fcc:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004fce:	68c3      	ldr	r3, [r0, #12]
 8004fd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fd4:	60c3      	str	r3, [r0, #12]
 8004fd6:	e7f3      	b.n	8004fc0 <USB_SetCurrentMode+0x18>

08004fd8 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004fd8:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8004fda:	0892      	lsrs	r2, r2, #2
 8004fdc:	d00c      	beq.n	8004ff8 <USB_ReadPacket+0x20>
{
 8004fde:	b410      	push	{r4}
 8004fe0:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8004fe4:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8004fee:	4281      	cmp	r1, r0
 8004ff0:	d1fa      	bne.n	8004fe8 <USB_ReadPacket+0x10>
}
 8004ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ff6:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8004ff8:	4608      	mov	r0, r1
}
 8004ffa:	4770      	bx	lr

08004ffc <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004ffc:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004ffe:	6980      	ldr	r0, [r0, #24]
}
 8005000:	4010      	ands	r0, r2
 8005002:	4770      	bx	lr

08005004 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8005004:	6940      	ldr	r0, [r0, #20]
}
 8005006:	f000 0001 	and.w	r0, r0, #1
 800500a:	4770      	bx	lr

0800500c <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800500c:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8005010:	f023 0303 	bic.w	r3, r3, #3
 8005014:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005018:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 800501c:	f001 0303 	and.w	r3, r1, #3
 8005020:	4313      	orrs	r3, r2

  if (freq == HCFG_48_MHZ)
 8005022:	2901      	cmp	r1, #1
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005024:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005028:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  if (freq == HCFG_48_MHZ)
 800502c:	d006      	beq.n	800503c <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800502e:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = 6000U;
 8005030:	bf04      	itt	eq
 8005032:	f241 7370 	movweq	r3, #6000	; 0x1770
 8005036:	6043      	streq	r3, [r0, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8005038:	2000      	movs	r0, #0
 800503a:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 800503c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005040:	6043      	str	r3, [r0, #4]
}
 8005042:	2000      	movs	r0, #0
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop

08005048 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005048:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800504a:	2300      	movs	r3, #0
 800504c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800504e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8005052:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005054:	9b01      	ldr	r3, [sp, #4]
 8005056:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800505a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800505c:	9b01      	ldr	r3, [sp, #4]
 800505e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005062:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005064:	d101      	bne.n	800506a <USB_DriveVbus+0x22>
 8005066:	2901      	cmp	r1, #1
 8005068:	d00a      	beq.n	8005080 <USB_DriveVbus+0x38>
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800506a:	04db      	lsls	r3, r3, #19
 800506c:	d505      	bpl.n	800507a <USB_DriveVbus+0x32>
 800506e:	b921      	cbnz	r1, 800507a <USB_DriveVbus+0x32>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005070:	9b01      	ldr	r3, [sp, #4]
 8005072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005076:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 800507a:	2000      	movs	r0, #0
 800507c:	b002      	add	sp, #8
 800507e:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005084:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005088:	9b01      	ldr	r3, [sp, #4]
}
 800508a:	2000      	movs	r0, #0
 800508c:	b002      	add	sp, #8
 800508e:	4770      	bx	lr

08005090 <USB_HostInit>:
{
 8005090:	b084      	sub	sp, #16
 8005092:	b538      	push	{r3, r4, r5, lr}
 8005094:	4604      	mov	r4, r0
  USBx_PCGCCTL = 0U;
 8005096:	2000      	movs	r0, #0
 8005098:	f8c4 0e00 	str.w	r0, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800509c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800509e:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80050a2:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80050a4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80050a6:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
 80050aa:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050ac:	6ba0      	ldr	r0, [r4, #56]	; 0x38
{
 80050ae:	ad05      	add	r5, sp, #20
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050b0:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
{
 80050b4:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80050b8:	63a0      	str	r0, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80050ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050bc:	9906      	ldr	r1, [sp, #24]
 80050be:	05dd      	lsls	r5, r3, #23
 80050c0:	d557      	bpl.n	8005172 <USB_HostInit+0xe2>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80050c2:	9b07      	ldr	r3, [sp, #28]
 80050c4:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80050c6:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80050ca:	d055      	beq.n	8005178 <USB_HostInit+0xe8>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80050cc:	f023 0304 	bic.w	r3, r3, #4
 80050d0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050d4:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80050d8:	6123      	str	r3, [r4, #16]
 80050da:	4b2a      	ldr	r3, [pc, #168]	; (8005184 <USB_HostInit+0xf4>)
 80050dc:	e001      	b.n	80050e2 <USB_HostInit+0x52>
    if (++count > 200000U)
 80050de:	3b01      	subs	r3, #1
 80050e0:	d002      	beq.n	80050e8 <USB_HostInit+0x58>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050e2:	6922      	ldr	r2, [r4, #16]
 80050e4:	0690      	lsls	r0, r2, #26
 80050e6:	d4fa      	bmi.n	80050de <USB_HostInit+0x4e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050e8:	2310      	movs	r3, #16
 80050ea:	6123      	str	r3, [r4, #16]
 80050ec:	4b25      	ldr	r3, [pc, #148]	; (8005184 <USB_HostInit+0xf4>)
 80050ee:	e001      	b.n	80050f4 <USB_HostInit+0x64>
    if (++count > 200000U)
 80050f0:	3b01      	subs	r3, #1
 80050f2:	d002      	beq.n	80050fa <USB_HostInit+0x6a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050f4:	6922      	ldr	r2, [r4, #16]
 80050f6:	06d2      	lsls	r2, r2, #27
 80050f8:	d4fa      	bmi.n	80050f0 <USB_HostInit+0x60>
  for (i = 0U; i < cfg.Host_channels; i++)
 80050fa:	b161      	cbz	r1, 8005116 <USB_HostInit+0x86>
 80050fc:	2200      	movs	r2, #0
    USBx_HC(i)->HCINTMSK = 0U;
 80050fe:	4615      	mov	r5, r2
 8005100:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
  for (i = 0U; i < cfg.Host_channels; i++)
 8005108:	3201      	adds	r2, #1
 800510a:	428a      	cmp	r2, r1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800510c:	6098      	str	r0, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800510e:	60dd      	str	r5, [r3, #12]
 8005110:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.Host_channels; i++)
 8005114:	d1f8      	bne.n	8005108 <USB_HostInit+0x78>
  (void)USB_DriveVbus(USBx, 1U);
 8005116:	2101      	movs	r1, #1
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff ff95 	bl	8005048 <USB_DriveVbus>
  HAL_Delay(200U);
 800511e:	20c8      	movs	r0, #200	; 0xc8
 8005120:	f7fd f828 	bl	8002174 <HAL_Delay>
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005124:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTMSK = 0U;
 8005128:	2200      	movs	r2, #0
 800512a:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800512c:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800512e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005130:	05db      	lsls	r3, r3, #23
 8005132:	d516      	bpl.n	8005162 <USB_HostInit+0xd2>
    USBx->GRXFSIZ  = 0x200U;
 8005134:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005138:	4a13      	ldr	r2, [pc, #76]	; (8005188 <USB_HostInit+0xf8>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <USB_HostInit+0xfc>)
    USBx->GRXFSIZ  = 0x200U;
 800513c:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800513e:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005140:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8005144:	9b08      	ldr	r3, [sp, #32]
 8005146:	b91b      	cbnz	r3, 8005150 <USB_HostInit+0xc0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005148:	69a3      	ldr	r3, [r4, #24]
 800514a:	f043 0310 	orr.w	r3, r3, #16
 800514e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005150:	69a2      	ldr	r2, [r4, #24]
 8005152:	4b0f      	ldr	r3, [pc, #60]	; (8005190 <USB_HostInit+0x100>)
 8005154:	4313      	orrs	r3, r2
 8005156:	61a3      	str	r3, [r4, #24]
}
 8005158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800515c:	2000      	movs	r0, #0
 800515e:	b004      	add	sp, #16
 8005160:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8005162:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005164:	4a0b      	ldr	r2, [pc, #44]	; (8005194 <USB_HostInit+0x104>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005166:	4b0c      	ldr	r3, [pc, #48]	; (8005198 <USB_HostInit+0x108>)
    USBx->GRXFSIZ  = 0x80U;
 8005168:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800516a:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800516c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005170:	e7e8      	b.n	8005144 <USB_HostInit+0xb4>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005172:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8005176:	e7a9      	b.n	80050cc <USB_HostInit+0x3c>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005178:	f043 0304 	orr.w	r3, r3, #4
 800517c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8005180:	e7a8      	b.n	80050d4 <USB_HostInit+0x44>
 8005182:	bf00      	nop
 8005184:	00030d40 	.word	0x00030d40
 8005188:	01000200 	.word	0x01000200
 800518c:	00e00300 	.word	0x00e00300
 8005190:	a3200008 	.word	0xa3200008
 8005194:	00600080 	.word	0x00600080
 8005198:	004000e0 	.word	0x004000e0

0800519c <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800519c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80051a0:	6880      	ldr	r0, [r0, #8]
}
 80051a2:	b280      	uxth	r0, r0
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop

080051a8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80051a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80051ac:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 80051b0:	f505 6ca0 	add.w	ip, r5, #1280	; 0x500
{
 80051b4:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80051b8:	f89d 601c 	ldrb.w	r6, [sp, #28]
 80051bc:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80051c0:	f04f 3eff 	mov.w	lr, #4294967295
 80051c4:	f001 010f 	and.w	r1, r1, #15
 80051c8:	f04f 0801 	mov.w	r8, #1
 80051cc:	f8cc e008 	str.w	lr, [ip, #8]
 80051d0:	fa08 f101 	lsl.w	r1, r8, r1
 80051d4:	fa4f fe82 	sxtb.w	lr, r2
 80051d8:	f500 6980 	add.w	r9, r0, #1024	; 0x400

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80051dc:	2c03      	cmp	r4, #3
 80051de:	d85d      	bhi.n	800529c <USB_HC_Init+0xf4>
 80051e0:	e8df f004 	tbb	[pc, r4]
 80051e4:	02493b49 	.word	0x02493b49
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051e8:	f240 689d 	movw	r8, #1693	; 0x69d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80051ec:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051f0:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 80051f4:	db64      	blt.n	80052c0 <USB_HC_Init+0x118>
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80051f6:	f8d9 8018 	ldr.w	r8, [r9, #24]
 80051fa:	ea48 0101 	orr.w	r1, r8, r1
 80051fe:	f8c9 1018 	str.w	r1, [r9, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005202:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8005206:	2100      	movs	r1, #0
 8005208:	f04c 7c00 	orr.w	ip, ip, #33554432	; 0x2000000
 800520c:	f8c0 c018 	str.w	ip, [r0, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8005210:	4608      	mov	r0, r1
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005212:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005214:	f3c7 070a 	ubfx	r7, r7, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005218:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800521a:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800521e:	433b      	orrs	r3, r7
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005220:	f402 47f0 	and.w	r7, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005224:	04a2      	lsls	r2, r4, #18
 8005226:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800522a:	433b      	orrs	r3, r7
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800522c:	2e02      	cmp	r6, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800522e:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005232:	ea43 0300 	orr.w	r3, r3, r0
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005236:	bf14      	ite	ne
 8005238:	2200      	movne	r2, #0
 800523a:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800523e:	4313      	orrs	r3, r2

  if (ep_type == EP_TYPE_INTR)
 8005240:	2c03      	cmp	r4, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005242:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8005246:	d105      	bne.n	8005254 <USB_HC_Init+0xac>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005248:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 800524c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005250:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return ret;
}
 8005254:	4608      	mov	r0, r1
 8005256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800525a:	f240 2825 	movw	r8, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 800525e:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005262:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8005266:	dac6      	bge.n	80051f6 <USB_HC_Init+0x4e>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005268:	f8dc e00c 	ldr.w	lr, [ip, #12]
 800526c:	f44e 7ec0 	orr.w	lr, lr, #384	; 0x180
 8005270:	f8cc e00c 	str.w	lr, [ip, #12]
 8005274:	e02a      	b.n	80052cc <USB_HC_Init+0x124>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005276:	f240 489d 	movw	r8, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 800527a:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800527e:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8005282:	db1d      	blt.n	80052c0 <USB_HC_Init+0x118>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005284:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8005288:	f41e 7f80 	tst.w	lr, #256	; 0x100
 800528c:	d0b3      	beq.n	80051f6 <USB_HC_Init+0x4e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800528e:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8005292:	f04e 0e60 	orr.w	lr, lr, #96	; 0x60
 8005296:	f8cc e00c 	str.w	lr, [ip, #12]
 800529a:	e7ac      	b.n	80051f6 <USB_HC_Init+0x4e>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800529c:	f8d9 8018 	ldr.w	r8, [r9, #24]
 80052a0:	ea48 0101 	orr.w	r1, r8, r1
 80052a4:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052a8:	6981      	ldr	r1, [r0, #24]
      ret = HAL_ERROR;
 80052aa:	f1be 0f00 	cmp.w	lr, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052ae:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80052b2:	6181      	str	r1, [r0, #24]
      ret = HAL_ERROR;
 80052b4:	bfac      	ite	ge
 80052b6:	2000      	movge	r0, #0
 80052b8:	f44f 4000 	movlt.w	r0, #32768	; 0x8000
 80052bc:	2101      	movs	r1, #1
 80052be:	e7a8      	b.n	8005212 <USB_HC_Init+0x6a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80052c0:	f8dc e00c 	ldr.w	lr, [ip, #12]
 80052c4:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 80052c8:	f8cc e00c 	str.w	lr, [ip, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80052cc:	f8d9 8018 	ldr.w	r8, [r9, #24]
 80052d0:	ea41 0108 	orr.w	r1, r1, r8
 80052d4:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052d8:	6981      	ldr	r1, [r0, #24]
 80052da:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80052de:	6181      	str	r1, [r0, #24]
 80052e0:	2100      	movs	r1, #0
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80052e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80052e6:	e794      	b.n	8005212 <USB_HC_Init+0x6a>

080052e8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80052e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80052ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80052ee:	784f      	ldrb	r7, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80052f0:	05db      	lsls	r3, r3, #23
 80052f2:	eb00 1447 	add.w	r4, r0, r7, lsl #5
 80052f6:	f504 6ca0 	add.w	ip, r4, #1280	; 0x500
 80052fa:	d50d      	bpl.n	8005318 <USB_HC_StartXfer+0x30>
 80052fc:	790b      	ldrb	r3, [r1, #4]
 80052fe:	b95b      	cbnz	r3, 8005318 <USB_HC_StartXfer+0x30>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005300:	2a00      	cmp	r2, #0
 8005302:	f000 808b 	beq.w	800541c <USB_HC_StartXfer+0x134>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
      return HAL_OK;
    }
    else if (dma == 1U)
 8005306:	2a01      	cmp	r2, #1
 8005308:	d106      	bne.n	8005318 <USB_HC_StartXfer+0x30>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800530a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 800530e:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 8005312:	f8cc 500c 	str.w	r5, [ip, #12]
      hc->do_ping = 0U;
 8005316:	714b      	strb	r3, [r1, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005318:	690b      	ldr	r3, [r1, #16]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d14a      	bne.n	80053b4 <USB_HC_StartXfer+0xcc>
 800531e:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8005322:	2501      	movs	r5, #1
  }
  else
  {
    num_packets = 1U;
  }
  if (hc->ep_is_in != 0U)
 8005324:	78ce      	ldrb	r6, [r1, #3]
 8005326:	2e00      	cmp	r6, #0
 8005328:	d153      	bne.n	80053d2 <USB_HC_StartXfer+0xea>
 800532a:	690d      	ldr	r5, [r1, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800532c:	7a8b      	ldrb	r3, [r1, #10]
 800532e:	075b      	lsls	r3, r3, #29
 8005330:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005334:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005338:	f3c5 0e12 	ubfx	lr, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800533c:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005340:	f8cc 3010 	str.w	r3, [ip, #16]

  if (dma != 0U)
 8005344:	b112      	cbz	r2, 800534c <USB_HC_StartXfer+0x64>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005346:	68cb      	ldr	r3, [r1, #12]
 8005348:	f8cc 3014 	str.w	r3, [ip, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800534c:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8005350:	f8de 3008 	ldr.w	r3, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005354:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005358:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8005498 <USB_HC_StartXfer+0x1b0>
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800535c:	f028 5800 	bic.w	r8, r8, #536870912	; 0x20000000
 8005360:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005364:	43db      	mvns	r3, r3
 8005366:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
 800536a:	075b      	lsls	r3, r3, #29
 800536c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005370:	ea43 0308 	orr.w	r3, r3, r8
 8005374:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005378:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 800537c:	f8cc 3000 	str.w	r3, [ip]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005380:	f8dc 3000 	ldr.w	r3, [ip]
 8005384:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005388:	f8cc 3000 	str.w	r3, [ip]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800538c:	f8dc 3000 	ldr.w	r3, [ip]
  if (hc->ep_is_in != 0U)
 8005390:	b326      	cbz	r6, 80053dc <USB_HC_StartXfer+0xf4>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005396:	f8cc 3000 	str.w	r3, [ip]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800539a:	f8dc 3000 	ldr.w	r3, [ip]
 800539e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053a2:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053a6:	f8dc 3000 	ldr.w	r3, [ip]
 80053aa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
    }
  }

  return HAL_OK;
}
 80053ae:	2000      	movs	r0, #0
 80053b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80053b4:	890d      	ldrh	r5, [r1, #8]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	442b      	add	r3, r5
 80053ba:	fbb3 f3f5 	udiv	r3, r3, r5
    if (num_packets > max_hc_pkt_count)
 80053be:	b29e      	uxth	r6, r3
 80053c0:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80053c4:	d823      	bhi.n	800540e <USB_HC_StartXfer+0x126>
 80053c6:	4635      	mov	r5, r6
  if (hc->ep_is_in != 0U)
 80053c8:	78ce      	ldrb	r6, [r1, #3]
 80053ca:	ea4f 4ec3 	mov.w	lr, r3, lsl #19
 80053ce:	2e00      	cmp	r6, #0
 80053d0:	d0ab      	beq.n	800532a <USB_HC_StartXfer+0x42>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80053d2:	890b      	ldrh	r3, [r1, #8]
 80053d4:	fb05 f503 	mul.w	r5, r5, r3
 80053d8:	610d      	str	r5, [r1, #16]
 80053da:	e7a7      	b.n	800532c <USB_HC_StartXfer+0x44>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80053dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e0:	f8cc 3000 	str.w	r3, [ip]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053e4:	f8dc 3000 	ldr.w	r3, [ip]
 80053e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ec:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053f0:	f8dc 3000 	ldr.w	r3, [ip]
 80053f4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d1d8      	bne.n	80053ae <USB_HC_StartXfer+0xc6>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80053fc:	2d00      	cmp	r5, #0
 80053fe:	d0d6      	beq.n	80053ae <USB_HC_StartXfer+0xc6>
      switch (hc->ep_type)
 8005400:	79cb      	ldrb	r3, [r1, #7]
 8005402:	2b03      	cmp	r3, #3
 8005404:	d822      	bhi.n	800544c <USB_HC_StartXfer+0x164>
 8005406:	e8df f003 	tbb	[pc, r3]
 800540a:	1934      	.short	0x1934
 800540c:	1934      	.short	0x1934
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800540e:	022d      	lsls	r5, r5, #8
 8005410:	610d      	str	r5, [r1, #16]
 8005412:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 8005416:	f44f 7580 	mov.w	r5, #256	; 0x100
 800541a:	e783      	b.n	8005324 <USB_HC_StartXfer+0x3c>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800541c:	794b      	ldrb	r3, [r1, #5]
 800541e:	2b01      	cmp	r3, #1
 8005420:	f47f af7a 	bne.w	8005318 <USB_HC_StartXfer+0x30>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005424:	4b1b      	ldr	r3, [pc, #108]	; (8005494 <USB_HC_StartXfer+0x1ac>)
 8005426:	f8cc 3010 	str.w	r3, [ip, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800542a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800542e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005436:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      return HAL_OK;
 800543a:	e7b8      	b.n	80053ae <USB_HC_StartXfer+0xc6>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800543c:	f8de 2010 	ldr.w	r2, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005440:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005442:	b292      	uxth	r2, r2
 8005444:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8005448:	429a      	cmp	r2, r3
 800544a:	d31e      	bcc.n	800548a <USB_HC_StartXfer+0x1a2>
    count32b = ((uint32_t)len + 3U) / 4U;
 800544c:	b2ab      	uxth	r3, r5
 800544e:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8005450:	089b      	lsrs	r3, r3, #2
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005452:	68ca      	ldr	r2, [r1, #12]
    for (i = 0U; i < count32b; i++)
 8005454:	d0ab      	beq.n	80053ae <USB_HC_StartXfer+0xc6>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005456:	eb00 3007 	add.w	r0, r0, r7, lsl #12
 800545a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800545e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005462:	f852 1b04 	ldr.w	r1, [r2], #4
 8005466:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8005468:	4293      	cmp	r3, r2
 800546a:	d1fa      	bne.n	8005462 <USB_HC_StartXfer+0x17a>
}
 800546c:	2000      	movs	r0, #0
 800546e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005472:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005474:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005476:	b292      	uxth	r2, r2
 8005478:	f3c3 038f 	ubfx	r3, r3, #2, #16
 800547c:	429a      	cmp	r2, r3
 800547e:	d2e5      	bcs.n	800544c <USB_HC_StartXfer+0x164>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005480:	6983      	ldr	r3, [r0, #24]
 8005482:	f043 0320 	orr.w	r3, r3, #32
 8005486:	6183      	str	r3, [r0, #24]
 8005488:	e7e0      	b.n	800544c <USB_HC_StartXfer+0x164>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800548a:	6983      	ldr	r3, [r0, #24]
 800548c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005490:	6183      	str	r3, [r0, #24]
 8005492:	e7db      	b.n	800544c <USB_HC_StartXfer+0x164>
 8005494:	80080000 	.word	0x80080000
 8005498:	2000023c 	.word	0x2000023c

0800549c <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800549c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80054a0:	6940      	ldr	r0, [r0, #20]
}
 80054a2:	b280      	uxth	r0, r0
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop

080054a8 <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80054a8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 80054ac:	b410      	push	{r4}
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80054ae:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80054b2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054b6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80054ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80054be:	f501 64a0 	add.w	r4, r1, #1280	; 0x500
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054c2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80054c6:	d022      	beq.n	800550e <USB_HC_Halt+0x66>
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80054c8:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 80054cc:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054d0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80054d4:	d13d      	bne.n	8005552 <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80054d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054da:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054de:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80054e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054e6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054ea:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80054ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054f2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80054f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054fa:	e001      	b.n	8005500 <USB_HC_Halt+0x58>
        if (++count > 1000U)
 80054fc:	3b01      	subs	r3, #1
 80054fe:	d002      	beq.n	8005506 <USB_HC_Halt+0x5e>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	2a00      	cmp	r2, #0
 8005504:	dbfa      	blt.n	80054fc <USB_HC_Halt+0x54>
}
 8005506:	2000      	movs	r0, #0
 8005508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800550c:	4770      	bx	lr
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800550e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005510:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005514:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005518:	d11b      	bne.n	8005552 <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800551a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800551e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005522:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800552a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800552e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005532:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005536:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800553a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800553e:	e001      	b.n	8005544 <USB_HC_Halt+0x9c>
        if (++count > 1000U)
 8005540:	3b01      	subs	r3, #1
 8005542:	d0e0      	beq.n	8005506 <USB_HC_Halt+0x5e>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005544:	6822      	ldr	r2, [r4, #0]
 8005546:	2a00      	cmp	r2, #0
 8005548:	dbfa      	blt.n	8005540 <USB_HC_Halt+0x98>
}
 800554a:	2000      	movs	r0, #0
 800554c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005550:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005552:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
}
 8005556:	2000      	movs	r0, #0
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005558:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800555c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop

08005564 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005564:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005566:	4b22      	ldr	r3, [pc, #136]	; (80055f0 <USB_StopHost+0x8c>)
 8005568:	f44f 6184 	mov.w	r1, #1056	; 0x420
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800556c:	f022 0201 	bic.w	r2, r2, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005570:	b410      	push	{r4}
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005572:	6082      	str	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005574:	6101      	str	r1, [r0, #16]
 8005576:	e001      	b.n	800557c <USB_StopHost+0x18>
    if (++count > 200000U)
 8005578:	3b01      	subs	r3, #1
 800557a:	d002      	beq.n	8005582 <USB_StopHost+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800557c:	6902      	ldr	r2, [r0, #16]
 800557e:	0691      	lsls	r1, r2, #26
 8005580:	d4fa      	bmi.n	8005578 <USB_StopHost+0x14>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005582:	2310      	movs	r3, #16
 8005584:	6103      	str	r3, [r0, #16]
 8005586:	4b1a      	ldr	r3, [pc, #104]	; (80055f0 <USB_StopHost+0x8c>)
 8005588:	e001      	b.n	800558e <USB_StopHost+0x2a>
    if (++count > 200000U)
 800558a:	3b01      	subs	r3, #1
 800558c:	d002      	beq.n	8005594 <USB_StopHost+0x30>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800558e:	6902      	ldr	r2, [r0, #16]
 8005590:	06d2      	lsls	r2, r2, #27
 8005592:	d4fa      	bmi.n	800558a <USB_StopHost+0x26>
 8005594:	f500 61a0 	add.w	r1, r0, #1280	; 0x500
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005598:	460c      	mov	r4, r1
 800559a:	f500 62e0 	add.w	r2, r0, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 800559e:	6823      	ldr	r3, [r4, #0]
 80055a0:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80055a8:	f844 3b20 	str.w	r3, [r4], #32
  for (i = 0U; i <= 15U; i++)
 80055ac:	4294      	cmp	r4, r2
 80055ae:	d1f6      	bne.n	800559e <USB_StopHost+0x3a>
  uint32_t count = 0U;
 80055b0:	2300      	movs	r3, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80055b2:	680a      	ldr	r2, [r1, #0]
 80055b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80055b8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80055bc:	600a      	str	r2, [r1, #0]
 80055be:	e002      	b.n	80055c6 <USB_StopHost+0x62>
      if (++count > 1000U)
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055c0:	680a      	ldr	r2, [r1, #0]
 80055c2:	2a00      	cmp	r2, #0
 80055c4:	da03      	bge.n	80055ce <USB_StopHost+0x6a>
      if (++count > 1000U)
 80055c6:	3301      	adds	r3, #1
 80055c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055cc:	d9f8      	bls.n	80055c0 <USB_StopHost+0x5c>
 80055ce:	3120      	adds	r1, #32
  for (i = 0U; i <= 15U; i++)
 80055d0:	42a1      	cmp	r1, r4
 80055d2:	d1ee      	bne.n	80055b2 <USB_StopHost+0x4e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
 80055d8:	f8c0 3414 	str.w	r3, [r0, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055dc:	6143      	str	r3, [r0, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055de:	6883      	ldr	r3, [r0, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 80055e0:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80055e4:	f043 0301 	orr.w	r3, r3, #1
 80055e8:	6083      	str	r3, [r0, #8]
}
 80055ea:	2000      	movs	r0, #0
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	00030d40 	.word	0x00030d40

080055f4 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 80055f4:	2000      	movs	r0, #0
 80055f6:	4770      	bx	lr

080055f8 <USBH_CDC_ClassRequest>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055f8:	f8d0 2378 	ldr.w	r2, [r0, #888]	; 0x378
{
 80055fc:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80055fe:	69d1      	ldr	r1, [r2, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005600:	f242 13a1 	movw	r3, #8609	; 0x21a1
 8005604:	6103      	str	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
 8005606:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800560a:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.wValue.w = 0U;
 800560c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800560e:	2207      	movs	r2, #7
{
 8005610:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005612:	f000 fb4d 	bl	8005cb0 <USBH_CtlReq>
  if(status == USBH_OK)
 8005616:	4605      	mov	r5, r0
 8005618:	b920      	cbnz	r0, 8005624 <USBH_CDC_ClassRequest+0x2c>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800561a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800561e:	4620      	mov	r0, r4
 8005620:	2102      	movs	r1, #2
 8005622:	4798      	blx	r3
}
 8005624:	4628      	mov	r0, r5
 8005626:	bd38      	pop	{r3, r4, r5, pc}

08005628 <USBH_CDC_InterfaceDeInit>:
{
 8005628:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800562a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800562e:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8005630:	7821      	ldrb	r1, [r4, #0]
{
 8005632:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8005634:	b979      	cbnz	r1, 8005656 <USBH_CDC_InterfaceDeInit+0x2e>
  if ( CDC_Handle->DataItf.InPipe)
 8005636:	7b21      	ldrb	r1, [r4, #12]
 8005638:	b9c1      	cbnz	r1, 800566c <USBH_CDC_InterfaceDeInit+0x44>
  if ( CDC_Handle->DataItf.OutPipe)
 800563a:	7b61      	ldrb	r1, [r4, #13]
 800563c:	bb11      	cbnz	r1, 8005684 <USBH_CDC_InterfaceDeInit+0x5c>
  if(phost->pActiveClass->pData)
 800563e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8005642:	69d8      	ldr	r0, [r3, #28]
 8005644:	b128      	cbz	r0, 8005652 <USBH_CDC_InterfaceDeInit+0x2a>
    USBH_free (phost->pActiveClass->pData);
 8005646:	f000 fd67 	bl	8006118 <free>
    phost->pActiveClass->pData = 0U;
 800564a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800564e:	2200      	movs	r2, #0
 8005650:	61da      	str	r2, [r3, #28]
}
 8005652:	2000      	movs	r0, #0
 8005654:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005656:	f000 fbad 	bl	8005db4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800565a:	7821      	ldrb	r1, [r4, #0]
 800565c:	4628      	mov	r0, r5
 800565e:	f000 fbc7 	bl	8005df0 <USBH_FreePipe>
  if ( CDC_Handle->DataItf.InPipe)
 8005662:	7b21      	ldrb	r1, [r4, #12]
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005664:	2300      	movs	r3, #0
 8005666:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8005668:	2900      	cmp	r1, #0
 800566a:	d0e6      	beq.n	800563a <USBH_CDC_InterfaceDeInit+0x12>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800566c:	4628      	mov	r0, r5
 800566e:	f000 fba1 	bl	8005db4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005672:	7b21      	ldrb	r1, [r4, #12]
 8005674:	4628      	mov	r0, r5
 8005676:	f000 fbbb 	bl	8005df0 <USBH_FreePipe>
  if ( CDC_Handle->DataItf.OutPipe)
 800567a:	7b61      	ldrb	r1, [r4, #13]
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800567c:	2300      	movs	r3, #0
 800567e:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8005680:	2900      	cmp	r1, #0
 8005682:	d0dc      	beq.n	800563e <USBH_CDC_InterfaceDeInit+0x16>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005684:	4628      	mov	r0, r5
 8005686:	f000 fb95 	bl	8005db4 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800568a:	7b61      	ldrb	r1, [r4, #13]
 800568c:	4628      	mov	r0, r5
 800568e:	f000 fbaf 	bl	8005df0 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005692:	2300      	movs	r3, #0
 8005694:	7363      	strb	r3, [r4, #13]
 8005696:	e7d2      	b.n	800563e <USBH_CDC_InterfaceDeInit+0x16>

08005698 <USBH_CDC_InterfaceInit>:
{
 8005698:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 800569a:	2202      	movs	r2, #2
{
 800569c:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 800569e:	4611      	mov	r1, r2
 80056a0:	2301      	movs	r3, #1
{
 80056a2:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 80056a4:	f000 f9b2 	bl	8005a0c <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 80056a8:	28ff      	cmp	r0, #255	; 0xff
 80056aa:	f000 8089 	beq.w	80057c0 <USBH_CDC_InterfaceInit+0x128>
    USBH_SelectInterface (phost, interface);
 80056ae:	4601      	mov	r1, r0
 80056b0:	4606      	mov	r6, r0
 80056b2:	4628      	mov	r0, r5
 80056b4:	f000 f9a0 	bl	80059f8 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80056b8:	2050      	movs	r0, #80	; 0x50
 80056ba:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 80056be:	f000 fd23 	bl	8006108 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056c2:	231a      	movs	r3, #26
 80056c4:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80056c8:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056ca:	f896 134a 	ldrb.w	r1, [r6, #842]	; 0x34a
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80056ce:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80056d0:	0608      	lsls	r0, r1, #24
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80056d2:	bf4a      	itet	mi
 80056d4:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 80056d8:	7861      	ldrbpl	r1, [r4, #1]
 80056da:	8163      	strhmi	r3, [r4, #10]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80056dc:	4628      	mov	r0, r5
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80056de:	bf48      	it	mi
 80056e0:	7061      	strbmi	r1, [r4, #1]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80056e2:	f000 fb6d 	bl	8005dc0 <USBH_AllocPipe>
    USBH_OpenPipe  (phost,
 80056e6:	f895 131d 	ldrb.w	r1, [r5, #797]	; 0x31d
 80056ea:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80056ee:	7862      	ldrb	r2, [r4, #1]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80056f0:	4606      	mov	r6, r0
    USBH_OpenPipe  (phost,
 80056f2:	8960      	ldrh	r0, [r4, #10]
 80056f4:	9002      	str	r0, [sp, #8]
 80056f6:	2003      	movs	r0, #3
 80056f8:	e9cd 1000 	strd	r1, r0, [sp]
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005700:	7026      	strb	r6, [r4, #0]
    USBH_OpenPipe  (phost,
 8005702:	f000 fb47 	bl	8005d94 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005706:	2200      	movs	r2, #0
 8005708:	7821      	ldrb	r1, [r4, #0]
 800570a:	4628      	mov	r0, r5
 800570c:	f000 fcb2 	bl	8006074 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8005710:	2300      	movs	r3, #0
 8005712:	461a      	mov	r2, r3
 8005714:	210a      	movs	r1, #10
 8005716:	4628      	mov	r0, r5
 8005718:	f000 f978 	bl	8005a0c <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 800571c:	28ff      	cmp	r0, #255	; 0xff
 800571e:	d04f      	beq.n	80057c0 <USBH_CDC_InterfaceInit+0x128>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005720:	231a      	movs	r3, #26
 8005722:	fb03 5300 	mla	r3, r3, r0, r5
 8005726:	f893 234a 	ldrb.w	r2, [r3, #842]	; 0x34a
 800572a:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
 800572e:	0611      	lsls	r1, r2, #24
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005730:	bf4c      	ite	mi
 8005732:	8363      	strhmi	r3, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005734:	8323      	strhpl	r3, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005736:	f04f 031a 	mov.w	r3, #26
 800573a:	fb03 5000 	mla	r0, r3, r0, r5
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800573e:	bf48      	it	mi
 8005740:	73e2      	strbmi	r2, [r4, #15]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005742:	f890 1352 	ldrb.w	r1, [r0, #850]	; 0x352
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005746:	bf58      	it	pl
 8005748:	73a2      	strbpl	r2, [r4, #14]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800574a:	060a      	lsls	r2, r1, #24
 800574c:	f8b0 3354 	ldrh.w	r3, [r0, #852]	; 0x354
 8005750:	d439      	bmi.n	80057c6 <USBH_CDC_InterfaceInit+0x12e>
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005752:	73a1      	strb	r1, [r4, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005754:	8323      	strh	r3, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fb32 	bl	8005dc0 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800575c:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800575e:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005760:	4628      	mov	r0, r5
 8005762:	f000 fb2d 	bl	8005dc0 <USBH_AllocPipe>
      USBH_OpenPipe  (phost,
 8005766:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800576a:	f895 731d 	ldrb.w	r7, [r5, #797]	; 0x31d
 800576e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8005772:	7ba2      	ldrb	r2, [r4, #14]
 8005774:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005776:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8005778:	2602      	movs	r6, #2
 800577a:	e9cd 6c01 	strd	r6, ip, [sp, #4]
 800577e:	9700      	str	r7, [sp, #0]
 8005780:	4628      	mov	r0, r5
 8005782:	f000 fb07 	bl	8005d94 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8005786:	8b67      	ldrh	r7, [r4, #26]
 8005788:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 800578c:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8005790:	7be2      	ldrb	r2, [r4, #15]
 8005792:	7b21      	ldrb	r1, [r4, #12]
 8005794:	9000      	str	r0, [sp, #0]
 8005796:	e9cd 6701 	strd	r6, r7, [sp, #4]
 800579a:	4628      	mov	r0, r5
      CDC_Handle->state = CDC_IDLE_STATE;
 800579c:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 800579e:	f000 faf9 	bl	8005d94 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80057a2:	4632      	mov	r2, r6
 80057a4:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 80057a6:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80057aa:	4628      	mov	r0, r5
 80057ac:	f000 fc62 	bl	8006074 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80057b0:	4632      	mov	r2, r6
 80057b2:	7b21      	ldrb	r1, [r4, #12]
 80057b4:	4628      	mov	r0, r5
 80057b6:	f000 fc5d 	bl	8006074 <USBH_LL_SetToggle>
      status = USBH_OK;
 80057ba:	4630      	mov	r0, r6
}
 80057bc:	b005      	add	sp, #20
 80057be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  USBH_StatusTypeDef status = USBH_FAIL ;
 80057c0:	2002      	movs	r0, #2
}
 80057c2:	b005      	add	sp, #20
 80057c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80057c6:	73e1      	strb	r1, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80057c8:	8363      	strh	r3, [r4, #26]
 80057ca:	7ba1      	ldrb	r1, [r4, #14]
 80057cc:	e7c3      	b.n	8005756 <USBH_CDC_InterfaceInit+0xbe>
 80057ce:	bf00      	nop

080057d0 <USBH_CDC_TransmitCallback>:
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop

080057d4 <USBH_CDC_ReceiveCallback>:
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop

080057d8 <USBH_CDC_LineCodingChanged>:
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{

}
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop

080057dc <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80057dc:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 80057e0:	b570      	push	{r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80057e2:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 80057e4:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 80057e8:	b082      	sub	sp, #8
 80057ea:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 80057ec:	2b04      	cmp	r3, #4
 80057ee:	d807      	bhi.n	8005800 <USBH_CDC_Process+0x24>
 80057f0:	e8df f003 	tbb	[pc, r3]
 80057f4:	4a291509 	.word	0x4a291509
 80057f8:	0c          	.byte	0x0c
 80057f9:	00          	.byte	0x00
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80057fa:	2302      	movs	r3, #2
 80057fc:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8005800:	2001      	movs	r0, #1
}
 8005802:	b002      	add	sp, #8
 8005804:	bd70      	pop	{r4, r5, r6, pc}
    status = USBH_OK;
 8005806:	2000      	movs	r0, #0
}
 8005808:	b002      	add	sp, #8
 800580a:	bd70      	pop	{r4, r5, r6, pc}
    req_status = USBH_ClrFeature(phost, 0x00U);
 800580c:	2100      	movs	r1, #0
 800580e:	f000 fa35 	bl	8005c7c <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8005812:	2800      	cmp	r0, #0
 8005814:	d1f4      	bne.n	8005800 <USBH_CDC_Process+0x24>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005816:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 800581a:	2001      	movs	r0, #1
 800581c:	e7f1      	b.n	8005802 <USBH_CDC_Process+0x26>
  phost->Control.setup.b.wValue.w = 0U;
 800581e:	f242 0221 	movw	r2, #8225	; 0x2021
 8005822:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005826:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.wValue.w = 0U;
 8005828:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800582c:	2207      	movs	r2, #7
 800582e:	f000 fa3f 	bl	8005cb0 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8005832:	2800      	cmp	r0, #0
 8005834:	d0e1      	beq.n	80057fa <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8005836:	2801      	cmp	r0, #1
 8005838:	d0e2      	beq.n	8005800 <USBH_CDC_Process+0x24>
        CDC_Handle->state = CDC_ERROR_STATE;
 800583a:	2304      	movs	r3, #4
  USBH_StatusTypeDef status = USBH_BUSY;
 800583c:	2001      	movs	r0, #1
        CDC_Handle->state = CDC_ERROR_STATE;
 800583e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8005842:	b002      	add	sp, #8
 8005844:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.wValue.w = 0U;
 8005846:	f242 12a1 	movw	r2, #8609	; 0x21a1
 800584a:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800584e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005852:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8005856:	2207      	movs	r2, #7
 8005858:	f000 fa2a 	bl	8005cb0 <USBH_CtlReq>
    if(req_status == USBH_OK)
 800585c:	2800      	cmp	r0, #0
 800585e:	d1ea      	bne.n	8005836 <USBH_CDC_Process+0x5a>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005860:	e9d4 2111 	ldrd	r2, r1, [r4, #68]	; 0x44
 8005864:	684b      	ldr	r3, [r1, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 8005866:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800586a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800586e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005872:	429a      	cmp	r2, r3
 8005874:	d1c4      	bne.n	8005800 <USBH_CDC_Process+0x24>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005876:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005878:	680b      	ldr	r3, [r1, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d1c0      	bne.n	8005800 <USBH_CDC_Process+0x24>
        USBH_CDC_LineCodingChanged(phost);
 800587e:	4628      	mov	r0, r5
 8005880:	f7ff ffaa 	bl	80057d8 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8005884:	2001      	movs	r0, #1
 8005886:	e7bc      	b.n	8005802 <USBH_CDC_Process+0x26>
  switch (CDC_Handle->data_tx_state)
 8005888:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 800588c:	2801      	cmp	r0, #1
 800588e:	d02f      	beq.n	80058f0 <USBH_CDC_Process+0x114>
 8005890:	2802      	cmp	r0, #2
 8005892:	d10e      	bne.n	80058b2 <USBH_CDC_Process+0xd6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005894:	7b61      	ldrb	r1, [r4, #13]
 8005896:	4628      	mov	r0, r5
 8005898:	f000 fbd6 	bl	8006048 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 800589c:	2801      	cmp	r0, #1
 800589e:	d044      	beq.n	800592a <USBH_CDC_Process+0x14e>
 80058a0:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
      if (URB_Status == USBH_URB_NOTREADY)
 80058a4:	2802      	cmp	r0, #2
 80058a6:	69db      	ldr	r3, [r3, #28]
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80058a8:	bf04      	itt	eq
 80058aa:	2201      	moveq	r2, #1
 80058ac:	f884 204d 	strbeq.w	r2, [r4, #77]	; 0x4d
      if (URB_Status == USBH_URB_NOTREADY)
 80058b0:	461c      	mov	r4, r3
  switch(CDC_Handle->data_rx_state)
 80058b2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d02c      	beq.n	8005914 <USBH_CDC_Process+0x138>
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d1a0      	bne.n	8005800 <USBH_CDC_Process+0x24>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80058be:	7b21      	ldrb	r1, [r4, #12]
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 fbc1 	bl	8006048 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80058c6:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80058c8:	4606      	mov	r6, r0
    if(URB_Status == USBH_URB_DONE)
 80058ca:	d199      	bne.n	8005800 <USBH_CDC_Process+0x24>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80058cc:	7b21      	ldrb	r1, [r4, #12]
 80058ce:	4628      	mov	r0, r5
 80058d0:	f000 fb76 	bl	8005fc0 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80058d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80058d6:	4298      	cmp	r0, r3
 80058d8:	d002      	beq.n	80058e0 <USBH_CDC_Process+0x104>
 80058da:	8b62      	ldrh	r2, [r4, #26]
 80058dc:	4290      	cmp	r0, r2
 80058de:	d840      	bhi.n	8005962 <USBH_CDC_Process+0x186>
        CDC_Handle->data_rx_state = CDC_IDLE;
 80058e0:	2300      	movs	r3, #0
        USBH_CDC_ReceiveCallback(phost);
 80058e2:	4628      	mov	r0, r5
        CDC_Handle->data_rx_state = CDC_IDLE;
 80058e4:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 80058e8:	f7ff ff74 	bl	80057d4 <USBH_CDC_ReceiveCallback>
  USBH_StatusTypeDef status = USBH_BUSY;
 80058ec:	2001      	movs	r0, #1
 80058ee:	e788      	b.n	8005802 <USBH_CDC_Process+0x26>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80058f0:	8b22      	ldrh	r2, [r4, #24]
 80058f2:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058f4:	7b63      	ldrb	r3, [r4, #13]
 80058f6:	69e1      	ldr	r1, [r4, #28]
      USBH_BulkSendData (phost,
 80058f8:	9000      	str	r0, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80058fa:	4296      	cmp	r6, r2
      USBH_BulkSendData (phost,
 80058fc:	bf98      	it	ls
 80058fe:	b2b2      	uxthls	r2, r6
 8005900:	4628      	mov	r0, r5
 8005902:	f000 fa21 	bl	8005d48 <USBH_BulkSendData>
 8005906:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800590a:	2202      	movs	r2, #2
 800590c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8005910:	69dc      	ldr	r4, [r3, #28]
 8005912:	e7ce      	b.n	80058b2 <USBH_CDC_Process+0xd6>
    USBH_BulkReceiveData (phost,
 8005914:	7b23      	ldrb	r3, [r4, #12]
 8005916:	8b62      	ldrh	r2, [r4, #26]
 8005918:	6a21      	ldr	r1, [r4, #32]
 800591a:	4628      	mov	r0, r5
 800591c:	f000 fa2a 	bl	8005d74 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005920:	2304      	movs	r3, #4
 8005922:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  USBH_StatusTypeDef status = USBH_BUSY;
 8005926:	2001      	movs	r0, #1
 8005928:	e76b      	b.n	8005802 <USBH_CDC_Process+0x26>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800592a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800592c:	8b22      	ldrh	r2, [r4, #24]
 800592e:	4293      	cmp	r3, r2
 8005930:	d90b      	bls.n	800594a <USBH_CDC_Process+0x16e>
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005932:	69e1      	ldr	r1, [r4, #28]
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005934:	1a9b      	subs	r3, r3, r2
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005936:	440a      	add	r2, r1
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005938:	6263      	str	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800593a:	61e2      	str	r2, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 800593c:	b13b      	cbz	r3, 800594e <USBH_CDC_Process+0x172>
 800593e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005942:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 8005946:	69dc      	ldr	r4, [r3, #28]
 8005948:	e7b3      	b.n	80058b2 <USBH_CDC_Process+0xd6>
        CDC_Handle->TxDataLength = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	6263      	str	r3, [r4, #36]	; 0x24
        CDC_Handle->data_tx_state = CDC_IDLE;
 800594e:	2300      	movs	r3, #0
 8005950:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005954:	4628      	mov	r0, r5
 8005956:	f7ff ff3b 	bl	80057d0 <USBH_CDC_TransmitCallback>
 800595a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800595e:	69dc      	ldr	r4, [r3, #28]
 8005960:	e7a7      	b.n	80058b2 <USBH_CDC_Process+0xd6>
        CDC_Handle->pRxData += length;
 8005962:	6a22      	ldr	r2, [r4, #32]
        CDC_Handle->RxDataLength -= length ;
 8005964:	1a1b      	subs	r3, r3, r0
        CDC_Handle->pRxData += length;
 8005966:	4402      	add	r2, r0
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005968:	2103      	movs	r1, #3
        CDC_Handle->RxDataLength -= length ;
 800596a:	62a3      	str	r3, [r4, #40]	; 0x28
  USBH_StatusTypeDef status = USBH_BUSY;
 800596c:	4630      	mov	r0, r6
        CDC_Handle->pRxData += length;
 800596e:	6222      	str	r2, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005970:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
 8005974:	e745      	b.n	8005802 <USBH_CDC_Process+0x26>
 8005976:	bf00      	nop

08005978 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005978:	b370      	cbz	r0, 80059d8 <USBH_Init+0x60>
{
 800597a:	b538      	push	{r3, r4, r5, lr}

  /* Set DRiver ID */
  phost->id = id;

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800597c:	2300      	movs	r3, #0
  phost->id = id;
 800597e:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 8005982:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005986:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 800598a:	461a      	mov	r2, r3
 800598c:	f500 746e 	add.w	r4, r0, #952	; 0x3b8
 8005990:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 8005994:	f843 2f04 	str.w	r2, [r3, #4]!
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005998:	42a3      	cmp	r3, r4
 800599a:	d1fb      	bne.n	8005994 <USBH_Init+0x1c>
 800599c:	f200 131b 	addw	r3, r0, #283	; 0x11b
 80059a0:	f200 341b 	addw	r4, r0, #795	; 0x31b
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 80059a4:	2200      	movs	r2, #0
 80059a6:	f803 2f01 	strb.w	r2, [r3, #1]!
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80059aa:	429c      	cmp	r4, r3
 80059ac:	d1fb      	bne.n	80059a6 <USBH_Init+0x2e>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80059ae:	2301      	movs	r3, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80059b0:	2540      	movs	r5, #64	; 0x40
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80059b2:	f44f 7480 	mov.w	r4, #256	; 0x100
  phost->gState = HOST_IDLE;
 80059b6:	7002      	strb	r2, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80059b8:	7042      	strb	r2, [r0, #1]
  phost->Timer = 0U;
 80059ba:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  phost->Control.errorcount = 0U;
 80059be:	7642      	strb	r2, [r0, #25]
  phost->RequestState = CMD_SEND;
 80059c0:	7083      	strb	r3, [r0, #2]
  phost->Control.state = CTRL_SETUP;
 80059c2:	7603      	strb	r3, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80059c4:	7185      	strb	r5, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80059c6:	f8a0 431c 	strh.w	r4, [r0, #796]	; 0x31c
  if(pUsrFunc != NULL)
 80059ca:	b109      	cbz	r1, 80059d0 <USBH_Init+0x58>
    phost->pUser = pUsrFunc;
 80059cc:	f8c0 13c8 	str.w	r1, [r0, #968]	; 0x3c8
  USBH_LL_Init(phost);
 80059d0:	f000 fab0 	bl	8005f34 <USBH_LL_Init>
  return USBH_OK;
 80059d4:	2000      	movs	r0, #0
}
 80059d6:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 80059d8:	2002      	movs	r0, #2
}
 80059da:	4770      	bx	lr

080059dc <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 80059dc:	b149      	cbz	r1, 80059f2 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80059de:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 80059e2:	b933      	cbnz	r3, 80059f2 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80059e4:	2201      	movs	r2, #1
 80059e6:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 80059ea:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	4770      	bx	lr
    status = USBH_FAIL;
 80059f2:	2302      	movs	r3, #2
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	4770      	bx	lr

080059f8 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 80059f8:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 80059fc:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 80059fe:	bf86      	itte	hi
 8005a00:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8005a04:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005a06:	2002      	movls	r0, #2
  }
  return status;
}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop

08005a0c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005a0c:	b470      	push	{r4, r5, r6}
 8005a0e:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005a10:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8005a14:	428e      	cmp	r6, r1
 8005a16:	b2e5      	uxtb	r5, r4
 8005a18:	d007      	beq.n	8005a2a <USBH_FindInterface+0x1e>
 8005a1a:	29ff      	cmp	r1, #255	; 0xff
 8005a1c:	d005      	beq.n	8005a2a <USBH_FindInterface+0x1e>
 8005a1e:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a20:	b194      	cbz	r4, 8005a48 <USBH_FindInterface+0x3c>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8005a22:	25ff      	movs	r5, #255	; 0xff
}
 8005a24:	4628      	mov	r0, r5
 8005a26:	bc70      	pop	{r4, r5, r6}
 8005a28:	4770      	bx	lr
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005a2a:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8005a2e:	4296      	cmp	r6, r2
 8005a30:	d001      	beq.n	8005a36 <USBH_FindInterface+0x2a>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005a32:	2aff      	cmp	r2, #255	; 0xff
 8005a34:	d1f3      	bne.n	8005a1e <USBH_FindInterface+0x12>
 8005a36:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 8005a3a:	429e      	cmp	r6, r3
 8005a3c:	d0f2      	beq.n	8005a24 <USBH_FindInterface+0x18>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005a3e:	2bff      	cmp	r3, #255	; 0xff
 8005a40:	d0f0      	beq.n	8005a24 <USBH_FindInterface+0x18>
 8005a42:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005a44:	2c00      	cmp	r4, #0
 8005a46:	d1ec      	bne.n	8005a22 <USBH_FindInterface+0x16>
 8005a48:	2401      	movs	r4, #1
 8005a4a:	e7e1      	b.n	8005a10 <USBH_FindInterface+0x4>

08005a4c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005a50:	f000 fa9a 	bl	8005f88 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005a54:	4620      	mov	r0, r4
 8005a56:	2101      	movs	r1, #1
 8005a58:	f000 fafa 	bl	8006050 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	bd10      	pop	{r4, pc}

08005a60 <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 8005a60:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop

08005a68 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
  phost->Timer ++;
 8005a68:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8005a6c:	3201      	adds	r2, #1
 8005a6e:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005a72:	7802      	ldrb	r2, [r0, #0]
 8005a74:	2a0b      	cmp	r2, #11
 8005a76:	d000      	beq.n	8005a7a <USBH_LL_IncTimer+0x12>
}
 8005a78:	4770      	bx	lr
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005a7a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d0fa      	beq.n	8005a78 <USBH_LL_IncTimer+0x10>
  {
    phost->pActiveClass->SOFProcess(phost);
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	4718      	bx	r3
 8005a86:	bf00      	nop

08005a88 <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f

  return;
}
 8005a8e:	4770      	bx	lr

08005a90 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f

  return;
}
 8005a96:	4770      	bx	lr

08005a98 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8005a98:	7802      	ldrb	r2, [r0, #0]
{
 8005a9a:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8005a9c:	b94a      	cbnz	r2, 8005ab2 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 8005a9e:	f8d0 23c8 	ldr.w	r2, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	f880 131e 	strb.w	r1, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8005aa8:	b10a      	cbz	r2, 8005aae <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005aaa:	2104      	movs	r1, #4
 8005aac:	4790      	blx	r2
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005aae:	2000      	movs	r0, #0
 8005ab0:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8005ab2:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8005ab6:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8005ab8:	bf04      	itt	eq
 8005aba:	2202      	moveq	r2, #2
 8005abc:	7002      	strbeq	r2, [r0, #0]
}
 8005abe:	2000      	movs	r0, #0
 8005ac0:	bd08      	pop	{r3, pc}
 8005ac2:	bf00      	nop

08005ac4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005ac4:	b510      	push	{r4, lr}
 8005ac6:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005ac8:	f000 fa6c 	bl	8005fa4 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005acc:	7921      	ldrb	r1, [r4, #4]
 8005ace:	4620      	mov	r0, r4
 8005ad0:	f000 f98e 	bl	8005df0 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005ad4:	7961      	ldrb	r1, [r4, #5]
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f000 f98a 	bl	8005df0 <USBH_FreePipe>

  phost->device.is_connected = 0U;

  if(phost->pUser != NULL)
 8005adc:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
  phost->device.is_connected = 0U;
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f884 231e 	strb.w	r2, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 8005ae6:	b113      	cbz	r3, 8005aee <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005ae8:	2105      	movs	r1, #5
 8005aea:	4620      	mov	r0, r4
 8005aec:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 fa4a 	bl	8005f88 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005af4:	2303      	movs	r3, #3
 8005af6:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005af8:	2000      	movs	r0, #0
 8005afa:	bd10      	pop	{r4, pc}

08005afc <USBH_CtlReq.part.0>:
  * @param  req: Setup Request Structure
  * @param  buff: data buffer address to store the response
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
 8005afc:	b530      	push	{r4, r5, lr}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8005afe:	7e03      	ldrb	r3, [r0, #24]
 8005b00:	3b01      	subs	r3, #1
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
 8005b02:	b083      	sub	sp, #12
 8005b04:	4604      	mov	r4, r0
  switch (phost->Control.state)
 8005b06:	2b0a      	cmp	r3, #10
 8005b08:	d812      	bhi.n	8005b30 <USBH_CtlReq.part.0+0x34>
 8005b0a:	e8df f003 	tbb	[pc, r3]
 8005b0e:	8a81      	.short	0x8a81
 8005b10:	2e200667 	.word	0x2e200667
 8005b14:	4c733c14 	.word	0x4c733c14
 8005b18:	57          	.byte	0x57
 8005b19:	00          	.byte	0x00
    phost->Control.state = CTRL_DATA_IN_WAIT;
    break;

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005b1a:	7901      	ldrb	r1, [r0, #4]
 8005b1c:	f000 fa94 	bl	8006048 <USBH_LL_GetURBState>

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005b20:	2801      	cmp	r0, #1
 8005b22:	d047      	beq.n	8005bb4 <USBH_CtlReq.part.0+0xb8>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005b24:	2805      	cmp	r0, #5
 8005b26:	d037      	beq.n	8005b98 <USBH_CtlReq.part.0+0x9c>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 8005b28:	2804      	cmp	r0, #4
 8005b2a:	d101      	bne.n	8005b30 <USBH_CtlReq.part.0+0x34>
        phost->Control.state = CTRL_ERROR;
 8005b2c:	230b      	movs	r3, #11
 8005b2e:	7623      	strb	r3, [r4, #24]
 8005b30:	2001      	movs	r0, #1
}
 8005b32:	b003      	add	sp, #12
 8005b34:	bd30      	pop	{r4, r5, pc}
    USBH_CtlReceiveData (phost,
 8005b36:	2200      	movs	r2, #0
 8005b38:	7903      	ldrb	r3, [r0, #4]
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	f000 f8f4 	bl	8005d28 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8005b40:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8005b44:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005b46:	2308      	movs	r3, #8
 8005b48:	7623      	strb	r3, [r4, #24]
 8005b4a:	2001      	movs	r0, #1
 8005b4c:	e7f1      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
    USBH_CtlSendData (phost,
 8005b4e:	2501      	movs	r5, #1
 8005b50:	7943      	ldrb	r3, [r0, #5]
 8005b52:	8982      	ldrh	r2, [r0, #12]
 8005b54:	6881      	ldr	r1, [r0, #8]
 8005b56:	9500      	str	r5, [sp, #0]
 8005b58:	f000 f8ce 	bl	8005cf8 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8005b5c:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8005b60:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005b62:	2306      	movs	r3, #6
 8005b64:	4628      	mov	r0, r5
 8005b66:	7623      	strb	r3, [r4, #24]
 8005b68:	e7e3      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005b6a:	7941      	ldrb	r1, [r0, #5]
 8005b6c:	f000 fa6c 	bl	8006048 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8005b70:	2801      	cmp	r0, #1
 8005b72:	d06a      	beq.n	8005c4a <USBH_CtlReq.part.0+0x14e>
    else if  (URB_Status == USBH_URB_STALL)
 8005b74:	2805      	cmp	r0, #5
 8005b76:	d00f      	beq.n	8005b98 <USBH_CtlReq.part.0+0x9c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005b78:	2802      	cmp	r0, #2
 8005b7a:	d071      	beq.n	8005c60 <USBH_CtlReq.part.0+0x164>
      if (URB_Status == USBH_URB_ERROR)
 8005b7c:	2804      	cmp	r0, #4
 8005b7e:	d1d7      	bne.n	8005b30 <USBH_CtlReq.part.0+0x34>
        phost->Control.state = CTRL_ERROR;
 8005b80:	230b      	movs	r3, #11
 8005b82:	7623      	strb	r3, [r4, #24]
 8005b84:	e026      	b.n	8005bd4 <USBH_CtlReq.part.0+0xd8>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005b86:	7901      	ldrb	r1, [r0, #4]
 8005b88:	f000 fa5e 	bl	8006048 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8005b8c:	2801      	cmp	r0, #1
 8005b8e:	d054      	beq.n	8005c3a <USBH_CtlReq.part.0+0x13e>
    else if (URB_Status == USBH_URB_ERROR)
 8005b90:	2804      	cmp	r0, #4
 8005b92:	d0cb      	beq.n	8005b2c <USBH_CtlReq.part.0+0x30>
      if(URB_Status == USBH_URB_STALL)
 8005b94:	2805      	cmp	r0, #5
 8005b96:	d1cb      	bne.n	8005b30 <USBH_CtlReq.part.0+0x34>
      phost->RequestState = CMD_SEND;
 8005b98:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8005b9a:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8005b9c:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8005b9e:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8005ba0:	7623      	strb	r3, [r4, #24]
}
 8005ba2:	b003      	add	sp, #12
 8005ba4:	bd30      	pop	{r4, r5, pc}
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005ba6:	7941      	ldrb	r1, [r0, #5]
 8005ba8:	f000 fa4e 	bl	8006048 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8005bac:	2801      	cmp	r0, #1
 8005bae:	d044      	beq.n	8005c3a <USBH_CtlReq.part.0+0x13e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005bb0:	2802      	cmp	r0, #2
 8005bb2:	d1b9      	bne.n	8005b28 <USBH_CtlReq.part.0+0x2c>
          phost->Control.state = CTRL_STATUS_OUT;
 8005bb4:	2309      	movs	r3, #9
 8005bb6:	7623      	strb	r3, [r4, #24]
 8005bb8:	2001      	movs	r0, #1
 8005bba:	e7ba      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005bbc:	7e43      	ldrb	r3, [r0, #25]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	7643      	strb	r3, [r0, #25]
 8005bc6:	d94f      	bls.n	8005c68 <USBH_CtlReq.part.0+0x16c>
      phost->Control.state = CTRL_SETUP;
      phost->RequestState = CMD_SEND;
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005bc8:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8005bcc:	2106      	movs	r1, #6
 8005bce:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	7663      	strb	r3, [r4, #25]
        phost->RequestState = CMD_SEND;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8005bd8:	2002      	movs	r0, #2
 8005bda:	e7aa      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
    phost->Control.timer = (uint16_t)phost->Timer;
 8005bdc:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 8005be0:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 8005be2:	8982      	ldrh	r2, [r0, #12]
 8005be4:	7903      	ldrb	r3, [r0, #4]
 8005be6:	6881      	ldr	r1, [r0, #8]
 8005be8:	f000 f89e 	bl	8005d28 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005bec:	2304      	movs	r3, #4
 8005bee:	7623      	strb	r3, [r4, #24]
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	e79e      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
    USBH_CtlSendData (phost,
 8005bf4:	2501      	movs	r5, #1
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	7943      	ldrb	r3, [r0, #5]
 8005bfa:	9500      	str	r5, [sp, #0]
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	f000 f87b 	bl	8005cf8 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8005c02:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8005c06:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005c08:	230a      	movs	r3, #10
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	7623      	strb	r3, [r4, #24]
 8005c0e:	e790      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005c10:	7942      	ldrb	r2, [r0, #5]
 8005c12:	f100 0110 	add.w	r1, r0, #16
 8005c16:	f000 f85f 	bl	8005cd8 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	7623      	strb	r3, [r4, #24]
 8005c1e:	2001      	movs	r0, #1
 8005c20:	e787      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005c22:	7941      	ldrb	r1, [r0, #5]
 8005c24:	f000 fa10 	bl	8006048 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8005c28:	2801      	cmp	r0, #1
 8005c2a:	d012      	beq.n	8005c52 <USBH_CtlReq.part.0+0x156>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005c2c:	2804      	cmp	r0, #4
 8005c2e:	f43f af7d 	beq.w	8005b2c <USBH_CtlReq.part.0+0x30>
 8005c32:	2802      	cmp	r0, #2
 8005c34:	f47f af7c 	bne.w	8005b30 <USBH_CtlReq.part.0+0x34>
 8005c38:	e778      	b.n	8005b2c <USBH_CtlReq.part.0+0x30>
      phost->Control.state =CTRL_IDLE;
 8005c3a:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8005c40:	7620      	strb	r0, [r4, #24]
}
 8005c42:	b003      	add	sp, #12
 8005c44:	bd30      	pop	{r4, r5, pc}
        if (direction == USB_D2H)
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	dbb4      	blt.n	8005bb4 <USBH_CtlReq.part.0+0xb8>
          phost->Control.state = CTRL_STATUS_IN;
 8005c4a:	2307      	movs	r3, #7
 8005c4c:	7623      	strb	r3, [r4, #24]
 8005c4e:	2001      	movs	r0, #1
 8005c50:	e76f      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
      if (phost->Control.setup.b.wLength.w != 0U)
 8005c52:	8ae2      	ldrh	r2, [r4, #22]
 8005c54:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8005c58:	2a00      	cmp	r2, #0
 8005c5a:	d0f4      	beq.n	8005c46 <USBH_CtlReq.part.0+0x14a>
        if (direction == USB_D2H)
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	db09      	blt.n	8005c74 <USBH_CtlReq.part.0+0x178>
          phost->Control.state = CTRL_DATA_OUT;
 8005c60:	2305      	movs	r3, #5
 8005c62:	7623      	strb	r3, [r4, #24]
 8005c64:	2001      	movs	r0, #1
 8005c66:	e764      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
      USBH_LL_Stop(phost);
 8005c68:	f000 f99c 	bl	8005fa4 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8005c6c:	2001      	movs	r0, #1
 8005c6e:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8005c70:	70a0      	strb	r0, [r4, #2]
 8005c72:	e75e      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
          phost->Control.state = CTRL_DATA_IN;
 8005c74:	2303      	movs	r3, #3
 8005c76:	7623      	strb	r3, [r4, #24]
 8005c78:	e75b      	b.n	8005b32 <USBH_CtlReq.part.0+0x36>
 8005c7a:	bf00      	nop

08005c7c <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8005c7c:	7882      	ldrb	r2, [r0, #2]
 8005c7e:	2a01      	cmp	r2, #1
 8005c80:	d005      	beq.n	8005c8e <USBH_ClrFeature+0x12>
  switch (phost->RequestState)
 8005c82:	2a02      	cmp	r2, #2
 8005c84:	d101      	bne.n	8005c8a <USBH_ClrFeature+0xe>
 8005c86:	f7ff bf39 	b.w	8005afc <USBH_CtlReq.part.0>
}
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	4770      	bx	lr
{
 8005c8e:	b430      	push	{r4, r5}
 8005c90:	4603      	mov	r3, r0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005c92:	f44f 7581 	mov.w	r5, #258	; 0x102
    phost->Control.setup.b.wLength.w = 0U;
 8005c96:	2000      	movs	r0, #0
    phost->RequestState = CMD_WAIT;
 8005c98:	2402      	movs	r4, #2
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005c9a:	611d      	str	r5, [r3, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8005c9c:	82d8      	strh	r0, [r3, #22]
    phost->Control.buff = buff;
 8005c9e:	6098      	str	r0, [r3, #8]
    phost->Control.length = length;
 8005ca0:	8198      	strh	r0, [r3, #12]
    phost->RequestState = CMD_WAIT;
 8005ca2:	709c      	strb	r4, [r3, #2]
}
 8005ca4:	2001      	movs	r0, #1
    phost->Control.setup.b.wIndex.w = ep_num;
 8005ca6:	8299      	strh	r1, [r3, #20]
    phost->Control.state = CTRL_SETUP;
 8005ca8:	761a      	strb	r2, [r3, #24]
}
 8005caa:	bc30      	pop	{r4, r5}
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop

08005cb0 <USBH_CtlReq>:
{
 8005cb0:	b410      	push	{r4}
  switch (phost->RequestState)
 8005cb2:	7884      	ldrb	r4, [r0, #2]
 8005cb4:	2c01      	cmp	r4, #1
 8005cb6:	d005      	beq.n	8005cc4 <USBH_CtlReq+0x14>
 8005cb8:	2c02      	cmp	r4, #2
 8005cba:	d109      	bne.n	8005cd0 <USBH_CtlReq+0x20>
}
 8005cbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cc0:	f7ff bf1c 	b.w	8005afc <USBH_CtlReq.part.0>
 8005cc4:	4603      	mov	r3, r0
    phost->RequestState = CMD_WAIT;
 8005cc6:	2002      	movs	r0, #2
    phost->Control.buff = buff;
 8005cc8:	6099      	str	r1, [r3, #8]
    phost->Control.length = length;
 8005cca:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8005ccc:	761c      	strb	r4, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8005cce:	7098      	strb	r0, [r3, #2]
}
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8005cd8:	b530      	push	{r4, r5, lr}
 8005cda:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005cdc:	2400      	movs	r4, #0
 8005cde:	2508      	movs	r5, #8
 8005ce0:	9101      	str	r1, [sp, #4]
 8005ce2:	9403      	str	r4, [sp, #12]
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	9400      	str	r4, [sp, #0]
 8005ce8:	4623      	mov	r3, r4
 8005cea:	4622      	mov	r2, r4
 8005cec:	9502      	str	r5, [sp, #8]
 8005cee:	f000 f991 	bl	8006014 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	b005      	add	sp, #20
 8005cf6:	bd30      	pop	{r4, r5, pc}

08005cf8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8005cf8:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005cfa:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8005cfe:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005d00:	2d00      	cmp	r5, #0
{
 8005d02:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005d06:	9202      	str	r2, [sp, #8]
{
 8005d08:	461d      	mov	r5, r3
    do_ping = 0U;
 8005d0a:	bf18      	it	ne
 8005d0c:	2400      	movne	r4, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005d0e:	2300      	movs	r3, #0
 8005d10:	2201      	movs	r2, #1
 8005d12:	9101      	str	r1, [sp, #4]
 8005d14:	9200      	str	r2, [sp, #0]
 8005d16:	9403      	str	r4, [sp, #12]
 8005d18:	4629      	mov	r1, r5
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	f000 f97a 	bl	8006014 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8005d20:	2000      	movs	r0, #0
 8005d22:	b005      	add	sp, #20
 8005d24:	bd30      	pop	{r4, r5, pc}
 8005d26:	bf00      	nop

08005d28 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005d28:	b530      	push	{r4, r5, lr}
 8005d2a:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005d2c:	2400      	movs	r4, #0
 8005d2e:	2501      	movs	r5, #1
 8005d30:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8005d34:	9403      	str	r4, [sp, #12]
 8005d36:	4619      	mov	r1, r3
 8005d38:	9500      	str	r5, [sp, #0]
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	462a      	mov	r2, r5
 8005d3e:	f000 f969 	bl	8006014 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8005d42:	4620      	mov	r0, r4
 8005d44:	b005      	add	sp, #20
 8005d46:	bd30      	pop	{r4, r5, pc}

08005d48 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8005d48:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005d4a:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8005d4e:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005d50:	2d00      	cmp	r5, #0
{
 8005d52:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005d56:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8005d58:	bf18      	it	ne
 8005d5a:	2400      	movne	r4, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	9101      	str	r1, [sp, #4]
 8005d60:	9200      	str	r2, [sp, #0]
 8005d62:	4619      	mov	r1, r3
 8005d64:	9403      	str	r4, [sp, #12]
 8005d66:	2302      	movs	r3, #2
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f000 f953 	bl	8006014 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8005d6e:	2000      	movs	r0, #0
 8005d70:	b005      	add	sp, #20
 8005d72:	bd30      	pop	{r4, r5, pc}

08005d74 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005d74:	b530      	push	{r4, r5, lr}
 8005d76:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005d78:	2400      	movs	r4, #0
 8005d7a:	2501      	movs	r5, #1
 8005d7c:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8005d80:	9403      	str	r4, [sp, #12]
 8005d82:	4619      	mov	r1, r3
 8005d84:	9500      	str	r5, [sp, #0]
 8005d86:	462a      	mov	r2, r5
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f000 f943 	bl	8006014 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8005d8e:	4620      	mov	r0, r4
 8005d90:	b005      	add	sp, #20
 8005d92:	bd30      	pop	{r4, r5, pc}

08005d94 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8005d94:	b530      	push	{r4, r5, lr}
 8005d96:	b085      	sub	sp, #20
 8005d98:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8005d9c:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24

  USBH_LL_OpenPipe(phost,
 8005da0:	9400      	str	r4, [sp, #0]
{
 8005da2:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  USBH_LL_OpenPipe(phost,
 8005da6:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8005daa:	f000 f90d 	bl	8005fc8 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8005dae:	2000      	movs	r0, #0
 8005db0:	b005      	add	sp, #20
 8005db2:	bd30      	pop	{r4, r5, pc}

08005db4 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8005db4:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8005db6:	f000 f91f 	bl	8005ff8 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8005dba:	2000      	movs	r0, #0
 8005dbc:	bd08      	pop	{r3, pc}
 8005dbe:	bf00      	nop

08005dc0 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8005dc0:	b430      	push	{r4, r5}
 8005dc2:	f500 725f 	add.w	r2, r0, #892	; 0x37c
 8005dc6:	4605      	mov	r5, r0
 8005dc8:	2300      	movs	r3, #0
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8005dca:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8005dce:	0424      	lsls	r4, r4, #16
 8005dd0:	b2d8      	uxtb	r0, r3
 8005dd2:	d505      	bpl.n	8005de0 <USBH_AllocPipe+0x20>
 8005dd4:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8005dd6:	2b0b      	cmp	r3, #11
 8005dd8:	d1f7      	bne.n	8005dca <USBH_AllocPipe+0xa>
 8005dda:	20ff      	movs	r0, #255	; 0xff
}
 8005ddc:	bc30      	pop	{r4, r5}
 8005dde:	4770      	bx	lr
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8005de0:	33e0      	adds	r3, #224	; 0xe0
 8005de2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005de6:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
}
 8005dea:	bc30      	pop	{r4, r5}
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop

08005df0 <USBH_FreePipe>:
   if(idx < 11U)
 8005df0:	290a      	cmp	r1, #10
 8005df2:	d807      	bhi.n	8005e04 <USBH_FreePipe+0x14>
 8005df4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8005df8:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8005dfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005e00:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
}
 8005e04:	2000      	movs	r0, #0
 8005e06:	4770      	bx	lr

08005e08 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8005e08:	2904      	cmp	r1, #4
 8005e0a:	d00b      	beq.n	8005e24 <USBH_UserProcess+0x1c>
 8005e0c:	2905      	cmp	r1, #5
 8005e0e:	d005      	beq.n	8005e1c <USBH_UserProcess+0x14>
 8005e10:	2902      	cmp	r1, #2
 8005e12:	d000      	beq.n	8005e16 <USBH_UserProcess+0xe>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8005e14:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8005e16:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <USBH_UserProcess+0x24>)
 8005e18:	7019      	strb	r1, [r3, #0]
  break;
 8005e1a:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8005e1c:	4b03      	ldr	r3, [pc, #12]	; (8005e2c <USBH_UserProcess+0x24>)
 8005e1e:	2203      	movs	r2, #3
 8005e20:	701a      	strb	r2, [r3, #0]
  break;
 8005e22:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8005e24:	4b01      	ldr	r3, [pc, #4]	; (8005e2c <USBH_UserProcess+0x24>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
}
 8005e2a:	4770      	bx	lr
 8005e2c:	20000240 	.word	0x20000240

08005e30 <MX_USB_HOST_Init>:
{
 8005e30:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8005e32:	2201      	movs	r2, #1
 8005e34:	490c      	ldr	r1, [pc, #48]	; (8005e68 <MX_USB_HOST_Init+0x38>)
 8005e36:	480d      	ldr	r0, [pc, #52]	; (8005e6c <MX_USB_HOST_Init+0x3c>)
 8005e38:	f7ff fd9e 	bl	8005978 <USBH_Init>
 8005e3c:	b980      	cbnz	r0, 8005e60 <MX_USB_HOST_Init+0x30>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8005e3e:	490c      	ldr	r1, [pc, #48]	; (8005e70 <MX_USB_HOST_Init+0x40>)
 8005e40:	480a      	ldr	r0, [pc, #40]	; (8005e6c <MX_USB_HOST_Init+0x3c>)
 8005e42:	f7ff fdcb 	bl	80059dc <USBH_RegisterClass>
 8005e46:	b940      	cbnz	r0, 8005e5a <MX_USB_HOST_Init+0x2a>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8005e48:	4808      	ldr	r0, [pc, #32]	; (8005e6c <MX_USB_HOST_Init+0x3c>)
 8005e4a:	f7ff fdff 	bl	8005a4c <USBH_Start>
 8005e4e:	b900      	cbnz	r0, 8005e52 <MX_USB_HOST_Init+0x22>
}
 8005e50:	bd08      	pop	{r3, pc}
 8005e52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8005e56:	f7fb be6d 	b.w	8001b34 <Error_Handler>
    Error_Handler();
 8005e5a:	f7fb fe6b 	bl	8001b34 <Error_Handler>
 8005e5e:	e7f3      	b.n	8005e48 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8005e60:	f7fb fe68 	bl	8001b34 <Error_Handler>
 8005e64:	e7eb      	b.n	8005e3e <MX_USB_HOST_Init+0xe>
 8005e66:	bf00      	nop
 8005e68:	08005e09 	.word	0x08005e09
 8005e6c:	20000700 	.word	0x20000700
 8005e70:	20000014 	.word	0x20000014

08005e74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8005e74:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcdHandle->Instance==USB_OTG_FS)
 8005e76:	6803      	ldr	r3, [r0, #0]
{
 8005e78:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e7a:	2400      	movs	r4, #0
  if(hcdHandle->Instance==USB_OTG_FS)
 8005e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e80:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005e84:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005e88:	9407      	str	r4, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 8005e8a:	d001      	beq.n	8005e90 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005e8c:	b009      	add	sp, #36	; 0x24
 8005e8e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e90:	4d1b      	ldr	r5, [pc, #108]	; (8005f00 <HAL_HCD_MspInit+0x8c>)
 8005e92:	9401      	str	r4, [sp, #4]
 8005e94:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005e96:	481b      	ldr	r0, [pc, #108]	; (8005f04 <HAL_HCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	632b      	str	r3, [r5, #48]	; 0x30
 8005e9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005ea6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005ea8:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eac:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8005eae:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8005eb0:	f7fc fdec 	bl	8002a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005eb4:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eb8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eba:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005ebc:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8005ebe:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ec0:	4810      	ldr	r0, [pc, #64]	; (8005f04 <HAL_HCD_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ec2:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005ec4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec6:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eca:	f7fc fddf 	bl	8002a8c <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005ece:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005ed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ed4:	636b      	str	r3, [r5, #52]	; 0x34
 8005ed6:	9402      	str	r4, [sp, #8]
 8005ed8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ede:	646b      	str	r3, [r5, #68]	; 0x44
 8005ee0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee6:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005ee8:	4622      	mov	r2, r4
 8005eea:	4621      	mov	r1, r4
 8005eec:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005eee:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005ef0:	f7fc fbae 	bl	8002650 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005ef4:	2043      	movs	r0, #67	; 0x43
 8005ef6:	f7fc fbe1 	bl	80026bc <HAL_NVIC_EnableIRQ>
}
 8005efa:	b009      	add	sp, #36	; 0x24
 8005efc:	bd30      	pop	{r4, r5, pc}
 8005efe:	bf00      	nop
 8005f00:	40023800 	.word	0x40023800
 8005f04:	40020000 	.word	0x40020000

08005f08 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8005f08:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005f0c:	f7ff bdac 	b.w	8005a68 <USBH_LL_IncTimer>

08005f10 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8005f10:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005f14:	f7ff bdc0 	b.w	8005a98 <USBH_LL_Connect>

08005f18 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8005f18:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005f1c:	f7ff bdd2 	b.w	8005ac4 <USBH_LL_Disconnect>

08005f20 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop

08005f24 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8005f24:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005f28:	f7ff bdae 	b.w	8005a88 <USBH_LL_PortEnabled>

08005f2c <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8005f2c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8005f30:	f7ff bdae 	b.w	8005a90 <USBH_LL_PortDisabled>

08005f34 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8005f34:	f890 23c0 	ldrb.w	r2, [r0, #960]	; 0x3c0
 8005f38:	2a01      	cmp	r2, #1
 8005f3a:	d001      	beq.n	8005f40 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	4770      	bx	lr
  hhcd_USB_OTG_FS.pData = phost;
 8005f40:	4b10      	ldr	r3, [pc, #64]	; (8005f84 <USBH_LL_Init+0x50>)
{
 8005f42:	b570      	push	{r4, r5, r6, lr}
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005f44:	2102      	movs	r1, #2
 8005f46:	4604      	mov	r4, r0
  phost->pData = &hhcd_USB_OTG_FS;
 8005f48:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005f4c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8005f50:	2508      	movs	r5, #8
  hhcd_USB_OTG_FS.pData = phost;
 8005f52:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8005f56:	60da      	str	r2, [r3, #12]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005f58:	4618      	mov	r0, r3
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005f5a:	2200      	movs	r2, #0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005f5c:	601e      	str	r6, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8005f5e:	609d      	str	r5, [r3, #8]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8005f60:	6199      	str	r1, [r3, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005f62:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005f64:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8005f66:	f7fc fee9 	bl	8002d3c <HAL_HCD_Init>
 8005f6a:	b940      	cbnz	r0, 8005f7e <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8005f6c:	4805      	ldr	r0, [pc, #20]	; (8005f84 <USBH_LL_Init+0x50>)
 8005f6e:	f7fd fb97 	bl	80036a0 <HAL_HCD_GetCurrentFrame>
 8005f72:	4601      	mov	r1, r0
 8005f74:	4620      	mov	r0, r4
 8005f76:	f7ff fd73 	bl	8005a60 <USBH_LL_SetTimer>
}
 8005f7a:	2000      	movs	r0, #0
 8005f7c:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8005f7e:	f7fb fdd9 	bl	8001b34 <Error_Handler>
 8005f82:	e7f3      	b.n	8005f6c <USBH_LL_Init+0x38>
 8005f84:	20000acc 	.word	0x20000acc

08005f88 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8005f88:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8005f8a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005f8e:	f7fd fb51 	bl	8003634 <HAL_HCD_Start>
 8005f92:	2803      	cmp	r0, #3
 8005f94:	bf96      	itet	ls
 8005f96:	4b02      	ldrls	r3, [pc, #8]	; (8005fa0 <USBH_LL_Start+0x18>)
 8005f98:	2002      	movhi	r0, #2
 8005f9a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005f9c:	bd08      	pop	{r3, pc}
 8005f9e:	bf00      	nop
 8005fa0:	0800aca4 	.word	0x0800aca4

08005fa4 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8005fa4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8005fa6:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005faa:	f7fd fb59 	bl	8003660 <HAL_HCD_Stop>
 8005fae:	2803      	cmp	r0, #3
 8005fb0:	bf96      	itet	ls
 8005fb2:	4b02      	ldrls	r3, [pc, #8]	; (8005fbc <USBH_LL_Stop+0x18>)
 8005fb4:	2002      	movhi	r0, #2
 8005fb6:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8005fb8:	bd08      	pop	{r3, pc}
 8005fba:	bf00      	nop
 8005fbc:	0800aca4 	.word	0x0800aca4

08005fc0 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8005fc0:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005fc4:	f7fd bb66 	b.w	8003694 <HAL_HCD_HC_GetXferCount>

08005fc8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005fc8:	b530      	push	{r4, r5, lr}
 8005fca:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005fcc:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
{
 8005fd0:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8005fd4:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005fd8:	9400      	str	r4, [sp, #0]
{
 8005fda:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8005fde:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8005fe2:	f7fc fe5b 	bl	8002c9c <HAL_HCD_HC_Init>
 8005fe6:	2803      	cmp	r0, #3
 8005fe8:	bf9a      	itte	ls
 8005fea:	4b02      	ldrls	r3, [pc, #8]	; (8005ff4 <USBH_LL_OpenPipe+0x2c>)
 8005fec:	5c18      	ldrbls	r0, [r3, r0]
 8005fee:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8005ff0:	b005      	add	sp, #20
 8005ff2:	bd30      	pop	{r4, r5, pc}
 8005ff4:	0800aca4 	.word	0x0800aca4

08005ff8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8005ff8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8005ffa:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8005ffe:	f7fc fe8b 	bl	8002d18 <HAL_HCD_HC_Halt>
 8006002:	2803      	cmp	r0, #3
 8006004:	bf96      	itet	ls
 8006006:	4b02      	ldrls	r3, [pc, #8]	; (8006010 <USBH_LL_ClosePipe+0x18>)
 8006008:	2002      	movhi	r0, #2
 800600a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800600c:	bd08      	pop	{r3, pc}
 800600e:	bf00      	nop
 8006010:	0800aca4 	.word	0x0800aca4

08006014 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006014:	b530      	push	{r4, r5, lr}
 8006016:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006018:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
{
 800601c:	f89d 5020 	ldrb.w	r5, [sp, #32]
 8006020:	9c09      	ldr	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006022:	9500      	str	r5, [sp, #0]
 8006024:	9401      	str	r4, [sp, #4]
{
 8006026:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 800602a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800602e:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8006032:	f7fc fed3 	bl	8002ddc <HAL_HCD_HC_SubmitRequest>
 8006036:	2803      	cmp	r0, #3
 8006038:	bf9a      	itte	ls
 800603a:	4b02      	ldrls	r3, [pc, #8]	; (8006044 <USBH_LL_SubmitURB+0x30>)
 800603c:	5c18      	ldrbls	r0, [r3, r0]
 800603e:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8006040:	b005      	add	sp, #20
 8006042:	bd30      	pop	{r4, r5, pc}
 8006044:	0800aca4 	.word	0x0800aca4

08006048 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006048:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800604c:	f7fd bb1a 	b.w	8003684 <HAL_HCD_HC_GetURBState>

08006050 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006050:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8006052:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d004      	beq.n	8006064 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800605a:	20c8      	movs	r0, #200	; 0xc8
 800605c:	f7fc f88a 	bl	8002174 <HAL_Delay>
  return USBH_OK;
}
 8006060:	2000      	movs	r0, #0
 8006062:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8006064:	4608      	mov	r0, r1
 8006066:	f000 f817 	bl	8006098 <MX_DriverVbusFS>
  HAL_Delay(200);
 800606a:	20c8      	movs	r0, #200	; 0xc8
 800606c:	f7fc f882 	bl	8002174 <HAL_Delay>
}
 8006070:	2000      	movs	r0, #0
 8006072:	bd08      	pop	{r3, pc}

08006074 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006074:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8006078:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800607c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006080:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8006084:	b91b      	cbnz	r3, 800608e <USBH_LL_SetToggle+0x1a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006086:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
  }

  return USBH_OK;
}
 800608a:	2000      	movs	r0, #0
 800608c:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 800608e:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
}
 8006092:	2000      	movs	r0, #0
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop

08006098 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006098:	fab0 f280 	clz	r2, r0
 800609c:	0952      	lsrs	r2, r2, #5
 800609e:	2101      	movs	r1, #1
 80060a0:	4801      	ldr	r0, [pc, #4]	; (80060a8 <MX_DriverVbusFS+0x10>)
 80060a2:	f7fc bdf7 	b.w	8002c94 <HAL_GPIO_WritePin>
 80060a6:	bf00      	nop
 80060a8:	40020800 	.word	0x40020800

080060ac <atof>:
 80060ac:	2100      	movs	r1, #0
 80060ae:	f001 bbaf 	b.w	8007810 <strtod>
	...

080060b4 <__errno>:
 80060b4:	4b01      	ldr	r3, [pc, #4]	; (80060bc <__errno+0x8>)
 80060b6:	6818      	ldr	r0, [r3, #0]
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	20000034 	.word	0x20000034

080060c0 <__libc_init_array>:
 80060c0:	b570      	push	{r4, r5, r6, lr}
 80060c2:	4e0d      	ldr	r6, [pc, #52]	; (80060f8 <__libc_init_array+0x38>)
 80060c4:	4c0d      	ldr	r4, [pc, #52]	; (80060fc <__libc_init_array+0x3c>)
 80060c6:	1ba4      	subs	r4, r4, r6
 80060c8:	10a4      	asrs	r4, r4, #2
 80060ca:	2500      	movs	r5, #0
 80060cc:	42a5      	cmp	r5, r4
 80060ce:	d109      	bne.n	80060e4 <__libc_init_array+0x24>
 80060d0:	4e0b      	ldr	r6, [pc, #44]	; (8006100 <__libc_init_array+0x40>)
 80060d2:	4c0c      	ldr	r4, [pc, #48]	; (8006104 <__libc_init_array+0x44>)
 80060d4:	f004 fd9a 	bl	800ac0c <_init>
 80060d8:	1ba4      	subs	r4, r4, r6
 80060da:	10a4      	asrs	r4, r4, #2
 80060dc:	2500      	movs	r5, #0
 80060de:	42a5      	cmp	r5, r4
 80060e0:	d105      	bne.n	80060ee <__libc_init_array+0x2e>
 80060e2:	bd70      	pop	{r4, r5, r6, pc}
 80060e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060e8:	4798      	blx	r3
 80060ea:	3501      	adds	r5, #1
 80060ec:	e7ee      	b.n	80060cc <__libc_init_array+0xc>
 80060ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80060f2:	4798      	blx	r3
 80060f4:	3501      	adds	r5, #1
 80060f6:	e7f2      	b.n	80060de <__libc_init_array+0x1e>
 80060f8:	0800afa8 	.word	0x0800afa8
 80060fc:	0800afa8 	.word	0x0800afa8
 8006100:	0800afa8 	.word	0x0800afa8
 8006104:	0800afac 	.word	0x0800afac

08006108 <malloc>:
 8006108:	4b02      	ldr	r3, [pc, #8]	; (8006114 <malloc+0xc>)
 800610a:	4601      	mov	r1, r0
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	f000 b861 	b.w	80061d4 <_malloc_r>
 8006112:	bf00      	nop
 8006114:	20000034 	.word	0x20000034

08006118 <free>:
 8006118:	4b02      	ldr	r3, [pc, #8]	; (8006124 <free+0xc>)
 800611a:	4601      	mov	r1, r0
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	f000 b80b 	b.w	8006138 <_free_r>
 8006122:	bf00      	nop
 8006124:	20000034 	.word	0x20000034

08006128 <memset>:
 8006128:	4402      	add	r2, r0
 800612a:	4603      	mov	r3, r0
 800612c:	4293      	cmp	r3, r2
 800612e:	d100      	bne.n	8006132 <memset+0xa>
 8006130:	4770      	bx	lr
 8006132:	f803 1b01 	strb.w	r1, [r3], #1
 8006136:	e7f9      	b.n	800612c <memset+0x4>

08006138 <_free_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4605      	mov	r5, r0
 800613c:	2900      	cmp	r1, #0
 800613e:	d045      	beq.n	80061cc <_free_r+0x94>
 8006140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006144:	1f0c      	subs	r4, r1, #4
 8006146:	2b00      	cmp	r3, #0
 8006148:	bfb8      	it	lt
 800614a:	18e4      	addlt	r4, r4, r3
 800614c:	f002 fd0b 	bl	8008b66 <__malloc_lock>
 8006150:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <_free_r+0x98>)
 8006152:	6813      	ldr	r3, [r2, #0]
 8006154:	4610      	mov	r0, r2
 8006156:	b933      	cbnz	r3, 8006166 <_free_r+0x2e>
 8006158:	6063      	str	r3, [r4, #4]
 800615a:	6014      	str	r4, [r2, #0]
 800615c:	4628      	mov	r0, r5
 800615e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006162:	f002 bd01 	b.w	8008b68 <__malloc_unlock>
 8006166:	42a3      	cmp	r3, r4
 8006168:	d90c      	bls.n	8006184 <_free_r+0x4c>
 800616a:	6821      	ldr	r1, [r4, #0]
 800616c:	1862      	adds	r2, r4, r1
 800616e:	4293      	cmp	r3, r2
 8006170:	bf04      	itt	eq
 8006172:	681a      	ldreq	r2, [r3, #0]
 8006174:	685b      	ldreq	r3, [r3, #4]
 8006176:	6063      	str	r3, [r4, #4]
 8006178:	bf04      	itt	eq
 800617a:	1852      	addeq	r2, r2, r1
 800617c:	6022      	streq	r2, [r4, #0]
 800617e:	6004      	str	r4, [r0, #0]
 8006180:	e7ec      	b.n	800615c <_free_r+0x24>
 8006182:	4613      	mov	r3, r2
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	b10a      	cbz	r2, 800618c <_free_r+0x54>
 8006188:	42a2      	cmp	r2, r4
 800618a:	d9fa      	bls.n	8006182 <_free_r+0x4a>
 800618c:	6819      	ldr	r1, [r3, #0]
 800618e:	1858      	adds	r0, r3, r1
 8006190:	42a0      	cmp	r0, r4
 8006192:	d10b      	bne.n	80061ac <_free_r+0x74>
 8006194:	6820      	ldr	r0, [r4, #0]
 8006196:	4401      	add	r1, r0
 8006198:	1858      	adds	r0, r3, r1
 800619a:	4282      	cmp	r2, r0
 800619c:	6019      	str	r1, [r3, #0]
 800619e:	d1dd      	bne.n	800615c <_free_r+0x24>
 80061a0:	6810      	ldr	r0, [r2, #0]
 80061a2:	6852      	ldr	r2, [r2, #4]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	4401      	add	r1, r0
 80061a8:	6019      	str	r1, [r3, #0]
 80061aa:	e7d7      	b.n	800615c <_free_r+0x24>
 80061ac:	d902      	bls.n	80061b4 <_free_r+0x7c>
 80061ae:	230c      	movs	r3, #12
 80061b0:	602b      	str	r3, [r5, #0]
 80061b2:	e7d3      	b.n	800615c <_free_r+0x24>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	1821      	adds	r1, r4, r0
 80061b8:	428a      	cmp	r2, r1
 80061ba:	bf04      	itt	eq
 80061bc:	6811      	ldreq	r1, [r2, #0]
 80061be:	6852      	ldreq	r2, [r2, #4]
 80061c0:	6062      	str	r2, [r4, #4]
 80061c2:	bf04      	itt	eq
 80061c4:	1809      	addeq	r1, r1, r0
 80061c6:	6021      	streq	r1, [r4, #0]
 80061c8:	605c      	str	r4, [r3, #4]
 80061ca:	e7c7      	b.n	800615c <_free_r+0x24>
 80061cc:	bd38      	pop	{r3, r4, r5, pc}
 80061ce:	bf00      	nop
 80061d0:	20000244 	.word	0x20000244

080061d4 <_malloc_r>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	1ccd      	adds	r5, r1, #3
 80061d8:	f025 0503 	bic.w	r5, r5, #3
 80061dc:	3508      	adds	r5, #8
 80061de:	2d0c      	cmp	r5, #12
 80061e0:	bf38      	it	cc
 80061e2:	250c      	movcc	r5, #12
 80061e4:	2d00      	cmp	r5, #0
 80061e6:	4606      	mov	r6, r0
 80061e8:	db01      	blt.n	80061ee <_malloc_r+0x1a>
 80061ea:	42a9      	cmp	r1, r5
 80061ec:	d903      	bls.n	80061f6 <_malloc_r+0x22>
 80061ee:	230c      	movs	r3, #12
 80061f0:	6033      	str	r3, [r6, #0]
 80061f2:	2000      	movs	r0, #0
 80061f4:	bd70      	pop	{r4, r5, r6, pc}
 80061f6:	f002 fcb6 	bl	8008b66 <__malloc_lock>
 80061fa:	4a21      	ldr	r2, [pc, #132]	; (8006280 <_malloc_r+0xac>)
 80061fc:	6814      	ldr	r4, [r2, #0]
 80061fe:	4621      	mov	r1, r4
 8006200:	b991      	cbnz	r1, 8006228 <_malloc_r+0x54>
 8006202:	4c20      	ldr	r4, [pc, #128]	; (8006284 <_malloc_r+0xb0>)
 8006204:	6823      	ldr	r3, [r4, #0]
 8006206:	b91b      	cbnz	r3, 8006210 <_malloc_r+0x3c>
 8006208:	4630      	mov	r0, r6
 800620a:	f000 fc99 	bl	8006b40 <_sbrk_r>
 800620e:	6020      	str	r0, [r4, #0]
 8006210:	4629      	mov	r1, r5
 8006212:	4630      	mov	r0, r6
 8006214:	f000 fc94 	bl	8006b40 <_sbrk_r>
 8006218:	1c43      	adds	r3, r0, #1
 800621a:	d124      	bne.n	8006266 <_malloc_r+0x92>
 800621c:	230c      	movs	r3, #12
 800621e:	6033      	str	r3, [r6, #0]
 8006220:	4630      	mov	r0, r6
 8006222:	f002 fca1 	bl	8008b68 <__malloc_unlock>
 8006226:	e7e4      	b.n	80061f2 <_malloc_r+0x1e>
 8006228:	680b      	ldr	r3, [r1, #0]
 800622a:	1b5b      	subs	r3, r3, r5
 800622c:	d418      	bmi.n	8006260 <_malloc_r+0x8c>
 800622e:	2b0b      	cmp	r3, #11
 8006230:	d90f      	bls.n	8006252 <_malloc_r+0x7e>
 8006232:	600b      	str	r3, [r1, #0]
 8006234:	50cd      	str	r5, [r1, r3]
 8006236:	18cc      	adds	r4, r1, r3
 8006238:	4630      	mov	r0, r6
 800623a:	f002 fc95 	bl	8008b68 <__malloc_unlock>
 800623e:	f104 000b 	add.w	r0, r4, #11
 8006242:	1d23      	adds	r3, r4, #4
 8006244:	f020 0007 	bic.w	r0, r0, #7
 8006248:	1ac3      	subs	r3, r0, r3
 800624a:	d0d3      	beq.n	80061f4 <_malloc_r+0x20>
 800624c:	425a      	negs	r2, r3
 800624e:	50e2      	str	r2, [r4, r3]
 8006250:	e7d0      	b.n	80061f4 <_malloc_r+0x20>
 8006252:	428c      	cmp	r4, r1
 8006254:	684b      	ldr	r3, [r1, #4]
 8006256:	bf16      	itet	ne
 8006258:	6063      	strne	r3, [r4, #4]
 800625a:	6013      	streq	r3, [r2, #0]
 800625c:	460c      	movne	r4, r1
 800625e:	e7eb      	b.n	8006238 <_malloc_r+0x64>
 8006260:	460c      	mov	r4, r1
 8006262:	6849      	ldr	r1, [r1, #4]
 8006264:	e7cc      	b.n	8006200 <_malloc_r+0x2c>
 8006266:	1cc4      	adds	r4, r0, #3
 8006268:	f024 0403 	bic.w	r4, r4, #3
 800626c:	42a0      	cmp	r0, r4
 800626e:	d005      	beq.n	800627c <_malloc_r+0xa8>
 8006270:	1a21      	subs	r1, r4, r0
 8006272:	4630      	mov	r0, r6
 8006274:	f000 fc64 	bl	8006b40 <_sbrk_r>
 8006278:	3001      	adds	r0, #1
 800627a:	d0cf      	beq.n	800621c <_malloc_r+0x48>
 800627c:	6025      	str	r5, [r4, #0]
 800627e:	e7db      	b.n	8006238 <_malloc_r+0x64>
 8006280:	20000244 	.word	0x20000244
 8006284:	20000248 	.word	0x20000248

08006288 <__cvt>:
 8006288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	ec55 4b10 	vmov	r4, r5, d0
 8006290:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006292:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006296:	2d00      	cmp	r5, #0
 8006298:	460e      	mov	r6, r1
 800629a:	4691      	mov	r9, r2
 800629c:	4619      	mov	r1, r3
 800629e:	bfb8      	it	lt
 80062a0:	4622      	movlt	r2, r4
 80062a2:	462b      	mov	r3, r5
 80062a4:	f027 0720 	bic.w	r7, r7, #32
 80062a8:	bfbb      	ittet	lt
 80062aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062ae:	461d      	movlt	r5, r3
 80062b0:	2300      	movge	r3, #0
 80062b2:	232d      	movlt	r3, #45	; 0x2d
 80062b4:	bfb8      	it	lt
 80062b6:	4614      	movlt	r4, r2
 80062b8:	2f46      	cmp	r7, #70	; 0x46
 80062ba:	700b      	strb	r3, [r1, #0]
 80062bc:	d004      	beq.n	80062c8 <__cvt+0x40>
 80062be:	2f45      	cmp	r7, #69	; 0x45
 80062c0:	d100      	bne.n	80062c4 <__cvt+0x3c>
 80062c2:	3601      	adds	r6, #1
 80062c4:	2102      	movs	r1, #2
 80062c6:	e000      	b.n	80062ca <__cvt+0x42>
 80062c8:	2103      	movs	r1, #3
 80062ca:	ab03      	add	r3, sp, #12
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	ab02      	add	r3, sp, #8
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4632      	mov	r2, r6
 80062d4:	4653      	mov	r3, sl
 80062d6:	ec45 4b10 	vmov	d0, r4, r5
 80062da:	f001 fb39 	bl	8007950 <_dtoa_r>
 80062de:	2f47      	cmp	r7, #71	; 0x47
 80062e0:	4680      	mov	r8, r0
 80062e2:	d102      	bne.n	80062ea <__cvt+0x62>
 80062e4:	f019 0f01 	tst.w	r9, #1
 80062e8:	d026      	beq.n	8006338 <__cvt+0xb0>
 80062ea:	2f46      	cmp	r7, #70	; 0x46
 80062ec:	eb08 0906 	add.w	r9, r8, r6
 80062f0:	d111      	bne.n	8006316 <__cvt+0x8e>
 80062f2:	f898 3000 	ldrb.w	r3, [r8]
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d10a      	bne.n	8006310 <__cvt+0x88>
 80062fa:	2200      	movs	r2, #0
 80062fc:	2300      	movs	r3, #0
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fbe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006306:	b918      	cbnz	r0, 8006310 <__cvt+0x88>
 8006308:	f1c6 0601 	rsb	r6, r6, #1
 800630c:	f8ca 6000 	str.w	r6, [sl]
 8006310:	f8da 3000 	ldr.w	r3, [sl]
 8006314:	4499      	add	r9, r3
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006322:	b938      	cbnz	r0, 8006334 <__cvt+0xac>
 8006324:	2230      	movs	r2, #48	; 0x30
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	454b      	cmp	r3, r9
 800632a:	d205      	bcs.n	8006338 <__cvt+0xb0>
 800632c:	1c59      	adds	r1, r3, #1
 800632e:	9103      	str	r1, [sp, #12]
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e7f8      	b.n	8006326 <__cvt+0x9e>
 8006334:	f8cd 900c 	str.w	r9, [sp, #12]
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800633c:	eba3 0308 	sub.w	r3, r3, r8
 8006340:	4640      	mov	r0, r8
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	b004      	add	sp, #16
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800634a <__exponent>:
 800634a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800634c:	2900      	cmp	r1, #0
 800634e:	4604      	mov	r4, r0
 8006350:	bfba      	itte	lt
 8006352:	4249      	neglt	r1, r1
 8006354:	232d      	movlt	r3, #45	; 0x2d
 8006356:	232b      	movge	r3, #43	; 0x2b
 8006358:	2909      	cmp	r1, #9
 800635a:	f804 2b02 	strb.w	r2, [r4], #2
 800635e:	7043      	strb	r3, [r0, #1]
 8006360:	dd20      	ble.n	80063a4 <__exponent+0x5a>
 8006362:	f10d 0307 	add.w	r3, sp, #7
 8006366:	461f      	mov	r7, r3
 8006368:	260a      	movs	r6, #10
 800636a:	fb91 f5f6 	sdiv	r5, r1, r6
 800636e:	fb06 1115 	mls	r1, r6, r5, r1
 8006372:	3130      	adds	r1, #48	; 0x30
 8006374:	2d09      	cmp	r5, #9
 8006376:	f803 1c01 	strb.w	r1, [r3, #-1]
 800637a:	f103 32ff 	add.w	r2, r3, #4294967295
 800637e:	4629      	mov	r1, r5
 8006380:	dc09      	bgt.n	8006396 <__exponent+0x4c>
 8006382:	3130      	adds	r1, #48	; 0x30
 8006384:	3b02      	subs	r3, #2
 8006386:	f802 1c01 	strb.w	r1, [r2, #-1]
 800638a:	42bb      	cmp	r3, r7
 800638c:	4622      	mov	r2, r4
 800638e:	d304      	bcc.n	800639a <__exponent+0x50>
 8006390:	1a10      	subs	r0, r2, r0
 8006392:	b003      	add	sp, #12
 8006394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006396:	4613      	mov	r3, r2
 8006398:	e7e7      	b.n	800636a <__exponent+0x20>
 800639a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800639e:	f804 2b01 	strb.w	r2, [r4], #1
 80063a2:	e7f2      	b.n	800638a <__exponent+0x40>
 80063a4:	2330      	movs	r3, #48	; 0x30
 80063a6:	4419      	add	r1, r3
 80063a8:	7083      	strb	r3, [r0, #2]
 80063aa:	1d02      	adds	r2, r0, #4
 80063ac:	70c1      	strb	r1, [r0, #3]
 80063ae:	e7ef      	b.n	8006390 <__exponent+0x46>

080063b0 <_printf_float>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	b08d      	sub	sp, #52	; 0x34
 80063b6:	460c      	mov	r4, r1
 80063b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80063bc:	4616      	mov	r6, r2
 80063be:	461f      	mov	r7, r3
 80063c0:	4605      	mov	r5, r0
 80063c2:	f002 fba5 	bl	8008b10 <_localeconv_r>
 80063c6:	6803      	ldr	r3, [r0, #0]
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7f9 ff00 	bl	80001d0 <strlen>
 80063d0:	2300      	movs	r3, #0
 80063d2:	930a      	str	r3, [sp, #40]	; 0x28
 80063d4:	f8d8 3000 	ldr.w	r3, [r8]
 80063d8:	9005      	str	r0, [sp, #20]
 80063da:	3307      	adds	r3, #7
 80063dc:	f023 0307 	bic.w	r3, r3, #7
 80063e0:	f103 0208 	add.w	r2, r3, #8
 80063e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063e8:	f8d4 b000 	ldr.w	fp, [r4]
 80063ec:	f8c8 2000 	str.w	r2, [r8]
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80063fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006400:	9307      	str	r3, [sp, #28]
 8006402:	f8cd 8018 	str.w	r8, [sp, #24]
 8006406:	f04f 32ff 	mov.w	r2, #4294967295
 800640a:	4ba7      	ldr	r3, [pc, #668]	; (80066a8 <_printf_float+0x2f8>)
 800640c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006410:	f7fa fb8c 	bl	8000b2c <__aeabi_dcmpun>
 8006414:	bb70      	cbnz	r0, 8006474 <_printf_float+0xc4>
 8006416:	f04f 32ff 	mov.w	r2, #4294967295
 800641a:	4ba3      	ldr	r3, [pc, #652]	; (80066a8 <_printf_float+0x2f8>)
 800641c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006420:	f7fa fb66 	bl	8000af0 <__aeabi_dcmple>
 8006424:	bb30      	cbnz	r0, 8006474 <_printf_float+0xc4>
 8006426:	2200      	movs	r2, #0
 8006428:	2300      	movs	r3, #0
 800642a:	4640      	mov	r0, r8
 800642c:	4649      	mov	r1, r9
 800642e:	f7fa fb55 	bl	8000adc <__aeabi_dcmplt>
 8006432:	b110      	cbz	r0, 800643a <_printf_float+0x8a>
 8006434:	232d      	movs	r3, #45	; 0x2d
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643a:	4a9c      	ldr	r2, [pc, #624]	; (80066ac <_printf_float+0x2fc>)
 800643c:	4b9c      	ldr	r3, [pc, #624]	; (80066b0 <_printf_float+0x300>)
 800643e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006442:	bf8c      	ite	hi
 8006444:	4690      	movhi	r8, r2
 8006446:	4698      	movls	r8, r3
 8006448:	2303      	movs	r3, #3
 800644a:	f02b 0204 	bic.w	r2, fp, #4
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	f04f 0900 	mov.w	r9, #0
 8006456:	9700      	str	r7, [sp, #0]
 8006458:	4633      	mov	r3, r6
 800645a:	aa0b      	add	r2, sp, #44	; 0x2c
 800645c:	4621      	mov	r1, r4
 800645e:	4628      	mov	r0, r5
 8006460:	f000 f9e6 	bl	8006830 <_printf_common>
 8006464:	3001      	adds	r0, #1
 8006466:	f040 808d 	bne.w	8006584 <_printf_float+0x1d4>
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	b00d      	add	sp, #52	; 0x34
 8006470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7fa fb56 	bl	8000b2c <__aeabi_dcmpun>
 8006480:	b110      	cbz	r0, 8006488 <_printf_float+0xd8>
 8006482:	4a8c      	ldr	r2, [pc, #560]	; (80066b4 <_printf_float+0x304>)
 8006484:	4b8c      	ldr	r3, [pc, #560]	; (80066b8 <_printf_float+0x308>)
 8006486:	e7da      	b.n	800643e <_printf_float+0x8e>
 8006488:	6861      	ldr	r1, [r4, #4]
 800648a:	1c4b      	adds	r3, r1, #1
 800648c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006490:	a80a      	add	r0, sp, #40	; 0x28
 8006492:	d13e      	bne.n	8006512 <_printf_float+0x162>
 8006494:	2306      	movs	r3, #6
 8006496:	6063      	str	r3, [r4, #4]
 8006498:	2300      	movs	r3, #0
 800649a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800649e:	ab09      	add	r3, sp, #36	; 0x24
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	ec49 8b10 	vmov	d0, r8, r9
 80064a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064aa:	6022      	str	r2, [r4, #0]
 80064ac:	f8cd a004 	str.w	sl, [sp, #4]
 80064b0:	6861      	ldr	r1, [r4, #4]
 80064b2:	4628      	mov	r0, r5
 80064b4:	f7ff fee8 	bl	8006288 <__cvt>
 80064b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80064bc:	2b47      	cmp	r3, #71	; 0x47
 80064be:	4680      	mov	r8, r0
 80064c0:	d109      	bne.n	80064d6 <_printf_float+0x126>
 80064c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c4:	1cd8      	adds	r0, r3, #3
 80064c6:	db02      	blt.n	80064ce <_printf_float+0x11e>
 80064c8:	6862      	ldr	r2, [r4, #4]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	dd47      	ble.n	800655e <_printf_float+0x1ae>
 80064ce:	f1aa 0a02 	sub.w	sl, sl, #2
 80064d2:	fa5f fa8a 	uxtb.w	sl, sl
 80064d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80064da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064dc:	d824      	bhi.n	8006528 <_printf_float+0x178>
 80064de:	3901      	subs	r1, #1
 80064e0:	4652      	mov	r2, sl
 80064e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064e6:	9109      	str	r1, [sp, #36]	; 0x24
 80064e8:	f7ff ff2f 	bl	800634a <__exponent>
 80064ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ee:	1813      	adds	r3, r2, r0
 80064f0:	2a01      	cmp	r2, #1
 80064f2:	4681      	mov	r9, r0
 80064f4:	6123      	str	r3, [r4, #16]
 80064f6:	dc02      	bgt.n	80064fe <_printf_float+0x14e>
 80064f8:	6822      	ldr	r2, [r4, #0]
 80064fa:	07d1      	lsls	r1, r2, #31
 80064fc:	d501      	bpl.n	8006502 <_printf_float+0x152>
 80064fe:	3301      	adds	r3, #1
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0a5      	beq.n	8006456 <_printf_float+0xa6>
 800650a:	232d      	movs	r3, #45	; 0x2d
 800650c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006510:	e7a1      	b.n	8006456 <_printf_float+0xa6>
 8006512:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006516:	f000 8177 	beq.w	8006808 <_printf_float+0x458>
 800651a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800651e:	d1bb      	bne.n	8006498 <_printf_float+0xe8>
 8006520:	2900      	cmp	r1, #0
 8006522:	d1b9      	bne.n	8006498 <_printf_float+0xe8>
 8006524:	2301      	movs	r3, #1
 8006526:	e7b6      	b.n	8006496 <_printf_float+0xe6>
 8006528:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800652c:	d119      	bne.n	8006562 <_printf_float+0x1b2>
 800652e:	2900      	cmp	r1, #0
 8006530:	6863      	ldr	r3, [r4, #4]
 8006532:	dd0c      	ble.n	800654e <_printf_float+0x19e>
 8006534:	6121      	str	r1, [r4, #16]
 8006536:	b913      	cbnz	r3, 800653e <_printf_float+0x18e>
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	07d2      	lsls	r2, r2, #31
 800653c:	d502      	bpl.n	8006544 <_printf_float+0x194>
 800653e:	3301      	adds	r3, #1
 8006540:	440b      	add	r3, r1
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006546:	65a3      	str	r3, [r4, #88]	; 0x58
 8006548:	f04f 0900 	mov.w	r9, #0
 800654c:	e7d9      	b.n	8006502 <_printf_float+0x152>
 800654e:	b913      	cbnz	r3, 8006556 <_printf_float+0x1a6>
 8006550:	6822      	ldr	r2, [r4, #0]
 8006552:	07d0      	lsls	r0, r2, #31
 8006554:	d501      	bpl.n	800655a <_printf_float+0x1aa>
 8006556:	3302      	adds	r3, #2
 8006558:	e7f3      	b.n	8006542 <_printf_float+0x192>
 800655a:	2301      	movs	r3, #1
 800655c:	e7f1      	b.n	8006542 <_printf_float+0x192>
 800655e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006562:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006566:	4293      	cmp	r3, r2
 8006568:	db05      	blt.n	8006576 <_printf_float+0x1c6>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	6123      	str	r3, [r4, #16]
 800656e:	07d1      	lsls	r1, r2, #31
 8006570:	d5e8      	bpl.n	8006544 <_printf_float+0x194>
 8006572:	3301      	adds	r3, #1
 8006574:	e7e5      	b.n	8006542 <_printf_float+0x192>
 8006576:	2b00      	cmp	r3, #0
 8006578:	bfd4      	ite	le
 800657a:	f1c3 0302 	rsble	r3, r3, #2
 800657e:	2301      	movgt	r3, #1
 8006580:	4413      	add	r3, r2
 8006582:	e7de      	b.n	8006542 <_printf_float+0x192>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	055a      	lsls	r2, r3, #21
 8006588:	d407      	bmi.n	800659a <_printf_float+0x1ea>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	4642      	mov	r2, r8
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	d12b      	bne.n	80065f0 <_printf_float+0x240>
 8006598:	e767      	b.n	800646a <_printf_float+0xba>
 800659a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800659e:	f240 80dc 	bls.w	800675a <_printf_float+0x3aa>
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065aa:	f7fa fa8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d033      	beq.n	800661a <_printf_float+0x26a>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4a41      	ldr	r2, [pc, #260]	; (80066bc <_printf_float+0x30c>)
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	f43f af54 	beq.w	800646a <_printf_float+0xba>
 80065c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065c6:	429a      	cmp	r2, r3
 80065c8:	db02      	blt.n	80065d0 <_printf_float+0x220>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	07d8      	lsls	r0, r3, #31
 80065ce:	d50f      	bpl.n	80065f0 <_printf_float+0x240>
 80065d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	47b8      	blx	r7
 80065da:	3001      	adds	r0, #1
 80065dc:	f43f af45 	beq.w	800646a <_printf_float+0xba>
 80065e0:	f04f 0800 	mov.w	r8, #0
 80065e4:	f104 091a 	add.w	r9, r4, #26
 80065e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ea:	3b01      	subs	r3, #1
 80065ec:	4543      	cmp	r3, r8
 80065ee:	dc09      	bgt.n	8006604 <_printf_float+0x254>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	079b      	lsls	r3, r3, #30
 80065f4:	f100 8103 	bmi.w	80067fe <_printf_float+0x44e>
 80065f8:	68e0      	ldr	r0, [r4, #12]
 80065fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fc:	4298      	cmp	r0, r3
 80065fe:	bfb8      	it	lt
 8006600:	4618      	movlt	r0, r3
 8006602:	e734      	b.n	800646e <_printf_float+0xbe>
 8006604:	2301      	movs	r3, #1
 8006606:	464a      	mov	r2, r9
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	f43f af2b 	beq.w	800646a <_printf_float+0xba>
 8006614:	f108 0801 	add.w	r8, r8, #1
 8006618:	e7e6      	b.n	80065e8 <_printf_float+0x238>
 800661a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	dc2b      	bgt.n	8006678 <_printf_float+0x2c8>
 8006620:	2301      	movs	r3, #1
 8006622:	4a26      	ldr	r2, [pc, #152]	; (80066bc <_printf_float+0x30c>)
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	f43f af1d 	beq.w	800646a <_printf_float+0xba>
 8006630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006632:	b923      	cbnz	r3, 800663e <_printf_float+0x28e>
 8006634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006636:	b913      	cbnz	r3, 800663e <_printf_float+0x28e>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	07d9      	lsls	r1, r3, #31
 800663c:	d5d8      	bpl.n	80065f0 <_printf_float+0x240>
 800663e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	f43f af0e 	beq.w	800646a <_printf_float+0xba>
 800664e:	f04f 0900 	mov.w	r9, #0
 8006652:	f104 0a1a 	add.w	sl, r4, #26
 8006656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006658:	425b      	negs	r3, r3
 800665a:	454b      	cmp	r3, r9
 800665c:	dc01      	bgt.n	8006662 <_printf_float+0x2b2>
 800665e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006660:	e794      	b.n	800658c <_printf_float+0x1dc>
 8006662:	2301      	movs	r3, #1
 8006664:	4652      	mov	r2, sl
 8006666:	4631      	mov	r1, r6
 8006668:	4628      	mov	r0, r5
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f aefc 	beq.w	800646a <_printf_float+0xba>
 8006672:	f109 0901 	add.w	r9, r9, #1
 8006676:	e7ee      	b.n	8006656 <_printf_float+0x2a6>
 8006678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800667a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800667c:	429a      	cmp	r2, r3
 800667e:	bfa8      	it	ge
 8006680:	461a      	movge	r2, r3
 8006682:	2a00      	cmp	r2, #0
 8006684:	4691      	mov	r9, r2
 8006686:	dd07      	ble.n	8006698 <_printf_float+0x2e8>
 8006688:	4613      	mov	r3, r2
 800668a:	4631      	mov	r1, r6
 800668c:	4642      	mov	r2, r8
 800668e:	4628      	mov	r0, r5
 8006690:	47b8      	blx	r7
 8006692:	3001      	adds	r0, #1
 8006694:	f43f aee9 	beq.w	800646a <_printf_float+0xba>
 8006698:	f104 031a 	add.w	r3, r4, #26
 800669c:	f04f 0b00 	mov.w	fp, #0
 80066a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066a4:	9306      	str	r3, [sp, #24]
 80066a6:	e015      	b.n	80066d4 <_printf_float+0x324>
 80066a8:	7fefffff 	.word	0x7fefffff
 80066ac:	0800acac 	.word	0x0800acac
 80066b0:	0800aca8 	.word	0x0800aca8
 80066b4:	0800acb4 	.word	0x0800acb4
 80066b8:	0800acb0 	.word	0x0800acb0
 80066bc:	0800acb8 	.word	0x0800acb8
 80066c0:	2301      	movs	r3, #1
 80066c2:	9a06      	ldr	r2, [sp, #24]
 80066c4:	4631      	mov	r1, r6
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b8      	blx	r7
 80066ca:	3001      	adds	r0, #1
 80066cc:	f43f aecd 	beq.w	800646a <_printf_float+0xba>
 80066d0:	f10b 0b01 	add.w	fp, fp, #1
 80066d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80066d8:	ebaa 0309 	sub.w	r3, sl, r9
 80066dc:	455b      	cmp	r3, fp
 80066de:	dcef      	bgt.n	80066c0 <_printf_float+0x310>
 80066e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066e4:	429a      	cmp	r2, r3
 80066e6:	44d0      	add	r8, sl
 80066e8:	db15      	blt.n	8006716 <_printf_float+0x366>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	07da      	lsls	r2, r3, #31
 80066ee:	d412      	bmi.n	8006716 <_printf_float+0x366>
 80066f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f4:	eba3 020a 	sub.w	r2, r3, sl
 80066f8:	eba3 0a01 	sub.w	sl, r3, r1
 80066fc:	4592      	cmp	sl, r2
 80066fe:	bfa8      	it	ge
 8006700:	4692      	movge	sl, r2
 8006702:	f1ba 0f00 	cmp.w	sl, #0
 8006706:	dc0e      	bgt.n	8006726 <_printf_float+0x376>
 8006708:	f04f 0800 	mov.w	r8, #0
 800670c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006710:	f104 091a 	add.w	r9, r4, #26
 8006714:	e019      	b.n	800674a <_printf_float+0x39a>
 8006716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	d1e5      	bne.n	80066f0 <_printf_float+0x340>
 8006724:	e6a1      	b.n	800646a <_printf_float+0xba>
 8006726:	4653      	mov	r3, sl
 8006728:	4642      	mov	r2, r8
 800672a:	4631      	mov	r1, r6
 800672c:	4628      	mov	r0, r5
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	d1e9      	bne.n	8006708 <_printf_float+0x358>
 8006734:	e699      	b.n	800646a <_printf_float+0xba>
 8006736:	2301      	movs	r3, #1
 8006738:	464a      	mov	r2, r9
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f ae92 	beq.w	800646a <_printf_float+0xba>
 8006746:	f108 0801 	add.w	r8, r8, #1
 800674a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	eba3 030a 	sub.w	r3, r3, sl
 8006754:	4543      	cmp	r3, r8
 8006756:	dcee      	bgt.n	8006736 <_printf_float+0x386>
 8006758:	e74a      	b.n	80065f0 <_printf_float+0x240>
 800675a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800675c:	2a01      	cmp	r2, #1
 800675e:	dc01      	bgt.n	8006764 <_printf_float+0x3b4>
 8006760:	07db      	lsls	r3, r3, #31
 8006762:	d53a      	bpl.n	80067da <_printf_float+0x42a>
 8006764:	2301      	movs	r3, #1
 8006766:	4642      	mov	r2, r8
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f ae7b 	beq.w	800646a <_printf_float+0xba>
 8006774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f108 0801 	add.w	r8, r8, #1
 8006784:	f43f ae71 	beq.w	800646a <_printf_float+0xba>
 8006788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678a:	2200      	movs	r2, #0
 800678c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006794:	2300      	movs	r3, #0
 8006796:	f7fa f997 	bl	8000ac8 <__aeabi_dcmpeq>
 800679a:	b9c8      	cbnz	r0, 80067d0 <_printf_float+0x420>
 800679c:	4653      	mov	r3, sl
 800679e:	4642      	mov	r2, r8
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	d10e      	bne.n	80067c8 <_printf_float+0x418>
 80067aa:	e65e      	b.n	800646a <_printf_float+0xba>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4652      	mov	r2, sl
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f ae57 	beq.w	800646a <_printf_float+0xba>
 80067bc:	f108 0801 	add.w	r8, r8, #1
 80067c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c2:	3b01      	subs	r3, #1
 80067c4:	4543      	cmp	r3, r8
 80067c6:	dcf1      	bgt.n	80067ac <_printf_float+0x3fc>
 80067c8:	464b      	mov	r3, r9
 80067ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067ce:	e6de      	b.n	800658e <_printf_float+0x1de>
 80067d0:	f04f 0800 	mov.w	r8, #0
 80067d4:	f104 0a1a 	add.w	sl, r4, #26
 80067d8:	e7f2      	b.n	80067c0 <_printf_float+0x410>
 80067da:	2301      	movs	r3, #1
 80067dc:	e7df      	b.n	800679e <_printf_float+0x3ee>
 80067de:	2301      	movs	r3, #1
 80067e0:	464a      	mov	r2, r9
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	f43f ae3e 	beq.w	800646a <_printf_float+0xba>
 80067ee:	f108 0801 	add.w	r8, r8, #1
 80067f2:	68e3      	ldr	r3, [r4, #12]
 80067f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	4543      	cmp	r3, r8
 80067fa:	dcf0      	bgt.n	80067de <_printf_float+0x42e>
 80067fc:	e6fc      	b.n	80065f8 <_printf_float+0x248>
 80067fe:	f04f 0800 	mov.w	r8, #0
 8006802:	f104 0919 	add.w	r9, r4, #25
 8006806:	e7f4      	b.n	80067f2 <_printf_float+0x442>
 8006808:	2900      	cmp	r1, #0
 800680a:	f43f ae8b 	beq.w	8006524 <_printf_float+0x174>
 800680e:	2300      	movs	r3, #0
 8006810:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006814:	ab09      	add	r3, sp, #36	; 0x24
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	ec49 8b10 	vmov	d0, r8, r9
 800681c:	6022      	str	r2, [r4, #0]
 800681e:	f8cd a004 	str.w	sl, [sp, #4]
 8006822:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006826:	4628      	mov	r0, r5
 8006828:	f7ff fd2e 	bl	8006288 <__cvt>
 800682c:	4680      	mov	r8, r0
 800682e:	e648      	b.n	80064c2 <_printf_float+0x112>

08006830 <_printf_common>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	4691      	mov	r9, r2
 8006836:	461f      	mov	r7, r3
 8006838:	688a      	ldr	r2, [r1, #8]
 800683a:	690b      	ldr	r3, [r1, #16]
 800683c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006840:	4293      	cmp	r3, r2
 8006842:	bfb8      	it	lt
 8006844:	4613      	movlt	r3, r2
 8006846:	f8c9 3000 	str.w	r3, [r9]
 800684a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800684e:	4606      	mov	r6, r0
 8006850:	460c      	mov	r4, r1
 8006852:	b112      	cbz	r2, 800685a <_printf_common+0x2a>
 8006854:	3301      	adds	r3, #1
 8006856:	f8c9 3000 	str.w	r3, [r9]
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	0699      	lsls	r1, r3, #26
 800685e:	bf42      	ittt	mi
 8006860:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006864:	3302      	addmi	r3, #2
 8006866:	f8c9 3000 	strmi.w	r3, [r9]
 800686a:	6825      	ldr	r5, [r4, #0]
 800686c:	f015 0506 	ands.w	r5, r5, #6
 8006870:	d107      	bne.n	8006882 <_printf_common+0x52>
 8006872:	f104 0a19 	add.w	sl, r4, #25
 8006876:	68e3      	ldr	r3, [r4, #12]
 8006878:	f8d9 2000 	ldr.w	r2, [r9]
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	42ab      	cmp	r3, r5
 8006880:	dc28      	bgt.n	80068d4 <_printf_common+0xa4>
 8006882:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006886:	6822      	ldr	r2, [r4, #0]
 8006888:	3300      	adds	r3, #0
 800688a:	bf18      	it	ne
 800688c:	2301      	movne	r3, #1
 800688e:	0692      	lsls	r2, r2, #26
 8006890:	d42d      	bmi.n	80068ee <_printf_common+0xbe>
 8006892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006896:	4639      	mov	r1, r7
 8006898:	4630      	mov	r0, r6
 800689a:	47c0      	blx	r8
 800689c:	3001      	adds	r0, #1
 800689e:	d020      	beq.n	80068e2 <_printf_common+0xb2>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	68e5      	ldr	r5, [r4, #12]
 80068a4:	f8d9 2000 	ldr.w	r2, [r9]
 80068a8:	f003 0306 	and.w	r3, r3, #6
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	bf08      	it	eq
 80068b0:	1aad      	subeq	r5, r5, r2
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	6922      	ldr	r2, [r4, #16]
 80068b6:	bf0c      	ite	eq
 80068b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068bc:	2500      	movne	r5, #0
 80068be:	4293      	cmp	r3, r2
 80068c0:	bfc4      	itt	gt
 80068c2:	1a9b      	subgt	r3, r3, r2
 80068c4:	18ed      	addgt	r5, r5, r3
 80068c6:	f04f 0900 	mov.w	r9, #0
 80068ca:	341a      	adds	r4, #26
 80068cc:	454d      	cmp	r5, r9
 80068ce:	d11a      	bne.n	8006906 <_printf_common+0xd6>
 80068d0:	2000      	movs	r0, #0
 80068d2:	e008      	b.n	80068e6 <_printf_common+0xb6>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4652      	mov	r2, sl
 80068d8:	4639      	mov	r1, r7
 80068da:	4630      	mov	r0, r6
 80068dc:	47c0      	blx	r8
 80068de:	3001      	adds	r0, #1
 80068e0:	d103      	bne.n	80068ea <_printf_common+0xba>
 80068e2:	f04f 30ff 	mov.w	r0, #4294967295
 80068e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ea:	3501      	adds	r5, #1
 80068ec:	e7c3      	b.n	8006876 <_printf_common+0x46>
 80068ee:	18e1      	adds	r1, r4, r3
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	2030      	movs	r0, #48	; 0x30
 80068f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068f8:	4422      	add	r2, r4
 80068fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006902:	3302      	adds	r3, #2
 8006904:	e7c5      	b.n	8006892 <_printf_common+0x62>
 8006906:	2301      	movs	r3, #1
 8006908:	4622      	mov	r2, r4
 800690a:	4639      	mov	r1, r7
 800690c:	4630      	mov	r0, r6
 800690e:	47c0      	blx	r8
 8006910:	3001      	adds	r0, #1
 8006912:	d0e6      	beq.n	80068e2 <_printf_common+0xb2>
 8006914:	f109 0901 	add.w	r9, r9, #1
 8006918:	e7d8      	b.n	80068cc <_printf_common+0x9c>
	...

0800691c <_printf_i>:
 800691c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006920:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006924:	460c      	mov	r4, r1
 8006926:	7e09      	ldrb	r1, [r1, #24]
 8006928:	b085      	sub	sp, #20
 800692a:	296e      	cmp	r1, #110	; 0x6e
 800692c:	4617      	mov	r7, r2
 800692e:	4606      	mov	r6, r0
 8006930:	4698      	mov	r8, r3
 8006932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006934:	f000 80b3 	beq.w	8006a9e <_printf_i+0x182>
 8006938:	d822      	bhi.n	8006980 <_printf_i+0x64>
 800693a:	2963      	cmp	r1, #99	; 0x63
 800693c:	d036      	beq.n	80069ac <_printf_i+0x90>
 800693e:	d80a      	bhi.n	8006956 <_printf_i+0x3a>
 8006940:	2900      	cmp	r1, #0
 8006942:	f000 80b9 	beq.w	8006ab8 <_printf_i+0x19c>
 8006946:	2958      	cmp	r1, #88	; 0x58
 8006948:	f000 8083 	beq.w	8006a52 <_printf_i+0x136>
 800694c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006950:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006954:	e032      	b.n	80069bc <_printf_i+0xa0>
 8006956:	2964      	cmp	r1, #100	; 0x64
 8006958:	d001      	beq.n	800695e <_printf_i+0x42>
 800695a:	2969      	cmp	r1, #105	; 0x69
 800695c:	d1f6      	bne.n	800694c <_printf_i+0x30>
 800695e:	6820      	ldr	r0, [r4, #0]
 8006960:	6813      	ldr	r3, [r2, #0]
 8006962:	0605      	lsls	r5, r0, #24
 8006964:	f103 0104 	add.w	r1, r3, #4
 8006968:	d52a      	bpl.n	80069c0 <_printf_i+0xa4>
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6011      	str	r1, [r2, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	da03      	bge.n	800697a <_printf_i+0x5e>
 8006972:	222d      	movs	r2, #45	; 0x2d
 8006974:	425b      	negs	r3, r3
 8006976:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800697a:	486f      	ldr	r0, [pc, #444]	; (8006b38 <_printf_i+0x21c>)
 800697c:	220a      	movs	r2, #10
 800697e:	e039      	b.n	80069f4 <_printf_i+0xd8>
 8006980:	2973      	cmp	r1, #115	; 0x73
 8006982:	f000 809d 	beq.w	8006ac0 <_printf_i+0x1a4>
 8006986:	d808      	bhi.n	800699a <_printf_i+0x7e>
 8006988:	296f      	cmp	r1, #111	; 0x6f
 800698a:	d020      	beq.n	80069ce <_printf_i+0xb2>
 800698c:	2970      	cmp	r1, #112	; 0x70
 800698e:	d1dd      	bne.n	800694c <_printf_i+0x30>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	f043 0320 	orr.w	r3, r3, #32
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	e003      	b.n	80069a2 <_printf_i+0x86>
 800699a:	2975      	cmp	r1, #117	; 0x75
 800699c:	d017      	beq.n	80069ce <_printf_i+0xb2>
 800699e:	2978      	cmp	r1, #120	; 0x78
 80069a0:	d1d4      	bne.n	800694c <_printf_i+0x30>
 80069a2:	2378      	movs	r3, #120	; 0x78
 80069a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069a8:	4864      	ldr	r0, [pc, #400]	; (8006b3c <_printf_i+0x220>)
 80069aa:	e055      	b.n	8006a58 <_printf_i+0x13c>
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	1d19      	adds	r1, r3, #4
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6011      	str	r1, [r2, #0]
 80069b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069bc:	2301      	movs	r3, #1
 80069be:	e08c      	b.n	8006ada <_printf_i+0x1be>
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6011      	str	r1, [r2, #0]
 80069c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069c8:	bf18      	it	ne
 80069ca:	b21b      	sxthne	r3, r3
 80069cc:	e7cf      	b.n	800696e <_printf_i+0x52>
 80069ce:	6813      	ldr	r3, [r2, #0]
 80069d0:	6825      	ldr	r5, [r4, #0]
 80069d2:	1d18      	adds	r0, r3, #4
 80069d4:	6010      	str	r0, [r2, #0]
 80069d6:	0628      	lsls	r0, r5, #24
 80069d8:	d501      	bpl.n	80069de <_printf_i+0xc2>
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	e002      	b.n	80069e4 <_printf_i+0xc8>
 80069de:	0668      	lsls	r0, r5, #25
 80069e0:	d5fb      	bpl.n	80069da <_printf_i+0xbe>
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	4854      	ldr	r0, [pc, #336]	; (8006b38 <_printf_i+0x21c>)
 80069e6:	296f      	cmp	r1, #111	; 0x6f
 80069e8:	bf14      	ite	ne
 80069ea:	220a      	movne	r2, #10
 80069ec:	2208      	moveq	r2, #8
 80069ee:	2100      	movs	r1, #0
 80069f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069f4:	6865      	ldr	r5, [r4, #4]
 80069f6:	60a5      	str	r5, [r4, #8]
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	f2c0 8095 	blt.w	8006b28 <_printf_i+0x20c>
 80069fe:	6821      	ldr	r1, [r4, #0]
 8006a00:	f021 0104 	bic.w	r1, r1, #4
 8006a04:	6021      	str	r1, [r4, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d13d      	bne.n	8006a86 <_printf_i+0x16a>
 8006a0a:	2d00      	cmp	r5, #0
 8006a0c:	f040 808e 	bne.w	8006b2c <_printf_i+0x210>
 8006a10:	4665      	mov	r5, ip
 8006a12:	2a08      	cmp	r2, #8
 8006a14:	d10b      	bne.n	8006a2e <_printf_i+0x112>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	07db      	lsls	r3, r3, #31
 8006a1a:	d508      	bpl.n	8006a2e <_printf_i+0x112>
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bfde      	ittt	le
 8006a24:	2330      	movle	r3, #48	; 0x30
 8006a26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a2e:	ebac 0305 	sub.w	r3, ip, r5
 8006a32:	6123      	str	r3, [r4, #16]
 8006a34:	f8cd 8000 	str.w	r8, [sp]
 8006a38:	463b      	mov	r3, r7
 8006a3a:	aa03      	add	r2, sp, #12
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff fef6 	bl	8006830 <_printf_common>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d14d      	bne.n	8006ae4 <_printf_i+0x1c8>
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	b005      	add	sp, #20
 8006a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a52:	4839      	ldr	r0, [pc, #228]	; (8006b38 <_printf_i+0x21c>)
 8006a54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a58:	6813      	ldr	r3, [r2, #0]
 8006a5a:	6821      	ldr	r1, [r4, #0]
 8006a5c:	1d1d      	adds	r5, r3, #4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6015      	str	r5, [r2, #0]
 8006a62:	060a      	lsls	r2, r1, #24
 8006a64:	d50b      	bpl.n	8006a7e <_printf_i+0x162>
 8006a66:	07ca      	lsls	r2, r1, #31
 8006a68:	bf44      	itt	mi
 8006a6a:	f041 0120 	orrmi.w	r1, r1, #32
 8006a6e:	6021      	strmi	r1, [r4, #0]
 8006a70:	b91b      	cbnz	r3, 8006a7a <_printf_i+0x15e>
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	f022 0220 	bic.w	r2, r2, #32
 8006a78:	6022      	str	r2, [r4, #0]
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	e7b7      	b.n	80069ee <_printf_i+0xd2>
 8006a7e:	064d      	lsls	r5, r1, #25
 8006a80:	bf48      	it	mi
 8006a82:	b29b      	uxthmi	r3, r3
 8006a84:	e7ef      	b.n	8006a66 <_printf_i+0x14a>
 8006a86:	4665      	mov	r5, ip
 8006a88:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a8c:	fb02 3311 	mls	r3, r2, r1, r3
 8006a90:	5cc3      	ldrb	r3, [r0, r3]
 8006a92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a96:	460b      	mov	r3, r1
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	d1f5      	bne.n	8006a88 <_printf_i+0x16c>
 8006a9c:	e7b9      	b.n	8006a12 <_printf_i+0xf6>
 8006a9e:	6813      	ldr	r3, [r2, #0]
 8006aa0:	6825      	ldr	r5, [r4, #0]
 8006aa2:	6961      	ldr	r1, [r4, #20]
 8006aa4:	1d18      	adds	r0, r3, #4
 8006aa6:	6010      	str	r0, [r2, #0]
 8006aa8:	0628      	lsls	r0, r5, #24
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	d501      	bpl.n	8006ab2 <_printf_i+0x196>
 8006aae:	6019      	str	r1, [r3, #0]
 8006ab0:	e002      	b.n	8006ab8 <_printf_i+0x19c>
 8006ab2:	066a      	lsls	r2, r5, #25
 8006ab4:	d5fb      	bpl.n	8006aae <_printf_i+0x192>
 8006ab6:	8019      	strh	r1, [r3, #0]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6123      	str	r3, [r4, #16]
 8006abc:	4665      	mov	r5, ip
 8006abe:	e7b9      	b.n	8006a34 <_printf_i+0x118>
 8006ac0:	6813      	ldr	r3, [r2, #0]
 8006ac2:	1d19      	adds	r1, r3, #4
 8006ac4:	6011      	str	r1, [r2, #0]
 8006ac6:	681d      	ldr	r5, [r3, #0]
 8006ac8:	6862      	ldr	r2, [r4, #4]
 8006aca:	2100      	movs	r1, #0
 8006acc:	4628      	mov	r0, r5
 8006ace:	f7f9 fb87 	bl	80001e0 <memchr>
 8006ad2:	b108      	cbz	r0, 8006ad8 <_printf_i+0x1bc>
 8006ad4:	1b40      	subs	r0, r0, r5
 8006ad6:	6060      	str	r0, [r4, #4]
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	2300      	movs	r3, #0
 8006ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae2:	e7a7      	b.n	8006a34 <_printf_i+0x118>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	462a      	mov	r2, r5
 8006ae8:	4639      	mov	r1, r7
 8006aea:	4630      	mov	r0, r6
 8006aec:	47c0      	blx	r8
 8006aee:	3001      	adds	r0, #1
 8006af0:	d0aa      	beq.n	8006a48 <_printf_i+0x12c>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	079b      	lsls	r3, r3, #30
 8006af6:	d413      	bmi.n	8006b20 <_printf_i+0x204>
 8006af8:	68e0      	ldr	r0, [r4, #12]
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	4298      	cmp	r0, r3
 8006afe:	bfb8      	it	lt
 8006b00:	4618      	movlt	r0, r3
 8006b02:	e7a3      	b.n	8006a4c <_printf_i+0x130>
 8006b04:	2301      	movs	r3, #1
 8006b06:	464a      	mov	r2, r9
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	47c0      	blx	r8
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d09a      	beq.n	8006a48 <_printf_i+0x12c>
 8006b12:	3501      	adds	r5, #1
 8006b14:	68e3      	ldr	r3, [r4, #12]
 8006b16:	9a03      	ldr	r2, [sp, #12]
 8006b18:	1a9b      	subs	r3, r3, r2
 8006b1a:	42ab      	cmp	r3, r5
 8006b1c:	dcf2      	bgt.n	8006b04 <_printf_i+0x1e8>
 8006b1e:	e7eb      	b.n	8006af8 <_printf_i+0x1dc>
 8006b20:	2500      	movs	r5, #0
 8006b22:	f104 0919 	add.w	r9, r4, #25
 8006b26:	e7f5      	b.n	8006b14 <_printf_i+0x1f8>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1ac      	bne.n	8006a86 <_printf_i+0x16a>
 8006b2c:	7803      	ldrb	r3, [r0, #0]
 8006b2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b36:	e76c      	b.n	8006a12 <_printf_i+0xf6>
 8006b38:	0800acba 	.word	0x0800acba
 8006b3c:	0800accb 	.word	0x0800accb

08006b40 <_sbrk_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4c06      	ldr	r4, [pc, #24]	; (8006b5c <_sbrk_r+0x1c>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4605      	mov	r5, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	6023      	str	r3, [r4, #0]
 8006b4c:	f7fb f9e6 	bl	8001f1c <_sbrk>
 8006b50:	1c43      	adds	r3, r0, #1
 8006b52:	d102      	bne.n	8006b5a <_sbrk_r+0x1a>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	b103      	cbz	r3, 8006b5a <_sbrk_r+0x1a>
 8006b58:	602b      	str	r3, [r5, #0]
 8006b5a:	bd38      	pop	{r3, r4, r5, pc}
 8006b5c:	20000d90 	.word	0x20000d90

08006b60 <siprintf>:
 8006b60:	b40e      	push	{r1, r2, r3}
 8006b62:	b500      	push	{lr}
 8006b64:	b09c      	sub	sp, #112	; 0x70
 8006b66:	ab1d      	add	r3, sp, #116	; 0x74
 8006b68:	9002      	str	r0, [sp, #8]
 8006b6a:	9006      	str	r0, [sp, #24]
 8006b6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b70:	4809      	ldr	r0, [pc, #36]	; (8006b98 <siprintf+0x38>)
 8006b72:	9107      	str	r1, [sp, #28]
 8006b74:	9104      	str	r1, [sp, #16]
 8006b76:	4909      	ldr	r1, [pc, #36]	; (8006b9c <siprintf+0x3c>)
 8006b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b7c:	9105      	str	r1, [sp, #20]
 8006b7e:	6800      	ldr	r0, [r0, #0]
 8006b80:	9301      	str	r3, [sp, #4]
 8006b82:	a902      	add	r1, sp, #8
 8006b84:	f002 fc58 	bl	8009438 <_svfiprintf_r>
 8006b88:	9b02      	ldr	r3, [sp, #8]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
 8006b8e:	b01c      	add	sp, #112	; 0x70
 8006b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b94:	b003      	add	sp, #12
 8006b96:	4770      	bx	lr
 8006b98:	20000034 	.word	0x20000034
 8006b9c:	ffff0208 	.word	0xffff0208

08006ba0 <strchr>:
 8006ba0:	b2c9      	uxtb	r1, r1
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ba8:	b11a      	cbz	r2, 8006bb2 <strchr+0x12>
 8006baa:	428a      	cmp	r2, r1
 8006bac:	d1f9      	bne.n	8006ba2 <strchr+0x2>
 8006bae:	4618      	mov	r0, r3
 8006bb0:	4770      	bx	lr
 8006bb2:	2900      	cmp	r1, #0
 8006bb4:	bf18      	it	ne
 8006bb6:	2300      	movne	r3, #0
 8006bb8:	e7f9      	b.n	8006bae <strchr+0xe>

08006bba <strstr>:
 8006bba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bbc:	7803      	ldrb	r3, [r0, #0]
 8006bbe:	b17b      	cbz	r3, 8006be0 <strstr+0x26>
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	7823      	ldrb	r3, [r4, #0]
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	1c66      	adds	r6, r4, #1
 8006bc8:	b17b      	cbz	r3, 8006bea <strstr+0x30>
 8006bca:	1e4a      	subs	r2, r1, #1
 8006bcc:	1e63      	subs	r3, r4, #1
 8006bce:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8006bd2:	b14d      	cbz	r5, 8006be8 <strstr+0x2e>
 8006bd4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8006bd8:	42af      	cmp	r7, r5
 8006bda:	4634      	mov	r4, r6
 8006bdc:	d0f7      	beq.n	8006bce <strstr+0x14>
 8006bde:	e7f0      	b.n	8006bc2 <strstr+0x8>
 8006be0:	780b      	ldrb	r3, [r1, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bf18      	it	ne
 8006be6:	2000      	movne	r0, #0
 8006be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bea:	4618      	mov	r0, r3
 8006bec:	e7fc      	b.n	8006be8 <strstr+0x2e>

08006bee <sulp>:
 8006bee:	b570      	push	{r4, r5, r6, lr}
 8006bf0:	4604      	mov	r4, r0
 8006bf2:	460d      	mov	r5, r1
 8006bf4:	ec45 4b10 	vmov	d0, r4, r5
 8006bf8:	4616      	mov	r6, r2
 8006bfa:	f002 fa81 	bl	8009100 <__ulp>
 8006bfe:	ec51 0b10 	vmov	r0, r1, d0
 8006c02:	b17e      	cbz	r6, 8006c24 <sulp+0x36>
 8006c04:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006c08:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	dd09      	ble.n	8006c24 <sulp+0x36>
 8006c10:	051b      	lsls	r3, r3, #20
 8006c12:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006c16:	2400      	movs	r4, #0
 8006c18:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006c1c:	4622      	mov	r2, r4
 8006c1e:	462b      	mov	r3, r5
 8006c20:	f7f9 fcea 	bl	80005f8 <__aeabi_dmul>
 8006c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c28 <_strtod_l>:
 8006c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2c:	461f      	mov	r7, r3
 8006c2e:	b0a1      	sub	sp, #132	; 0x84
 8006c30:	2300      	movs	r3, #0
 8006c32:	4681      	mov	r9, r0
 8006c34:	4638      	mov	r0, r7
 8006c36:	460e      	mov	r6, r1
 8006c38:	9217      	str	r2, [sp, #92]	; 0x5c
 8006c3a:	931c      	str	r3, [sp, #112]	; 0x70
 8006c3c:	f001 ff66 	bl	8008b0c <__localeconv_l>
 8006c40:	4680      	mov	r8, r0
 8006c42:	6800      	ldr	r0, [r0, #0]
 8006c44:	f7f9 fac4 	bl	80001d0 <strlen>
 8006c48:	f04f 0a00 	mov.w	sl, #0
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	f04f 0b00 	mov.w	fp, #0
 8006c52:	961b      	str	r6, [sp, #108]	; 0x6c
 8006c54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c56:	781a      	ldrb	r2, [r3, #0]
 8006c58:	2a0d      	cmp	r2, #13
 8006c5a:	d832      	bhi.n	8006cc2 <_strtod_l+0x9a>
 8006c5c:	2a09      	cmp	r2, #9
 8006c5e:	d236      	bcs.n	8006cce <_strtod_l+0xa6>
 8006c60:	2a00      	cmp	r2, #0
 8006c62:	d03e      	beq.n	8006ce2 <_strtod_l+0xba>
 8006c64:	2300      	movs	r3, #0
 8006c66:	930d      	str	r3, [sp, #52]	; 0x34
 8006c68:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8006c6a:	782b      	ldrb	r3, [r5, #0]
 8006c6c:	2b30      	cmp	r3, #48	; 0x30
 8006c6e:	f040 80ac 	bne.w	8006dca <_strtod_l+0x1a2>
 8006c72:	786b      	ldrb	r3, [r5, #1]
 8006c74:	2b58      	cmp	r3, #88	; 0x58
 8006c76:	d001      	beq.n	8006c7c <_strtod_l+0x54>
 8006c78:	2b78      	cmp	r3, #120	; 0x78
 8006c7a:	d167      	bne.n	8006d4c <_strtod_l+0x124>
 8006c7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	ab1c      	add	r3, sp, #112	; 0x70
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	9702      	str	r7, [sp, #8]
 8006c86:	ab1d      	add	r3, sp, #116	; 0x74
 8006c88:	4a88      	ldr	r2, [pc, #544]	; (8006eac <_strtod_l+0x284>)
 8006c8a:	a91b      	add	r1, sp, #108	; 0x6c
 8006c8c:	4648      	mov	r0, r9
 8006c8e:	f001 fc66 	bl	800855e <__gethex>
 8006c92:	f010 0407 	ands.w	r4, r0, #7
 8006c96:	4606      	mov	r6, r0
 8006c98:	d005      	beq.n	8006ca6 <_strtod_l+0x7e>
 8006c9a:	2c06      	cmp	r4, #6
 8006c9c:	d12b      	bne.n	8006cf6 <_strtod_l+0xce>
 8006c9e:	3501      	adds	r5, #1
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	951b      	str	r5, [sp, #108]	; 0x6c
 8006ca4:	930d      	str	r3, [sp, #52]	; 0x34
 8006ca6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f040 859a 	bne.w	80077e2 <_strtod_l+0xbba>
 8006cae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cb0:	b1e3      	cbz	r3, 8006cec <_strtod_l+0xc4>
 8006cb2:	4652      	mov	r2, sl
 8006cb4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006cb8:	ec43 2b10 	vmov	d0, r2, r3
 8006cbc:	b021      	add	sp, #132	; 0x84
 8006cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc2:	2a2b      	cmp	r2, #43	; 0x2b
 8006cc4:	d015      	beq.n	8006cf2 <_strtod_l+0xca>
 8006cc6:	2a2d      	cmp	r2, #45	; 0x2d
 8006cc8:	d004      	beq.n	8006cd4 <_strtod_l+0xac>
 8006cca:	2a20      	cmp	r2, #32
 8006ccc:	d1ca      	bne.n	8006c64 <_strtod_l+0x3c>
 8006cce:	3301      	adds	r3, #1
 8006cd0:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cd2:	e7bf      	b.n	8006c54 <_strtod_l+0x2c>
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	920d      	str	r2, [sp, #52]	; 0x34
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	921b      	str	r2, [sp, #108]	; 0x6c
 8006cdc:	785b      	ldrb	r3, [r3, #1]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1c2      	bne.n	8006c68 <_strtod_l+0x40>
 8006ce2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006ce4:	961b      	str	r6, [sp, #108]	; 0x6c
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f040 8579 	bne.w	80077de <_strtod_l+0xbb6>
 8006cec:	4652      	mov	r2, sl
 8006cee:	465b      	mov	r3, fp
 8006cf0:	e7e2      	b.n	8006cb8 <_strtod_l+0x90>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	e7ef      	b.n	8006cd6 <_strtod_l+0xae>
 8006cf6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006cf8:	b13a      	cbz	r2, 8006d0a <_strtod_l+0xe2>
 8006cfa:	2135      	movs	r1, #53	; 0x35
 8006cfc:	a81e      	add	r0, sp, #120	; 0x78
 8006cfe:	f002 faf7 	bl	80092f0 <__copybits>
 8006d02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006d04:	4648      	mov	r0, r9
 8006d06:	f001 ff64 	bl	8008bd2 <_Bfree>
 8006d0a:	3c01      	subs	r4, #1
 8006d0c:	2c04      	cmp	r4, #4
 8006d0e:	d806      	bhi.n	8006d1e <_strtod_l+0xf6>
 8006d10:	e8df f004 	tbb	[pc, r4]
 8006d14:	1714030a 	.word	0x1714030a
 8006d18:	0a          	.byte	0x0a
 8006d19:	00          	.byte	0x00
 8006d1a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8006d1e:	0730      	lsls	r0, r6, #28
 8006d20:	d5c1      	bpl.n	8006ca6 <_strtod_l+0x7e>
 8006d22:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006d26:	e7be      	b.n	8006ca6 <_strtod_l+0x7e>
 8006d28:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8006d2c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006d2e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006d32:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006d36:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006d3a:	e7f0      	b.n	8006d1e <_strtod_l+0xf6>
 8006d3c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006eb0 <_strtod_l+0x288>
 8006d40:	e7ed      	b.n	8006d1e <_strtod_l+0xf6>
 8006d42:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006d46:	f04f 3aff 	mov.w	sl, #4294967295
 8006d4a:	e7e8      	b.n	8006d1e <_strtod_l+0xf6>
 8006d4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	921b      	str	r2, [sp, #108]	; 0x6c
 8006d52:	785b      	ldrb	r3, [r3, #1]
 8006d54:	2b30      	cmp	r3, #48	; 0x30
 8006d56:	d0f9      	beq.n	8006d4c <_strtod_l+0x124>
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0a4      	beq.n	8006ca6 <_strtod_l+0x7e>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	2500      	movs	r5, #0
 8006d60:	9306      	str	r3, [sp, #24]
 8006d62:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006d64:	9308      	str	r3, [sp, #32]
 8006d66:	9507      	str	r5, [sp, #28]
 8006d68:	9505      	str	r5, [sp, #20]
 8006d6a:	220a      	movs	r2, #10
 8006d6c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8006d6e:	7807      	ldrb	r7, [r0, #0]
 8006d70:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006d74:	b2d9      	uxtb	r1, r3
 8006d76:	2909      	cmp	r1, #9
 8006d78:	d929      	bls.n	8006dce <_strtod_l+0x1a6>
 8006d7a:	4622      	mov	r2, r4
 8006d7c:	f8d8 1000 	ldr.w	r1, [r8]
 8006d80:	f002 fc52 	bl	8009628 <strncmp>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	d031      	beq.n	8006dec <_strtod_l+0x1c4>
 8006d88:	2000      	movs	r0, #0
 8006d8a:	9c05      	ldr	r4, [sp, #20]
 8006d8c:	9004      	str	r0, [sp, #16]
 8006d8e:	463b      	mov	r3, r7
 8006d90:	4602      	mov	r2, r0
 8006d92:	2b65      	cmp	r3, #101	; 0x65
 8006d94:	d001      	beq.n	8006d9a <_strtod_l+0x172>
 8006d96:	2b45      	cmp	r3, #69	; 0x45
 8006d98:	d114      	bne.n	8006dc4 <_strtod_l+0x19c>
 8006d9a:	b924      	cbnz	r4, 8006da6 <_strtod_l+0x17e>
 8006d9c:	b910      	cbnz	r0, 8006da4 <_strtod_l+0x17c>
 8006d9e:	9b06      	ldr	r3, [sp, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d09e      	beq.n	8006ce2 <_strtod_l+0xba>
 8006da4:	2400      	movs	r4, #0
 8006da6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006da8:	1c73      	adds	r3, r6, #1
 8006daa:	931b      	str	r3, [sp, #108]	; 0x6c
 8006dac:	7873      	ldrb	r3, [r6, #1]
 8006dae:	2b2b      	cmp	r3, #43	; 0x2b
 8006db0:	d078      	beq.n	8006ea4 <_strtod_l+0x27c>
 8006db2:	2b2d      	cmp	r3, #45	; 0x2d
 8006db4:	d070      	beq.n	8006e98 <_strtod_l+0x270>
 8006db6:	f04f 0c00 	mov.w	ip, #0
 8006dba:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8006dbe:	2f09      	cmp	r7, #9
 8006dc0:	d97c      	bls.n	8006ebc <_strtod_l+0x294>
 8006dc2:	961b      	str	r6, [sp, #108]	; 0x6c
 8006dc4:	f04f 0e00 	mov.w	lr, #0
 8006dc8:	e09a      	b.n	8006f00 <_strtod_l+0x2d8>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	e7c7      	b.n	8006d5e <_strtod_l+0x136>
 8006dce:	9905      	ldr	r1, [sp, #20]
 8006dd0:	2908      	cmp	r1, #8
 8006dd2:	bfdd      	ittte	le
 8006dd4:	9907      	ldrle	r1, [sp, #28]
 8006dd6:	fb02 3301 	mlale	r3, r2, r1, r3
 8006dda:	9307      	strle	r3, [sp, #28]
 8006ddc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006de0:	9b05      	ldr	r3, [sp, #20]
 8006de2:	3001      	adds	r0, #1
 8006de4:	3301      	adds	r3, #1
 8006de6:	9305      	str	r3, [sp, #20]
 8006de8:	901b      	str	r0, [sp, #108]	; 0x6c
 8006dea:	e7bf      	b.n	8006d6c <_strtod_l+0x144>
 8006dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006dee:	191a      	adds	r2, r3, r4
 8006df0:	921b      	str	r2, [sp, #108]	; 0x6c
 8006df2:	9a05      	ldr	r2, [sp, #20]
 8006df4:	5d1b      	ldrb	r3, [r3, r4]
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	d037      	beq.n	8006e6a <_strtod_l+0x242>
 8006dfa:	9c05      	ldr	r4, [sp, #20]
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006e02:	2909      	cmp	r1, #9
 8006e04:	d913      	bls.n	8006e2e <_strtod_l+0x206>
 8006e06:	2101      	movs	r1, #1
 8006e08:	9104      	str	r1, [sp, #16]
 8006e0a:	e7c2      	b.n	8006d92 <_strtod_l+0x16a>
 8006e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	921b      	str	r2, [sp, #108]	; 0x6c
 8006e12:	785b      	ldrb	r3, [r3, #1]
 8006e14:	3001      	adds	r0, #1
 8006e16:	2b30      	cmp	r3, #48	; 0x30
 8006e18:	d0f8      	beq.n	8006e0c <_strtod_l+0x1e4>
 8006e1a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006e1e:	2a08      	cmp	r2, #8
 8006e20:	f200 84e4 	bhi.w	80077ec <_strtod_l+0xbc4>
 8006e24:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006e26:	9208      	str	r2, [sp, #32]
 8006e28:	4602      	mov	r2, r0
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006e32:	f100 0101 	add.w	r1, r0, #1
 8006e36:	d012      	beq.n	8006e5e <_strtod_l+0x236>
 8006e38:	440a      	add	r2, r1
 8006e3a:	eb00 0c04 	add.w	ip, r0, r4
 8006e3e:	4621      	mov	r1, r4
 8006e40:	270a      	movs	r7, #10
 8006e42:	458c      	cmp	ip, r1
 8006e44:	d113      	bne.n	8006e6e <_strtod_l+0x246>
 8006e46:	1821      	adds	r1, r4, r0
 8006e48:	2908      	cmp	r1, #8
 8006e4a:	f104 0401 	add.w	r4, r4, #1
 8006e4e:	4404      	add	r4, r0
 8006e50:	dc19      	bgt.n	8006e86 <_strtod_l+0x25e>
 8006e52:	9b07      	ldr	r3, [sp, #28]
 8006e54:	210a      	movs	r1, #10
 8006e56:	fb01 e303 	mla	r3, r1, r3, lr
 8006e5a:	9307      	str	r3, [sp, #28]
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006e60:	1c58      	adds	r0, r3, #1
 8006e62:	901b      	str	r0, [sp, #108]	; 0x6c
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	4608      	mov	r0, r1
 8006e68:	e7c9      	b.n	8006dfe <_strtod_l+0x1d6>
 8006e6a:	9805      	ldr	r0, [sp, #20]
 8006e6c:	e7d3      	b.n	8006e16 <_strtod_l+0x1ee>
 8006e6e:	2908      	cmp	r1, #8
 8006e70:	f101 0101 	add.w	r1, r1, #1
 8006e74:	dc03      	bgt.n	8006e7e <_strtod_l+0x256>
 8006e76:	9b07      	ldr	r3, [sp, #28]
 8006e78:	437b      	muls	r3, r7
 8006e7a:	9307      	str	r3, [sp, #28]
 8006e7c:	e7e1      	b.n	8006e42 <_strtod_l+0x21a>
 8006e7e:	2910      	cmp	r1, #16
 8006e80:	bfd8      	it	le
 8006e82:	437d      	mulle	r5, r7
 8006e84:	e7dd      	b.n	8006e42 <_strtod_l+0x21a>
 8006e86:	2c10      	cmp	r4, #16
 8006e88:	bfdc      	itt	le
 8006e8a:	210a      	movle	r1, #10
 8006e8c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006e90:	e7e4      	b.n	8006e5c <_strtod_l+0x234>
 8006e92:	2301      	movs	r3, #1
 8006e94:	9304      	str	r3, [sp, #16]
 8006e96:	e781      	b.n	8006d9c <_strtod_l+0x174>
 8006e98:	f04f 0c01 	mov.w	ip, #1
 8006e9c:	1cb3      	adds	r3, r6, #2
 8006e9e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ea0:	78b3      	ldrb	r3, [r6, #2]
 8006ea2:	e78a      	b.n	8006dba <_strtod_l+0x192>
 8006ea4:	f04f 0c00 	mov.w	ip, #0
 8006ea8:	e7f8      	b.n	8006e9c <_strtod_l+0x274>
 8006eaa:	bf00      	nop
 8006eac:	0800acdc 	.word	0x0800acdc
 8006eb0:	7ff00000 	.word	0x7ff00000
 8006eb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006eb6:	1c5f      	adds	r7, r3, #1
 8006eb8:	971b      	str	r7, [sp, #108]	; 0x6c
 8006eba:	785b      	ldrb	r3, [r3, #1]
 8006ebc:	2b30      	cmp	r3, #48	; 0x30
 8006ebe:	d0f9      	beq.n	8006eb4 <_strtod_l+0x28c>
 8006ec0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006ec4:	2f08      	cmp	r7, #8
 8006ec6:	f63f af7d 	bhi.w	8006dc4 <_strtod_l+0x19c>
 8006eca:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006ece:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ed0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ed2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ed4:	1c5f      	adds	r7, r3, #1
 8006ed6:	971b      	str	r7, [sp, #108]	; 0x6c
 8006ed8:	785b      	ldrb	r3, [r3, #1]
 8006eda:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006ede:	f1b8 0f09 	cmp.w	r8, #9
 8006ee2:	d937      	bls.n	8006f54 <_strtod_l+0x32c>
 8006ee4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ee6:	1a7f      	subs	r7, r7, r1
 8006ee8:	2f08      	cmp	r7, #8
 8006eea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006eee:	dc37      	bgt.n	8006f60 <_strtod_l+0x338>
 8006ef0:	45be      	cmp	lr, r7
 8006ef2:	bfa8      	it	ge
 8006ef4:	46be      	movge	lr, r7
 8006ef6:	f1bc 0f00 	cmp.w	ip, #0
 8006efa:	d001      	beq.n	8006f00 <_strtod_l+0x2d8>
 8006efc:	f1ce 0e00 	rsb	lr, lr, #0
 8006f00:	2c00      	cmp	r4, #0
 8006f02:	d151      	bne.n	8006fa8 <_strtod_l+0x380>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f47f aece 	bne.w	8006ca6 <_strtod_l+0x7e>
 8006f0a:	9a06      	ldr	r2, [sp, #24]
 8006f0c:	2a00      	cmp	r2, #0
 8006f0e:	f47f aeca 	bne.w	8006ca6 <_strtod_l+0x7e>
 8006f12:	9a04      	ldr	r2, [sp, #16]
 8006f14:	2a00      	cmp	r2, #0
 8006f16:	f47f aee4 	bne.w	8006ce2 <_strtod_l+0xba>
 8006f1a:	2b4e      	cmp	r3, #78	; 0x4e
 8006f1c:	d027      	beq.n	8006f6e <_strtod_l+0x346>
 8006f1e:	dc21      	bgt.n	8006f64 <_strtod_l+0x33c>
 8006f20:	2b49      	cmp	r3, #73	; 0x49
 8006f22:	f47f aede 	bne.w	8006ce2 <_strtod_l+0xba>
 8006f26:	49a0      	ldr	r1, [pc, #640]	; (80071a8 <_strtod_l+0x580>)
 8006f28:	a81b      	add	r0, sp, #108	; 0x6c
 8006f2a:	f001 fd4b 	bl	80089c4 <__match>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f43f aed7 	beq.w	8006ce2 <_strtod_l+0xba>
 8006f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f36:	499d      	ldr	r1, [pc, #628]	; (80071ac <_strtod_l+0x584>)
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	a81b      	add	r0, sp, #108	; 0x6c
 8006f3c:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f3e:	f001 fd41 	bl	80089c4 <__match>
 8006f42:	b910      	cbnz	r0, 8006f4a <_strtod_l+0x322>
 8006f44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f46:	3301      	adds	r3, #1
 8006f48:	931b      	str	r3, [sp, #108]	; 0x6c
 8006f4a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80071c0 <_strtod_l+0x598>
 8006f4e:	f04f 0a00 	mov.w	sl, #0
 8006f52:	e6a8      	b.n	8006ca6 <_strtod_l+0x7e>
 8006f54:	210a      	movs	r1, #10
 8006f56:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006f5a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006f5e:	e7b8      	b.n	8006ed2 <_strtod_l+0x2aa>
 8006f60:	46be      	mov	lr, r7
 8006f62:	e7c8      	b.n	8006ef6 <_strtod_l+0x2ce>
 8006f64:	2b69      	cmp	r3, #105	; 0x69
 8006f66:	d0de      	beq.n	8006f26 <_strtod_l+0x2fe>
 8006f68:	2b6e      	cmp	r3, #110	; 0x6e
 8006f6a:	f47f aeba 	bne.w	8006ce2 <_strtod_l+0xba>
 8006f6e:	4990      	ldr	r1, [pc, #576]	; (80071b0 <_strtod_l+0x588>)
 8006f70:	a81b      	add	r0, sp, #108	; 0x6c
 8006f72:	f001 fd27 	bl	80089c4 <__match>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f43f aeb3 	beq.w	8006ce2 <_strtod_l+0xba>
 8006f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b28      	cmp	r3, #40	; 0x28
 8006f82:	d10e      	bne.n	8006fa2 <_strtod_l+0x37a>
 8006f84:	aa1e      	add	r2, sp, #120	; 0x78
 8006f86:	498b      	ldr	r1, [pc, #556]	; (80071b4 <_strtod_l+0x58c>)
 8006f88:	a81b      	add	r0, sp, #108	; 0x6c
 8006f8a:	f001 fd2f 	bl	80089ec <__hexnan>
 8006f8e:	2805      	cmp	r0, #5
 8006f90:	d107      	bne.n	8006fa2 <_strtod_l+0x37a>
 8006f92:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f94:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006f98:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006f9c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006fa0:	e681      	b.n	8006ca6 <_strtod_l+0x7e>
 8006fa2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80071c8 <_strtod_l+0x5a0>
 8006fa6:	e7d2      	b.n	8006f4e <_strtod_l+0x326>
 8006fa8:	ebae 0302 	sub.w	r3, lr, r2
 8006fac:	9306      	str	r3, [sp, #24]
 8006fae:	9b05      	ldr	r3, [sp, #20]
 8006fb0:	9807      	ldr	r0, [sp, #28]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bf08      	it	eq
 8006fb6:	4623      	moveq	r3, r4
 8006fb8:	2c10      	cmp	r4, #16
 8006fba:	9305      	str	r3, [sp, #20]
 8006fbc:	46a0      	mov	r8, r4
 8006fbe:	bfa8      	it	ge
 8006fc0:	f04f 0810 	movge.w	r8, #16
 8006fc4:	f7f9 fa9e 	bl	8000504 <__aeabi_ui2d>
 8006fc8:	2c09      	cmp	r4, #9
 8006fca:	4682      	mov	sl, r0
 8006fcc:	468b      	mov	fp, r1
 8006fce:	dc13      	bgt.n	8006ff8 <_strtod_l+0x3d0>
 8006fd0:	9b06      	ldr	r3, [sp, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f43f ae67 	beq.w	8006ca6 <_strtod_l+0x7e>
 8006fd8:	9b06      	ldr	r3, [sp, #24]
 8006fda:	dd7a      	ble.n	80070d2 <_strtod_l+0x4aa>
 8006fdc:	2b16      	cmp	r3, #22
 8006fde:	dc61      	bgt.n	80070a4 <_strtod_l+0x47c>
 8006fe0:	4a75      	ldr	r2, [pc, #468]	; (80071b8 <_strtod_l+0x590>)
 8006fe2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006fe6:	e9de 0100 	ldrd	r0, r1, [lr]
 8006fea:	4652      	mov	r2, sl
 8006fec:	465b      	mov	r3, fp
 8006fee:	f7f9 fb03 	bl	80005f8 <__aeabi_dmul>
 8006ff2:	4682      	mov	sl, r0
 8006ff4:	468b      	mov	fp, r1
 8006ff6:	e656      	b.n	8006ca6 <_strtod_l+0x7e>
 8006ff8:	4b6f      	ldr	r3, [pc, #444]	; (80071b8 <_strtod_l+0x590>)
 8006ffa:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006ffe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007002:	f7f9 faf9 	bl	80005f8 <__aeabi_dmul>
 8007006:	4606      	mov	r6, r0
 8007008:	4628      	mov	r0, r5
 800700a:	460f      	mov	r7, r1
 800700c:	f7f9 fa7a 	bl	8000504 <__aeabi_ui2d>
 8007010:	4602      	mov	r2, r0
 8007012:	460b      	mov	r3, r1
 8007014:	4630      	mov	r0, r6
 8007016:	4639      	mov	r1, r7
 8007018:	f7f9 f938 	bl	800028c <__adddf3>
 800701c:	2c0f      	cmp	r4, #15
 800701e:	4682      	mov	sl, r0
 8007020:	468b      	mov	fp, r1
 8007022:	ddd5      	ble.n	8006fd0 <_strtod_l+0x3a8>
 8007024:	9b06      	ldr	r3, [sp, #24]
 8007026:	eba4 0808 	sub.w	r8, r4, r8
 800702a:	4498      	add	r8, r3
 800702c:	f1b8 0f00 	cmp.w	r8, #0
 8007030:	f340 8096 	ble.w	8007160 <_strtod_l+0x538>
 8007034:	f018 030f 	ands.w	r3, r8, #15
 8007038:	d00a      	beq.n	8007050 <_strtod_l+0x428>
 800703a:	495f      	ldr	r1, [pc, #380]	; (80071b8 <_strtod_l+0x590>)
 800703c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007040:	4652      	mov	r2, sl
 8007042:	465b      	mov	r3, fp
 8007044:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007048:	f7f9 fad6 	bl	80005f8 <__aeabi_dmul>
 800704c:	4682      	mov	sl, r0
 800704e:	468b      	mov	fp, r1
 8007050:	f038 080f 	bics.w	r8, r8, #15
 8007054:	d073      	beq.n	800713e <_strtod_l+0x516>
 8007056:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800705a:	dd47      	ble.n	80070ec <_strtod_l+0x4c4>
 800705c:	2400      	movs	r4, #0
 800705e:	46a0      	mov	r8, r4
 8007060:	9407      	str	r4, [sp, #28]
 8007062:	9405      	str	r4, [sp, #20]
 8007064:	2322      	movs	r3, #34	; 0x22
 8007066:	f8df b158 	ldr.w	fp, [pc, #344]	; 80071c0 <_strtod_l+0x598>
 800706a:	f8c9 3000 	str.w	r3, [r9]
 800706e:	f04f 0a00 	mov.w	sl, #0
 8007072:	9b07      	ldr	r3, [sp, #28]
 8007074:	2b00      	cmp	r3, #0
 8007076:	f43f ae16 	beq.w	8006ca6 <_strtod_l+0x7e>
 800707a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800707c:	4648      	mov	r0, r9
 800707e:	f001 fda8 	bl	8008bd2 <_Bfree>
 8007082:	9905      	ldr	r1, [sp, #20]
 8007084:	4648      	mov	r0, r9
 8007086:	f001 fda4 	bl	8008bd2 <_Bfree>
 800708a:	4641      	mov	r1, r8
 800708c:	4648      	mov	r0, r9
 800708e:	f001 fda0 	bl	8008bd2 <_Bfree>
 8007092:	9907      	ldr	r1, [sp, #28]
 8007094:	4648      	mov	r0, r9
 8007096:	f001 fd9c 	bl	8008bd2 <_Bfree>
 800709a:	4621      	mov	r1, r4
 800709c:	4648      	mov	r0, r9
 800709e:	f001 fd98 	bl	8008bd2 <_Bfree>
 80070a2:	e600      	b.n	8006ca6 <_strtod_l+0x7e>
 80070a4:	9a06      	ldr	r2, [sp, #24]
 80070a6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80070aa:	4293      	cmp	r3, r2
 80070ac:	dbba      	blt.n	8007024 <_strtod_l+0x3fc>
 80070ae:	4d42      	ldr	r5, [pc, #264]	; (80071b8 <_strtod_l+0x590>)
 80070b0:	f1c4 040f 	rsb	r4, r4, #15
 80070b4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80070b8:	4652      	mov	r2, sl
 80070ba:	465b      	mov	r3, fp
 80070bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070c0:	f7f9 fa9a 	bl	80005f8 <__aeabi_dmul>
 80070c4:	9b06      	ldr	r3, [sp, #24]
 80070c6:	1b1c      	subs	r4, r3, r4
 80070c8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80070cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070d0:	e78d      	b.n	8006fee <_strtod_l+0x3c6>
 80070d2:	f113 0f16 	cmn.w	r3, #22
 80070d6:	dba5      	blt.n	8007024 <_strtod_l+0x3fc>
 80070d8:	4a37      	ldr	r2, [pc, #220]	; (80071b8 <_strtod_l+0x590>)
 80070da:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80070de:	e9d2 2300 	ldrd	r2, r3, [r2]
 80070e2:	4650      	mov	r0, sl
 80070e4:	4659      	mov	r1, fp
 80070e6:	f7f9 fbb1 	bl	800084c <__aeabi_ddiv>
 80070ea:	e782      	b.n	8006ff2 <_strtod_l+0x3ca>
 80070ec:	2300      	movs	r3, #0
 80070ee:	4e33      	ldr	r6, [pc, #204]	; (80071bc <_strtod_l+0x594>)
 80070f0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80070f4:	4650      	mov	r0, sl
 80070f6:	4659      	mov	r1, fp
 80070f8:	461d      	mov	r5, r3
 80070fa:	f1b8 0f01 	cmp.w	r8, #1
 80070fe:	dc21      	bgt.n	8007144 <_strtod_l+0x51c>
 8007100:	b10b      	cbz	r3, 8007106 <_strtod_l+0x4de>
 8007102:	4682      	mov	sl, r0
 8007104:	468b      	mov	fp, r1
 8007106:	4b2d      	ldr	r3, [pc, #180]	; (80071bc <_strtod_l+0x594>)
 8007108:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800710c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007110:	4652      	mov	r2, sl
 8007112:	465b      	mov	r3, fp
 8007114:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007118:	f7f9 fa6e 	bl	80005f8 <__aeabi_dmul>
 800711c:	4b28      	ldr	r3, [pc, #160]	; (80071c0 <_strtod_l+0x598>)
 800711e:	460a      	mov	r2, r1
 8007120:	400b      	ands	r3, r1
 8007122:	4928      	ldr	r1, [pc, #160]	; (80071c4 <_strtod_l+0x59c>)
 8007124:	428b      	cmp	r3, r1
 8007126:	4682      	mov	sl, r0
 8007128:	d898      	bhi.n	800705c <_strtod_l+0x434>
 800712a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800712e:	428b      	cmp	r3, r1
 8007130:	bf86      	itte	hi
 8007132:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80071cc <_strtod_l+0x5a4>
 8007136:	f04f 3aff 	movhi.w	sl, #4294967295
 800713a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800713e:	2300      	movs	r3, #0
 8007140:	9304      	str	r3, [sp, #16]
 8007142:	e077      	b.n	8007234 <_strtod_l+0x60c>
 8007144:	f018 0f01 	tst.w	r8, #1
 8007148:	d006      	beq.n	8007158 <_strtod_l+0x530>
 800714a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800714e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007152:	f7f9 fa51 	bl	80005f8 <__aeabi_dmul>
 8007156:	2301      	movs	r3, #1
 8007158:	3501      	adds	r5, #1
 800715a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800715e:	e7cc      	b.n	80070fa <_strtod_l+0x4d2>
 8007160:	d0ed      	beq.n	800713e <_strtod_l+0x516>
 8007162:	f1c8 0800 	rsb	r8, r8, #0
 8007166:	f018 020f 	ands.w	r2, r8, #15
 800716a:	d00a      	beq.n	8007182 <_strtod_l+0x55a>
 800716c:	4b12      	ldr	r3, [pc, #72]	; (80071b8 <_strtod_l+0x590>)
 800716e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007172:	4650      	mov	r0, sl
 8007174:	4659      	mov	r1, fp
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7f9 fb67 	bl	800084c <__aeabi_ddiv>
 800717e:	4682      	mov	sl, r0
 8007180:	468b      	mov	fp, r1
 8007182:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007186:	d0da      	beq.n	800713e <_strtod_l+0x516>
 8007188:	f1b8 0f1f 	cmp.w	r8, #31
 800718c:	dd20      	ble.n	80071d0 <_strtod_l+0x5a8>
 800718e:	2400      	movs	r4, #0
 8007190:	46a0      	mov	r8, r4
 8007192:	9407      	str	r4, [sp, #28]
 8007194:	9405      	str	r4, [sp, #20]
 8007196:	2322      	movs	r3, #34	; 0x22
 8007198:	f04f 0a00 	mov.w	sl, #0
 800719c:	f04f 0b00 	mov.w	fp, #0
 80071a0:	f8c9 3000 	str.w	r3, [r9]
 80071a4:	e765      	b.n	8007072 <_strtod_l+0x44a>
 80071a6:	bf00      	nop
 80071a8:	0800acad 	.word	0x0800acad
 80071ac:	0800ad33 	.word	0x0800ad33
 80071b0:	0800acb5 	.word	0x0800acb5
 80071b4:	0800acf0 	.word	0x0800acf0
 80071b8:	0800ad70 	.word	0x0800ad70
 80071bc:	0800ad48 	.word	0x0800ad48
 80071c0:	7ff00000 	.word	0x7ff00000
 80071c4:	7ca00000 	.word	0x7ca00000
 80071c8:	fff80000 	.word	0xfff80000
 80071cc:	7fefffff 	.word	0x7fefffff
 80071d0:	f018 0310 	ands.w	r3, r8, #16
 80071d4:	bf18      	it	ne
 80071d6:	236a      	movne	r3, #106	; 0x6a
 80071d8:	4da0      	ldr	r5, [pc, #640]	; (800745c <_strtod_l+0x834>)
 80071da:	9304      	str	r3, [sp, #16]
 80071dc:	4650      	mov	r0, sl
 80071de:	4659      	mov	r1, fp
 80071e0:	2300      	movs	r3, #0
 80071e2:	f1b8 0f00 	cmp.w	r8, #0
 80071e6:	f300 810a 	bgt.w	80073fe <_strtod_l+0x7d6>
 80071ea:	b10b      	cbz	r3, 80071f0 <_strtod_l+0x5c8>
 80071ec:	4682      	mov	sl, r0
 80071ee:	468b      	mov	fp, r1
 80071f0:	9b04      	ldr	r3, [sp, #16]
 80071f2:	b1bb      	cbz	r3, 8007224 <_strtod_l+0x5fc>
 80071f4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80071f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	4659      	mov	r1, fp
 8007200:	dd10      	ble.n	8007224 <_strtod_l+0x5fc>
 8007202:	2b1f      	cmp	r3, #31
 8007204:	f340 8107 	ble.w	8007416 <_strtod_l+0x7ee>
 8007208:	2b34      	cmp	r3, #52	; 0x34
 800720a:	bfde      	ittt	le
 800720c:	3b20      	suble	r3, #32
 800720e:	f04f 32ff 	movle.w	r2, #4294967295
 8007212:	fa02 f303 	lslle.w	r3, r2, r3
 8007216:	f04f 0a00 	mov.w	sl, #0
 800721a:	bfcc      	ite	gt
 800721c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007220:	ea03 0b01 	andle.w	fp, r3, r1
 8007224:	2200      	movs	r2, #0
 8007226:	2300      	movs	r3, #0
 8007228:	4650      	mov	r0, sl
 800722a:	4659      	mov	r1, fp
 800722c:	f7f9 fc4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007230:	2800      	cmp	r0, #0
 8007232:	d1ac      	bne.n	800718e <_strtod_l+0x566>
 8007234:	9b07      	ldr	r3, [sp, #28]
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	9a05      	ldr	r2, [sp, #20]
 800723a:	9908      	ldr	r1, [sp, #32]
 800723c:	4623      	mov	r3, r4
 800723e:	4648      	mov	r0, r9
 8007240:	f001 fd19 	bl	8008c76 <__s2b>
 8007244:	9007      	str	r0, [sp, #28]
 8007246:	2800      	cmp	r0, #0
 8007248:	f43f af08 	beq.w	800705c <_strtod_l+0x434>
 800724c:	9a06      	ldr	r2, [sp, #24]
 800724e:	9b06      	ldr	r3, [sp, #24]
 8007250:	2a00      	cmp	r2, #0
 8007252:	f1c3 0300 	rsb	r3, r3, #0
 8007256:	bfa8      	it	ge
 8007258:	2300      	movge	r3, #0
 800725a:	930e      	str	r3, [sp, #56]	; 0x38
 800725c:	2400      	movs	r4, #0
 800725e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007262:	9316      	str	r3, [sp, #88]	; 0x58
 8007264:	46a0      	mov	r8, r4
 8007266:	9b07      	ldr	r3, [sp, #28]
 8007268:	4648      	mov	r0, r9
 800726a:	6859      	ldr	r1, [r3, #4]
 800726c:	f001 fc7d 	bl	8008b6a <_Balloc>
 8007270:	9005      	str	r0, [sp, #20]
 8007272:	2800      	cmp	r0, #0
 8007274:	f43f aef6 	beq.w	8007064 <_strtod_l+0x43c>
 8007278:	9b07      	ldr	r3, [sp, #28]
 800727a:	691a      	ldr	r2, [r3, #16]
 800727c:	3202      	adds	r2, #2
 800727e:	f103 010c 	add.w	r1, r3, #12
 8007282:	0092      	lsls	r2, r2, #2
 8007284:	300c      	adds	r0, #12
 8007286:	f001 fc63 	bl	8008b50 <memcpy>
 800728a:	aa1e      	add	r2, sp, #120	; 0x78
 800728c:	a91d      	add	r1, sp, #116	; 0x74
 800728e:	ec4b ab10 	vmov	d0, sl, fp
 8007292:	4648      	mov	r0, r9
 8007294:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007298:	f001 ffa8 	bl	80091ec <__d2b>
 800729c:	901c      	str	r0, [sp, #112]	; 0x70
 800729e:	2800      	cmp	r0, #0
 80072a0:	f43f aee0 	beq.w	8007064 <_strtod_l+0x43c>
 80072a4:	2101      	movs	r1, #1
 80072a6:	4648      	mov	r0, r9
 80072a8:	f001 fd71 	bl	8008d8e <__i2b>
 80072ac:	4680      	mov	r8, r0
 80072ae:	2800      	cmp	r0, #0
 80072b0:	f43f aed8 	beq.w	8007064 <_strtod_l+0x43c>
 80072b4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80072b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072b8:	2e00      	cmp	r6, #0
 80072ba:	bfab      	itete	ge
 80072bc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80072be:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80072c0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80072c2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80072c4:	bfac      	ite	ge
 80072c6:	18f7      	addge	r7, r6, r3
 80072c8:	1b9d      	sublt	r5, r3, r6
 80072ca:	9b04      	ldr	r3, [sp, #16]
 80072cc:	1af6      	subs	r6, r6, r3
 80072ce:	4416      	add	r6, r2
 80072d0:	4b63      	ldr	r3, [pc, #396]	; (8007460 <_strtod_l+0x838>)
 80072d2:	3e01      	subs	r6, #1
 80072d4:	429e      	cmp	r6, r3
 80072d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80072da:	f280 80af 	bge.w	800743c <_strtod_l+0x814>
 80072de:	1b9b      	subs	r3, r3, r6
 80072e0:	2b1f      	cmp	r3, #31
 80072e2:	eba2 0203 	sub.w	r2, r2, r3
 80072e6:	f04f 0101 	mov.w	r1, #1
 80072ea:	f300 809b 	bgt.w	8007424 <_strtod_l+0x7fc>
 80072ee:	fa01 f303 	lsl.w	r3, r1, r3
 80072f2:	930f      	str	r3, [sp, #60]	; 0x3c
 80072f4:	2300      	movs	r3, #0
 80072f6:	930a      	str	r3, [sp, #40]	; 0x28
 80072f8:	18be      	adds	r6, r7, r2
 80072fa:	9b04      	ldr	r3, [sp, #16]
 80072fc:	42b7      	cmp	r7, r6
 80072fe:	4415      	add	r5, r2
 8007300:	441d      	add	r5, r3
 8007302:	463b      	mov	r3, r7
 8007304:	bfa8      	it	ge
 8007306:	4633      	movge	r3, r6
 8007308:	42ab      	cmp	r3, r5
 800730a:	bfa8      	it	ge
 800730c:	462b      	movge	r3, r5
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfc2      	ittt	gt
 8007312:	1af6      	subgt	r6, r6, r3
 8007314:	1aed      	subgt	r5, r5, r3
 8007316:	1aff      	subgt	r7, r7, r3
 8007318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800731a:	b1bb      	cbz	r3, 800734c <_strtod_l+0x724>
 800731c:	4641      	mov	r1, r8
 800731e:	461a      	mov	r2, r3
 8007320:	4648      	mov	r0, r9
 8007322:	f001 fdd3 	bl	8008ecc <__pow5mult>
 8007326:	4680      	mov	r8, r0
 8007328:	2800      	cmp	r0, #0
 800732a:	f43f ae9b 	beq.w	8007064 <_strtod_l+0x43c>
 800732e:	4601      	mov	r1, r0
 8007330:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007332:	4648      	mov	r0, r9
 8007334:	f001 fd34 	bl	8008da0 <__multiply>
 8007338:	900c      	str	r0, [sp, #48]	; 0x30
 800733a:	2800      	cmp	r0, #0
 800733c:	f43f ae92 	beq.w	8007064 <_strtod_l+0x43c>
 8007340:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007342:	4648      	mov	r0, r9
 8007344:	f001 fc45 	bl	8008bd2 <_Bfree>
 8007348:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800734a:	931c      	str	r3, [sp, #112]	; 0x70
 800734c:	2e00      	cmp	r6, #0
 800734e:	dc7a      	bgt.n	8007446 <_strtod_l+0x81e>
 8007350:	9b06      	ldr	r3, [sp, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	dd08      	ble.n	8007368 <_strtod_l+0x740>
 8007356:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007358:	9905      	ldr	r1, [sp, #20]
 800735a:	4648      	mov	r0, r9
 800735c:	f001 fdb6 	bl	8008ecc <__pow5mult>
 8007360:	9005      	str	r0, [sp, #20]
 8007362:	2800      	cmp	r0, #0
 8007364:	f43f ae7e 	beq.w	8007064 <_strtod_l+0x43c>
 8007368:	2d00      	cmp	r5, #0
 800736a:	dd08      	ble.n	800737e <_strtod_l+0x756>
 800736c:	462a      	mov	r2, r5
 800736e:	9905      	ldr	r1, [sp, #20]
 8007370:	4648      	mov	r0, r9
 8007372:	f001 fdf9 	bl	8008f68 <__lshift>
 8007376:	9005      	str	r0, [sp, #20]
 8007378:	2800      	cmp	r0, #0
 800737a:	f43f ae73 	beq.w	8007064 <_strtod_l+0x43c>
 800737e:	2f00      	cmp	r7, #0
 8007380:	dd08      	ble.n	8007394 <_strtod_l+0x76c>
 8007382:	4641      	mov	r1, r8
 8007384:	463a      	mov	r2, r7
 8007386:	4648      	mov	r0, r9
 8007388:	f001 fdee 	bl	8008f68 <__lshift>
 800738c:	4680      	mov	r8, r0
 800738e:	2800      	cmp	r0, #0
 8007390:	f43f ae68 	beq.w	8007064 <_strtod_l+0x43c>
 8007394:	9a05      	ldr	r2, [sp, #20]
 8007396:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007398:	4648      	mov	r0, r9
 800739a:	f001 fe53 	bl	8009044 <__mdiff>
 800739e:	4604      	mov	r4, r0
 80073a0:	2800      	cmp	r0, #0
 80073a2:	f43f ae5f 	beq.w	8007064 <_strtod_l+0x43c>
 80073a6:	68c3      	ldr	r3, [r0, #12]
 80073a8:	930c      	str	r3, [sp, #48]	; 0x30
 80073aa:	2300      	movs	r3, #0
 80073ac:	60c3      	str	r3, [r0, #12]
 80073ae:	4641      	mov	r1, r8
 80073b0:	f001 fe2e 	bl	8009010 <__mcmp>
 80073b4:	2800      	cmp	r0, #0
 80073b6:	da55      	bge.n	8007464 <_strtod_l+0x83c>
 80073b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073ba:	b9e3      	cbnz	r3, 80073f6 <_strtod_l+0x7ce>
 80073bc:	f1ba 0f00 	cmp.w	sl, #0
 80073c0:	d119      	bne.n	80073f6 <_strtod_l+0x7ce>
 80073c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073c6:	b9b3      	cbnz	r3, 80073f6 <_strtod_l+0x7ce>
 80073c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80073cc:	0d1b      	lsrs	r3, r3, #20
 80073ce:	051b      	lsls	r3, r3, #20
 80073d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80073d4:	d90f      	bls.n	80073f6 <_strtod_l+0x7ce>
 80073d6:	6963      	ldr	r3, [r4, #20]
 80073d8:	b913      	cbnz	r3, 80073e0 <_strtod_l+0x7b8>
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	dd0a      	ble.n	80073f6 <_strtod_l+0x7ce>
 80073e0:	4621      	mov	r1, r4
 80073e2:	2201      	movs	r2, #1
 80073e4:	4648      	mov	r0, r9
 80073e6:	f001 fdbf 	bl	8008f68 <__lshift>
 80073ea:	4641      	mov	r1, r8
 80073ec:	4604      	mov	r4, r0
 80073ee:	f001 fe0f 	bl	8009010 <__mcmp>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	dc67      	bgt.n	80074c6 <_strtod_l+0x89e>
 80073f6:	9b04      	ldr	r3, [sp, #16]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d171      	bne.n	80074e0 <_strtod_l+0x8b8>
 80073fc:	e63d      	b.n	800707a <_strtod_l+0x452>
 80073fe:	f018 0f01 	tst.w	r8, #1
 8007402:	d004      	beq.n	800740e <_strtod_l+0x7e6>
 8007404:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007408:	f7f9 f8f6 	bl	80005f8 <__aeabi_dmul>
 800740c:	2301      	movs	r3, #1
 800740e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007412:	3508      	adds	r5, #8
 8007414:	e6e5      	b.n	80071e2 <_strtod_l+0x5ba>
 8007416:	f04f 32ff 	mov.w	r2, #4294967295
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	ea03 0a0a 	and.w	sl, r3, sl
 8007422:	e6ff      	b.n	8007224 <_strtod_l+0x5fc>
 8007424:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007428:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800742c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007430:	36e2      	adds	r6, #226	; 0xe2
 8007432:	fa01 f306 	lsl.w	r3, r1, r6
 8007436:	930a      	str	r3, [sp, #40]	; 0x28
 8007438:	910f      	str	r1, [sp, #60]	; 0x3c
 800743a:	e75d      	b.n	80072f8 <_strtod_l+0x6d0>
 800743c:	2300      	movs	r3, #0
 800743e:	930a      	str	r3, [sp, #40]	; 0x28
 8007440:	2301      	movs	r3, #1
 8007442:	930f      	str	r3, [sp, #60]	; 0x3c
 8007444:	e758      	b.n	80072f8 <_strtod_l+0x6d0>
 8007446:	4632      	mov	r2, r6
 8007448:	991c      	ldr	r1, [sp, #112]	; 0x70
 800744a:	4648      	mov	r0, r9
 800744c:	f001 fd8c 	bl	8008f68 <__lshift>
 8007450:	901c      	str	r0, [sp, #112]	; 0x70
 8007452:	2800      	cmp	r0, #0
 8007454:	f47f af7c 	bne.w	8007350 <_strtod_l+0x728>
 8007458:	e604      	b.n	8007064 <_strtod_l+0x43c>
 800745a:	bf00      	nop
 800745c:	0800ad08 	.word	0x0800ad08
 8007460:	fffffc02 	.word	0xfffffc02
 8007464:	465d      	mov	r5, fp
 8007466:	f040 8086 	bne.w	8007576 <_strtod_l+0x94e>
 800746a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800746c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007470:	b32a      	cbz	r2, 80074be <_strtod_l+0x896>
 8007472:	4aaf      	ldr	r2, [pc, #700]	; (8007730 <_strtod_l+0xb08>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d153      	bne.n	8007520 <_strtod_l+0x8f8>
 8007478:	9b04      	ldr	r3, [sp, #16]
 800747a:	4650      	mov	r0, sl
 800747c:	b1d3      	cbz	r3, 80074b4 <_strtod_l+0x88c>
 800747e:	4aad      	ldr	r2, [pc, #692]	; (8007734 <_strtod_l+0xb0c>)
 8007480:	402a      	ands	r2, r5
 8007482:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007486:	f04f 31ff 	mov.w	r1, #4294967295
 800748a:	d816      	bhi.n	80074ba <_strtod_l+0x892>
 800748c:	0d12      	lsrs	r2, r2, #20
 800748e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007492:	fa01 f303 	lsl.w	r3, r1, r3
 8007496:	4298      	cmp	r0, r3
 8007498:	d142      	bne.n	8007520 <_strtod_l+0x8f8>
 800749a:	4ba7      	ldr	r3, [pc, #668]	; (8007738 <_strtod_l+0xb10>)
 800749c:	429d      	cmp	r5, r3
 800749e:	d102      	bne.n	80074a6 <_strtod_l+0x87e>
 80074a0:	3001      	adds	r0, #1
 80074a2:	f43f addf 	beq.w	8007064 <_strtod_l+0x43c>
 80074a6:	4ba3      	ldr	r3, [pc, #652]	; (8007734 <_strtod_l+0xb0c>)
 80074a8:	402b      	ands	r3, r5
 80074aa:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80074ae:	f04f 0a00 	mov.w	sl, #0
 80074b2:	e7a0      	b.n	80073f6 <_strtod_l+0x7ce>
 80074b4:	f04f 33ff 	mov.w	r3, #4294967295
 80074b8:	e7ed      	b.n	8007496 <_strtod_l+0x86e>
 80074ba:	460b      	mov	r3, r1
 80074bc:	e7eb      	b.n	8007496 <_strtod_l+0x86e>
 80074be:	bb7b      	cbnz	r3, 8007520 <_strtod_l+0x8f8>
 80074c0:	f1ba 0f00 	cmp.w	sl, #0
 80074c4:	d12c      	bne.n	8007520 <_strtod_l+0x8f8>
 80074c6:	9904      	ldr	r1, [sp, #16]
 80074c8:	4a9a      	ldr	r2, [pc, #616]	; (8007734 <_strtod_l+0xb0c>)
 80074ca:	465b      	mov	r3, fp
 80074cc:	b1f1      	cbz	r1, 800750c <_strtod_l+0x8e4>
 80074ce:	ea02 010b 	and.w	r1, r2, fp
 80074d2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80074d6:	dc19      	bgt.n	800750c <_strtod_l+0x8e4>
 80074d8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80074dc:	f77f ae5b 	ble.w	8007196 <_strtod_l+0x56e>
 80074e0:	4a96      	ldr	r2, [pc, #600]	; (800773c <_strtod_l+0xb14>)
 80074e2:	2300      	movs	r3, #0
 80074e4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80074e8:	4650      	mov	r0, sl
 80074ea:	4659      	mov	r1, fp
 80074ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80074f0:	f7f9 f882 	bl	80005f8 <__aeabi_dmul>
 80074f4:	4682      	mov	sl, r0
 80074f6:	468b      	mov	fp, r1
 80074f8:	2900      	cmp	r1, #0
 80074fa:	f47f adbe 	bne.w	800707a <_strtod_l+0x452>
 80074fe:	2800      	cmp	r0, #0
 8007500:	f47f adbb 	bne.w	800707a <_strtod_l+0x452>
 8007504:	2322      	movs	r3, #34	; 0x22
 8007506:	f8c9 3000 	str.w	r3, [r9]
 800750a:	e5b6      	b.n	800707a <_strtod_l+0x452>
 800750c:	4013      	ands	r3, r2
 800750e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007512:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007516:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800751a:	f04f 3aff 	mov.w	sl, #4294967295
 800751e:	e76a      	b.n	80073f6 <_strtod_l+0x7ce>
 8007520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007522:	b193      	cbz	r3, 800754a <_strtod_l+0x922>
 8007524:	422b      	tst	r3, r5
 8007526:	f43f af66 	beq.w	80073f6 <_strtod_l+0x7ce>
 800752a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800752c:	9a04      	ldr	r2, [sp, #16]
 800752e:	4650      	mov	r0, sl
 8007530:	4659      	mov	r1, fp
 8007532:	b173      	cbz	r3, 8007552 <_strtod_l+0x92a>
 8007534:	f7ff fb5b 	bl	8006bee <sulp>
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007540:	f7f8 fea4 	bl	800028c <__adddf3>
 8007544:	4682      	mov	sl, r0
 8007546:	468b      	mov	fp, r1
 8007548:	e755      	b.n	80073f6 <_strtod_l+0x7ce>
 800754a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800754c:	ea13 0f0a 	tst.w	r3, sl
 8007550:	e7e9      	b.n	8007526 <_strtod_l+0x8fe>
 8007552:	f7ff fb4c 	bl	8006bee <sulp>
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800755e:	f7f8 fe93 	bl	8000288 <__aeabi_dsub>
 8007562:	2200      	movs	r2, #0
 8007564:	2300      	movs	r3, #0
 8007566:	4682      	mov	sl, r0
 8007568:	468b      	mov	fp, r1
 800756a:	f7f9 faad 	bl	8000ac8 <__aeabi_dcmpeq>
 800756e:	2800      	cmp	r0, #0
 8007570:	f47f ae11 	bne.w	8007196 <_strtod_l+0x56e>
 8007574:	e73f      	b.n	80073f6 <_strtod_l+0x7ce>
 8007576:	4641      	mov	r1, r8
 8007578:	4620      	mov	r0, r4
 800757a:	f001 fe86 	bl	800928a <__ratio>
 800757e:	ec57 6b10 	vmov	r6, r7, d0
 8007582:	2200      	movs	r2, #0
 8007584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007588:	ee10 0a10 	vmov	r0, s0
 800758c:	4639      	mov	r1, r7
 800758e:	f7f9 faaf 	bl	8000af0 <__aeabi_dcmple>
 8007592:	2800      	cmp	r0, #0
 8007594:	d077      	beq.n	8007686 <_strtod_l+0xa5e>
 8007596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007598:	2b00      	cmp	r3, #0
 800759a:	d04a      	beq.n	8007632 <_strtod_l+0xa0a>
 800759c:	4b68      	ldr	r3, [pc, #416]	; (8007740 <_strtod_l+0xb18>)
 800759e:	2200      	movs	r2, #0
 80075a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80075a4:	4f66      	ldr	r7, [pc, #408]	; (8007740 <_strtod_l+0xb18>)
 80075a6:	2600      	movs	r6, #0
 80075a8:	4b62      	ldr	r3, [pc, #392]	; (8007734 <_strtod_l+0xb0c>)
 80075aa:	402b      	ands	r3, r5
 80075ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80075ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80075b0:	4b64      	ldr	r3, [pc, #400]	; (8007744 <_strtod_l+0xb1c>)
 80075b2:	429a      	cmp	r2, r3
 80075b4:	f040 80ce 	bne.w	8007754 <_strtod_l+0xb2c>
 80075b8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80075bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075c0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80075c4:	ec4b ab10 	vmov	d0, sl, fp
 80075c8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80075cc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80075d0:	f001 fd96 	bl	8009100 <__ulp>
 80075d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80075d8:	ec53 2b10 	vmov	r2, r3, d0
 80075dc:	f7f9 f80c 	bl	80005f8 <__aeabi_dmul>
 80075e0:	4652      	mov	r2, sl
 80075e2:	465b      	mov	r3, fp
 80075e4:	f7f8 fe52 	bl	800028c <__adddf3>
 80075e8:	460b      	mov	r3, r1
 80075ea:	4952      	ldr	r1, [pc, #328]	; (8007734 <_strtod_l+0xb0c>)
 80075ec:	4a56      	ldr	r2, [pc, #344]	; (8007748 <_strtod_l+0xb20>)
 80075ee:	4019      	ands	r1, r3
 80075f0:	4291      	cmp	r1, r2
 80075f2:	4682      	mov	sl, r0
 80075f4:	d95b      	bls.n	80076ae <_strtod_l+0xa86>
 80075f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d103      	bne.n	8007608 <_strtod_l+0x9e0>
 8007600:	9b08      	ldr	r3, [sp, #32]
 8007602:	3301      	adds	r3, #1
 8007604:	f43f ad2e 	beq.w	8007064 <_strtod_l+0x43c>
 8007608:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007738 <_strtod_l+0xb10>
 800760c:	f04f 3aff 	mov.w	sl, #4294967295
 8007610:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007612:	4648      	mov	r0, r9
 8007614:	f001 fadd 	bl	8008bd2 <_Bfree>
 8007618:	9905      	ldr	r1, [sp, #20]
 800761a:	4648      	mov	r0, r9
 800761c:	f001 fad9 	bl	8008bd2 <_Bfree>
 8007620:	4641      	mov	r1, r8
 8007622:	4648      	mov	r0, r9
 8007624:	f001 fad5 	bl	8008bd2 <_Bfree>
 8007628:	4621      	mov	r1, r4
 800762a:	4648      	mov	r0, r9
 800762c:	f001 fad1 	bl	8008bd2 <_Bfree>
 8007630:	e619      	b.n	8007266 <_strtod_l+0x63e>
 8007632:	f1ba 0f00 	cmp.w	sl, #0
 8007636:	d11a      	bne.n	800766e <_strtod_l+0xa46>
 8007638:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800763c:	b9eb      	cbnz	r3, 800767a <_strtod_l+0xa52>
 800763e:	2200      	movs	r2, #0
 8007640:	4b3f      	ldr	r3, [pc, #252]	; (8007740 <_strtod_l+0xb18>)
 8007642:	4630      	mov	r0, r6
 8007644:	4639      	mov	r1, r7
 8007646:	f7f9 fa49 	bl	8000adc <__aeabi_dcmplt>
 800764a:	b9c8      	cbnz	r0, 8007680 <_strtod_l+0xa58>
 800764c:	4630      	mov	r0, r6
 800764e:	4639      	mov	r1, r7
 8007650:	2200      	movs	r2, #0
 8007652:	4b3e      	ldr	r3, [pc, #248]	; (800774c <_strtod_l+0xb24>)
 8007654:	f7f8 ffd0 	bl	80005f8 <__aeabi_dmul>
 8007658:	4606      	mov	r6, r0
 800765a:	460f      	mov	r7, r1
 800765c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007660:	9618      	str	r6, [sp, #96]	; 0x60
 8007662:	9319      	str	r3, [sp, #100]	; 0x64
 8007664:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007668:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800766c:	e79c      	b.n	80075a8 <_strtod_l+0x980>
 800766e:	f1ba 0f01 	cmp.w	sl, #1
 8007672:	d102      	bne.n	800767a <_strtod_l+0xa52>
 8007674:	2d00      	cmp	r5, #0
 8007676:	f43f ad8e 	beq.w	8007196 <_strtod_l+0x56e>
 800767a:	2200      	movs	r2, #0
 800767c:	4b34      	ldr	r3, [pc, #208]	; (8007750 <_strtod_l+0xb28>)
 800767e:	e78f      	b.n	80075a0 <_strtod_l+0x978>
 8007680:	2600      	movs	r6, #0
 8007682:	4f32      	ldr	r7, [pc, #200]	; (800774c <_strtod_l+0xb24>)
 8007684:	e7ea      	b.n	800765c <_strtod_l+0xa34>
 8007686:	4b31      	ldr	r3, [pc, #196]	; (800774c <_strtod_l+0xb24>)
 8007688:	4630      	mov	r0, r6
 800768a:	4639      	mov	r1, r7
 800768c:	2200      	movs	r2, #0
 800768e:	f7f8 ffb3 	bl	80005f8 <__aeabi_dmul>
 8007692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007694:	4606      	mov	r6, r0
 8007696:	460f      	mov	r7, r1
 8007698:	b933      	cbnz	r3, 80076a8 <_strtod_l+0xa80>
 800769a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800769e:	9010      	str	r0, [sp, #64]	; 0x40
 80076a0:	9311      	str	r3, [sp, #68]	; 0x44
 80076a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80076a6:	e7df      	b.n	8007668 <_strtod_l+0xa40>
 80076a8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80076ac:	e7f9      	b.n	80076a2 <_strtod_l+0xa7a>
 80076ae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80076b2:	9b04      	ldr	r3, [sp, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d1ab      	bne.n	8007610 <_strtod_l+0x9e8>
 80076b8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076bc:	0d1b      	lsrs	r3, r3, #20
 80076be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80076c0:	051b      	lsls	r3, r3, #20
 80076c2:	429a      	cmp	r2, r3
 80076c4:	465d      	mov	r5, fp
 80076c6:	d1a3      	bne.n	8007610 <_strtod_l+0x9e8>
 80076c8:	4639      	mov	r1, r7
 80076ca:	4630      	mov	r0, r6
 80076cc:	f7f9 fa44 	bl	8000b58 <__aeabi_d2iz>
 80076d0:	f7f8 ff28 	bl	8000524 <__aeabi_i2d>
 80076d4:	460b      	mov	r3, r1
 80076d6:	4602      	mov	r2, r0
 80076d8:	4639      	mov	r1, r7
 80076da:	4630      	mov	r0, r6
 80076dc:	f7f8 fdd4 	bl	8000288 <__aeabi_dsub>
 80076e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076e2:	4606      	mov	r6, r0
 80076e4:	460f      	mov	r7, r1
 80076e6:	b933      	cbnz	r3, 80076f6 <_strtod_l+0xace>
 80076e8:	f1ba 0f00 	cmp.w	sl, #0
 80076ec:	d103      	bne.n	80076f6 <_strtod_l+0xace>
 80076ee:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80076f2:	2d00      	cmp	r5, #0
 80076f4:	d06d      	beq.n	80077d2 <_strtod_l+0xbaa>
 80076f6:	a30a      	add	r3, pc, #40	; (adr r3, 8007720 <_strtod_l+0xaf8>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	4630      	mov	r0, r6
 80076fe:	4639      	mov	r1, r7
 8007700:	f7f9 f9ec 	bl	8000adc <__aeabi_dcmplt>
 8007704:	2800      	cmp	r0, #0
 8007706:	f47f acb8 	bne.w	800707a <_strtod_l+0x452>
 800770a:	a307      	add	r3, pc, #28	; (adr r3, 8007728 <_strtod_l+0xb00>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	4630      	mov	r0, r6
 8007712:	4639      	mov	r1, r7
 8007714:	f7f9 fa00 	bl	8000b18 <__aeabi_dcmpgt>
 8007718:	2800      	cmp	r0, #0
 800771a:	f43f af79 	beq.w	8007610 <_strtod_l+0x9e8>
 800771e:	e4ac      	b.n	800707a <_strtod_l+0x452>
 8007720:	94a03595 	.word	0x94a03595
 8007724:	3fdfffff 	.word	0x3fdfffff
 8007728:	35afe535 	.word	0x35afe535
 800772c:	3fe00000 	.word	0x3fe00000
 8007730:	000fffff 	.word	0x000fffff
 8007734:	7ff00000 	.word	0x7ff00000
 8007738:	7fefffff 	.word	0x7fefffff
 800773c:	39500000 	.word	0x39500000
 8007740:	3ff00000 	.word	0x3ff00000
 8007744:	7fe00000 	.word	0x7fe00000
 8007748:	7c9fffff 	.word	0x7c9fffff
 800774c:	3fe00000 	.word	0x3fe00000
 8007750:	bff00000 	.word	0xbff00000
 8007754:	9b04      	ldr	r3, [sp, #16]
 8007756:	b333      	cbz	r3, 80077a6 <_strtod_l+0xb7e>
 8007758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800775a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800775e:	d822      	bhi.n	80077a6 <_strtod_l+0xb7e>
 8007760:	a327      	add	r3, pc, #156	; (adr r3, 8007800 <_strtod_l+0xbd8>)
 8007762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007766:	4630      	mov	r0, r6
 8007768:	4639      	mov	r1, r7
 800776a:	f7f9 f9c1 	bl	8000af0 <__aeabi_dcmple>
 800776e:	b1a0      	cbz	r0, 800779a <_strtod_l+0xb72>
 8007770:	4639      	mov	r1, r7
 8007772:	4630      	mov	r0, r6
 8007774:	f7f9 fa18 	bl	8000ba8 <__aeabi_d2uiz>
 8007778:	2800      	cmp	r0, #0
 800777a:	bf08      	it	eq
 800777c:	2001      	moveq	r0, #1
 800777e:	f7f8 fec1 	bl	8000504 <__aeabi_ui2d>
 8007782:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007784:	4606      	mov	r6, r0
 8007786:	460f      	mov	r7, r1
 8007788:	bb03      	cbnz	r3, 80077cc <_strtod_l+0xba4>
 800778a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800778e:	9012      	str	r0, [sp, #72]	; 0x48
 8007790:	9313      	str	r3, [sp, #76]	; 0x4c
 8007792:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007796:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800779a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800779c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800779e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80077a2:	1a9b      	subs	r3, r3, r2
 80077a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80077a6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80077aa:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80077ae:	f001 fca7 	bl	8009100 <__ulp>
 80077b2:	4650      	mov	r0, sl
 80077b4:	ec53 2b10 	vmov	r2, r3, d0
 80077b8:	4659      	mov	r1, fp
 80077ba:	f7f8 ff1d 	bl	80005f8 <__aeabi_dmul>
 80077be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80077c2:	f7f8 fd63 	bl	800028c <__adddf3>
 80077c6:	4682      	mov	sl, r0
 80077c8:	468b      	mov	fp, r1
 80077ca:	e772      	b.n	80076b2 <_strtod_l+0xa8a>
 80077cc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80077d0:	e7df      	b.n	8007792 <_strtod_l+0xb6a>
 80077d2:	a30d      	add	r3, pc, #52	; (adr r3, 8007808 <_strtod_l+0xbe0>)
 80077d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d8:	f7f9 f980 	bl	8000adc <__aeabi_dcmplt>
 80077dc:	e79c      	b.n	8007718 <_strtod_l+0xaf0>
 80077de:	2300      	movs	r3, #0
 80077e0:	930d      	str	r3, [sp, #52]	; 0x34
 80077e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80077e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077e6:	6013      	str	r3, [r2, #0]
 80077e8:	f7ff ba61 	b.w	8006cae <_strtod_l+0x86>
 80077ec:	2b65      	cmp	r3, #101	; 0x65
 80077ee:	f04f 0200 	mov.w	r2, #0
 80077f2:	f43f ab4e 	beq.w	8006e92 <_strtod_l+0x26a>
 80077f6:	2101      	movs	r1, #1
 80077f8:	4614      	mov	r4, r2
 80077fa:	9104      	str	r1, [sp, #16]
 80077fc:	f7ff bacb 	b.w	8006d96 <_strtod_l+0x16e>
 8007800:	ffc00000 	.word	0xffc00000
 8007804:	41dfffff 	.word	0x41dfffff
 8007808:	94a03595 	.word	0x94a03595
 800780c:	3fcfffff 	.word	0x3fcfffff

08007810 <strtod>:
 8007810:	4b07      	ldr	r3, [pc, #28]	; (8007830 <strtod+0x20>)
 8007812:	4a08      	ldr	r2, [pc, #32]	; (8007834 <strtod+0x24>)
 8007814:	b410      	push	{r4}
 8007816:	681c      	ldr	r4, [r3, #0]
 8007818:	6a23      	ldr	r3, [r4, #32]
 800781a:	2b00      	cmp	r3, #0
 800781c:	bf08      	it	eq
 800781e:	4613      	moveq	r3, r2
 8007820:	460a      	mov	r2, r1
 8007822:	4601      	mov	r1, r0
 8007824:	4620      	mov	r0, r4
 8007826:	f85d 4b04 	ldr.w	r4, [sp], #4
 800782a:	f7ff b9fd 	b.w	8006c28 <_strtod_l>
 800782e:	bf00      	nop
 8007830:	20000034 	.word	0x20000034
 8007834:	20000098 	.word	0x20000098

08007838 <quorem>:
 8007838:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800783c:	6903      	ldr	r3, [r0, #16]
 800783e:	690c      	ldr	r4, [r1, #16]
 8007840:	42a3      	cmp	r3, r4
 8007842:	4680      	mov	r8, r0
 8007844:	f2c0 8082 	blt.w	800794c <quorem+0x114>
 8007848:	3c01      	subs	r4, #1
 800784a:	f101 0714 	add.w	r7, r1, #20
 800784e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007852:	f100 0614 	add.w	r6, r0, #20
 8007856:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800785a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800785e:	eb06 030c 	add.w	r3, r6, ip
 8007862:	3501      	adds	r5, #1
 8007864:	eb07 090c 	add.w	r9, r7, ip
 8007868:	9301      	str	r3, [sp, #4]
 800786a:	fbb0 f5f5 	udiv	r5, r0, r5
 800786e:	b395      	cbz	r5, 80078d6 <quorem+0x9e>
 8007870:	f04f 0a00 	mov.w	sl, #0
 8007874:	4638      	mov	r0, r7
 8007876:	46b6      	mov	lr, r6
 8007878:	46d3      	mov	fp, sl
 800787a:	f850 2b04 	ldr.w	r2, [r0], #4
 800787e:	b293      	uxth	r3, r2
 8007880:	fb05 a303 	mla	r3, r5, r3, sl
 8007884:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007888:	b29b      	uxth	r3, r3
 800788a:	ebab 0303 	sub.w	r3, fp, r3
 800788e:	0c12      	lsrs	r2, r2, #16
 8007890:	f8de b000 	ldr.w	fp, [lr]
 8007894:	fb05 a202 	mla	r2, r5, r2, sl
 8007898:	fa13 f38b 	uxtah	r3, r3, fp
 800789c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80078a0:	fa1f fb82 	uxth.w	fp, r2
 80078a4:	f8de 2000 	ldr.w	r2, [lr]
 80078a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80078ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078b6:	4581      	cmp	r9, r0
 80078b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80078bc:	f84e 3b04 	str.w	r3, [lr], #4
 80078c0:	d2db      	bcs.n	800787a <quorem+0x42>
 80078c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80078c6:	b933      	cbnz	r3, 80078d6 <quorem+0x9e>
 80078c8:	9b01      	ldr	r3, [sp, #4]
 80078ca:	3b04      	subs	r3, #4
 80078cc:	429e      	cmp	r6, r3
 80078ce:	461a      	mov	r2, r3
 80078d0:	d330      	bcc.n	8007934 <quorem+0xfc>
 80078d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80078d6:	4640      	mov	r0, r8
 80078d8:	f001 fb9a 	bl	8009010 <__mcmp>
 80078dc:	2800      	cmp	r0, #0
 80078de:	db25      	blt.n	800792c <quorem+0xf4>
 80078e0:	3501      	adds	r5, #1
 80078e2:	4630      	mov	r0, r6
 80078e4:	f04f 0c00 	mov.w	ip, #0
 80078e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80078ec:	f8d0 e000 	ldr.w	lr, [r0]
 80078f0:	b293      	uxth	r3, r2
 80078f2:	ebac 0303 	sub.w	r3, ip, r3
 80078f6:	0c12      	lsrs	r2, r2, #16
 80078f8:	fa13 f38e 	uxtah	r3, r3, lr
 80078fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007900:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007904:	b29b      	uxth	r3, r3
 8007906:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800790a:	45b9      	cmp	r9, r7
 800790c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007910:	f840 3b04 	str.w	r3, [r0], #4
 8007914:	d2e8      	bcs.n	80078e8 <quorem+0xb0>
 8007916:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800791a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800791e:	b92a      	cbnz	r2, 800792c <quorem+0xf4>
 8007920:	3b04      	subs	r3, #4
 8007922:	429e      	cmp	r6, r3
 8007924:	461a      	mov	r2, r3
 8007926:	d30b      	bcc.n	8007940 <quorem+0x108>
 8007928:	f8c8 4010 	str.w	r4, [r8, #16]
 800792c:	4628      	mov	r0, r5
 800792e:	b003      	add	sp, #12
 8007930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	3b04      	subs	r3, #4
 8007938:	2a00      	cmp	r2, #0
 800793a:	d1ca      	bne.n	80078d2 <quorem+0x9a>
 800793c:	3c01      	subs	r4, #1
 800793e:	e7c5      	b.n	80078cc <quorem+0x94>
 8007940:	6812      	ldr	r2, [r2, #0]
 8007942:	3b04      	subs	r3, #4
 8007944:	2a00      	cmp	r2, #0
 8007946:	d1ef      	bne.n	8007928 <quorem+0xf0>
 8007948:	3c01      	subs	r4, #1
 800794a:	e7ea      	b.n	8007922 <quorem+0xea>
 800794c:	2000      	movs	r0, #0
 800794e:	e7ee      	b.n	800792e <quorem+0xf6>

08007950 <_dtoa_r>:
 8007950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007954:	ec57 6b10 	vmov	r6, r7, d0
 8007958:	b097      	sub	sp, #92	; 0x5c
 800795a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800795c:	9106      	str	r1, [sp, #24]
 800795e:	4604      	mov	r4, r0
 8007960:	920b      	str	r2, [sp, #44]	; 0x2c
 8007962:	9312      	str	r3, [sp, #72]	; 0x48
 8007964:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007968:	e9cd 6700 	strd	r6, r7, [sp]
 800796c:	b93d      	cbnz	r5, 800797e <_dtoa_r+0x2e>
 800796e:	2010      	movs	r0, #16
 8007970:	f7fe fbca 	bl	8006108 <malloc>
 8007974:	6260      	str	r0, [r4, #36]	; 0x24
 8007976:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800797a:	6005      	str	r5, [r0, #0]
 800797c:	60c5      	str	r5, [r0, #12]
 800797e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007980:	6819      	ldr	r1, [r3, #0]
 8007982:	b151      	cbz	r1, 800799a <_dtoa_r+0x4a>
 8007984:	685a      	ldr	r2, [r3, #4]
 8007986:	604a      	str	r2, [r1, #4]
 8007988:	2301      	movs	r3, #1
 800798a:	4093      	lsls	r3, r2
 800798c:	608b      	str	r3, [r1, #8]
 800798e:	4620      	mov	r0, r4
 8007990:	f001 f91f 	bl	8008bd2 <_Bfree>
 8007994:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007996:	2200      	movs	r2, #0
 8007998:	601a      	str	r2, [r3, #0]
 800799a:	1e3b      	subs	r3, r7, #0
 800799c:	bfbb      	ittet	lt
 800799e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80079a2:	9301      	strlt	r3, [sp, #4]
 80079a4:	2300      	movge	r3, #0
 80079a6:	2201      	movlt	r2, #1
 80079a8:	bfac      	ite	ge
 80079aa:	f8c8 3000 	strge.w	r3, [r8]
 80079ae:	f8c8 2000 	strlt.w	r2, [r8]
 80079b2:	4baf      	ldr	r3, [pc, #700]	; (8007c70 <_dtoa_r+0x320>)
 80079b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079b8:	ea33 0308 	bics.w	r3, r3, r8
 80079bc:	d114      	bne.n	80079e8 <_dtoa_r+0x98>
 80079be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	9b00      	ldr	r3, [sp, #0]
 80079c8:	b923      	cbnz	r3, 80079d4 <_dtoa_r+0x84>
 80079ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f000 8542 	beq.w	8008458 <_dtoa_r+0xb08>
 80079d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007c84 <_dtoa_r+0x334>
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f000 8544 	beq.w	8008468 <_dtoa_r+0xb18>
 80079e0:	f10b 0303 	add.w	r3, fp, #3
 80079e4:	f000 bd3e 	b.w	8008464 <_dtoa_r+0xb14>
 80079e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079ec:	2200      	movs	r2, #0
 80079ee:	2300      	movs	r3, #0
 80079f0:	4630      	mov	r0, r6
 80079f2:	4639      	mov	r1, r7
 80079f4:	f7f9 f868 	bl	8000ac8 <__aeabi_dcmpeq>
 80079f8:	4681      	mov	r9, r0
 80079fa:	b168      	cbz	r0, 8007a18 <_dtoa_r+0xc8>
 80079fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80079fe:	2301      	movs	r3, #1
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	f000 8524 	beq.w	8008452 <_dtoa_r+0xb02>
 8007a0a:	4b9a      	ldr	r3, [pc, #616]	; (8007c74 <_dtoa_r+0x324>)
 8007a0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a0e:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a12:	6013      	str	r3, [r2, #0]
 8007a14:	f000 bd28 	b.w	8008468 <_dtoa_r+0xb18>
 8007a18:	aa14      	add	r2, sp, #80	; 0x50
 8007a1a:	a915      	add	r1, sp, #84	; 0x54
 8007a1c:	ec47 6b10 	vmov	d0, r6, r7
 8007a20:	4620      	mov	r0, r4
 8007a22:	f001 fbe3 	bl	80091ec <__d2b>
 8007a26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007a2a:	9004      	str	r0, [sp, #16]
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	d07c      	beq.n	8007b2a <_dtoa_r+0x1da>
 8007a30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007a38:	46b2      	mov	sl, r6
 8007a3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007a3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007a46:	2200      	movs	r2, #0
 8007a48:	4b8b      	ldr	r3, [pc, #556]	; (8007c78 <_dtoa_r+0x328>)
 8007a4a:	4650      	mov	r0, sl
 8007a4c:	4659      	mov	r1, fp
 8007a4e:	f7f8 fc1b 	bl	8000288 <__aeabi_dsub>
 8007a52:	a381      	add	r3, pc, #516	; (adr r3, 8007c58 <_dtoa_r+0x308>)
 8007a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a58:	f7f8 fdce 	bl	80005f8 <__aeabi_dmul>
 8007a5c:	a380      	add	r3, pc, #512	; (adr r3, 8007c60 <_dtoa_r+0x310>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7f8 fc13 	bl	800028c <__adddf3>
 8007a66:	4606      	mov	r6, r0
 8007a68:	4628      	mov	r0, r5
 8007a6a:	460f      	mov	r7, r1
 8007a6c:	f7f8 fd5a 	bl	8000524 <__aeabi_i2d>
 8007a70:	a37d      	add	r3, pc, #500	; (adr r3, 8007c68 <_dtoa_r+0x318>)
 8007a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a76:	f7f8 fdbf 	bl	80005f8 <__aeabi_dmul>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4630      	mov	r0, r6
 8007a80:	4639      	mov	r1, r7
 8007a82:	f7f8 fc03 	bl	800028c <__adddf3>
 8007a86:	4606      	mov	r6, r0
 8007a88:	460f      	mov	r7, r1
 8007a8a:	f7f9 f865 	bl	8000b58 <__aeabi_d2iz>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	4682      	mov	sl, r0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4630      	mov	r0, r6
 8007a96:	4639      	mov	r1, r7
 8007a98:	f7f9 f820 	bl	8000adc <__aeabi_dcmplt>
 8007a9c:	b148      	cbz	r0, 8007ab2 <_dtoa_r+0x162>
 8007a9e:	4650      	mov	r0, sl
 8007aa0:	f7f8 fd40 	bl	8000524 <__aeabi_i2d>
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	463b      	mov	r3, r7
 8007aa8:	f7f9 f80e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007aac:	b908      	cbnz	r0, 8007ab2 <_dtoa_r+0x162>
 8007aae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ab2:	f1ba 0f16 	cmp.w	sl, #22
 8007ab6:	d859      	bhi.n	8007b6c <_dtoa_r+0x21c>
 8007ab8:	4970      	ldr	r1, [pc, #448]	; (8007c7c <_dtoa_r+0x32c>)
 8007aba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007abe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ac2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ac6:	f7f9 f827 	bl	8000b18 <__aeabi_dcmpgt>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	d050      	beq.n	8007b70 <_dtoa_r+0x220>
 8007ace:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ad6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007ad8:	1b5d      	subs	r5, r3, r5
 8007ada:	f1b5 0801 	subs.w	r8, r5, #1
 8007ade:	bf49      	itett	mi
 8007ae0:	f1c5 0301 	rsbmi	r3, r5, #1
 8007ae4:	2300      	movpl	r3, #0
 8007ae6:	9305      	strmi	r3, [sp, #20]
 8007ae8:	f04f 0800 	movmi.w	r8, #0
 8007aec:	bf58      	it	pl
 8007aee:	9305      	strpl	r3, [sp, #20]
 8007af0:	f1ba 0f00 	cmp.w	sl, #0
 8007af4:	db3e      	blt.n	8007b74 <_dtoa_r+0x224>
 8007af6:	2300      	movs	r3, #0
 8007af8:	44d0      	add	r8, sl
 8007afa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007afe:	9307      	str	r3, [sp, #28]
 8007b00:	9b06      	ldr	r3, [sp, #24]
 8007b02:	2b09      	cmp	r3, #9
 8007b04:	f200 8090 	bhi.w	8007c28 <_dtoa_r+0x2d8>
 8007b08:	2b05      	cmp	r3, #5
 8007b0a:	bfc4      	itt	gt
 8007b0c:	3b04      	subgt	r3, #4
 8007b0e:	9306      	strgt	r3, [sp, #24]
 8007b10:	9b06      	ldr	r3, [sp, #24]
 8007b12:	f1a3 0302 	sub.w	r3, r3, #2
 8007b16:	bfcc      	ite	gt
 8007b18:	2500      	movgt	r5, #0
 8007b1a:	2501      	movle	r5, #1
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	f200 808f 	bhi.w	8007c40 <_dtoa_r+0x2f0>
 8007b22:	e8df f003 	tbb	[pc, r3]
 8007b26:	7f7d      	.short	0x7f7d
 8007b28:	7131      	.short	0x7131
 8007b2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007b2e:	441d      	add	r5, r3
 8007b30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007b34:	2820      	cmp	r0, #32
 8007b36:	dd13      	ble.n	8007b60 <_dtoa_r+0x210>
 8007b38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007b3c:	9b00      	ldr	r3, [sp, #0]
 8007b3e:	fa08 f800 	lsl.w	r8, r8, r0
 8007b42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007b46:	fa23 f000 	lsr.w	r0, r3, r0
 8007b4a:	ea48 0000 	orr.w	r0, r8, r0
 8007b4e:	f7f8 fcd9 	bl	8000504 <__aeabi_ui2d>
 8007b52:	2301      	movs	r3, #1
 8007b54:	4682      	mov	sl, r0
 8007b56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007b5a:	3d01      	subs	r5, #1
 8007b5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b5e:	e772      	b.n	8007a46 <_dtoa_r+0xf6>
 8007b60:	9b00      	ldr	r3, [sp, #0]
 8007b62:	f1c0 0020 	rsb	r0, r0, #32
 8007b66:	fa03 f000 	lsl.w	r0, r3, r0
 8007b6a:	e7f0      	b.n	8007b4e <_dtoa_r+0x1fe>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e7b1      	b.n	8007ad4 <_dtoa_r+0x184>
 8007b70:	900f      	str	r0, [sp, #60]	; 0x3c
 8007b72:	e7b0      	b.n	8007ad6 <_dtoa_r+0x186>
 8007b74:	9b05      	ldr	r3, [sp, #20]
 8007b76:	eba3 030a 	sub.w	r3, r3, sl
 8007b7a:	9305      	str	r3, [sp, #20]
 8007b7c:	f1ca 0300 	rsb	r3, sl, #0
 8007b80:	9307      	str	r3, [sp, #28]
 8007b82:	2300      	movs	r3, #0
 8007b84:	930e      	str	r3, [sp, #56]	; 0x38
 8007b86:	e7bb      	b.n	8007b00 <_dtoa_r+0x1b0>
 8007b88:	2301      	movs	r3, #1
 8007b8a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dd59      	ble.n	8007c46 <_dtoa_r+0x2f6>
 8007b92:	9302      	str	r3, [sp, #8]
 8007b94:	4699      	mov	r9, r3
 8007b96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007b98:	2200      	movs	r2, #0
 8007b9a:	6072      	str	r2, [r6, #4]
 8007b9c:	2204      	movs	r2, #4
 8007b9e:	f102 0014 	add.w	r0, r2, #20
 8007ba2:	4298      	cmp	r0, r3
 8007ba4:	6871      	ldr	r1, [r6, #4]
 8007ba6:	d953      	bls.n	8007c50 <_dtoa_r+0x300>
 8007ba8:	4620      	mov	r0, r4
 8007baa:	f000 ffde 	bl	8008b6a <_Balloc>
 8007bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bb0:	6030      	str	r0, [r6, #0]
 8007bb2:	f1b9 0f0e 	cmp.w	r9, #14
 8007bb6:	f8d3 b000 	ldr.w	fp, [r3]
 8007bba:	f200 80e6 	bhi.w	8007d8a <_dtoa_r+0x43a>
 8007bbe:	2d00      	cmp	r5, #0
 8007bc0:	f000 80e3 	beq.w	8007d8a <_dtoa_r+0x43a>
 8007bc4:	ed9d 7b00 	vldr	d7, [sp]
 8007bc8:	f1ba 0f00 	cmp.w	sl, #0
 8007bcc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007bd0:	dd74      	ble.n	8007cbc <_dtoa_r+0x36c>
 8007bd2:	4a2a      	ldr	r2, [pc, #168]	; (8007c7c <_dtoa_r+0x32c>)
 8007bd4:	f00a 030f 	and.w	r3, sl, #15
 8007bd8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007bdc:	ed93 7b00 	vldr	d7, [r3]
 8007be0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007be4:	06f0      	lsls	r0, r6, #27
 8007be6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007bea:	d565      	bpl.n	8007cb8 <_dtoa_r+0x368>
 8007bec:	4b24      	ldr	r3, [pc, #144]	; (8007c80 <_dtoa_r+0x330>)
 8007bee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bf2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bf6:	f7f8 fe29 	bl	800084c <__aeabi_ddiv>
 8007bfa:	e9cd 0100 	strd	r0, r1, [sp]
 8007bfe:	f006 060f 	and.w	r6, r6, #15
 8007c02:	2503      	movs	r5, #3
 8007c04:	4f1e      	ldr	r7, [pc, #120]	; (8007c80 <_dtoa_r+0x330>)
 8007c06:	e04c      	b.n	8007ca2 <_dtoa_r+0x352>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	930a      	str	r3, [sp, #40]	; 0x28
 8007c0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c0e:	4453      	add	r3, sl
 8007c10:	f103 0901 	add.w	r9, r3, #1
 8007c14:	9302      	str	r3, [sp, #8]
 8007c16:	464b      	mov	r3, r9
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	bfb8      	it	lt
 8007c1c:	2301      	movlt	r3, #1
 8007c1e:	e7ba      	b.n	8007b96 <_dtoa_r+0x246>
 8007c20:	2300      	movs	r3, #0
 8007c22:	e7b2      	b.n	8007b8a <_dtoa_r+0x23a>
 8007c24:	2300      	movs	r3, #0
 8007c26:	e7f0      	b.n	8007c0a <_dtoa_r+0x2ba>
 8007c28:	2501      	movs	r5, #1
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	9306      	str	r3, [sp, #24]
 8007c2e:	950a      	str	r5, [sp, #40]	; 0x28
 8007c30:	f04f 33ff 	mov.w	r3, #4294967295
 8007c34:	9302      	str	r3, [sp, #8]
 8007c36:	4699      	mov	r9, r3
 8007c38:	2200      	movs	r2, #0
 8007c3a:	2312      	movs	r3, #18
 8007c3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8007c3e:	e7aa      	b.n	8007b96 <_dtoa_r+0x246>
 8007c40:	2301      	movs	r3, #1
 8007c42:	930a      	str	r3, [sp, #40]	; 0x28
 8007c44:	e7f4      	b.n	8007c30 <_dtoa_r+0x2e0>
 8007c46:	2301      	movs	r3, #1
 8007c48:	9302      	str	r3, [sp, #8]
 8007c4a:	4699      	mov	r9, r3
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	e7f5      	b.n	8007c3c <_dtoa_r+0x2ec>
 8007c50:	3101      	adds	r1, #1
 8007c52:	6071      	str	r1, [r6, #4]
 8007c54:	0052      	lsls	r2, r2, #1
 8007c56:	e7a2      	b.n	8007b9e <_dtoa_r+0x24e>
 8007c58:	636f4361 	.word	0x636f4361
 8007c5c:	3fd287a7 	.word	0x3fd287a7
 8007c60:	8b60c8b3 	.word	0x8b60c8b3
 8007c64:	3fc68a28 	.word	0x3fc68a28
 8007c68:	509f79fb 	.word	0x509f79fb
 8007c6c:	3fd34413 	.word	0x3fd34413
 8007c70:	7ff00000 	.word	0x7ff00000
 8007c74:	0800acb9 	.word	0x0800acb9
 8007c78:	3ff80000 	.word	0x3ff80000
 8007c7c:	0800ad70 	.word	0x0800ad70
 8007c80:	0800ad48 	.word	0x0800ad48
 8007c84:	0800ad39 	.word	0x0800ad39
 8007c88:	07f1      	lsls	r1, r6, #31
 8007c8a:	d508      	bpl.n	8007c9e <_dtoa_r+0x34e>
 8007c8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c94:	f7f8 fcb0 	bl	80005f8 <__aeabi_dmul>
 8007c98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c9c:	3501      	adds	r5, #1
 8007c9e:	1076      	asrs	r6, r6, #1
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	2e00      	cmp	r6, #0
 8007ca4:	d1f0      	bne.n	8007c88 <_dtoa_r+0x338>
 8007ca6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007caa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007cae:	f7f8 fdcd 	bl	800084c <__aeabi_ddiv>
 8007cb2:	e9cd 0100 	strd	r0, r1, [sp]
 8007cb6:	e01a      	b.n	8007cee <_dtoa_r+0x39e>
 8007cb8:	2502      	movs	r5, #2
 8007cba:	e7a3      	b.n	8007c04 <_dtoa_r+0x2b4>
 8007cbc:	f000 80a0 	beq.w	8007e00 <_dtoa_r+0x4b0>
 8007cc0:	f1ca 0600 	rsb	r6, sl, #0
 8007cc4:	4b9f      	ldr	r3, [pc, #636]	; (8007f44 <_dtoa_r+0x5f4>)
 8007cc6:	4fa0      	ldr	r7, [pc, #640]	; (8007f48 <_dtoa_r+0x5f8>)
 8007cc8:	f006 020f 	and.w	r2, r6, #15
 8007ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	e9cd 0100 	strd	r0, r1, [sp]
 8007ce0:	1136      	asrs	r6, r6, #4
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	2502      	movs	r5, #2
 8007ce6:	2e00      	cmp	r6, #0
 8007ce8:	d17f      	bne.n	8007dea <_dtoa_r+0x49a>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1e1      	bne.n	8007cb2 <_dtoa_r+0x362>
 8007cee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	f000 8087 	beq.w	8007e04 <_dtoa_r+0x4b4>
 8007cf6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	4b93      	ldr	r3, [pc, #588]	; (8007f4c <_dtoa_r+0x5fc>)
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 feeb 	bl	8000adc <__aeabi_dcmplt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d07c      	beq.n	8007e04 <_dtoa_r+0x4b4>
 8007d0a:	f1b9 0f00 	cmp.w	r9, #0
 8007d0e:	d079      	beq.n	8007e04 <_dtoa_r+0x4b4>
 8007d10:	9b02      	ldr	r3, [sp, #8]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	dd35      	ble.n	8007d82 <_dtoa_r+0x432>
 8007d16:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007d1a:	9308      	str	r3, [sp, #32]
 8007d1c:	4639      	mov	r1, r7
 8007d1e:	2200      	movs	r2, #0
 8007d20:	4b8b      	ldr	r3, [pc, #556]	; (8007f50 <_dtoa_r+0x600>)
 8007d22:	4630      	mov	r0, r6
 8007d24:	f7f8 fc68 	bl	80005f8 <__aeabi_dmul>
 8007d28:	e9cd 0100 	strd	r0, r1, [sp]
 8007d2c:	9f02      	ldr	r7, [sp, #8]
 8007d2e:	3501      	adds	r5, #1
 8007d30:	4628      	mov	r0, r5
 8007d32:	f7f8 fbf7 	bl	8000524 <__aeabi_i2d>
 8007d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d3a:	f7f8 fc5d 	bl	80005f8 <__aeabi_dmul>
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4b84      	ldr	r3, [pc, #528]	; (8007f54 <_dtoa_r+0x604>)
 8007d42:	f7f8 faa3 	bl	800028c <__adddf3>
 8007d46:	4605      	mov	r5, r0
 8007d48:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007d4c:	2f00      	cmp	r7, #0
 8007d4e:	d15d      	bne.n	8007e0c <_dtoa_r+0x4bc>
 8007d50:	2200      	movs	r2, #0
 8007d52:	4b81      	ldr	r3, [pc, #516]	; (8007f58 <_dtoa_r+0x608>)
 8007d54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d58:	f7f8 fa96 	bl	8000288 <__aeabi_dsub>
 8007d5c:	462a      	mov	r2, r5
 8007d5e:	4633      	mov	r3, r6
 8007d60:	e9cd 0100 	strd	r0, r1, [sp]
 8007d64:	f7f8 fed8 	bl	8000b18 <__aeabi_dcmpgt>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f040 8288 	bne.w	800827e <_dtoa_r+0x92e>
 8007d6e:	462a      	mov	r2, r5
 8007d70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007d74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007d78:	f7f8 feb0 	bl	8000adc <__aeabi_dcmplt>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	f040 827c 	bne.w	800827a <_dtoa_r+0x92a>
 8007d82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007d86:	e9cd 2300 	strd	r2, r3, [sp]
 8007d8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f2c0 8150 	blt.w	8008032 <_dtoa_r+0x6e2>
 8007d92:	f1ba 0f0e 	cmp.w	sl, #14
 8007d96:	f300 814c 	bgt.w	8008032 <_dtoa_r+0x6e2>
 8007d9a:	4b6a      	ldr	r3, [pc, #424]	; (8007f44 <_dtoa_r+0x5f4>)
 8007d9c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007da0:	ed93 7b00 	vldr	d7, [r3]
 8007da4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007dac:	f280 80d8 	bge.w	8007f60 <_dtoa_r+0x610>
 8007db0:	f1b9 0f00 	cmp.w	r9, #0
 8007db4:	f300 80d4 	bgt.w	8007f60 <_dtoa_r+0x610>
 8007db8:	f040 825e 	bne.w	8008278 <_dtoa_r+0x928>
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	4b66      	ldr	r3, [pc, #408]	; (8007f58 <_dtoa_r+0x608>)
 8007dc0:	ec51 0b17 	vmov	r0, r1, d7
 8007dc4:	f7f8 fc18 	bl	80005f8 <__aeabi_dmul>
 8007dc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dcc:	f7f8 fe9a 	bl	8000b04 <__aeabi_dcmpge>
 8007dd0:	464f      	mov	r7, r9
 8007dd2:	464e      	mov	r6, r9
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	f040 8234 	bne.w	8008242 <_dtoa_r+0x8f2>
 8007dda:	2331      	movs	r3, #49	; 0x31
 8007ddc:	f10b 0501 	add.w	r5, fp, #1
 8007de0:	f88b 3000 	strb.w	r3, [fp]
 8007de4:	f10a 0a01 	add.w	sl, sl, #1
 8007de8:	e22f      	b.n	800824a <_dtoa_r+0x8fa>
 8007dea:	07f2      	lsls	r2, r6, #31
 8007dec:	d505      	bpl.n	8007dfa <_dtoa_r+0x4aa>
 8007dee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007df2:	f7f8 fc01 	bl	80005f8 <__aeabi_dmul>
 8007df6:	3501      	adds	r5, #1
 8007df8:	2301      	movs	r3, #1
 8007dfa:	1076      	asrs	r6, r6, #1
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	e772      	b.n	8007ce6 <_dtoa_r+0x396>
 8007e00:	2502      	movs	r5, #2
 8007e02:	e774      	b.n	8007cee <_dtoa_r+0x39e>
 8007e04:	f8cd a020 	str.w	sl, [sp, #32]
 8007e08:	464f      	mov	r7, r9
 8007e0a:	e791      	b.n	8007d30 <_dtoa_r+0x3e0>
 8007e0c:	4b4d      	ldr	r3, [pc, #308]	; (8007f44 <_dtoa_r+0x5f4>)
 8007e0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e12:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d047      	beq.n	8007eac <_dtoa_r+0x55c>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	2000      	movs	r0, #0
 8007e22:	494e      	ldr	r1, [pc, #312]	; (8007f5c <_dtoa_r+0x60c>)
 8007e24:	f7f8 fd12 	bl	800084c <__aeabi_ddiv>
 8007e28:	462a      	mov	r2, r5
 8007e2a:	4633      	mov	r3, r6
 8007e2c:	f7f8 fa2c 	bl	8000288 <__aeabi_dsub>
 8007e30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e34:	465d      	mov	r5, fp
 8007e36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e3a:	f7f8 fe8d 	bl	8000b58 <__aeabi_d2iz>
 8007e3e:	4606      	mov	r6, r0
 8007e40:	f7f8 fb70 	bl	8000524 <__aeabi_i2d>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e4c:	f7f8 fa1c 	bl	8000288 <__aeabi_dsub>
 8007e50:	3630      	adds	r6, #48	; 0x30
 8007e52:	f805 6b01 	strb.w	r6, [r5], #1
 8007e56:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e5a:	e9cd 0100 	strd	r0, r1, [sp]
 8007e5e:	f7f8 fe3d 	bl	8000adc <__aeabi_dcmplt>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d163      	bne.n	8007f2e <_dtoa_r+0x5de>
 8007e66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e6a:	2000      	movs	r0, #0
 8007e6c:	4937      	ldr	r1, [pc, #220]	; (8007f4c <_dtoa_r+0x5fc>)
 8007e6e:	f7f8 fa0b 	bl	8000288 <__aeabi_dsub>
 8007e72:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007e76:	f7f8 fe31 	bl	8000adc <__aeabi_dcmplt>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	f040 80b7 	bne.w	8007fee <_dtoa_r+0x69e>
 8007e80:	eba5 030b 	sub.w	r3, r5, fp
 8007e84:	429f      	cmp	r7, r3
 8007e86:	f77f af7c 	ble.w	8007d82 <_dtoa_r+0x432>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4b30      	ldr	r3, [pc, #192]	; (8007f50 <_dtoa_r+0x600>)
 8007e8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007e92:	f7f8 fbb1 	bl	80005f8 <__aeabi_dmul>
 8007e96:	2200      	movs	r2, #0
 8007e98:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007e9c:	4b2c      	ldr	r3, [pc, #176]	; (8007f50 <_dtoa_r+0x600>)
 8007e9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ea2:	f7f8 fba9 	bl	80005f8 <__aeabi_dmul>
 8007ea6:	e9cd 0100 	strd	r0, r1, [sp]
 8007eaa:	e7c4      	b.n	8007e36 <_dtoa_r+0x4e6>
 8007eac:	462a      	mov	r2, r5
 8007eae:	4633      	mov	r3, r6
 8007eb0:	f7f8 fba2 	bl	80005f8 <__aeabi_dmul>
 8007eb4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007eb8:	eb0b 0507 	add.w	r5, fp, r7
 8007ebc:	465e      	mov	r6, fp
 8007ebe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ec2:	f7f8 fe49 	bl	8000b58 <__aeabi_d2iz>
 8007ec6:	4607      	mov	r7, r0
 8007ec8:	f7f8 fb2c 	bl	8000524 <__aeabi_i2d>
 8007ecc:	3730      	adds	r7, #48	; 0x30
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ed6:	f7f8 f9d7 	bl	8000288 <__aeabi_dsub>
 8007eda:	f806 7b01 	strb.w	r7, [r6], #1
 8007ede:	42ae      	cmp	r6, r5
 8007ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8007ee4:	f04f 0200 	mov.w	r2, #0
 8007ee8:	d126      	bne.n	8007f38 <_dtoa_r+0x5e8>
 8007eea:	4b1c      	ldr	r3, [pc, #112]	; (8007f5c <_dtoa_r+0x60c>)
 8007eec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ef0:	f7f8 f9cc 	bl	800028c <__adddf3>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007efc:	f7f8 fe0c 	bl	8000b18 <__aeabi_dcmpgt>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	d174      	bne.n	8007fee <_dtoa_r+0x69e>
 8007f04:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f08:	2000      	movs	r0, #0
 8007f0a:	4914      	ldr	r1, [pc, #80]	; (8007f5c <_dtoa_r+0x60c>)
 8007f0c:	f7f8 f9bc 	bl	8000288 <__aeabi_dsub>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f18:	f7f8 fde0 	bl	8000adc <__aeabi_dcmplt>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	f43f af30 	beq.w	8007d82 <_dtoa_r+0x432>
 8007f22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f26:	2b30      	cmp	r3, #48	; 0x30
 8007f28:	f105 32ff 	add.w	r2, r5, #4294967295
 8007f2c:	d002      	beq.n	8007f34 <_dtoa_r+0x5e4>
 8007f2e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f32:	e04a      	b.n	8007fca <_dtoa_r+0x67a>
 8007f34:	4615      	mov	r5, r2
 8007f36:	e7f4      	b.n	8007f22 <_dtoa_r+0x5d2>
 8007f38:	4b05      	ldr	r3, [pc, #20]	; (8007f50 <_dtoa_r+0x600>)
 8007f3a:	f7f8 fb5d 	bl	80005f8 <__aeabi_dmul>
 8007f3e:	e9cd 0100 	strd	r0, r1, [sp]
 8007f42:	e7bc      	b.n	8007ebe <_dtoa_r+0x56e>
 8007f44:	0800ad70 	.word	0x0800ad70
 8007f48:	0800ad48 	.word	0x0800ad48
 8007f4c:	3ff00000 	.word	0x3ff00000
 8007f50:	40240000 	.word	0x40240000
 8007f54:	401c0000 	.word	0x401c0000
 8007f58:	40140000 	.word	0x40140000
 8007f5c:	3fe00000 	.word	0x3fe00000
 8007f60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007f64:	465d      	mov	r5, fp
 8007f66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	4639      	mov	r1, r7
 8007f6e:	f7f8 fc6d 	bl	800084c <__aeabi_ddiv>
 8007f72:	f7f8 fdf1 	bl	8000b58 <__aeabi_d2iz>
 8007f76:	4680      	mov	r8, r0
 8007f78:	f7f8 fad4 	bl	8000524 <__aeabi_i2d>
 8007f7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f80:	f7f8 fb3a 	bl	80005f8 <__aeabi_dmul>
 8007f84:	4602      	mov	r2, r0
 8007f86:	460b      	mov	r3, r1
 8007f88:	4630      	mov	r0, r6
 8007f8a:	4639      	mov	r1, r7
 8007f8c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007f90:	f7f8 f97a 	bl	8000288 <__aeabi_dsub>
 8007f94:	f805 6b01 	strb.w	r6, [r5], #1
 8007f98:	eba5 060b 	sub.w	r6, r5, fp
 8007f9c:	45b1      	cmp	r9, r6
 8007f9e:	4602      	mov	r2, r0
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	d139      	bne.n	8008018 <_dtoa_r+0x6c8>
 8007fa4:	f7f8 f972 	bl	800028c <__adddf3>
 8007fa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fac:	4606      	mov	r6, r0
 8007fae:	460f      	mov	r7, r1
 8007fb0:	f7f8 fdb2 	bl	8000b18 <__aeabi_dcmpgt>
 8007fb4:	b9c8      	cbnz	r0, 8007fea <_dtoa_r+0x69a>
 8007fb6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fba:	4630      	mov	r0, r6
 8007fbc:	4639      	mov	r1, r7
 8007fbe:	f7f8 fd83 	bl	8000ac8 <__aeabi_dcmpeq>
 8007fc2:	b110      	cbz	r0, 8007fca <_dtoa_r+0x67a>
 8007fc4:	f018 0f01 	tst.w	r8, #1
 8007fc8:	d10f      	bne.n	8007fea <_dtoa_r+0x69a>
 8007fca:	9904      	ldr	r1, [sp, #16]
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fe00 	bl	8008bd2 <_Bfree>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fd6:	702b      	strb	r3, [r5, #0]
 8007fd8:	f10a 0301 	add.w	r3, sl, #1
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 8241 	beq.w	8008468 <_dtoa_r+0xb18>
 8007fe6:	601d      	str	r5, [r3, #0]
 8007fe8:	e23e      	b.n	8008468 <_dtoa_r+0xb18>
 8007fea:	f8cd a020 	str.w	sl, [sp, #32]
 8007fee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007ff2:	2a39      	cmp	r2, #57	; 0x39
 8007ff4:	f105 33ff 	add.w	r3, r5, #4294967295
 8007ff8:	d108      	bne.n	800800c <_dtoa_r+0x6bc>
 8007ffa:	459b      	cmp	fp, r3
 8007ffc:	d10a      	bne.n	8008014 <_dtoa_r+0x6c4>
 8007ffe:	9b08      	ldr	r3, [sp, #32]
 8008000:	3301      	adds	r3, #1
 8008002:	9308      	str	r3, [sp, #32]
 8008004:	2330      	movs	r3, #48	; 0x30
 8008006:	f88b 3000 	strb.w	r3, [fp]
 800800a:	465b      	mov	r3, fp
 800800c:	781a      	ldrb	r2, [r3, #0]
 800800e:	3201      	adds	r2, #1
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	e78c      	b.n	8007f2e <_dtoa_r+0x5de>
 8008014:	461d      	mov	r5, r3
 8008016:	e7ea      	b.n	8007fee <_dtoa_r+0x69e>
 8008018:	2200      	movs	r2, #0
 800801a:	4b9b      	ldr	r3, [pc, #620]	; (8008288 <_dtoa_r+0x938>)
 800801c:	f7f8 faec 	bl	80005f8 <__aeabi_dmul>
 8008020:	2200      	movs	r2, #0
 8008022:	2300      	movs	r3, #0
 8008024:	4606      	mov	r6, r0
 8008026:	460f      	mov	r7, r1
 8008028:	f7f8 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800802c:	2800      	cmp	r0, #0
 800802e:	d09a      	beq.n	8007f66 <_dtoa_r+0x616>
 8008030:	e7cb      	b.n	8007fca <_dtoa_r+0x67a>
 8008032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008034:	2a00      	cmp	r2, #0
 8008036:	f000 808b 	beq.w	8008150 <_dtoa_r+0x800>
 800803a:	9a06      	ldr	r2, [sp, #24]
 800803c:	2a01      	cmp	r2, #1
 800803e:	dc6e      	bgt.n	800811e <_dtoa_r+0x7ce>
 8008040:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008042:	2a00      	cmp	r2, #0
 8008044:	d067      	beq.n	8008116 <_dtoa_r+0x7c6>
 8008046:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800804a:	9f07      	ldr	r7, [sp, #28]
 800804c:	9d05      	ldr	r5, [sp, #20]
 800804e:	9a05      	ldr	r2, [sp, #20]
 8008050:	2101      	movs	r1, #1
 8008052:	441a      	add	r2, r3
 8008054:	4620      	mov	r0, r4
 8008056:	9205      	str	r2, [sp, #20]
 8008058:	4498      	add	r8, r3
 800805a:	f000 fe98 	bl	8008d8e <__i2b>
 800805e:	4606      	mov	r6, r0
 8008060:	2d00      	cmp	r5, #0
 8008062:	dd0c      	ble.n	800807e <_dtoa_r+0x72e>
 8008064:	f1b8 0f00 	cmp.w	r8, #0
 8008068:	dd09      	ble.n	800807e <_dtoa_r+0x72e>
 800806a:	4545      	cmp	r5, r8
 800806c:	9a05      	ldr	r2, [sp, #20]
 800806e:	462b      	mov	r3, r5
 8008070:	bfa8      	it	ge
 8008072:	4643      	movge	r3, r8
 8008074:	1ad2      	subs	r2, r2, r3
 8008076:	9205      	str	r2, [sp, #20]
 8008078:	1aed      	subs	r5, r5, r3
 800807a:	eba8 0803 	sub.w	r8, r8, r3
 800807e:	9b07      	ldr	r3, [sp, #28]
 8008080:	b1eb      	cbz	r3, 80080be <_dtoa_r+0x76e>
 8008082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d067      	beq.n	8008158 <_dtoa_r+0x808>
 8008088:	b18f      	cbz	r7, 80080ae <_dtoa_r+0x75e>
 800808a:	4631      	mov	r1, r6
 800808c:	463a      	mov	r2, r7
 800808e:	4620      	mov	r0, r4
 8008090:	f000 ff1c 	bl	8008ecc <__pow5mult>
 8008094:	9a04      	ldr	r2, [sp, #16]
 8008096:	4601      	mov	r1, r0
 8008098:	4606      	mov	r6, r0
 800809a:	4620      	mov	r0, r4
 800809c:	f000 fe80 	bl	8008da0 <__multiply>
 80080a0:	9904      	ldr	r1, [sp, #16]
 80080a2:	9008      	str	r0, [sp, #32]
 80080a4:	4620      	mov	r0, r4
 80080a6:	f000 fd94 	bl	8008bd2 <_Bfree>
 80080aa:	9b08      	ldr	r3, [sp, #32]
 80080ac:	9304      	str	r3, [sp, #16]
 80080ae:	9b07      	ldr	r3, [sp, #28]
 80080b0:	1bda      	subs	r2, r3, r7
 80080b2:	d004      	beq.n	80080be <_dtoa_r+0x76e>
 80080b4:	9904      	ldr	r1, [sp, #16]
 80080b6:	4620      	mov	r0, r4
 80080b8:	f000 ff08 	bl	8008ecc <__pow5mult>
 80080bc:	9004      	str	r0, [sp, #16]
 80080be:	2101      	movs	r1, #1
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 fe64 	bl	8008d8e <__i2b>
 80080c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080c8:	4607      	mov	r7, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 81d0 	beq.w	8008470 <_dtoa_r+0xb20>
 80080d0:	461a      	mov	r2, r3
 80080d2:	4601      	mov	r1, r0
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fef9 	bl	8008ecc <__pow5mult>
 80080da:	9b06      	ldr	r3, [sp, #24]
 80080dc:	2b01      	cmp	r3, #1
 80080de:	4607      	mov	r7, r0
 80080e0:	dc40      	bgt.n	8008164 <_dtoa_r+0x814>
 80080e2:	9b00      	ldr	r3, [sp, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d139      	bne.n	800815c <_dtoa_r+0x80c>
 80080e8:	9b01      	ldr	r3, [sp, #4]
 80080ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d136      	bne.n	8008160 <_dtoa_r+0x810>
 80080f2:	9b01      	ldr	r3, [sp, #4]
 80080f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80080f8:	0d1b      	lsrs	r3, r3, #20
 80080fa:	051b      	lsls	r3, r3, #20
 80080fc:	b12b      	cbz	r3, 800810a <_dtoa_r+0x7ba>
 80080fe:	9b05      	ldr	r3, [sp, #20]
 8008100:	3301      	adds	r3, #1
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	f108 0801 	add.w	r8, r8, #1
 8008108:	2301      	movs	r3, #1
 800810a:	9307      	str	r3, [sp, #28]
 800810c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800810e:	2b00      	cmp	r3, #0
 8008110:	d12a      	bne.n	8008168 <_dtoa_r+0x818>
 8008112:	2001      	movs	r0, #1
 8008114:	e030      	b.n	8008178 <_dtoa_r+0x828>
 8008116:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008118:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800811c:	e795      	b.n	800804a <_dtoa_r+0x6fa>
 800811e:	9b07      	ldr	r3, [sp, #28]
 8008120:	f109 37ff 	add.w	r7, r9, #4294967295
 8008124:	42bb      	cmp	r3, r7
 8008126:	bfbf      	itttt	lt
 8008128:	9b07      	ldrlt	r3, [sp, #28]
 800812a:	9707      	strlt	r7, [sp, #28]
 800812c:	1afa      	sublt	r2, r7, r3
 800812e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008130:	bfbb      	ittet	lt
 8008132:	189b      	addlt	r3, r3, r2
 8008134:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008136:	1bdf      	subge	r7, r3, r7
 8008138:	2700      	movlt	r7, #0
 800813a:	f1b9 0f00 	cmp.w	r9, #0
 800813e:	bfb5      	itete	lt
 8008140:	9b05      	ldrlt	r3, [sp, #20]
 8008142:	9d05      	ldrge	r5, [sp, #20]
 8008144:	eba3 0509 	sublt.w	r5, r3, r9
 8008148:	464b      	movge	r3, r9
 800814a:	bfb8      	it	lt
 800814c:	2300      	movlt	r3, #0
 800814e:	e77e      	b.n	800804e <_dtoa_r+0x6fe>
 8008150:	9f07      	ldr	r7, [sp, #28]
 8008152:	9d05      	ldr	r5, [sp, #20]
 8008154:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008156:	e783      	b.n	8008060 <_dtoa_r+0x710>
 8008158:	9a07      	ldr	r2, [sp, #28]
 800815a:	e7ab      	b.n	80080b4 <_dtoa_r+0x764>
 800815c:	2300      	movs	r3, #0
 800815e:	e7d4      	b.n	800810a <_dtoa_r+0x7ba>
 8008160:	9b00      	ldr	r3, [sp, #0]
 8008162:	e7d2      	b.n	800810a <_dtoa_r+0x7ba>
 8008164:	2300      	movs	r3, #0
 8008166:	9307      	str	r3, [sp, #28]
 8008168:	693b      	ldr	r3, [r7, #16]
 800816a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800816e:	6918      	ldr	r0, [r3, #16]
 8008170:	f000 fdbf 	bl	8008cf2 <__hi0bits>
 8008174:	f1c0 0020 	rsb	r0, r0, #32
 8008178:	4440      	add	r0, r8
 800817a:	f010 001f 	ands.w	r0, r0, #31
 800817e:	d047      	beq.n	8008210 <_dtoa_r+0x8c0>
 8008180:	f1c0 0320 	rsb	r3, r0, #32
 8008184:	2b04      	cmp	r3, #4
 8008186:	dd3b      	ble.n	8008200 <_dtoa_r+0x8b0>
 8008188:	9b05      	ldr	r3, [sp, #20]
 800818a:	f1c0 001c 	rsb	r0, r0, #28
 800818e:	4403      	add	r3, r0
 8008190:	9305      	str	r3, [sp, #20]
 8008192:	4405      	add	r5, r0
 8008194:	4480      	add	r8, r0
 8008196:	9b05      	ldr	r3, [sp, #20]
 8008198:	2b00      	cmp	r3, #0
 800819a:	dd05      	ble.n	80081a8 <_dtoa_r+0x858>
 800819c:	461a      	mov	r2, r3
 800819e:	9904      	ldr	r1, [sp, #16]
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 fee1 	bl	8008f68 <__lshift>
 80081a6:	9004      	str	r0, [sp, #16]
 80081a8:	f1b8 0f00 	cmp.w	r8, #0
 80081ac:	dd05      	ble.n	80081ba <_dtoa_r+0x86a>
 80081ae:	4639      	mov	r1, r7
 80081b0:	4642      	mov	r2, r8
 80081b2:	4620      	mov	r0, r4
 80081b4:	f000 fed8 	bl	8008f68 <__lshift>
 80081b8:	4607      	mov	r7, r0
 80081ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081bc:	b353      	cbz	r3, 8008214 <_dtoa_r+0x8c4>
 80081be:	4639      	mov	r1, r7
 80081c0:	9804      	ldr	r0, [sp, #16]
 80081c2:	f000 ff25 	bl	8009010 <__mcmp>
 80081c6:	2800      	cmp	r0, #0
 80081c8:	da24      	bge.n	8008214 <_dtoa_r+0x8c4>
 80081ca:	2300      	movs	r3, #0
 80081cc:	220a      	movs	r2, #10
 80081ce:	9904      	ldr	r1, [sp, #16]
 80081d0:	4620      	mov	r0, r4
 80081d2:	f000 fd15 	bl	8008c00 <__multadd>
 80081d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d8:	9004      	str	r0, [sp, #16]
 80081da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081de:	2b00      	cmp	r3, #0
 80081e0:	f000 814d 	beq.w	800847e <_dtoa_r+0xb2e>
 80081e4:	2300      	movs	r3, #0
 80081e6:	4631      	mov	r1, r6
 80081e8:	220a      	movs	r2, #10
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 fd08 	bl	8008c00 <__multadd>
 80081f0:	9b02      	ldr	r3, [sp, #8]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	4606      	mov	r6, r0
 80081f6:	dc4f      	bgt.n	8008298 <_dtoa_r+0x948>
 80081f8:	9b06      	ldr	r3, [sp, #24]
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	dd4c      	ble.n	8008298 <_dtoa_r+0x948>
 80081fe:	e011      	b.n	8008224 <_dtoa_r+0x8d4>
 8008200:	d0c9      	beq.n	8008196 <_dtoa_r+0x846>
 8008202:	9a05      	ldr	r2, [sp, #20]
 8008204:	331c      	adds	r3, #28
 8008206:	441a      	add	r2, r3
 8008208:	9205      	str	r2, [sp, #20]
 800820a:	441d      	add	r5, r3
 800820c:	4498      	add	r8, r3
 800820e:	e7c2      	b.n	8008196 <_dtoa_r+0x846>
 8008210:	4603      	mov	r3, r0
 8008212:	e7f6      	b.n	8008202 <_dtoa_r+0x8b2>
 8008214:	f1b9 0f00 	cmp.w	r9, #0
 8008218:	dc38      	bgt.n	800828c <_dtoa_r+0x93c>
 800821a:	9b06      	ldr	r3, [sp, #24]
 800821c:	2b02      	cmp	r3, #2
 800821e:	dd35      	ble.n	800828c <_dtoa_r+0x93c>
 8008220:	f8cd 9008 	str.w	r9, [sp, #8]
 8008224:	9b02      	ldr	r3, [sp, #8]
 8008226:	b963      	cbnz	r3, 8008242 <_dtoa_r+0x8f2>
 8008228:	4639      	mov	r1, r7
 800822a:	2205      	movs	r2, #5
 800822c:	4620      	mov	r0, r4
 800822e:	f000 fce7 	bl	8008c00 <__multadd>
 8008232:	4601      	mov	r1, r0
 8008234:	4607      	mov	r7, r0
 8008236:	9804      	ldr	r0, [sp, #16]
 8008238:	f000 feea 	bl	8009010 <__mcmp>
 800823c:	2800      	cmp	r0, #0
 800823e:	f73f adcc 	bgt.w	8007dda <_dtoa_r+0x48a>
 8008242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008244:	465d      	mov	r5, fp
 8008246:	ea6f 0a03 	mvn.w	sl, r3
 800824a:	f04f 0900 	mov.w	r9, #0
 800824e:	4639      	mov	r1, r7
 8008250:	4620      	mov	r0, r4
 8008252:	f000 fcbe 	bl	8008bd2 <_Bfree>
 8008256:	2e00      	cmp	r6, #0
 8008258:	f43f aeb7 	beq.w	8007fca <_dtoa_r+0x67a>
 800825c:	f1b9 0f00 	cmp.w	r9, #0
 8008260:	d005      	beq.n	800826e <_dtoa_r+0x91e>
 8008262:	45b1      	cmp	r9, r6
 8008264:	d003      	beq.n	800826e <_dtoa_r+0x91e>
 8008266:	4649      	mov	r1, r9
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fcb2 	bl	8008bd2 <_Bfree>
 800826e:	4631      	mov	r1, r6
 8008270:	4620      	mov	r0, r4
 8008272:	f000 fcae 	bl	8008bd2 <_Bfree>
 8008276:	e6a8      	b.n	8007fca <_dtoa_r+0x67a>
 8008278:	2700      	movs	r7, #0
 800827a:	463e      	mov	r6, r7
 800827c:	e7e1      	b.n	8008242 <_dtoa_r+0x8f2>
 800827e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008282:	463e      	mov	r6, r7
 8008284:	e5a9      	b.n	8007dda <_dtoa_r+0x48a>
 8008286:	bf00      	nop
 8008288:	40240000 	.word	0x40240000
 800828c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800828e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	f000 80fa 	beq.w	800848c <_dtoa_r+0xb3c>
 8008298:	2d00      	cmp	r5, #0
 800829a:	dd05      	ble.n	80082a8 <_dtoa_r+0x958>
 800829c:	4631      	mov	r1, r6
 800829e:	462a      	mov	r2, r5
 80082a0:	4620      	mov	r0, r4
 80082a2:	f000 fe61 	bl	8008f68 <__lshift>
 80082a6:	4606      	mov	r6, r0
 80082a8:	9b07      	ldr	r3, [sp, #28]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d04c      	beq.n	8008348 <_dtoa_r+0x9f8>
 80082ae:	6871      	ldr	r1, [r6, #4]
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 fc5a 	bl	8008b6a <_Balloc>
 80082b6:	6932      	ldr	r2, [r6, #16]
 80082b8:	3202      	adds	r2, #2
 80082ba:	4605      	mov	r5, r0
 80082bc:	0092      	lsls	r2, r2, #2
 80082be:	f106 010c 	add.w	r1, r6, #12
 80082c2:	300c      	adds	r0, #12
 80082c4:	f000 fc44 	bl	8008b50 <memcpy>
 80082c8:	2201      	movs	r2, #1
 80082ca:	4629      	mov	r1, r5
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 fe4b 	bl	8008f68 <__lshift>
 80082d2:	9b00      	ldr	r3, [sp, #0]
 80082d4:	f8cd b014 	str.w	fp, [sp, #20]
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	46b1      	mov	r9, r6
 80082de:	9307      	str	r3, [sp, #28]
 80082e0:	4606      	mov	r6, r0
 80082e2:	4639      	mov	r1, r7
 80082e4:	9804      	ldr	r0, [sp, #16]
 80082e6:	f7ff faa7 	bl	8007838 <quorem>
 80082ea:	4649      	mov	r1, r9
 80082ec:	4605      	mov	r5, r0
 80082ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80082f2:	9804      	ldr	r0, [sp, #16]
 80082f4:	f000 fe8c 	bl	8009010 <__mcmp>
 80082f8:	4632      	mov	r2, r6
 80082fa:	9000      	str	r0, [sp, #0]
 80082fc:	4639      	mov	r1, r7
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 fea0 	bl	8009044 <__mdiff>
 8008304:	68c3      	ldr	r3, [r0, #12]
 8008306:	4602      	mov	r2, r0
 8008308:	bb03      	cbnz	r3, 800834c <_dtoa_r+0x9fc>
 800830a:	4601      	mov	r1, r0
 800830c:	9008      	str	r0, [sp, #32]
 800830e:	9804      	ldr	r0, [sp, #16]
 8008310:	f000 fe7e 	bl	8009010 <__mcmp>
 8008314:	9a08      	ldr	r2, [sp, #32]
 8008316:	4603      	mov	r3, r0
 8008318:	4611      	mov	r1, r2
 800831a:	4620      	mov	r0, r4
 800831c:	9308      	str	r3, [sp, #32]
 800831e:	f000 fc58 	bl	8008bd2 <_Bfree>
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	b9a3      	cbnz	r3, 8008350 <_dtoa_r+0xa00>
 8008326:	9a06      	ldr	r2, [sp, #24]
 8008328:	b992      	cbnz	r2, 8008350 <_dtoa_r+0xa00>
 800832a:	9a07      	ldr	r2, [sp, #28]
 800832c:	b982      	cbnz	r2, 8008350 <_dtoa_r+0xa00>
 800832e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008332:	d029      	beq.n	8008388 <_dtoa_r+0xa38>
 8008334:	9b00      	ldr	r3, [sp, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	dd01      	ble.n	800833e <_dtoa_r+0x9ee>
 800833a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800833e:	9b05      	ldr	r3, [sp, #20]
 8008340:	1c5d      	adds	r5, r3, #1
 8008342:	f883 8000 	strb.w	r8, [r3]
 8008346:	e782      	b.n	800824e <_dtoa_r+0x8fe>
 8008348:	4630      	mov	r0, r6
 800834a:	e7c2      	b.n	80082d2 <_dtoa_r+0x982>
 800834c:	2301      	movs	r3, #1
 800834e:	e7e3      	b.n	8008318 <_dtoa_r+0x9c8>
 8008350:	9a00      	ldr	r2, [sp, #0]
 8008352:	2a00      	cmp	r2, #0
 8008354:	db04      	blt.n	8008360 <_dtoa_r+0xa10>
 8008356:	d125      	bne.n	80083a4 <_dtoa_r+0xa54>
 8008358:	9a06      	ldr	r2, [sp, #24]
 800835a:	bb1a      	cbnz	r2, 80083a4 <_dtoa_r+0xa54>
 800835c:	9a07      	ldr	r2, [sp, #28]
 800835e:	bb0a      	cbnz	r2, 80083a4 <_dtoa_r+0xa54>
 8008360:	2b00      	cmp	r3, #0
 8008362:	ddec      	ble.n	800833e <_dtoa_r+0x9ee>
 8008364:	2201      	movs	r2, #1
 8008366:	9904      	ldr	r1, [sp, #16]
 8008368:	4620      	mov	r0, r4
 800836a:	f000 fdfd 	bl	8008f68 <__lshift>
 800836e:	4639      	mov	r1, r7
 8008370:	9004      	str	r0, [sp, #16]
 8008372:	f000 fe4d 	bl	8009010 <__mcmp>
 8008376:	2800      	cmp	r0, #0
 8008378:	dc03      	bgt.n	8008382 <_dtoa_r+0xa32>
 800837a:	d1e0      	bne.n	800833e <_dtoa_r+0x9ee>
 800837c:	f018 0f01 	tst.w	r8, #1
 8008380:	d0dd      	beq.n	800833e <_dtoa_r+0x9ee>
 8008382:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008386:	d1d8      	bne.n	800833a <_dtoa_r+0x9ea>
 8008388:	9b05      	ldr	r3, [sp, #20]
 800838a:	9a05      	ldr	r2, [sp, #20]
 800838c:	1c5d      	adds	r5, r3, #1
 800838e:	2339      	movs	r3, #57	; 0x39
 8008390:	7013      	strb	r3, [r2, #0]
 8008392:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008396:	2b39      	cmp	r3, #57	; 0x39
 8008398:	f105 32ff 	add.w	r2, r5, #4294967295
 800839c:	d04f      	beq.n	800843e <_dtoa_r+0xaee>
 800839e:	3301      	adds	r3, #1
 80083a0:	7013      	strb	r3, [r2, #0]
 80083a2:	e754      	b.n	800824e <_dtoa_r+0x8fe>
 80083a4:	9a05      	ldr	r2, [sp, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f102 0501 	add.w	r5, r2, #1
 80083ac:	dd06      	ble.n	80083bc <_dtoa_r+0xa6c>
 80083ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80083b2:	d0e9      	beq.n	8008388 <_dtoa_r+0xa38>
 80083b4:	f108 0801 	add.w	r8, r8, #1
 80083b8:	9b05      	ldr	r3, [sp, #20]
 80083ba:	e7c2      	b.n	8008342 <_dtoa_r+0x9f2>
 80083bc:	9a02      	ldr	r2, [sp, #8]
 80083be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80083c2:	eba5 030b 	sub.w	r3, r5, fp
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d021      	beq.n	800840e <_dtoa_r+0xabe>
 80083ca:	2300      	movs	r3, #0
 80083cc:	220a      	movs	r2, #10
 80083ce:	9904      	ldr	r1, [sp, #16]
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 fc15 	bl	8008c00 <__multadd>
 80083d6:	45b1      	cmp	r9, r6
 80083d8:	9004      	str	r0, [sp, #16]
 80083da:	f04f 0300 	mov.w	r3, #0
 80083de:	f04f 020a 	mov.w	r2, #10
 80083e2:	4649      	mov	r1, r9
 80083e4:	4620      	mov	r0, r4
 80083e6:	d105      	bne.n	80083f4 <_dtoa_r+0xaa4>
 80083e8:	f000 fc0a 	bl	8008c00 <__multadd>
 80083ec:	4681      	mov	r9, r0
 80083ee:	4606      	mov	r6, r0
 80083f0:	9505      	str	r5, [sp, #20]
 80083f2:	e776      	b.n	80082e2 <_dtoa_r+0x992>
 80083f4:	f000 fc04 	bl	8008c00 <__multadd>
 80083f8:	4631      	mov	r1, r6
 80083fa:	4681      	mov	r9, r0
 80083fc:	2300      	movs	r3, #0
 80083fe:	220a      	movs	r2, #10
 8008400:	4620      	mov	r0, r4
 8008402:	f000 fbfd 	bl	8008c00 <__multadd>
 8008406:	4606      	mov	r6, r0
 8008408:	e7f2      	b.n	80083f0 <_dtoa_r+0xaa0>
 800840a:	f04f 0900 	mov.w	r9, #0
 800840e:	2201      	movs	r2, #1
 8008410:	9904      	ldr	r1, [sp, #16]
 8008412:	4620      	mov	r0, r4
 8008414:	f000 fda8 	bl	8008f68 <__lshift>
 8008418:	4639      	mov	r1, r7
 800841a:	9004      	str	r0, [sp, #16]
 800841c:	f000 fdf8 	bl	8009010 <__mcmp>
 8008420:	2800      	cmp	r0, #0
 8008422:	dcb6      	bgt.n	8008392 <_dtoa_r+0xa42>
 8008424:	d102      	bne.n	800842c <_dtoa_r+0xadc>
 8008426:	f018 0f01 	tst.w	r8, #1
 800842a:	d1b2      	bne.n	8008392 <_dtoa_r+0xa42>
 800842c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008430:	2b30      	cmp	r3, #48	; 0x30
 8008432:	f105 32ff 	add.w	r2, r5, #4294967295
 8008436:	f47f af0a 	bne.w	800824e <_dtoa_r+0x8fe>
 800843a:	4615      	mov	r5, r2
 800843c:	e7f6      	b.n	800842c <_dtoa_r+0xadc>
 800843e:	4593      	cmp	fp, r2
 8008440:	d105      	bne.n	800844e <_dtoa_r+0xafe>
 8008442:	2331      	movs	r3, #49	; 0x31
 8008444:	f10a 0a01 	add.w	sl, sl, #1
 8008448:	f88b 3000 	strb.w	r3, [fp]
 800844c:	e6ff      	b.n	800824e <_dtoa_r+0x8fe>
 800844e:	4615      	mov	r5, r2
 8008450:	e79f      	b.n	8008392 <_dtoa_r+0xa42>
 8008452:	f8df b064 	ldr.w	fp, [pc, #100]	; 80084b8 <_dtoa_r+0xb68>
 8008456:	e007      	b.n	8008468 <_dtoa_r+0xb18>
 8008458:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800845a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80084bc <_dtoa_r+0xb6c>
 800845e:	b11b      	cbz	r3, 8008468 <_dtoa_r+0xb18>
 8008460:	f10b 0308 	add.w	r3, fp, #8
 8008464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	4658      	mov	r0, fp
 800846a:	b017      	add	sp, #92	; 0x5c
 800846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008470:	9b06      	ldr	r3, [sp, #24]
 8008472:	2b01      	cmp	r3, #1
 8008474:	f77f ae35 	ble.w	80080e2 <_dtoa_r+0x792>
 8008478:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800847a:	9307      	str	r3, [sp, #28]
 800847c:	e649      	b.n	8008112 <_dtoa_r+0x7c2>
 800847e:	9b02      	ldr	r3, [sp, #8]
 8008480:	2b00      	cmp	r3, #0
 8008482:	dc03      	bgt.n	800848c <_dtoa_r+0xb3c>
 8008484:	9b06      	ldr	r3, [sp, #24]
 8008486:	2b02      	cmp	r3, #2
 8008488:	f73f aecc 	bgt.w	8008224 <_dtoa_r+0x8d4>
 800848c:	465d      	mov	r5, fp
 800848e:	4639      	mov	r1, r7
 8008490:	9804      	ldr	r0, [sp, #16]
 8008492:	f7ff f9d1 	bl	8007838 <quorem>
 8008496:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800849a:	f805 8b01 	strb.w	r8, [r5], #1
 800849e:	9a02      	ldr	r2, [sp, #8]
 80084a0:	eba5 030b 	sub.w	r3, r5, fp
 80084a4:	429a      	cmp	r2, r3
 80084a6:	ddb0      	ble.n	800840a <_dtoa_r+0xaba>
 80084a8:	2300      	movs	r3, #0
 80084aa:	220a      	movs	r2, #10
 80084ac:	9904      	ldr	r1, [sp, #16]
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 fba6 	bl	8008c00 <__multadd>
 80084b4:	9004      	str	r0, [sp, #16]
 80084b6:	e7ea      	b.n	800848e <_dtoa_r+0xb3e>
 80084b8:	0800acb8 	.word	0x0800acb8
 80084bc:	0800ad30 	.word	0x0800ad30

080084c0 <rshift>:
 80084c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084c2:	6906      	ldr	r6, [r0, #16]
 80084c4:	114b      	asrs	r3, r1, #5
 80084c6:	429e      	cmp	r6, r3
 80084c8:	f100 0414 	add.w	r4, r0, #20
 80084cc:	dd30      	ble.n	8008530 <rshift+0x70>
 80084ce:	f011 011f 	ands.w	r1, r1, #31
 80084d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80084d6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80084da:	d108      	bne.n	80084ee <rshift+0x2e>
 80084dc:	4621      	mov	r1, r4
 80084de:	42b2      	cmp	r2, r6
 80084e0:	460b      	mov	r3, r1
 80084e2:	d211      	bcs.n	8008508 <rshift+0x48>
 80084e4:	f852 3b04 	ldr.w	r3, [r2], #4
 80084e8:	f841 3b04 	str.w	r3, [r1], #4
 80084ec:	e7f7      	b.n	80084de <rshift+0x1e>
 80084ee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80084f2:	f1c1 0c20 	rsb	ip, r1, #32
 80084f6:	40cd      	lsrs	r5, r1
 80084f8:	3204      	adds	r2, #4
 80084fa:	4623      	mov	r3, r4
 80084fc:	42b2      	cmp	r2, r6
 80084fe:	4617      	mov	r7, r2
 8008500:	d30c      	bcc.n	800851c <rshift+0x5c>
 8008502:	601d      	str	r5, [r3, #0]
 8008504:	b105      	cbz	r5, 8008508 <rshift+0x48>
 8008506:	3304      	adds	r3, #4
 8008508:	1b1a      	subs	r2, r3, r4
 800850a:	42a3      	cmp	r3, r4
 800850c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008510:	bf08      	it	eq
 8008512:	2300      	moveq	r3, #0
 8008514:	6102      	str	r2, [r0, #16]
 8008516:	bf08      	it	eq
 8008518:	6143      	streq	r3, [r0, #20]
 800851a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800851c:	683f      	ldr	r7, [r7, #0]
 800851e:	fa07 f70c 	lsl.w	r7, r7, ip
 8008522:	433d      	orrs	r5, r7
 8008524:	f843 5b04 	str.w	r5, [r3], #4
 8008528:	f852 5b04 	ldr.w	r5, [r2], #4
 800852c:	40cd      	lsrs	r5, r1
 800852e:	e7e5      	b.n	80084fc <rshift+0x3c>
 8008530:	4623      	mov	r3, r4
 8008532:	e7e9      	b.n	8008508 <rshift+0x48>

08008534 <__hexdig_fun>:
 8008534:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008538:	2b09      	cmp	r3, #9
 800853a:	d802      	bhi.n	8008542 <__hexdig_fun+0xe>
 800853c:	3820      	subs	r0, #32
 800853e:	b2c0      	uxtb	r0, r0
 8008540:	4770      	bx	lr
 8008542:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008546:	2b05      	cmp	r3, #5
 8008548:	d801      	bhi.n	800854e <__hexdig_fun+0x1a>
 800854a:	3847      	subs	r0, #71	; 0x47
 800854c:	e7f7      	b.n	800853e <__hexdig_fun+0xa>
 800854e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008552:	2b05      	cmp	r3, #5
 8008554:	d801      	bhi.n	800855a <__hexdig_fun+0x26>
 8008556:	3827      	subs	r0, #39	; 0x27
 8008558:	e7f1      	b.n	800853e <__hexdig_fun+0xa>
 800855a:	2000      	movs	r0, #0
 800855c:	4770      	bx	lr

0800855e <__gethex>:
 800855e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008562:	b08b      	sub	sp, #44	; 0x2c
 8008564:	468a      	mov	sl, r1
 8008566:	9002      	str	r0, [sp, #8]
 8008568:	9816      	ldr	r0, [sp, #88]	; 0x58
 800856a:	9306      	str	r3, [sp, #24]
 800856c:	4690      	mov	r8, r2
 800856e:	f000 facd 	bl	8008b0c <__localeconv_l>
 8008572:	6803      	ldr	r3, [r0, #0]
 8008574:	9303      	str	r3, [sp, #12]
 8008576:	4618      	mov	r0, r3
 8008578:	f7f7 fe2a 	bl	80001d0 <strlen>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	9001      	str	r0, [sp, #4]
 8008580:	4403      	add	r3, r0
 8008582:	f04f 0b00 	mov.w	fp, #0
 8008586:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800858a:	9307      	str	r3, [sp, #28]
 800858c:	f8da 3000 	ldr.w	r3, [sl]
 8008590:	3302      	adds	r3, #2
 8008592:	461f      	mov	r7, r3
 8008594:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008598:	2830      	cmp	r0, #48	; 0x30
 800859a:	d06c      	beq.n	8008676 <__gethex+0x118>
 800859c:	f7ff ffca 	bl	8008534 <__hexdig_fun>
 80085a0:	4604      	mov	r4, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d16a      	bne.n	800867c <__gethex+0x11e>
 80085a6:	9a01      	ldr	r2, [sp, #4]
 80085a8:	9903      	ldr	r1, [sp, #12]
 80085aa:	4638      	mov	r0, r7
 80085ac:	f001 f83c 	bl	8009628 <strncmp>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	d166      	bne.n	8008682 <__gethex+0x124>
 80085b4:	9b01      	ldr	r3, [sp, #4]
 80085b6:	5cf8      	ldrb	r0, [r7, r3]
 80085b8:	18fe      	adds	r6, r7, r3
 80085ba:	f7ff ffbb 	bl	8008534 <__hexdig_fun>
 80085be:	2800      	cmp	r0, #0
 80085c0:	d062      	beq.n	8008688 <__gethex+0x12a>
 80085c2:	4633      	mov	r3, r6
 80085c4:	7818      	ldrb	r0, [r3, #0]
 80085c6:	2830      	cmp	r0, #48	; 0x30
 80085c8:	461f      	mov	r7, r3
 80085ca:	f103 0301 	add.w	r3, r3, #1
 80085ce:	d0f9      	beq.n	80085c4 <__gethex+0x66>
 80085d0:	f7ff ffb0 	bl	8008534 <__hexdig_fun>
 80085d4:	fab0 f580 	clz	r5, r0
 80085d8:	096d      	lsrs	r5, r5, #5
 80085da:	4634      	mov	r4, r6
 80085dc:	f04f 0b01 	mov.w	fp, #1
 80085e0:	463a      	mov	r2, r7
 80085e2:	4616      	mov	r6, r2
 80085e4:	3201      	adds	r2, #1
 80085e6:	7830      	ldrb	r0, [r6, #0]
 80085e8:	f7ff ffa4 	bl	8008534 <__hexdig_fun>
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d1f8      	bne.n	80085e2 <__gethex+0x84>
 80085f0:	9a01      	ldr	r2, [sp, #4]
 80085f2:	9903      	ldr	r1, [sp, #12]
 80085f4:	4630      	mov	r0, r6
 80085f6:	f001 f817 	bl	8009628 <strncmp>
 80085fa:	b950      	cbnz	r0, 8008612 <__gethex+0xb4>
 80085fc:	b954      	cbnz	r4, 8008614 <__gethex+0xb6>
 80085fe:	9b01      	ldr	r3, [sp, #4]
 8008600:	18f4      	adds	r4, r6, r3
 8008602:	4622      	mov	r2, r4
 8008604:	4616      	mov	r6, r2
 8008606:	3201      	adds	r2, #1
 8008608:	7830      	ldrb	r0, [r6, #0]
 800860a:	f7ff ff93 	bl	8008534 <__hexdig_fun>
 800860e:	2800      	cmp	r0, #0
 8008610:	d1f8      	bne.n	8008604 <__gethex+0xa6>
 8008612:	b10c      	cbz	r4, 8008618 <__gethex+0xba>
 8008614:	1ba4      	subs	r4, r4, r6
 8008616:	00a4      	lsls	r4, r4, #2
 8008618:	7833      	ldrb	r3, [r6, #0]
 800861a:	2b50      	cmp	r3, #80	; 0x50
 800861c:	d001      	beq.n	8008622 <__gethex+0xc4>
 800861e:	2b70      	cmp	r3, #112	; 0x70
 8008620:	d140      	bne.n	80086a4 <__gethex+0x146>
 8008622:	7873      	ldrb	r3, [r6, #1]
 8008624:	2b2b      	cmp	r3, #43	; 0x2b
 8008626:	d031      	beq.n	800868c <__gethex+0x12e>
 8008628:	2b2d      	cmp	r3, #45	; 0x2d
 800862a:	d033      	beq.n	8008694 <__gethex+0x136>
 800862c:	1c71      	adds	r1, r6, #1
 800862e:	f04f 0900 	mov.w	r9, #0
 8008632:	7808      	ldrb	r0, [r1, #0]
 8008634:	f7ff ff7e 	bl	8008534 <__hexdig_fun>
 8008638:	1e43      	subs	r3, r0, #1
 800863a:	b2db      	uxtb	r3, r3
 800863c:	2b18      	cmp	r3, #24
 800863e:	d831      	bhi.n	80086a4 <__gethex+0x146>
 8008640:	f1a0 0210 	sub.w	r2, r0, #16
 8008644:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008648:	f7ff ff74 	bl	8008534 <__hexdig_fun>
 800864c:	1e43      	subs	r3, r0, #1
 800864e:	b2db      	uxtb	r3, r3
 8008650:	2b18      	cmp	r3, #24
 8008652:	d922      	bls.n	800869a <__gethex+0x13c>
 8008654:	f1b9 0f00 	cmp.w	r9, #0
 8008658:	d000      	beq.n	800865c <__gethex+0xfe>
 800865a:	4252      	negs	r2, r2
 800865c:	4414      	add	r4, r2
 800865e:	f8ca 1000 	str.w	r1, [sl]
 8008662:	b30d      	cbz	r5, 80086a8 <__gethex+0x14a>
 8008664:	f1bb 0f00 	cmp.w	fp, #0
 8008668:	bf0c      	ite	eq
 800866a:	2706      	moveq	r7, #6
 800866c:	2700      	movne	r7, #0
 800866e:	4638      	mov	r0, r7
 8008670:	b00b      	add	sp, #44	; 0x2c
 8008672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008676:	f10b 0b01 	add.w	fp, fp, #1
 800867a:	e78a      	b.n	8008592 <__gethex+0x34>
 800867c:	2500      	movs	r5, #0
 800867e:	462c      	mov	r4, r5
 8008680:	e7ae      	b.n	80085e0 <__gethex+0x82>
 8008682:	463e      	mov	r6, r7
 8008684:	2501      	movs	r5, #1
 8008686:	e7c7      	b.n	8008618 <__gethex+0xba>
 8008688:	4604      	mov	r4, r0
 800868a:	e7fb      	b.n	8008684 <__gethex+0x126>
 800868c:	f04f 0900 	mov.w	r9, #0
 8008690:	1cb1      	adds	r1, r6, #2
 8008692:	e7ce      	b.n	8008632 <__gethex+0xd4>
 8008694:	f04f 0901 	mov.w	r9, #1
 8008698:	e7fa      	b.n	8008690 <__gethex+0x132>
 800869a:	230a      	movs	r3, #10
 800869c:	fb03 0202 	mla	r2, r3, r2, r0
 80086a0:	3a10      	subs	r2, #16
 80086a2:	e7cf      	b.n	8008644 <__gethex+0xe6>
 80086a4:	4631      	mov	r1, r6
 80086a6:	e7da      	b.n	800865e <__gethex+0x100>
 80086a8:	1bf3      	subs	r3, r6, r7
 80086aa:	3b01      	subs	r3, #1
 80086ac:	4629      	mov	r1, r5
 80086ae:	2b07      	cmp	r3, #7
 80086b0:	dc49      	bgt.n	8008746 <__gethex+0x1e8>
 80086b2:	9802      	ldr	r0, [sp, #8]
 80086b4:	f000 fa59 	bl	8008b6a <_Balloc>
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	f100 0914 	add.w	r9, r0, #20
 80086be:	f04f 0b00 	mov.w	fp, #0
 80086c2:	f1c3 0301 	rsb	r3, r3, #1
 80086c6:	4605      	mov	r5, r0
 80086c8:	f8cd 9010 	str.w	r9, [sp, #16]
 80086cc:	46da      	mov	sl, fp
 80086ce:	9308      	str	r3, [sp, #32]
 80086d0:	42b7      	cmp	r7, r6
 80086d2:	d33b      	bcc.n	800874c <__gethex+0x1ee>
 80086d4:	9804      	ldr	r0, [sp, #16]
 80086d6:	f840 ab04 	str.w	sl, [r0], #4
 80086da:	eba0 0009 	sub.w	r0, r0, r9
 80086de:	1080      	asrs	r0, r0, #2
 80086e0:	6128      	str	r0, [r5, #16]
 80086e2:	0147      	lsls	r7, r0, #5
 80086e4:	4650      	mov	r0, sl
 80086e6:	f000 fb04 	bl	8008cf2 <__hi0bits>
 80086ea:	f8d8 6000 	ldr.w	r6, [r8]
 80086ee:	1a3f      	subs	r7, r7, r0
 80086f0:	42b7      	cmp	r7, r6
 80086f2:	dd64      	ble.n	80087be <__gethex+0x260>
 80086f4:	1bbf      	subs	r7, r7, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	4628      	mov	r0, r5
 80086fa:	f000 fe13 	bl	8009324 <__any_on>
 80086fe:	4682      	mov	sl, r0
 8008700:	b178      	cbz	r0, 8008722 <__gethex+0x1c4>
 8008702:	1e7b      	subs	r3, r7, #1
 8008704:	1159      	asrs	r1, r3, #5
 8008706:	f003 021f 	and.w	r2, r3, #31
 800870a:	f04f 0a01 	mov.w	sl, #1
 800870e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008712:	fa0a f202 	lsl.w	r2, sl, r2
 8008716:	420a      	tst	r2, r1
 8008718:	d003      	beq.n	8008722 <__gethex+0x1c4>
 800871a:	4553      	cmp	r3, sl
 800871c:	dc46      	bgt.n	80087ac <__gethex+0x24e>
 800871e:	f04f 0a02 	mov.w	sl, #2
 8008722:	4639      	mov	r1, r7
 8008724:	4628      	mov	r0, r5
 8008726:	f7ff fecb 	bl	80084c0 <rshift>
 800872a:	443c      	add	r4, r7
 800872c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008730:	42a3      	cmp	r3, r4
 8008732:	da52      	bge.n	80087da <__gethex+0x27c>
 8008734:	4629      	mov	r1, r5
 8008736:	9802      	ldr	r0, [sp, #8]
 8008738:	f000 fa4b 	bl	8008bd2 <_Bfree>
 800873c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800873e:	2300      	movs	r3, #0
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	27a3      	movs	r7, #163	; 0xa3
 8008744:	e793      	b.n	800866e <__gethex+0x110>
 8008746:	3101      	adds	r1, #1
 8008748:	105b      	asrs	r3, r3, #1
 800874a:	e7b0      	b.n	80086ae <__gethex+0x150>
 800874c:	1e73      	subs	r3, r6, #1
 800874e:	9305      	str	r3, [sp, #20]
 8008750:	9a07      	ldr	r2, [sp, #28]
 8008752:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008756:	4293      	cmp	r3, r2
 8008758:	d018      	beq.n	800878c <__gethex+0x22e>
 800875a:	f1bb 0f20 	cmp.w	fp, #32
 800875e:	d107      	bne.n	8008770 <__gethex+0x212>
 8008760:	9b04      	ldr	r3, [sp, #16]
 8008762:	f8c3 a000 	str.w	sl, [r3]
 8008766:	3304      	adds	r3, #4
 8008768:	f04f 0a00 	mov.w	sl, #0
 800876c:	9304      	str	r3, [sp, #16]
 800876e:	46d3      	mov	fp, sl
 8008770:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008774:	f7ff fede 	bl	8008534 <__hexdig_fun>
 8008778:	f000 000f 	and.w	r0, r0, #15
 800877c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008780:	ea4a 0a00 	orr.w	sl, sl, r0
 8008784:	f10b 0b04 	add.w	fp, fp, #4
 8008788:	9b05      	ldr	r3, [sp, #20]
 800878a:	e00d      	b.n	80087a8 <__gethex+0x24a>
 800878c:	9b05      	ldr	r3, [sp, #20]
 800878e:	9a08      	ldr	r2, [sp, #32]
 8008790:	4413      	add	r3, r2
 8008792:	42bb      	cmp	r3, r7
 8008794:	d3e1      	bcc.n	800875a <__gethex+0x1fc>
 8008796:	4618      	mov	r0, r3
 8008798:	9a01      	ldr	r2, [sp, #4]
 800879a:	9903      	ldr	r1, [sp, #12]
 800879c:	9309      	str	r3, [sp, #36]	; 0x24
 800879e:	f000 ff43 	bl	8009628 <strncmp>
 80087a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d1d8      	bne.n	800875a <__gethex+0x1fc>
 80087a8:	461e      	mov	r6, r3
 80087aa:	e791      	b.n	80086d0 <__gethex+0x172>
 80087ac:	1eb9      	subs	r1, r7, #2
 80087ae:	4628      	mov	r0, r5
 80087b0:	f000 fdb8 	bl	8009324 <__any_on>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d0b2      	beq.n	800871e <__gethex+0x1c0>
 80087b8:	f04f 0a03 	mov.w	sl, #3
 80087bc:	e7b1      	b.n	8008722 <__gethex+0x1c4>
 80087be:	da09      	bge.n	80087d4 <__gethex+0x276>
 80087c0:	1bf7      	subs	r7, r6, r7
 80087c2:	4629      	mov	r1, r5
 80087c4:	463a      	mov	r2, r7
 80087c6:	9802      	ldr	r0, [sp, #8]
 80087c8:	f000 fbce 	bl	8008f68 <__lshift>
 80087cc:	1be4      	subs	r4, r4, r7
 80087ce:	4605      	mov	r5, r0
 80087d0:	f100 0914 	add.w	r9, r0, #20
 80087d4:	f04f 0a00 	mov.w	sl, #0
 80087d8:	e7a8      	b.n	800872c <__gethex+0x1ce>
 80087da:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087de:	42a0      	cmp	r0, r4
 80087e0:	dd6a      	ble.n	80088b8 <__gethex+0x35a>
 80087e2:	1b04      	subs	r4, r0, r4
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	dc2e      	bgt.n	8008846 <__gethex+0x2e8>
 80087e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087ec:	2b02      	cmp	r3, #2
 80087ee:	d022      	beq.n	8008836 <__gethex+0x2d8>
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d024      	beq.n	800883e <__gethex+0x2e0>
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d115      	bne.n	8008824 <__gethex+0x2c6>
 80087f8:	42a6      	cmp	r6, r4
 80087fa:	d113      	bne.n	8008824 <__gethex+0x2c6>
 80087fc:	2e01      	cmp	r6, #1
 80087fe:	dc0b      	bgt.n	8008818 <__gethex+0x2ba>
 8008800:	9a06      	ldr	r2, [sp, #24]
 8008802:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	2301      	movs	r3, #1
 800880a:	612b      	str	r3, [r5, #16]
 800880c:	f8c9 3000 	str.w	r3, [r9]
 8008810:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008812:	2762      	movs	r7, #98	; 0x62
 8008814:	601d      	str	r5, [r3, #0]
 8008816:	e72a      	b.n	800866e <__gethex+0x110>
 8008818:	1e71      	subs	r1, r6, #1
 800881a:	4628      	mov	r0, r5
 800881c:	f000 fd82 	bl	8009324 <__any_on>
 8008820:	2800      	cmp	r0, #0
 8008822:	d1ed      	bne.n	8008800 <__gethex+0x2a2>
 8008824:	4629      	mov	r1, r5
 8008826:	9802      	ldr	r0, [sp, #8]
 8008828:	f000 f9d3 	bl	8008bd2 <_Bfree>
 800882c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800882e:	2300      	movs	r3, #0
 8008830:	6013      	str	r3, [r2, #0]
 8008832:	2750      	movs	r7, #80	; 0x50
 8008834:	e71b      	b.n	800866e <__gethex+0x110>
 8008836:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0e1      	beq.n	8008800 <__gethex+0x2a2>
 800883c:	e7f2      	b.n	8008824 <__gethex+0x2c6>
 800883e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1dd      	bne.n	8008800 <__gethex+0x2a2>
 8008844:	e7ee      	b.n	8008824 <__gethex+0x2c6>
 8008846:	1e67      	subs	r7, r4, #1
 8008848:	f1ba 0f00 	cmp.w	sl, #0
 800884c:	d131      	bne.n	80088b2 <__gethex+0x354>
 800884e:	b127      	cbz	r7, 800885a <__gethex+0x2fc>
 8008850:	4639      	mov	r1, r7
 8008852:	4628      	mov	r0, r5
 8008854:	f000 fd66 	bl	8009324 <__any_on>
 8008858:	4682      	mov	sl, r0
 800885a:	117a      	asrs	r2, r7, #5
 800885c:	2301      	movs	r3, #1
 800885e:	f007 071f 	and.w	r7, r7, #31
 8008862:	fa03 f707 	lsl.w	r7, r3, r7
 8008866:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800886a:	4621      	mov	r1, r4
 800886c:	421f      	tst	r7, r3
 800886e:	4628      	mov	r0, r5
 8008870:	bf18      	it	ne
 8008872:	f04a 0a02 	orrne.w	sl, sl, #2
 8008876:	1b36      	subs	r6, r6, r4
 8008878:	f7ff fe22 	bl	80084c0 <rshift>
 800887c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008880:	2702      	movs	r7, #2
 8008882:	f1ba 0f00 	cmp.w	sl, #0
 8008886:	d048      	beq.n	800891a <__gethex+0x3bc>
 8008888:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800888c:	2b02      	cmp	r3, #2
 800888e:	d015      	beq.n	80088bc <__gethex+0x35e>
 8008890:	2b03      	cmp	r3, #3
 8008892:	d017      	beq.n	80088c4 <__gethex+0x366>
 8008894:	2b01      	cmp	r3, #1
 8008896:	d109      	bne.n	80088ac <__gethex+0x34e>
 8008898:	f01a 0f02 	tst.w	sl, #2
 800889c:	d006      	beq.n	80088ac <__gethex+0x34e>
 800889e:	f8d9 3000 	ldr.w	r3, [r9]
 80088a2:	ea4a 0a03 	orr.w	sl, sl, r3
 80088a6:	f01a 0f01 	tst.w	sl, #1
 80088aa:	d10e      	bne.n	80088ca <__gethex+0x36c>
 80088ac:	f047 0710 	orr.w	r7, r7, #16
 80088b0:	e033      	b.n	800891a <__gethex+0x3bc>
 80088b2:	f04f 0a01 	mov.w	sl, #1
 80088b6:	e7d0      	b.n	800885a <__gethex+0x2fc>
 80088b8:	2701      	movs	r7, #1
 80088ba:	e7e2      	b.n	8008882 <__gethex+0x324>
 80088bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088be:	f1c3 0301 	rsb	r3, r3, #1
 80088c2:	9315      	str	r3, [sp, #84]	; 0x54
 80088c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f0      	beq.n	80088ac <__gethex+0x34e>
 80088ca:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80088ce:	f105 0314 	add.w	r3, r5, #20
 80088d2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80088d6:	eb03 010a 	add.w	r1, r3, sl
 80088da:	f04f 0c00 	mov.w	ip, #0
 80088de:	4618      	mov	r0, r3
 80088e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80088e8:	d01c      	beq.n	8008924 <__gethex+0x3c6>
 80088ea:	3201      	adds	r2, #1
 80088ec:	6002      	str	r2, [r0, #0]
 80088ee:	2f02      	cmp	r7, #2
 80088f0:	f105 0314 	add.w	r3, r5, #20
 80088f4:	d138      	bne.n	8008968 <__gethex+0x40a>
 80088f6:	f8d8 2000 	ldr.w	r2, [r8]
 80088fa:	3a01      	subs	r2, #1
 80088fc:	42b2      	cmp	r2, r6
 80088fe:	d10a      	bne.n	8008916 <__gethex+0x3b8>
 8008900:	1171      	asrs	r1, r6, #5
 8008902:	2201      	movs	r2, #1
 8008904:	f006 061f 	and.w	r6, r6, #31
 8008908:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800890c:	fa02 f606 	lsl.w	r6, r2, r6
 8008910:	421e      	tst	r6, r3
 8008912:	bf18      	it	ne
 8008914:	4617      	movne	r7, r2
 8008916:	f047 0720 	orr.w	r7, r7, #32
 800891a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800891c:	601d      	str	r5, [r3, #0]
 800891e:	9b06      	ldr	r3, [sp, #24]
 8008920:	601c      	str	r4, [r3, #0]
 8008922:	e6a4      	b.n	800866e <__gethex+0x110>
 8008924:	4299      	cmp	r1, r3
 8008926:	f843 cc04 	str.w	ip, [r3, #-4]
 800892a:	d8d8      	bhi.n	80088de <__gethex+0x380>
 800892c:	68ab      	ldr	r3, [r5, #8]
 800892e:	4599      	cmp	r9, r3
 8008930:	db12      	blt.n	8008958 <__gethex+0x3fa>
 8008932:	6869      	ldr	r1, [r5, #4]
 8008934:	9802      	ldr	r0, [sp, #8]
 8008936:	3101      	adds	r1, #1
 8008938:	f000 f917 	bl	8008b6a <_Balloc>
 800893c:	692a      	ldr	r2, [r5, #16]
 800893e:	3202      	adds	r2, #2
 8008940:	f105 010c 	add.w	r1, r5, #12
 8008944:	4683      	mov	fp, r0
 8008946:	0092      	lsls	r2, r2, #2
 8008948:	300c      	adds	r0, #12
 800894a:	f000 f901 	bl	8008b50 <memcpy>
 800894e:	4629      	mov	r1, r5
 8008950:	9802      	ldr	r0, [sp, #8]
 8008952:	f000 f93e 	bl	8008bd2 <_Bfree>
 8008956:	465d      	mov	r5, fp
 8008958:	692b      	ldr	r3, [r5, #16]
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008960:	612a      	str	r2, [r5, #16]
 8008962:	2201      	movs	r2, #1
 8008964:	615a      	str	r2, [r3, #20]
 8008966:	e7c2      	b.n	80088ee <__gethex+0x390>
 8008968:	692a      	ldr	r2, [r5, #16]
 800896a:	454a      	cmp	r2, r9
 800896c:	dd0b      	ble.n	8008986 <__gethex+0x428>
 800896e:	2101      	movs	r1, #1
 8008970:	4628      	mov	r0, r5
 8008972:	f7ff fda5 	bl	80084c0 <rshift>
 8008976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800897a:	3401      	adds	r4, #1
 800897c:	42a3      	cmp	r3, r4
 800897e:	f6ff aed9 	blt.w	8008734 <__gethex+0x1d6>
 8008982:	2701      	movs	r7, #1
 8008984:	e7c7      	b.n	8008916 <__gethex+0x3b8>
 8008986:	f016 061f 	ands.w	r6, r6, #31
 800898a:	d0fa      	beq.n	8008982 <__gethex+0x424>
 800898c:	449a      	add	sl, r3
 800898e:	f1c6 0620 	rsb	r6, r6, #32
 8008992:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008996:	f000 f9ac 	bl	8008cf2 <__hi0bits>
 800899a:	42b0      	cmp	r0, r6
 800899c:	dbe7      	blt.n	800896e <__gethex+0x410>
 800899e:	e7f0      	b.n	8008982 <__gethex+0x424>

080089a0 <L_shift>:
 80089a0:	f1c2 0208 	rsb	r2, r2, #8
 80089a4:	0092      	lsls	r2, r2, #2
 80089a6:	b570      	push	{r4, r5, r6, lr}
 80089a8:	f1c2 0620 	rsb	r6, r2, #32
 80089ac:	6843      	ldr	r3, [r0, #4]
 80089ae:	6804      	ldr	r4, [r0, #0]
 80089b0:	fa03 f506 	lsl.w	r5, r3, r6
 80089b4:	432c      	orrs	r4, r5
 80089b6:	40d3      	lsrs	r3, r2
 80089b8:	6004      	str	r4, [r0, #0]
 80089ba:	f840 3f04 	str.w	r3, [r0, #4]!
 80089be:	4288      	cmp	r0, r1
 80089c0:	d3f4      	bcc.n	80089ac <L_shift+0xc>
 80089c2:	bd70      	pop	{r4, r5, r6, pc}

080089c4 <__match>:
 80089c4:	b530      	push	{r4, r5, lr}
 80089c6:	6803      	ldr	r3, [r0, #0]
 80089c8:	3301      	adds	r3, #1
 80089ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ce:	b914      	cbnz	r4, 80089d6 <__match+0x12>
 80089d0:	6003      	str	r3, [r0, #0]
 80089d2:	2001      	movs	r0, #1
 80089d4:	bd30      	pop	{r4, r5, pc}
 80089d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089da:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80089de:	2d19      	cmp	r5, #25
 80089e0:	bf98      	it	ls
 80089e2:	3220      	addls	r2, #32
 80089e4:	42a2      	cmp	r2, r4
 80089e6:	d0f0      	beq.n	80089ca <__match+0x6>
 80089e8:	2000      	movs	r0, #0
 80089ea:	e7f3      	b.n	80089d4 <__match+0x10>

080089ec <__hexnan>:
 80089ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089f0:	680b      	ldr	r3, [r1, #0]
 80089f2:	6801      	ldr	r1, [r0, #0]
 80089f4:	115f      	asrs	r7, r3, #5
 80089f6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80089fa:	f013 031f 	ands.w	r3, r3, #31
 80089fe:	b087      	sub	sp, #28
 8008a00:	bf18      	it	ne
 8008a02:	3704      	addne	r7, #4
 8008a04:	2500      	movs	r5, #0
 8008a06:	1f3e      	subs	r6, r7, #4
 8008a08:	4682      	mov	sl, r0
 8008a0a:	4690      	mov	r8, r2
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	f847 5c04 	str.w	r5, [r7, #-4]
 8008a12:	46b1      	mov	r9, r6
 8008a14:	4634      	mov	r4, r6
 8008a16:	9502      	str	r5, [sp, #8]
 8008a18:	46ab      	mov	fp, r5
 8008a1a:	784a      	ldrb	r2, [r1, #1]
 8008a1c:	1c4b      	adds	r3, r1, #1
 8008a1e:	9303      	str	r3, [sp, #12]
 8008a20:	b342      	cbz	r2, 8008a74 <__hexnan+0x88>
 8008a22:	4610      	mov	r0, r2
 8008a24:	9105      	str	r1, [sp, #20]
 8008a26:	9204      	str	r2, [sp, #16]
 8008a28:	f7ff fd84 	bl	8008534 <__hexdig_fun>
 8008a2c:	2800      	cmp	r0, #0
 8008a2e:	d143      	bne.n	8008ab8 <__hexnan+0xcc>
 8008a30:	9a04      	ldr	r2, [sp, #16]
 8008a32:	9905      	ldr	r1, [sp, #20]
 8008a34:	2a20      	cmp	r2, #32
 8008a36:	d818      	bhi.n	8008a6a <__hexnan+0x7e>
 8008a38:	9b02      	ldr	r3, [sp, #8]
 8008a3a:	459b      	cmp	fp, r3
 8008a3c:	dd13      	ble.n	8008a66 <__hexnan+0x7a>
 8008a3e:	454c      	cmp	r4, r9
 8008a40:	d206      	bcs.n	8008a50 <__hexnan+0x64>
 8008a42:	2d07      	cmp	r5, #7
 8008a44:	dc04      	bgt.n	8008a50 <__hexnan+0x64>
 8008a46:	462a      	mov	r2, r5
 8008a48:	4649      	mov	r1, r9
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	f7ff ffa8 	bl	80089a0 <L_shift>
 8008a50:	4544      	cmp	r4, r8
 8008a52:	d944      	bls.n	8008ade <__hexnan+0xf2>
 8008a54:	2300      	movs	r3, #0
 8008a56:	f1a4 0904 	sub.w	r9, r4, #4
 8008a5a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008a5e:	f8cd b008 	str.w	fp, [sp, #8]
 8008a62:	464c      	mov	r4, r9
 8008a64:	461d      	mov	r5, r3
 8008a66:	9903      	ldr	r1, [sp, #12]
 8008a68:	e7d7      	b.n	8008a1a <__hexnan+0x2e>
 8008a6a:	2a29      	cmp	r2, #41	; 0x29
 8008a6c:	d14a      	bne.n	8008b04 <__hexnan+0x118>
 8008a6e:	3102      	adds	r1, #2
 8008a70:	f8ca 1000 	str.w	r1, [sl]
 8008a74:	f1bb 0f00 	cmp.w	fp, #0
 8008a78:	d044      	beq.n	8008b04 <__hexnan+0x118>
 8008a7a:	454c      	cmp	r4, r9
 8008a7c:	d206      	bcs.n	8008a8c <__hexnan+0xa0>
 8008a7e:	2d07      	cmp	r5, #7
 8008a80:	dc04      	bgt.n	8008a8c <__hexnan+0xa0>
 8008a82:	462a      	mov	r2, r5
 8008a84:	4649      	mov	r1, r9
 8008a86:	4620      	mov	r0, r4
 8008a88:	f7ff ff8a 	bl	80089a0 <L_shift>
 8008a8c:	4544      	cmp	r4, r8
 8008a8e:	d928      	bls.n	8008ae2 <__hexnan+0xf6>
 8008a90:	4643      	mov	r3, r8
 8008a92:	f854 2b04 	ldr.w	r2, [r4], #4
 8008a96:	f843 2b04 	str.w	r2, [r3], #4
 8008a9a:	42a6      	cmp	r6, r4
 8008a9c:	d2f9      	bcs.n	8008a92 <__hexnan+0xa6>
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f843 2b04 	str.w	r2, [r3], #4
 8008aa4:	429e      	cmp	r6, r3
 8008aa6:	d2fb      	bcs.n	8008aa0 <__hexnan+0xb4>
 8008aa8:	6833      	ldr	r3, [r6, #0]
 8008aaa:	b91b      	cbnz	r3, 8008ab4 <__hexnan+0xc8>
 8008aac:	4546      	cmp	r6, r8
 8008aae:	d127      	bne.n	8008b00 <__hexnan+0x114>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	6033      	str	r3, [r6, #0]
 8008ab4:	2005      	movs	r0, #5
 8008ab6:	e026      	b.n	8008b06 <__hexnan+0x11a>
 8008ab8:	3501      	adds	r5, #1
 8008aba:	2d08      	cmp	r5, #8
 8008abc:	f10b 0b01 	add.w	fp, fp, #1
 8008ac0:	dd06      	ble.n	8008ad0 <__hexnan+0xe4>
 8008ac2:	4544      	cmp	r4, r8
 8008ac4:	d9cf      	bls.n	8008a66 <__hexnan+0x7a>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008acc:	2501      	movs	r5, #1
 8008ace:	3c04      	subs	r4, #4
 8008ad0:	6822      	ldr	r2, [r4, #0]
 8008ad2:	f000 000f 	and.w	r0, r0, #15
 8008ad6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008ada:	6020      	str	r0, [r4, #0]
 8008adc:	e7c3      	b.n	8008a66 <__hexnan+0x7a>
 8008ade:	2508      	movs	r5, #8
 8008ae0:	e7c1      	b.n	8008a66 <__hexnan+0x7a>
 8008ae2:	9b01      	ldr	r3, [sp, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0df      	beq.n	8008aa8 <__hexnan+0xbc>
 8008ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8008aec:	f1c3 0320 	rsb	r3, r3, #32
 8008af0:	fa22 f303 	lsr.w	r3, r2, r3
 8008af4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008af8:	401a      	ands	r2, r3
 8008afa:	f847 2c04 	str.w	r2, [r7, #-4]
 8008afe:	e7d3      	b.n	8008aa8 <__hexnan+0xbc>
 8008b00:	3e04      	subs	r6, #4
 8008b02:	e7d1      	b.n	8008aa8 <__hexnan+0xbc>
 8008b04:	2004      	movs	r0, #4
 8008b06:	b007      	add	sp, #28
 8008b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b0c <__localeconv_l>:
 8008b0c:	30f0      	adds	r0, #240	; 0xf0
 8008b0e:	4770      	bx	lr

08008b10 <_localeconv_r>:
 8008b10:	4b04      	ldr	r3, [pc, #16]	; (8008b24 <_localeconv_r+0x14>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6a18      	ldr	r0, [r3, #32]
 8008b16:	4b04      	ldr	r3, [pc, #16]	; (8008b28 <_localeconv_r+0x18>)
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	bf08      	it	eq
 8008b1c:	4618      	moveq	r0, r3
 8008b1e:	30f0      	adds	r0, #240	; 0xf0
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	20000034 	.word	0x20000034
 8008b28:	20000098 	.word	0x20000098

08008b2c <__ascii_mbtowc>:
 8008b2c:	b082      	sub	sp, #8
 8008b2e:	b901      	cbnz	r1, 8008b32 <__ascii_mbtowc+0x6>
 8008b30:	a901      	add	r1, sp, #4
 8008b32:	b142      	cbz	r2, 8008b46 <__ascii_mbtowc+0x1a>
 8008b34:	b14b      	cbz	r3, 8008b4a <__ascii_mbtowc+0x1e>
 8008b36:	7813      	ldrb	r3, [r2, #0]
 8008b38:	600b      	str	r3, [r1, #0]
 8008b3a:	7812      	ldrb	r2, [r2, #0]
 8008b3c:	1c10      	adds	r0, r2, #0
 8008b3e:	bf18      	it	ne
 8008b40:	2001      	movne	r0, #1
 8008b42:	b002      	add	sp, #8
 8008b44:	4770      	bx	lr
 8008b46:	4610      	mov	r0, r2
 8008b48:	e7fb      	b.n	8008b42 <__ascii_mbtowc+0x16>
 8008b4a:	f06f 0001 	mvn.w	r0, #1
 8008b4e:	e7f8      	b.n	8008b42 <__ascii_mbtowc+0x16>

08008b50 <memcpy>:
 8008b50:	b510      	push	{r4, lr}
 8008b52:	1e43      	subs	r3, r0, #1
 8008b54:	440a      	add	r2, r1
 8008b56:	4291      	cmp	r1, r2
 8008b58:	d100      	bne.n	8008b5c <memcpy+0xc>
 8008b5a:	bd10      	pop	{r4, pc}
 8008b5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b64:	e7f7      	b.n	8008b56 <memcpy+0x6>

08008b66 <__malloc_lock>:
 8008b66:	4770      	bx	lr

08008b68 <__malloc_unlock>:
 8008b68:	4770      	bx	lr

08008b6a <_Balloc>:
 8008b6a:	b570      	push	{r4, r5, r6, lr}
 8008b6c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008b6e:	4604      	mov	r4, r0
 8008b70:	460e      	mov	r6, r1
 8008b72:	b93d      	cbnz	r5, 8008b84 <_Balloc+0x1a>
 8008b74:	2010      	movs	r0, #16
 8008b76:	f7fd fac7 	bl	8006108 <malloc>
 8008b7a:	6260      	str	r0, [r4, #36]	; 0x24
 8008b7c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008b80:	6005      	str	r5, [r0, #0]
 8008b82:	60c5      	str	r5, [r0, #12]
 8008b84:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008b86:	68eb      	ldr	r3, [r5, #12]
 8008b88:	b183      	cbz	r3, 8008bac <_Balloc+0x42>
 8008b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b92:	b9b8      	cbnz	r0, 8008bc4 <_Balloc+0x5a>
 8008b94:	2101      	movs	r1, #1
 8008b96:	fa01 f506 	lsl.w	r5, r1, r6
 8008b9a:	1d6a      	adds	r2, r5, #5
 8008b9c:	0092      	lsls	r2, r2, #2
 8008b9e:	4620      	mov	r0, r4
 8008ba0:	f000 fbe1 	bl	8009366 <_calloc_r>
 8008ba4:	b160      	cbz	r0, 8008bc0 <_Balloc+0x56>
 8008ba6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008baa:	e00e      	b.n	8008bca <_Balloc+0x60>
 8008bac:	2221      	movs	r2, #33	; 0x21
 8008bae:	2104      	movs	r1, #4
 8008bb0:	4620      	mov	r0, r4
 8008bb2:	f000 fbd8 	bl	8009366 <_calloc_r>
 8008bb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008bb8:	60e8      	str	r0, [r5, #12]
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1e4      	bne.n	8008b8a <_Balloc+0x20>
 8008bc0:	2000      	movs	r0, #0
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	6802      	ldr	r2, [r0, #0]
 8008bc6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bd0:	e7f7      	b.n	8008bc2 <_Balloc+0x58>

08008bd2 <_Bfree>:
 8008bd2:	b570      	push	{r4, r5, r6, lr}
 8008bd4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008bd6:	4606      	mov	r6, r0
 8008bd8:	460d      	mov	r5, r1
 8008bda:	b93c      	cbnz	r4, 8008bec <_Bfree+0x1a>
 8008bdc:	2010      	movs	r0, #16
 8008bde:	f7fd fa93 	bl	8006108 <malloc>
 8008be2:	6270      	str	r0, [r6, #36]	; 0x24
 8008be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008be8:	6004      	str	r4, [r0, #0]
 8008bea:	60c4      	str	r4, [r0, #12]
 8008bec:	b13d      	cbz	r5, 8008bfe <_Bfree+0x2c>
 8008bee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008bf0:	686a      	ldr	r2, [r5, #4]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008bf8:	6029      	str	r1, [r5, #0]
 8008bfa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008bfe:	bd70      	pop	{r4, r5, r6, pc}

08008c00 <__multadd>:
 8008c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c04:	690d      	ldr	r5, [r1, #16]
 8008c06:	461f      	mov	r7, r3
 8008c08:	4606      	mov	r6, r0
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	f101 0c14 	add.w	ip, r1, #20
 8008c10:	2300      	movs	r3, #0
 8008c12:	f8dc 0000 	ldr.w	r0, [ip]
 8008c16:	b281      	uxth	r1, r0
 8008c18:	fb02 7101 	mla	r1, r2, r1, r7
 8008c1c:	0c0f      	lsrs	r7, r1, #16
 8008c1e:	0c00      	lsrs	r0, r0, #16
 8008c20:	fb02 7000 	mla	r0, r2, r0, r7
 8008c24:	b289      	uxth	r1, r1
 8008c26:	3301      	adds	r3, #1
 8008c28:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008c2c:	429d      	cmp	r5, r3
 8008c2e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008c32:	f84c 1b04 	str.w	r1, [ip], #4
 8008c36:	dcec      	bgt.n	8008c12 <__multadd+0x12>
 8008c38:	b1d7      	cbz	r7, 8008c70 <__multadd+0x70>
 8008c3a:	68a3      	ldr	r3, [r4, #8]
 8008c3c:	42ab      	cmp	r3, r5
 8008c3e:	dc12      	bgt.n	8008c66 <__multadd+0x66>
 8008c40:	6861      	ldr	r1, [r4, #4]
 8008c42:	4630      	mov	r0, r6
 8008c44:	3101      	adds	r1, #1
 8008c46:	f7ff ff90 	bl	8008b6a <_Balloc>
 8008c4a:	6922      	ldr	r2, [r4, #16]
 8008c4c:	3202      	adds	r2, #2
 8008c4e:	f104 010c 	add.w	r1, r4, #12
 8008c52:	4680      	mov	r8, r0
 8008c54:	0092      	lsls	r2, r2, #2
 8008c56:	300c      	adds	r0, #12
 8008c58:	f7ff ff7a 	bl	8008b50 <memcpy>
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f7ff ffb7 	bl	8008bd2 <_Bfree>
 8008c64:	4644      	mov	r4, r8
 8008c66:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008c6a:	3501      	adds	r5, #1
 8008c6c:	615f      	str	r7, [r3, #20]
 8008c6e:	6125      	str	r5, [r4, #16]
 8008c70:	4620      	mov	r0, r4
 8008c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008c76 <__s2b>:
 8008c76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	4615      	mov	r5, r2
 8008c7e:	461f      	mov	r7, r3
 8008c80:	2209      	movs	r2, #9
 8008c82:	3308      	adds	r3, #8
 8008c84:	4606      	mov	r6, r0
 8008c86:	fb93 f3f2 	sdiv	r3, r3, r2
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	db20      	blt.n	8008cd4 <__s2b+0x5e>
 8008c92:	4630      	mov	r0, r6
 8008c94:	f7ff ff69 	bl	8008b6a <_Balloc>
 8008c98:	9b08      	ldr	r3, [sp, #32]
 8008c9a:	6143      	str	r3, [r0, #20]
 8008c9c:	2d09      	cmp	r5, #9
 8008c9e:	f04f 0301 	mov.w	r3, #1
 8008ca2:	6103      	str	r3, [r0, #16]
 8008ca4:	dd19      	ble.n	8008cda <__s2b+0x64>
 8008ca6:	f104 0809 	add.w	r8, r4, #9
 8008caa:	46c1      	mov	r9, r8
 8008cac:	442c      	add	r4, r5
 8008cae:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	3b30      	subs	r3, #48	; 0x30
 8008cb6:	220a      	movs	r2, #10
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff ffa1 	bl	8008c00 <__multadd>
 8008cbe:	45a1      	cmp	r9, r4
 8008cc0:	d1f5      	bne.n	8008cae <__s2b+0x38>
 8008cc2:	eb08 0405 	add.w	r4, r8, r5
 8008cc6:	3c08      	subs	r4, #8
 8008cc8:	1b2d      	subs	r5, r5, r4
 8008cca:	1963      	adds	r3, r4, r5
 8008ccc:	42bb      	cmp	r3, r7
 8008cce:	db07      	blt.n	8008ce0 <__s2b+0x6a>
 8008cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cd4:	0052      	lsls	r2, r2, #1
 8008cd6:	3101      	adds	r1, #1
 8008cd8:	e7d9      	b.n	8008c8e <__s2b+0x18>
 8008cda:	340a      	adds	r4, #10
 8008cdc:	2509      	movs	r5, #9
 8008cde:	e7f3      	b.n	8008cc8 <__s2b+0x52>
 8008ce0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ce4:	4601      	mov	r1, r0
 8008ce6:	3b30      	subs	r3, #48	; 0x30
 8008ce8:	220a      	movs	r2, #10
 8008cea:	4630      	mov	r0, r6
 8008cec:	f7ff ff88 	bl	8008c00 <__multadd>
 8008cf0:	e7eb      	b.n	8008cca <__s2b+0x54>

08008cf2 <__hi0bits>:
 8008cf2:	0c02      	lsrs	r2, r0, #16
 8008cf4:	0412      	lsls	r2, r2, #16
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	b9b2      	cbnz	r2, 8008d28 <__hi0bits+0x36>
 8008cfa:	0403      	lsls	r3, r0, #16
 8008cfc:	2010      	movs	r0, #16
 8008cfe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008d02:	bf04      	itt	eq
 8008d04:	021b      	lsleq	r3, r3, #8
 8008d06:	3008      	addeq	r0, #8
 8008d08:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008d0c:	bf04      	itt	eq
 8008d0e:	011b      	lsleq	r3, r3, #4
 8008d10:	3004      	addeq	r0, #4
 8008d12:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008d16:	bf04      	itt	eq
 8008d18:	009b      	lsleq	r3, r3, #2
 8008d1a:	3002      	addeq	r0, #2
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	db06      	blt.n	8008d2e <__hi0bits+0x3c>
 8008d20:	005b      	lsls	r3, r3, #1
 8008d22:	d503      	bpl.n	8008d2c <__hi0bits+0x3a>
 8008d24:	3001      	adds	r0, #1
 8008d26:	4770      	bx	lr
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e7e8      	b.n	8008cfe <__hi0bits+0xc>
 8008d2c:	2020      	movs	r0, #32
 8008d2e:	4770      	bx	lr

08008d30 <__lo0bits>:
 8008d30:	6803      	ldr	r3, [r0, #0]
 8008d32:	f013 0207 	ands.w	r2, r3, #7
 8008d36:	4601      	mov	r1, r0
 8008d38:	d00b      	beq.n	8008d52 <__lo0bits+0x22>
 8008d3a:	07da      	lsls	r2, r3, #31
 8008d3c:	d423      	bmi.n	8008d86 <__lo0bits+0x56>
 8008d3e:	0798      	lsls	r0, r3, #30
 8008d40:	bf49      	itett	mi
 8008d42:	085b      	lsrmi	r3, r3, #1
 8008d44:	089b      	lsrpl	r3, r3, #2
 8008d46:	2001      	movmi	r0, #1
 8008d48:	600b      	strmi	r3, [r1, #0]
 8008d4a:	bf5c      	itt	pl
 8008d4c:	600b      	strpl	r3, [r1, #0]
 8008d4e:	2002      	movpl	r0, #2
 8008d50:	4770      	bx	lr
 8008d52:	b298      	uxth	r0, r3
 8008d54:	b9a8      	cbnz	r0, 8008d82 <__lo0bits+0x52>
 8008d56:	0c1b      	lsrs	r3, r3, #16
 8008d58:	2010      	movs	r0, #16
 8008d5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008d5e:	bf04      	itt	eq
 8008d60:	0a1b      	lsreq	r3, r3, #8
 8008d62:	3008      	addeq	r0, #8
 8008d64:	071a      	lsls	r2, r3, #28
 8008d66:	bf04      	itt	eq
 8008d68:	091b      	lsreq	r3, r3, #4
 8008d6a:	3004      	addeq	r0, #4
 8008d6c:	079a      	lsls	r2, r3, #30
 8008d6e:	bf04      	itt	eq
 8008d70:	089b      	lsreq	r3, r3, #2
 8008d72:	3002      	addeq	r0, #2
 8008d74:	07da      	lsls	r2, r3, #31
 8008d76:	d402      	bmi.n	8008d7e <__lo0bits+0x4e>
 8008d78:	085b      	lsrs	r3, r3, #1
 8008d7a:	d006      	beq.n	8008d8a <__lo0bits+0x5a>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	600b      	str	r3, [r1, #0]
 8008d80:	4770      	bx	lr
 8008d82:	4610      	mov	r0, r2
 8008d84:	e7e9      	b.n	8008d5a <__lo0bits+0x2a>
 8008d86:	2000      	movs	r0, #0
 8008d88:	4770      	bx	lr
 8008d8a:	2020      	movs	r0, #32
 8008d8c:	4770      	bx	lr

08008d8e <__i2b>:
 8008d8e:	b510      	push	{r4, lr}
 8008d90:	460c      	mov	r4, r1
 8008d92:	2101      	movs	r1, #1
 8008d94:	f7ff fee9 	bl	8008b6a <_Balloc>
 8008d98:	2201      	movs	r2, #1
 8008d9a:	6144      	str	r4, [r0, #20]
 8008d9c:	6102      	str	r2, [r0, #16]
 8008d9e:	bd10      	pop	{r4, pc}

08008da0 <__multiply>:
 8008da0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da4:	4614      	mov	r4, r2
 8008da6:	690a      	ldr	r2, [r1, #16]
 8008da8:	6923      	ldr	r3, [r4, #16]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	bfb8      	it	lt
 8008dae:	460b      	movlt	r3, r1
 8008db0:	4688      	mov	r8, r1
 8008db2:	bfbc      	itt	lt
 8008db4:	46a0      	movlt	r8, r4
 8008db6:	461c      	movlt	r4, r3
 8008db8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008dbc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008dc0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008dc8:	eb07 0609 	add.w	r6, r7, r9
 8008dcc:	42b3      	cmp	r3, r6
 8008dce:	bfb8      	it	lt
 8008dd0:	3101      	addlt	r1, #1
 8008dd2:	f7ff feca 	bl	8008b6a <_Balloc>
 8008dd6:	f100 0514 	add.w	r5, r0, #20
 8008dda:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008dde:	462b      	mov	r3, r5
 8008de0:	2200      	movs	r2, #0
 8008de2:	4573      	cmp	r3, lr
 8008de4:	d316      	bcc.n	8008e14 <__multiply+0x74>
 8008de6:	f104 0214 	add.w	r2, r4, #20
 8008dea:	f108 0114 	add.w	r1, r8, #20
 8008dee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008df2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	9b00      	ldr	r3, [sp, #0]
 8008dfa:	9201      	str	r2, [sp, #4]
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d80c      	bhi.n	8008e1a <__multiply+0x7a>
 8008e00:	2e00      	cmp	r6, #0
 8008e02:	dd03      	ble.n	8008e0c <__multiply+0x6c>
 8008e04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d05d      	beq.n	8008ec8 <__multiply+0x128>
 8008e0c:	6106      	str	r6, [r0, #16]
 8008e0e:	b003      	add	sp, #12
 8008e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e14:	f843 2b04 	str.w	r2, [r3], #4
 8008e18:	e7e3      	b.n	8008de2 <__multiply+0x42>
 8008e1a:	f8b2 b000 	ldrh.w	fp, [r2]
 8008e1e:	f1bb 0f00 	cmp.w	fp, #0
 8008e22:	d023      	beq.n	8008e6c <__multiply+0xcc>
 8008e24:	4689      	mov	r9, r1
 8008e26:	46ac      	mov	ip, r5
 8008e28:	f04f 0800 	mov.w	r8, #0
 8008e2c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008e30:	f8dc a000 	ldr.w	sl, [ip]
 8008e34:	b2a3      	uxth	r3, r4
 8008e36:	fa1f fa8a 	uxth.w	sl, sl
 8008e3a:	fb0b a303 	mla	r3, fp, r3, sl
 8008e3e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008e42:	f8dc 4000 	ldr.w	r4, [ip]
 8008e46:	4443      	add	r3, r8
 8008e48:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008e4c:	fb0b 840a 	mla	r4, fp, sl, r8
 8008e50:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008e54:	46e2      	mov	sl, ip
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e5c:	454f      	cmp	r7, r9
 8008e5e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008e62:	f84a 3b04 	str.w	r3, [sl], #4
 8008e66:	d82b      	bhi.n	8008ec0 <__multiply+0x120>
 8008e68:	f8cc 8004 	str.w	r8, [ip, #4]
 8008e6c:	9b01      	ldr	r3, [sp, #4]
 8008e6e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008e72:	3204      	adds	r2, #4
 8008e74:	f1ba 0f00 	cmp.w	sl, #0
 8008e78:	d020      	beq.n	8008ebc <__multiply+0x11c>
 8008e7a:	682b      	ldr	r3, [r5, #0]
 8008e7c:	4689      	mov	r9, r1
 8008e7e:	46a8      	mov	r8, r5
 8008e80:	f04f 0b00 	mov.w	fp, #0
 8008e84:	f8b9 c000 	ldrh.w	ip, [r9]
 8008e88:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008e8c:	fb0a 440c 	mla	r4, sl, ip, r4
 8008e90:	445c      	add	r4, fp
 8008e92:	46c4      	mov	ip, r8
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008e9a:	f84c 3b04 	str.w	r3, [ip], #4
 8008e9e:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ea2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008ea6:	0c1b      	lsrs	r3, r3, #16
 8008ea8:	fb0a b303 	mla	r3, sl, r3, fp
 8008eac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008eb0:	454f      	cmp	r7, r9
 8008eb2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008eb6:	d805      	bhi.n	8008ec4 <__multiply+0x124>
 8008eb8:	f8c8 3004 	str.w	r3, [r8, #4]
 8008ebc:	3504      	adds	r5, #4
 8008ebe:	e79b      	b.n	8008df8 <__multiply+0x58>
 8008ec0:	46d4      	mov	ip, sl
 8008ec2:	e7b3      	b.n	8008e2c <__multiply+0x8c>
 8008ec4:	46e0      	mov	r8, ip
 8008ec6:	e7dd      	b.n	8008e84 <__multiply+0xe4>
 8008ec8:	3e01      	subs	r6, #1
 8008eca:	e799      	b.n	8008e00 <__multiply+0x60>

08008ecc <__pow5mult>:
 8008ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed0:	4615      	mov	r5, r2
 8008ed2:	f012 0203 	ands.w	r2, r2, #3
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	460f      	mov	r7, r1
 8008eda:	d007      	beq.n	8008eec <__pow5mult+0x20>
 8008edc:	3a01      	subs	r2, #1
 8008ede:	4c21      	ldr	r4, [pc, #132]	; (8008f64 <__pow5mult+0x98>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ee6:	f7ff fe8b 	bl	8008c00 <__multadd>
 8008eea:	4607      	mov	r7, r0
 8008eec:	10ad      	asrs	r5, r5, #2
 8008eee:	d035      	beq.n	8008f5c <__pow5mult+0x90>
 8008ef0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ef2:	b93c      	cbnz	r4, 8008f04 <__pow5mult+0x38>
 8008ef4:	2010      	movs	r0, #16
 8008ef6:	f7fd f907 	bl	8006108 <malloc>
 8008efa:	6270      	str	r0, [r6, #36]	; 0x24
 8008efc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f00:	6004      	str	r4, [r0, #0]
 8008f02:	60c4      	str	r4, [r0, #12]
 8008f04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008f08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008f0c:	b94c      	cbnz	r4, 8008f22 <__pow5mult+0x56>
 8008f0e:	f240 2171 	movw	r1, #625	; 0x271
 8008f12:	4630      	mov	r0, r6
 8008f14:	f7ff ff3b 	bl	8008d8e <__i2b>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008f1e:	4604      	mov	r4, r0
 8008f20:	6003      	str	r3, [r0, #0]
 8008f22:	f04f 0800 	mov.w	r8, #0
 8008f26:	07eb      	lsls	r3, r5, #31
 8008f28:	d50a      	bpl.n	8008f40 <__pow5mult+0x74>
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	4622      	mov	r2, r4
 8008f2e:	4630      	mov	r0, r6
 8008f30:	f7ff ff36 	bl	8008da0 <__multiply>
 8008f34:	4639      	mov	r1, r7
 8008f36:	4681      	mov	r9, r0
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f7ff fe4a 	bl	8008bd2 <_Bfree>
 8008f3e:	464f      	mov	r7, r9
 8008f40:	106d      	asrs	r5, r5, #1
 8008f42:	d00b      	beq.n	8008f5c <__pow5mult+0x90>
 8008f44:	6820      	ldr	r0, [r4, #0]
 8008f46:	b938      	cbnz	r0, 8008f58 <__pow5mult+0x8c>
 8008f48:	4622      	mov	r2, r4
 8008f4a:	4621      	mov	r1, r4
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7ff ff27 	bl	8008da0 <__multiply>
 8008f52:	6020      	str	r0, [r4, #0]
 8008f54:	f8c0 8000 	str.w	r8, [r0]
 8008f58:	4604      	mov	r4, r0
 8008f5a:	e7e4      	b.n	8008f26 <__pow5mult+0x5a>
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f62:	bf00      	nop
 8008f64:	0800ae38 	.word	0x0800ae38

08008f68 <__lshift>:
 8008f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008f72:	6923      	ldr	r3, [r4, #16]
 8008f74:	6849      	ldr	r1, [r1, #4]
 8008f76:	eb0a 0903 	add.w	r9, sl, r3
 8008f7a:	68a3      	ldr	r3, [r4, #8]
 8008f7c:	4607      	mov	r7, r0
 8008f7e:	4616      	mov	r6, r2
 8008f80:	f109 0501 	add.w	r5, r9, #1
 8008f84:	42ab      	cmp	r3, r5
 8008f86:	db32      	blt.n	8008fee <__lshift+0x86>
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff fdee 	bl	8008b6a <_Balloc>
 8008f8e:	2300      	movs	r3, #0
 8008f90:	4680      	mov	r8, r0
 8008f92:	f100 0114 	add.w	r1, r0, #20
 8008f96:	461a      	mov	r2, r3
 8008f98:	4553      	cmp	r3, sl
 8008f9a:	db2b      	blt.n	8008ff4 <__lshift+0x8c>
 8008f9c:	6920      	ldr	r0, [r4, #16]
 8008f9e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008fa2:	f104 0314 	add.w	r3, r4, #20
 8008fa6:	f016 021f 	ands.w	r2, r6, #31
 8008faa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008fae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008fb2:	d025      	beq.n	8009000 <__lshift+0x98>
 8008fb4:	f1c2 0e20 	rsb	lr, r2, #32
 8008fb8:	2000      	movs	r0, #0
 8008fba:	681e      	ldr	r6, [r3, #0]
 8008fbc:	468a      	mov	sl, r1
 8008fbe:	4096      	lsls	r6, r2
 8008fc0:	4330      	orrs	r0, r6
 8008fc2:	f84a 0b04 	str.w	r0, [sl], #4
 8008fc6:	f853 0b04 	ldr.w	r0, [r3], #4
 8008fca:	459c      	cmp	ip, r3
 8008fcc:	fa20 f00e 	lsr.w	r0, r0, lr
 8008fd0:	d814      	bhi.n	8008ffc <__lshift+0x94>
 8008fd2:	6048      	str	r0, [r1, #4]
 8008fd4:	b108      	cbz	r0, 8008fda <__lshift+0x72>
 8008fd6:	f109 0502 	add.w	r5, r9, #2
 8008fda:	3d01      	subs	r5, #1
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f8c8 5010 	str.w	r5, [r8, #16]
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	f7ff fdf5 	bl	8008bd2 <_Bfree>
 8008fe8:	4640      	mov	r0, r8
 8008fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fee:	3101      	adds	r1, #1
 8008ff0:	005b      	lsls	r3, r3, #1
 8008ff2:	e7c7      	b.n	8008f84 <__lshift+0x1c>
 8008ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	e7cd      	b.n	8008f98 <__lshift+0x30>
 8008ffc:	4651      	mov	r1, sl
 8008ffe:	e7dc      	b.n	8008fba <__lshift+0x52>
 8009000:	3904      	subs	r1, #4
 8009002:	f853 2b04 	ldr.w	r2, [r3], #4
 8009006:	f841 2f04 	str.w	r2, [r1, #4]!
 800900a:	459c      	cmp	ip, r3
 800900c:	d8f9      	bhi.n	8009002 <__lshift+0x9a>
 800900e:	e7e4      	b.n	8008fda <__lshift+0x72>

08009010 <__mcmp>:
 8009010:	6903      	ldr	r3, [r0, #16]
 8009012:	690a      	ldr	r2, [r1, #16]
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	b530      	push	{r4, r5, lr}
 8009018:	d10c      	bne.n	8009034 <__mcmp+0x24>
 800901a:	0092      	lsls	r2, r2, #2
 800901c:	3014      	adds	r0, #20
 800901e:	3114      	adds	r1, #20
 8009020:	1884      	adds	r4, r0, r2
 8009022:	4411      	add	r1, r2
 8009024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800902c:	4295      	cmp	r5, r2
 800902e:	d003      	beq.n	8009038 <__mcmp+0x28>
 8009030:	d305      	bcc.n	800903e <__mcmp+0x2e>
 8009032:	2301      	movs	r3, #1
 8009034:	4618      	mov	r0, r3
 8009036:	bd30      	pop	{r4, r5, pc}
 8009038:	42a0      	cmp	r0, r4
 800903a:	d3f3      	bcc.n	8009024 <__mcmp+0x14>
 800903c:	e7fa      	b.n	8009034 <__mcmp+0x24>
 800903e:	f04f 33ff 	mov.w	r3, #4294967295
 8009042:	e7f7      	b.n	8009034 <__mcmp+0x24>

08009044 <__mdiff>:
 8009044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009048:	460d      	mov	r5, r1
 800904a:	4607      	mov	r7, r0
 800904c:	4611      	mov	r1, r2
 800904e:	4628      	mov	r0, r5
 8009050:	4614      	mov	r4, r2
 8009052:	f7ff ffdd 	bl	8009010 <__mcmp>
 8009056:	1e06      	subs	r6, r0, #0
 8009058:	d108      	bne.n	800906c <__mdiff+0x28>
 800905a:	4631      	mov	r1, r6
 800905c:	4638      	mov	r0, r7
 800905e:	f7ff fd84 	bl	8008b6a <_Balloc>
 8009062:	2301      	movs	r3, #1
 8009064:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906c:	bfa4      	itt	ge
 800906e:	4623      	movge	r3, r4
 8009070:	462c      	movge	r4, r5
 8009072:	4638      	mov	r0, r7
 8009074:	6861      	ldr	r1, [r4, #4]
 8009076:	bfa6      	itte	ge
 8009078:	461d      	movge	r5, r3
 800907a:	2600      	movge	r6, #0
 800907c:	2601      	movlt	r6, #1
 800907e:	f7ff fd74 	bl	8008b6a <_Balloc>
 8009082:	692b      	ldr	r3, [r5, #16]
 8009084:	60c6      	str	r6, [r0, #12]
 8009086:	6926      	ldr	r6, [r4, #16]
 8009088:	f105 0914 	add.w	r9, r5, #20
 800908c:	f104 0214 	add.w	r2, r4, #20
 8009090:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009094:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009098:	f100 0514 	add.w	r5, r0, #20
 800909c:	f04f 0e00 	mov.w	lr, #0
 80090a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80090a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80090a8:	fa1e f18a 	uxtah	r1, lr, sl
 80090ac:	b2a3      	uxth	r3, r4
 80090ae:	1ac9      	subs	r1, r1, r3
 80090b0:	0c23      	lsrs	r3, r4, #16
 80090b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80090b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80090ba:	b289      	uxth	r1, r1
 80090bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80090c0:	45c8      	cmp	r8, r9
 80090c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80090c6:	4694      	mov	ip, r2
 80090c8:	f845 3b04 	str.w	r3, [r5], #4
 80090cc:	d8e8      	bhi.n	80090a0 <__mdiff+0x5c>
 80090ce:	45bc      	cmp	ip, r7
 80090d0:	d304      	bcc.n	80090dc <__mdiff+0x98>
 80090d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80090d6:	b183      	cbz	r3, 80090fa <__mdiff+0xb6>
 80090d8:	6106      	str	r6, [r0, #16]
 80090da:	e7c5      	b.n	8009068 <__mdiff+0x24>
 80090dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80090e0:	fa1e f381 	uxtah	r3, lr, r1
 80090e4:	141a      	asrs	r2, r3, #16
 80090e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80090f4:	f845 3b04 	str.w	r3, [r5], #4
 80090f8:	e7e9      	b.n	80090ce <__mdiff+0x8a>
 80090fa:	3e01      	subs	r6, #1
 80090fc:	e7e9      	b.n	80090d2 <__mdiff+0x8e>
	...

08009100 <__ulp>:
 8009100:	4b12      	ldr	r3, [pc, #72]	; (800914c <__ulp+0x4c>)
 8009102:	ee10 2a90 	vmov	r2, s1
 8009106:	401a      	ands	r2, r3
 8009108:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800910c:	2b00      	cmp	r3, #0
 800910e:	dd04      	ble.n	800911a <__ulp+0x1a>
 8009110:	2000      	movs	r0, #0
 8009112:	4619      	mov	r1, r3
 8009114:	ec41 0b10 	vmov	d0, r0, r1
 8009118:	4770      	bx	lr
 800911a:	425b      	negs	r3, r3
 800911c:	151b      	asrs	r3, r3, #20
 800911e:	2b13      	cmp	r3, #19
 8009120:	f04f 0000 	mov.w	r0, #0
 8009124:	f04f 0100 	mov.w	r1, #0
 8009128:	dc04      	bgt.n	8009134 <__ulp+0x34>
 800912a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800912e:	fa42 f103 	asr.w	r1, r2, r3
 8009132:	e7ef      	b.n	8009114 <__ulp+0x14>
 8009134:	3b14      	subs	r3, #20
 8009136:	2b1e      	cmp	r3, #30
 8009138:	f04f 0201 	mov.w	r2, #1
 800913c:	bfda      	itte	le
 800913e:	f1c3 031f 	rsble	r3, r3, #31
 8009142:	fa02 f303 	lslle.w	r3, r2, r3
 8009146:	4613      	movgt	r3, r2
 8009148:	4618      	mov	r0, r3
 800914a:	e7e3      	b.n	8009114 <__ulp+0x14>
 800914c:	7ff00000 	.word	0x7ff00000

08009150 <__b2d>:
 8009150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009152:	6905      	ldr	r5, [r0, #16]
 8009154:	f100 0714 	add.w	r7, r0, #20
 8009158:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800915c:	1f2e      	subs	r6, r5, #4
 800915e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009162:	4620      	mov	r0, r4
 8009164:	f7ff fdc5 	bl	8008cf2 <__hi0bits>
 8009168:	f1c0 0320 	rsb	r3, r0, #32
 800916c:	280a      	cmp	r0, #10
 800916e:	600b      	str	r3, [r1, #0]
 8009170:	f8df c074 	ldr.w	ip, [pc, #116]	; 80091e8 <__b2d+0x98>
 8009174:	dc14      	bgt.n	80091a0 <__b2d+0x50>
 8009176:	f1c0 0e0b 	rsb	lr, r0, #11
 800917a:	fa24 f10e 	lsr.w	r1, r4, lr
 800917e:	42b7      	cmp	r7, r6
 8009180:	ea41 030c 	orr.w	r3, r1, ip
 8009184:	bf34      	ite	cc
 8009186:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800918a:	2100      	movcs	r1, #0
 800918c:	3015      	adds	r0, #21
 800918e:	fa04 f000 	lsl.w	r0, r4, r0
 8009192:	fa21 f10e 	lsr.w	r1, r1, lr
 8009196:	ea40 0201 	orr.w	r2, r0, r1
 800919a:	ec43 2b10 	vmov	d0, r2, r3
 800919e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091a0:	42b7      	cmp	r7, r6
 80091a2:	bf3a      	itte	cc
 80091a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80091a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80091ac:	2100      	movcs	r1, #0
 80091ae:	380b      	subs	r0, #11
 80091b0:	d015      	beq.n	80091de <__b2d+0x8e>
 80091b2:	4084      	lsls	r4, r0
 80091b4:	f1c0 0520 	rsb	r5, r0, #32
 80091b8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80091bc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80091c0:	42be      	cmp	r6, r7
 80091c2:	fa21 fc05 	lsr.w	ip, r1, r5
 80091c6:	ea44 030c 	orr.w	r3, r4, ip
 80091ca:	bf8c      	ite	hi
 80091cc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80091d0:	2400      	movls	r4, #0
 80091d2:	fa01 f000 	lsl.w	r0, r1, r0
 80091d6:	40ec      	lsrs	r4, r5
 80091d8:	ea40 0204 	orr.w	r2, r0, r4
 80091dc:	e7dd      	b.n	800919a <__b2d+0x4a>
 80091de:	ea44 030c 	orr.w	r3, r4, ip
 80091e2:	460a      	mov	r2, r1
 80091e4:	e7d9      	b.n	800919a <__b2d+0x4a>
 80091e6:	bf00      	nop
 80091e8:	3ff00000 	.word	0x3ff00000

080091ec <__d2b>:
 80091ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80091f0:	460e      	mov	r6, r1
 80091f2:	2101      	movs	r1, #1
 80091f4:	ec59 8b10 	vmov	r8, r9, d0
 80091f8:	4615      	mov	r5, r2
 80091fa:	f7ff fcb6 	bl	8008b6a <_Balloc>
 80091fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009202:	4607      	mov	r7, r0
 8009204:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009208:	bb34      	cbnz	r4, 8009258 <__d2b+0x6c>
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	f1b8 0300 	subs.w	r3, r8, #0
 8009210:	d027      	beq.n	8009262 <__d2b+0x76>
 8009212:	a802      	add	r0, sp, #8
 8009214:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009218:	f7ff fd8a 	bl	8008d30 <__lo0bits>
 800921c:	9900      	ldr	r1, [sp, #0]
 800921e:	b1f0      	cbz	r0, 800925e <__d2b+0x72>
 8009220:	9a01      	ldr	r2, [sp, #4]
 8009222:	f1c0 0320 	rsb	r3, r0, #32
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	430b      	orrs	r3, r1
 800922c:	40c2      	lsrs	r2, r0
 800922e:	617b      	str	r3, [r7, #20]
 8009230:	9201      	str	r2, [sp, #4]
 8009232:	9b01      	ldr	r3, [sp, #4]
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	2b00      	cmp	r3, #0
 8009238:	bf14      	ite	ne
 800923a:	2102      	movne	r1, #2
 800923c:	2101      	moveq	r1, #1
 800923e:	6139      	str	r1, [r7, #16]
 8009240:	b1c4      	cbz	r4, 8009274 <__d2b+0x88>
 8009242:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009246:	4404      	add	r4, r0
 8009248:	6034      	str	r4, [r6, #0]
 800924a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800924e:	6028      	str	r0, [r5, #0]
 8009250:	4638      	mov	r0, r7
 8009252:	b003      	add	sp, #12
 8009254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800925c:	e7d5      	b.n	800920a <__d2b+0x1e>
 800925e:	6179      	str	r1, [r7, #20]
 8009260:	e7e7      	b.n	8009232 <__d2b+0x46>
 8009262:	a801      	add	r0, sp, #4
 8009264:	f7ff fd64 	bl	8008d30 <__lo0bits>
 8009268:	9b01      	ldr	r3, [sp, #4]
 800926a:	617b      	str	r3, [r7, #20]
 800926c:	2101      	movs	r1, #1
 800926e:	6139      	str	r1, [r7, #16]
 8009270:	3020      	adds	r0, #32
 8009272:	e7e5      	b.n	8009240 <__d2b+0x54>
 8009274:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009278:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800927c:	6030      	str	r0, [r6, #0]
 800927e:	6918      	ldr	r0, [r3, #16]
 8009280:	f7ff fd37 	bl	8008cf2 <__hi0bits>
 8009284:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009288:	e7e1      	b.n	800924e <__d2b+0x62>

0800928a <__ratio>:
 800928a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928e:	4688      	mov	r8, r1
 8009290:	4669      	mov	r1, sp
 8009292:	4681      	mov	r9, r0
 8009294:	f7ff ff5c 	bl	8009150 <__b2d>
 8009298:	a901      	add	r1, sp, #4
 800929a:	4640      	mov	r0, r8
 800929c:	ec57 6b10 	vmov	r6, r7, d0
 80092a0:	f7ff ff56 	bl	8009150 <__b2d>
 80092a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80092ac:	eba3 0c02 	sub.w	ip, r3, r2
 80092b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80092b4:	1a9b      	subs	r3, r3, r2
 80092b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80092ba:	ec5b ab10 	vmov	sl, fp, d0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	bfce      	itee	gt
 80092c2:	463a      	movgt	r2, r7
 80092c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092c8:	465a      	movle	r2, fp
 80092ca:	4659      	mov	r1, fp
 80092cc:	463d      	mov	r5, r7
 80092ce:	bfd4      	ite	le
 80092d0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80092d4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80092d8:	4630      	mov	r0, r6
 80092da:	ee10 2a10 	vmov	r2, s0
 80092de:	460b      	mov	r3, r1
 80092e0:	4629      	mov	r1, r5
 80092e2:	f7f7 fab3 	bl	800084c <__aeabi_ddiv>
 80092e6:	ec41 0b10 	vmov	d0, r0, r1
 80092ea:	b003      	add	sp, #12
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092f0 <__copybits>:
 80092f0:	3901      	subs	r1, #1
 80092f2:	b510      	push	{r4, lr}
 80092f4:	1149      	asrs	r1, r1, #5
 80092f6:	6914      	ldr	r4, [r2, #16]
 80092f8:	3101      	adds	r1, #1
 80092fa:	f102 0314 	add.w	r3, r2, #20
 80092fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009302:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009306:	42a3      	cmp	r3, r4
 8009308:	4602      	mov	r2, r0
 800930a:	d303      	bcc.n	8009314 <__copybits+0x24>
 800930c:	2300      	movs	r3, #0
 800930e:	428a      	cmp	r2, r1
 8009310:	d305      	bcc.n	800931e <__copybits+0x2e>
 8009312:	bd10      	pop	{r4, pc}
 8009314:	f853 2b04 	ldr.w	r2, [r3], #4
 8009318:	f840 2b04 	str.w	r2, [r0], #4
 800931c:	e7f3      	b.n	8009306 <__copybits+0x16>
 800931e:	f842 3b04 	str.w	r3, [r2], #4
 8009322:	e7f4      	b.n	800930e <__copybits+0x1e>

08009324 <__any_on>:
 8009324:	f100 0214 	add.w	r2, r0, #20
 8009328:	6900      	ldr	r0, [r0, #16]
 800932a:	114b      	asrs	r3, r1, #5
 800932c:	4298      	cmp	r0, r3
 800932e:	b510      	push	{r4, lr}
 8009330:	db11      	blt.n	8009356 <__any_on+0x32>
 8009332:	dd0a      	ble.n	800934a <__any_on+0x26>
 8009334:	f011 011f 	ands.w	r1, r1, #31
 8009338:	d007      	beq.n	800934a <__any_on+0x26>
 800933a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800933e:	fa24 f001 	lsr.w	r0, r4, r1
 8009342:	fa00 f101 	lsl.w	r1, r0, r1
 8009346:	428c      	cmp	r4, r1
 8009348:	d10b      	bne.n	8009362 <__any_on+0x3e>
 800934a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800934e:	4293      	cmp	r3, r2
 8009350:	d803      	bhi.n	800935a <__any_on+0x36>
 8009352:	2000      	movs	r0, #0
 8009354:	bd10      	pop	{r4, pc}
 8009356:	4603      	mov	r3, r0
 8009358:	e7f7      	b.n	800934a <__any_on+0x26>
 800935a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800935e:	2900      	cmp	r1, #0
 8009360:	d0f5      	beq.n	800934e <__any_on+0x2a>
 8009362:	2001      	movs	r0, #1
 8009364:	e7f6      	b.n	8009354 <__any_on+0x30>

08009366 <_calloc_r>:
 8009366:	b538      	push	{r3, r4, r5, lr}
 8009368:	fb02 f401 	mul.w	r4, r2, r1
 800936c:	4621      	mov	r1, r4
 800936e:	f7fc ff31 	bl	80061d4 <_malloc_r>
 8009372:	4605      	mov	r5, r0
 8009374:	b118      	cbz	r0, 800937e <_calloc_r+0x18>
 8009376:	4622      	mov	r2, r4
 8009378:	2100      	movs	r1, #0
 800937a:	f7fc fed5 	bl	8006128 <memset>
 800937e:	4628      	mov	r0, r5
 8009380:	bd38      	pop	{r3, r4, r5, pc}

08009382 <__ssputs_r>:
 8009382:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009386:	688e      	ldr	r6, [r1, #8]
 8009388:	429e      	cmp	r6, r3
 800938a:	4682      	mov	sl, r0
 800938c:	460c      	mov	r4, r1
 800938e:	4690      	mov	r8, r2
 8009390:	4699      	mov	r9, r3
 8009392:	d837      	bhi.n	8009404 <__ssputs_r+0x82>
 8009394:	898a      	ldrh	r2, [r1, #12]
 8009396:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800939a:	d031      	beq.n	8009400 <__ssputs_r+0x7e>
 800939c:	6825      	ldr	r5, [r4, #0]
 800939e:	6909      	ldr	r1, [r1, #16]
 80093a0:	1a6f      	subs	r7, r5, r1
 80093a2:	6965      	ldr	r5, [r4, #20]
 80093a4:	2302      	movs	r3, #2
 80093a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093aa:	fb95 f5f3 	sdiv	r5, r5, r3
 80093ae:	f109 0301 	add.w	r3, r9, #1
 80093b2:	443b      	add	r3, r7
 80093b4:	429d      	cmp	r5, r3
 80093b6:	bf38      	it	cc
 80093b8:	461d      	movcc	r5, r3
 80093ba:	0553      	lsls	r3, r2, #21
 80093bc:	d530      	bpl.n	8009420 <__ssputs_r+0x9e>
 80093be:	4629      	mov	r1, r5
 80093c0:	f7fc ff08 	bl	80061d4 <_malloc_r>
 80093c4:	4606      	mov	r6, r0
 80093c6:	b950      	cbnz	r0, 80093de <__ssputs_r+0x5c>
 80093c8:	230c      	movs	r3, #12
 80093ca:	f8ca 3000 	str.w	r3, [sl]
 80093ce:	89a3      	ldrh	r3, [r4, #12]
 80093d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093d4:	81a3      	strh	r3, [r4, #12]
 80093d6:	f04f 30ff 	mov.w	r0, #4294967295
 80093da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093de:	463a      	mov	r2, r7
 80093e0:	6921      	ldr	r1, [r4, #16]
 80093e2:	f7ff fbb5 	bl	8008b50 <memcpy>
 80093e6:	89a3      	ldrh	r3, [r4, #12]
 80093e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	6126      	str	r6, [r4, #16]
 80093f4:	6165      	str	r5, [r4, #20]
 80093f6:	443e      	add	r6, r7
 80093f8:	1bed      	subs	r5, r5, r7
 80093fa:	6026      	str	r6, [r4, #0]
 80093fc:	60a5      	str	r5, [r4, #8]
 80093fe:	464e      	mov	r6, r9
 8009400:	454e      	cmp	r6, r9
 8009402:	d900      	bls.n	8009406 <__ssputs_r+0x84>
 8009404:	464e      	mov	r6, r9
 8009406:	4632      	mov	r2, r6
 8009408:	4641      	mov	r1, r8
 800940a:	6820      	ldr	r0, [r4, #0]
 800940c:	f000 f92b 	bl	8009666 <memmove>
 8009410:	68a3      	ldr	r3, [r4, #8]
 8009412:	1b9b      	subs	r3, r3, r6
 8009414:	60a3      	str	r3, [r4, #8]
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	441e      	add	r6, r3
 800941a:	6026      	str	r6, [r4, #0]
 800941c:	2000      	movs	r0, #0
 800941e:	e7dc      	b.n	80093da <__ssputs_r+0x58>
 8009420:	462a      	mov	r2, r5
 8009422:	f000 f939 	bl	8009698 <_realloc_r>
 8009426:	4606      	mov	r6, r0
 8009428:	2800      	cmp	r0, #0
 800942a:	d1e2      	bne.n	80093f2 <__ssputs_r+0x70>
 800942c:	6921      	ldr	r1, [r4, #16]
 800942e:	4650      	mov	r0, sl
 8009430:	f7fc fe82 	bl	8006138 <_free_r>
 8009434:	e7c8      	b.n	80093c8 <__ssputs_r+0x46>
	...

08009438 <_svfiprintf_r>:
 8009438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800943c:	461d      	mov	r5, r3
 800943e:	898b      	ldrh	r3, [r1, #12]
 8009440:	061f      	lsls	r7, r3, #24
 8009442:	b09d      	sub	sp, #116	; 0x74
 8009444:	4680      	mov	r8, r0
 8009446:	460c      	mov	r4, r1
 8009448:	4616      	mov	r6, r2
 800944a:	d50f      	bpl.n	800946c <_svfiprintf_r+0x34>
 800944c:	690b      	ldr	r3, [r1, #16]
 800944e:	b96b      	cbnz	r3, 800946c <_svfiprintf_r+0x34>
 8009450:	2140      	movs	r1, #64	; 0x40
 8009452:	f7fc febf 	bl	80061d4 <_malloc_r>
 8009456:	6020      	str	r0, [r4, #0]
 8009458:	6120      	str	r0, [r4, #16]
 800945a:	b928      	cbnz	r0, 8009468 <_svfiprintf_r+0x30>
 800945c:	230c      	movs	r3, #12
 800945e:	f8c8 3000 	str.w	r3, [r8]
 8009462:	f04f 30ff 	mov.w	r0, #4294967295
 8009466:	e0c8      	b.n	80095fa <_svfiprintf_r+0x1c2>
 8009468:	2340      	movs	r3, #64	; 0x40
 800946a:	6163      	str	r3, [r4, #20]
 800946c:	2300      	movs	r3, #0
 800946e:	9309      	str	r3, [sp, #36]	; 0x24
 8009470:	2320      	movs	r3, #32
 8009472:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009476:	2330      	movs	r3, #48	; 0x30
 8009478:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800947c:	9503      	str	r5, [sp, #12]
 800947e:	f04f 0b01 	mov.w	fp, #1
 8009482:	4637      	mov	r7, r6
 8009484:	463d      	mov	r5, r7
 8009486:	f815 3b01 	ldrb.w	r3, [r5], #1
 800948a:	b10b      	cbz	r3, 8009490 <_svfiprintf_r+0x58>
 800948c:	2b25      	cmp	r3, #37	; 0x25
 800948e:	d13e      	bne.n	800950e <_svfiprintf_r+0xd6>
 8009490:	ebb7 0a06 	subs.w	sl, r7, r6
 8009494:	d00b      	beq.n	80094ae <_svfiprintf_r+0x76>
 8009496:	4653      	mov	r3, sl
 8009498:	4632      	mov	r2, r6
 800949a:	4621      	mov	r1, r4
 800949c:	4640      	mov	r0, r8
 800949e:	f7ff ff70 	bl	8009382 <__ssputs_r>
 80094a2:	3001      	adds	r0, #1
 80094a4:	f000 80a4 	beq.w	80095f0 <_svfiprintf_r+0x1b8>
 80094a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094aa:	4453      	add	r3, sl
 80094ac:	9309      	str	r3, [sp, #36]	; 0x24
 80094ae:	783b      	ldrb	r3, [r7, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 809d 	beq.w	80095f0 <_svfiprintf_r+0x1b8>
 80094b6:	2300      	movs	r3, #0
 80094b8:	f04f 32ff 	mov.w	r2, #4294967295
 80094bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094c0:	9304      	str	r3, [sp, #16]
 80094c2:	9307      	str	r3, [sp, #28]
 80094c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094c8:	931a      	str	r3, [sp, #104]	; 0x68
 80094ca:	462f      	mov	r7, r5
 80094cc:	2205      	movs	r2, #5
 80094ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80094d2:	4850      	ldr	r0, [pc, #320]	; (8009614 <_svfiprintf_r+0x1dc>)
 80094d4:	f7f6 fe84 	bl	80001e0 <memchr>
 80094d8:	9b04      	ldr	r3, [sp, #16]
 80094da:	b9d0      	cbnz	r0, 8009512 <_svfiprintf_r+0xda>
 80094dc:	06d9      	lsls	r1, r3, #27
 80094de:	bf44      	itt	mi
 80094e0:	2220      	movmi	r2, #32
 80094e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094e6:	071a      	lsls	r2, r3, #28
 80094e8:	bf44      	itt	mi
 80094ea:	222b      	movmi	r2, #43	; 0x2b
 80094ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80094f0:	782a      	ldrb	r2, [r5, #0]
 80094f2:	2a2a      	cmp	r2, #42	; 0x2a
 80094f4:	d015      	beq.n	8009522 <_svfiprintf_r+0xea>
 80094f6:	9a07      	ldr	r2, [sp, #28]
 80094f8:	462f      	mov	r7, r5
 80094fa:	2000      	movs	r0, #0
 80094fc:	250a      	movs	r5, #10
 80094fe:	4639      	mov	r1, r7
 8009500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009504:	3b30      	subs	r3, #48	; 0x30
 8009506:	2b09      	cmp	r3, #9
 8009508:	d94d      	bls.n	80095a6 <_svfiprintf_r+0x16e>
 800950a:	b1b8      	cbz	r0, 800953c <_svfiprintf_r+0x104>
 800950c:	e00f      	b.n	800952e <_svfiprintf_r+0xf6>
 800950e:	462f      	mov	r7, r5
 8009510:	e7b8      	b.n	8009484 <_svfiprintf_r+0x4c>
 8009512:	4a40      	ldr	r2, [pc, #256]	; (8009614 <_svfiprintf_r+0x1dc>)
 8009514:	1a80      	subs	r0, r0, r2
 8009516:	fa0b f000 	lsl.w	r0, fp, r0
 800951a:	4318      	orrs	r0, r3
 800951c:	9004      	str	r0, [sp, #16]
 800951e:	463d      	mov	r5, r7
 8009520:	e7d3      	b.n	80094ca <_svfiprintf_r+0x92>
 8009522:	9a03      	ldr	r2, [sp, #12]
 8009524:	1d11      	adds	r1, r2, #4
 8009526:	6812      	ldr	r2, [r2, #0]
 8009528:	9103      	str	r1, [sp, #12]
 800952a:	2a00      	cmp	r2, #0
 800952c:	db01      	blt.n	8009532 <_svfiprintf_r+0xfa>
 800952e:	9207      	str	r2, [sp, #28]
 8009530:	e004      	b.n	800953c <_svfiprintf_r+0x104>
 8009532:	4252      	negs	r2, r2
 8009534:	f043 0302 	orr.w	r3, r3, #2
 8009538:	9207      	str	r2, [sp, #28]
 800953a:	9304      	str	r3, [sp, #16]
 800953c:	783b      	ldrb	r3, [r7, #0]
 800953e:	2b2e      	cmp	r3, #46	; 0x2e
 8009540:	d10c      	bne.n	800955c <_svfiprintf_r+0x124>
 8009542:	787b      	ldrb	r3, [r7, #1]
 8009544:	2b2a      	cmp	r3, #42	; 0x2a
 8009546:	d133      	bne.n	80095b0 <_svfiprintf_r+0x178>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	1d1a      	adds	r2, r3, #4
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	9203      	str	r2, [sp, #12]
 8009550:	2b00      	cmp	r3, #0
 8009552:	bfb8      	it	lt
 8009554:	f04f 33ff 	movlt.w	r3, #4294967295
 8009558:	3702      	adds	r7, #2
 800955a:	9305      	str	r3, [sp, #20]
 800955c:	4d2e      	ldr	r5, [pc, #184]	; (8009618 <_svfiprintf_r+0x1e0>)
 800955e:	7839      	ldrb	r1, [r7, #0]
 8009560:	2203      	movs	r2, #3
 8009562:	4628      	mov	r0, r5
 8009564:	f7f6 fe3c 	bl	80001e0 <memchr>
 8009568:	b138      	cbz	r0, 800957a <_svfiprintf_r+0x142>
 800956a:	2340      	movs	r3, #64	; 0x40
 800956c:	1b40      	subs	r0, r0, r5
 800956e:	fa03 f000 	lsl.w	r0, r3, r0
 8009572:	9b04      	ldr	r3, [sp, #16]
 8009574:	4303      	orrs	r3, r0
 8009576:	3701      	adds	r7, #1
 8009578:	9304      	str	r3, [sp, #16]
 800957a:	7839      	ldrb	r1, [r7, #0]
 800957c:	4827      	ldr	r0, [pc, #156]	; (800961c <_svfiprintf_r+0x1e4>)
 800957e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009582:	2206      	movs	r2, #6
 8009584:	1c7e      	adds	r6, r7, #1
 8009586:	f7f6 fe2b 	bl	80001e0 <memchr>
 800958a:	2800      	cmp	r0, #0
 800958c:	d038      	beq.n	8009600 <_svfiprintf_r+0x1c8>
 800958e:	4b24      	ldr	r3, [pc, #144]	; (8009620 <_svfiprintf_r+0x1e8>)
 8009590:	bb13      	cbnz	r3, 80095d8 <_svfiprintf_r+0x1a0>
 8009592:	9b03      	ldr	r3, [sp, #12]
 8009594:	3307      	adds	r3, #7
 8009596:	f023 0307 	bic.w	r3, r3, #7
 800959a:	3308      	adds	r3, #8
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095a0:	444b      	add	r3, r9
 80095a2:	9309      	str	r3, [sp, #36]	; 0x24
 80095a4:	e76d      	b.n	8009482 <_svfiprintf_r+0x4a>
 80095a6:	fb05 3202 	mla	r2, r5, r2, r3
 80095aa:	2001      	movs	r0, #1
 80095ac:	460f      	mov	r7, r1
 80095ae:	e7a6      	b.n	80094fe <_svfiprintf_r+0xc6>
 80095b0:	2300      	movs	r3, #0
 80095b2:	3701      	adds	r7, #1
 80095b4:	9305      	str	r3, [sp, #20]
 80095b6:	4619      	mov	r1, r3
 80095b8:	250a      	movs	r5, #10
 80095ba:	4638      	mov	r0, r7
 80095bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095c0:	3a30      	subs	r2, #48	; 0x30
 80095c2:	2a09      	cmp	r2, #9
 80095c4:	d903      	bls.n	80095ce <_svfiprintf_r+0x196>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0c8      	beq.n	800955c <_svfiprintf_r+0x124>
 80095ca:	9105      	str	r1, [sp, #20]
 80095cc:	e7c6      	b.n	800955c <_svfiprintf_r+0x124>
 80095ce:	fb05 2101 	mla	r1, r5, r1, r2
 80095d2:	2301      	movs	r3, #1
 80095d4:	4607      	mov	r7, r0
 80095d6:	e7f0      	b.n	80095ba <_svfiprintf_r+0x182>
 80095d8:	ab03      	add	r3, sp, #12
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	4622      	mov	r2, r4
 80095de:	4b11      	ldr	r3, [pc, #68]	; (8009624 <_svfiprintf_r+0x1ec>)
 80095e0:	a904      	add	r1, sp, #16
 80095e2:	4640      	mov	r0, r8
 80095e4:	f7fc fee4 	bl	80063b0 <_printf_float>
 80095e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80095ec:	4681      	mov	r9, r0
 80095ee:	d1d6      	bne.n	800959e <_svfiprintf_r+0x166>
 80095f0:	89a3      	ldrh	r3, [r4, #12]
 80095f2:	065b      	lsls	r3, r3, #25
 80095f4:	f53f af35 	bmi.w	8009462 <_svfiprintf_r+0x2a>
 80095f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095fa:	b01d      	add	sp, #116	; 0x74
 80095fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009600:	ab03      	add	r3, sp, #12
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	4622      	mov	r2, r4
 8009606:	4b07      	ldr	r3, [pc, #28]	; (8009624 <_svfiprintf_r+0x1ec>)
 8009608:	a904      	add	r1, sp, #16
 800960a:	4640      	mov	r0, r8
 800960c:	f7fd f986 	bl	800691c <_printf_i>
 8009610:	e7ea      	b.n	80095e8 <_svfiprintf_r+0x1b0>
 8009612:	bf00      	nop
 8009614:	0800ae44 	.word	0x0800ae44
 8009618:	0800ae4a 	.word	0x0800ae4a
 800961c:	0800ae4e 	.word	0x0800ae4e
 8009620:	080063b1 	.word	0x080063b1
 8009624:	08009383 	.word	0x08009383

08009628 <strncmp>:
 8009628:	b510      	push	{r4, lr}
 800962a:	b16a      	cbz	r2, 8009648 <strncmp+0x20>
 800962c:	3901      	subs	r1, #1
 800962e:	1884      	adds	r4, r0, r2
 8009630:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009634:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009638:	4293      	cmp	r3, r2
 800963a:	d103      	bne.n	8009644 <strncmp+0x1c>
 800963c:	42a0      	cmp	r0, r4
 800963e:	d001      	beq.n	8009644 <strncmp+0x1c>
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1f5      	bne.n	8009630 <strncmp+0x8>
 8009644:	1a98      	subs	r0, r3, r2
 8009646:	bd10      	pop	{r4, pc}
 8009648:	4610      	mov	r0, r2
 800964a:	e7fc      	b.n	8009646 <strncmp+0x1e>

0800964c <__ascii_wctomb>:
 800964c:	b149      	cbz	r1, 8009662 <__ascii_wctomb+0x16>
 800964e:	2aff      	cmp	r2, #255	; 0xff
 8009650:	bf85      	ittet	hi
 8009652:	238a      	movhi	r3, #138	; 0x8a
 8009654:	6003      	strhi	r3, [r0, #0]
 8009656:	700a      	strbls	r2, [r1, #0]
 8009658:	f04f 30ff 	movhi.w	r0, #4294967295
 800965c:	bf98      	it	ls
 800965e:	2001      	movls	r0, #1
 8009660:	4770      	bx	lr
 8009662:	4608      	mov	r0, r1
 8009664:	4770      	bx	lr

08009666 <memmove>:
 8009666:	4288      	cmp	r0, r1
 8009668:	b510      	push	{r4, lr}
 800966a:	eb01 0302 	add.w	r3, r1, r2
 800966e:	d807      	bhi.n	8009680 <memmove+0x1a>
 8009670:	1e42      	subs	r2, r0, #1
 8009672:	4299      	cmp	r1, r3
 8009674:	d00a      	beq.n	800968c <memmove+0x26>
 8009676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800967a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800967e:	e7f8      	b.n	8009672 <memmove+0xc>
 8009680:	4283      	cmp	r3, r0
 8009682:	d9f5      	bls.n	8009670 <memmove+0xa>
 8009684:	1881      	adds	r1, r0, r2
 8009686:	1ad2      	subs	r2, r2, r3
 8009688:	42d3      	cmn	r3, r2
 800968a:	d100      	bne.n	800968e <memmove+0x28>
 800968c:	bd10      	pop	{r4, pc}
 800968e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009692:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009696:	e7f7      	b.n	8009688 <memmove+0x22>

08009698 <_realloc_r>:
 8009698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800969a:	4607      	mov	r7, r0
 800969c:	4614      	mov	r4, r2
 800969e:	460e      	mov	r6, r1
 80096a0:	b921      	cbnz	r1, 80096ac <_realloc_r+0x14>
 80096a2:	4611      	mov	r1, r2
 80096a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80096a8:	f7fc bd94 	b.w	80061d4 <_malloc_r>
 80096ac:	b922      	cbnz	r2, 80096b8 <_realloc_r+0x20>
 80096ae:	f7fc fd43 	bl	8006138 <_free_r>
 80096b2:	4625      	mov	r5, r4
 80096b4:	4628      	mov	r0, r5
 80096b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b8:	f000 f814 	bl	80096e4 <_malloc_usable_size_r>
 80096bc:	42a0      	cmp	r0, r4
 80096be:	d20f      	bcs.n	80096e0 <_realloc_r+0x48>
 80096c0:	4621      	mov	r1, r4
 80096c2:	4638      	mov	r0, r7
 80096c4:	f7fc fd86 	bl	80061d4 <_malloc_r>
 80096c8:	4605      	mov	r5, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d0f2      	beq.n	80096b4 <_realloc_r+0x1c>
 80096ce:	4631      	mov	r1, r6
 80096d0:	4622      	mov	r2, r4
 80096d2:	f7ff fa3d 	bl	8008b50 <memcpy>
 80096d6:	4631      	mov	r1, r6
 80096d8:	4638      	mov	r0, r7
 80096da:	f7fc fd2d 	bl	8006138 <_free_r>
 80096de:	e7e9      	b.n	80096b4 <_realloc_r+0x1c>
 80096e0:	4635      	mov	r5, r6
 80096e2:	e7e7      	b.n	80096b4 <_realloc_r+0x1c>

080096e4 <_malloc_usable_size_r>:
 80096e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e8:	1f18      	subs	r0, r3, #4
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	bfbc      	itt	lt
 80096ee:	580b      	ldrlt	r3, [r1, r0]
 80096f0:	18c0      	addlt	r0, r0, r3
 80096f2:	4770      	bx	lr

080096f4 <log>:
 80096f4:	b570      	push	{r4, r5, r6, lr}
 80096f6:	ed2d 8b02 	vpush	{d8}
 80096fa:	b08a      	sub	sp, #40	; 0x28
 80096fc:	ec55 4b10 	vmov	r4, r5, d0
 8009700:	f000 f9ea 	bl	8009ad8 <__ieee754_log>
 8009704:	4b36      	ldr	r3, [pc, #216]	; (80097e0 <log+0xec>)
 8009706:	eeb0 8a40 	vmov.f32	s16, s0
 800970a:	eef0 8a60 	vmov.f32	s17, s1
 800970e:	f993 6000 	ldrsb.w	r6, [r3]
 8009712:	1c73      	adds	r3, r6, #1
 8009714:	d05b      	beq.n	80097ce <log+0xda>
 8009716:	4622      	mov	r2, r4
 8009718:	462b      	mov	r3, r5
 800971a:	4620      	mov	r0, r4
 800971c:	4629      	mov	r1, r5
 800971e:	f7f7 fa05 	bl	8000b2c <__aeabi_dcmpun>
 8009722:	2800      	cmp	r0, #0
 8009724:	d153      	bne.n	80097ce <log+0xda>
 8009726:	2200      	movs	r2, #0
 8009728:	2300      	movs	r3, #0
 800972a:	4620      	mov	r0, r4
 800972c:	4629      	mov	r1, r5
 800972e:	f7f7 f9f3 	bl	8000b18 <__aeabi_dcmpgt>
 8009732:	2800      	cmp	r0, #0
 8009734:	d14b      	bne.n	80097ce <log+0xda>
 8009736:	4b2b      	ldr	r3, [pc, #172]	; (80097e4 <log+0xf0>)
 8009738:	9301      	str	r3, [sp, #4]
 800973a:	9008      	str	r0, [sp, #32]
 800973c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009740:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009744:	b9a6      	cbnz	r6, 8009770 <log+0x7c>
 8009746:	4b28      	ldr	r3, [pc, #160]	; (80097e8 <log+0xf4>)
 8009748:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800974c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009750:	4620      	mov	r0, r4
 8009752:	2200      	movs	r2, #0
 8009754:	2300      	movs	r3, #0
 8009756:	4629      	mov	r1, r5
 8009758:	f7f7 f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800975c:	bb40      	cbnz	r0, 80097b0 <log+0xbc>
 800975e:	2301      	movs	r3, #1
 8009760:	2e02      	cmp	r6, #2
 8009762:	9300      	str	r3, [sp, #0]
 8009764:	d119      	bne.n	800979a <log+0xa6>
 8009766:	f7fc fca5 	bl	80060b4 <__errno>
 800976a:	2321      	movs	r3, #33	; 0x21
 800976c:	6003      	str	r3, [r0, #0]
 800976e:	e019      	b.n	80097a4 <log+0xb0>
 8009770:	4b1e      	ldr	r3, [pc, #120]	; (80097ec <log+0xf8>)
 8009772:	2200      	movs	r2, #0
 8009774:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009778:	4620      	mov	r0, r4
 800977a:	2200      	movs	r2, #0
 800977c:	2300      	movs	r3, #0
 800977e:	4629      	mov	r1, r5
 8009780:	f7f7 f9a2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009784:	2800      	cmp	r0, #0
 8009786:	d0ea      	beq.n	800975e <log+0x6a>
 8009788:	2302      	movs	r3, #2
 800978a:	429e      	cmp	r6, r3
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	d111      	bne.n	80097b4 <log+0xc0>
 8009790:	f7fc fc90 	bl	80060b4 <__errno>
 8009794:	2322      	movs	r3, #34	; 0x22
 8009796:	6003      	str	r3, [r0, #0]
 8009798:	e011      	b.n	80097be <log+0xca>
 800979a:	4668      	mov	r0, sp
 800979c:	f001 f91f 	bl	800a9de <matherr>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d0e0      	beq.n	8009766 <log+0x72>
 80097a4:	4812      	ldr	r0, [pc, #72]	; (80097f0 <log+0xfc>)
 80097a6:	f001 f91f 	bl	800a9e8 <nan>
 80097aa:	ed8d 0b06 	vstr	d0, [sp, #24]
 80097ae:	e006      	b.n	80097be <log+0xca>
 80097b0:	2302      	movs	r3, #2
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	4668      	mov	r0, sp
 80097b6:	f001 f912 	bl	800a9de <matherr>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	d0e8      	beq.n	8009790 <log+0x9c>
 80097be:	9b08      	ldr	r3, [sp, #32]
 80097c0:	b11b      	cbz	r3, 80097ca <log+0xd6>
 80097c2:	f7fc fc77 	bl	80060b4 <__errno>
 80097c6:	9b08      	ldr	r3, [sp, #32]
 80097c8:	6003      	str	r3, [r0, #0]
 80097ca:	ed9d 8b06 	vldr	d8, [sp, #24]
 80097ce:	eeb0 0a48 	vmov.f32	s0, s16
 80097d2:	eef0 0a68 	vmov.f32	s1, s17
 80097d6:	b00a      	add	sp, #40	; 0x28
 80097d8:	ecbd 8b02 	vpop	{d8}
 80097dc:	bd70      	pop	{r4, r5, r6, pc}
 80097de:	bf00      	nop
 80097e0:	20000204 	.word	0x20000204
 80097e4:	0800af56 	.word	0x0800af56
 80097e8:	c7efffff 	.word	0xc7efffff
 80097ec:	fff00000 	.word	0xfff00000
 80097f0:	0800ae49 	.word	0x0800ae49

080097f4 <pow>:
 80097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	ed2d 8b04 	vpush	{d8-d9}
 80097fc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8009ad0 <pow+0x2dc>
 8009800:	b08d      	sub	sp, #52	; 0x34
 8009802:	ec57 6b10 	vmov	r6, r7, d0
 8009806:	ec55 4b11 	vmov	r4, r5, d1
 800980a:	f000 fb19 	bl	8009e40 <__ieee754_pow>
 800980e:	f999 3000 	ldrsb.w	r3, [r9]
 8009812:	9300      	str	r3, [sp, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	eeb0 8a40 	vmov.f32	s16, s0
 800981a:	eef0 8a60 	vmov.f32	s17, s1
 800981e:	46c8      	mov	r8, r9
 8009820:	d05f      	beq.n	80098e2 <pow+0xee>
 8009822:	4622      	mov	r2, r4
 8009824:	462b      	mov	r3, r5
 8009826:	4620      	mov	r0, r4
 8009828:	4629      	mov	r1, r5
 800982a:	f7f7 f97f 	bl	8000b2c <__aeabi_dcmpun>
 800982e:	4683      	mov	fp, r0
 8009830:	2800      	cmp	r0, #0
 8009832:	d156      	bne.n	80098e2 <pow+0xee>
 8009834:	4632      	mov	r2, r6
 8009836:	463b      	mov	r3, r7
 8009838:	4630      	mov	r0, r6
 800983a:	4639      	mov	r1, r7
 800983c:	f7f7 f976 	bl	8000b2c <__aeabi_dcmpun>
 8009840:	9001      	str	r0, [sp, #4]
 8009842:	b1e8      	cbz	r0, 8009880 <pow+0x8c>
 8009844:	2200      	movs	r2, #0
 8009846:	2300      	movs	r3, #0
 8009848:	4620      	mov	r0, r4
 800984a:	4629      	mov	r1, r5
 800984c:	f7f7 f93c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009850:	2800      	cmp	r0, #0
 8009852:	d046      	beq.n	80098e2 <pow+0xee>
 8009854:	2301      	movs	r3, #1
 8009856:	9302      	str	r3, [sp, #8]
 8009858:	4b96      	ldr	r3, [pc, #600]	; (8009ab4 <pow+0x2c0>)
 800985a:	9303      	str	r3, [sp, #12]
 800985c:	4b96      	ldr	r3, [pc, #600]	; (8009ab8 <pow+0x2c4>)
 800985e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009862:	2200      	movs	r2, #0
 8009864:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009868:	9b00      	ldr	r3, [sp, #0]
 800986a:	2b02      	cmp	r3, #2
 800986c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009870:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009874:	d033      	beq.n	80098de <pow+0xea>
 8009876:	a802      	add	r0, sp, #8
 8009878:	f001 f8b1 	bl	800a9de <matherr>
 800987c:	bb48      	cbnz	r0, 80098d2 <pow+0xde>
 800987e:	e05d      	b.n	800993c <pow+0x148>
 8009880:	f04f 0a00 	mov.w	sl, #0
 8009884:	f04f 0b00 	mov.w	fp, #0
 8009888:	4652      	mov	r2, sl
 800988a:	465b      	mov	r3, fp
 800988c:	4630      	mov	r0, r6
 800988e:	4639      	mov	r1, r7
 8009890:	f7f7 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009894:	ec4b ab19 	vmov	d9, sl, fp
 8009898:	2800      	cmp	r0, #0
 800989a:	d054      	beq.n	8009946 <pow+0x152>
 800989c:	4652      	mov	r2, sl
 800989e:	465b      	mov	r3, fp
 80098a0:	4620      	mov	r0, r4
 80098a2:	4629      	mov	r1, r5
 80098a4:	f7f7 f910 	bl	8000ac8 <__aeabi_dcmpeq>
 80098a8:	4680      	mov	r8, r0
 80098aa:	b318      	cbz	r0, 80098f4 <pow+0x100>
 80098ac:	2301      	movs	r3, #1
 80098ae:	9302      	str	r3, [sp, #8]
 80098b0:	4b80      	ldr	r3, [pc, #512]	; (8009ab4 <pow+0x2c0>)
 80098b2:	9303      	str	r3, [sp, #12]
 80098b4:	9b01      	ldr	r3, [sp, #4]
 80098b6:	930a      	str	r3, [sp, #40]	; 0x28
 80098b8:	9b00      	ldr	r3, [sp, #0]
 80098ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80098be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80098c2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0d5      	beq.n	8009876 <pow+0x82>
 80098ca:	4b7b      	ldr	r3, [pc, #492]	; (8009ab8 <pow+0x2c4>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80098d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d4:	b11b      	cbz	r3, 80098de <pow+0xea>
 80098d6:	f7fc fbed 	bl	80060b4 <__errno>
 80098da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098dc:	6003      	str	r3, [r0, #0]
 80098de:	ed9d 8b08 	vldr	d8, [sp, #32]
 80098e2:	eeb0 0a48 	vmov.f32	s0, s16
 80098e6:	eef0 0a68 	vmov.f32	s1, s17
 80098ea:	b00d      	add	sp, #52	; 0x34
 80098ec:	ecbd 8b04 	vpop	{d8-d9}
 80098f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f4:	ec45 4b10 	vmov	d0, r4, r5
 80098f8:	f001 f869 	bl	800a9ce <finite>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d0f0      	beq.n	80098e2 <pow+0xee>
 8009900:	4652      	mov	r2, sl
 8009902:	465b      	mov	r3, fp
 8009904:	4620      	mov	r0, r4
 8009906:	4629      	mov	r1, r5
 8009908:	f7f7 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800990c:	2800      	cmp	r0, #0
 800990e:	d0e8      	beq.n	80098e2 <pow+0xee>
 8009910:	2301      	movs	r3, #1
 8009912:	9302      	str	r3, [sp, #8]
 8009914:	4b67      	ldr	r3, [pc, #412]	; (8009ab4 <pow+0x2c0>)
 8009916:	9303      	str	r3, [sp, #12]
 8009918:	f999 3000 	ldrsb.w	r3, [r9]
 800991c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8009920:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009924:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009928:	b913      	cbnz	r3, 8009930 <pow+0x13c>
 800992a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800992e:	e7a2      	b.n	8009876 <pow+0x82>
 8009930:	4962      	ldr	r1, [pc, #392]	; (8009abc <pow+0x2c8>)
 8009932:	2000      	movs	r0, #0
 8009934:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009938:	2b02      	cmp	r3, #2
 800993a:	d19c      	bne.n	8009876 <pow+0x82>
 800993c:	f7fc fbba 	bl	80060b4 <__errno>
 8009940:	2321      	movs	r3, #33	; 0x21
 8009942:	6003      	str	r3, [r0, #0]
 8009944:	e7c5      	b.n	80098d2 <pow+0xde>
 8009946:	eeb0 0a48 	vmov.f32	s0, s16
 800994a:	eef0 0a68 	vmov.f32	s1, s17
 800994e:	f001 f83e 	bl	800a9ce <finite>
 8009952:	9000      	str	r0, [sp, #0]
 8009954:	2800      	cmp	r0, #0
 8009956:	f040 8081 	bne.w	8009a5c <pow+0x268>
 800995a:	ec47 6b10 	vmov	d0, r6, r7
 800995e:	f001 f836 	bl	800a9ce <finite>
 8009962:	2800      	cmp	r0, #0
 8009964:	d07a      	beq.n	8009a5c <pow+0x268>
 8009966:	ec45 4b10 	vmov	d0, r4, r5
 800996a:	f001 f830 	bl	800a9ce <finite>
 800996e:	2800      	cmp	r0, #0
 8009970:	d074      	beq.n	8009a5c <pow+0x268>
 8009972:	ec53 2b18 	vmov	r2, r3, d8
 8009976:	ee18 0a10 	vmov	r0, s16
 800997a:	4619      	mov	r1, r3
 800997c:	f7f7 f8d6 	bl	8000b2c <__aeabi_dcmpun>
 8009980:	f999 9000 	ldrsb.w	r9, [r9]
 8009984:	4b4b      	ldr	r3, [pc, #300]	; (8009ab4 <pow+0x2c0>)
 8009986:	b1b0      	cbz	r0, 80099b6 <pow+0x1c2>
 8009988:	2201      	movs	r2, #1
 800998a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800998e:	9b00      	ldr	r3, [sp, #0]
 8009990:	930a      	str	r3, [sp, #40]	; 0x28
 8009992:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009996:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800999a:	f1b9 0f00 	cmp.w	r9, #0
 800999e:	d0c4      	beq.n	800992a <pow+0x136>
 80099a0:	4652      	mov	r2, sl
 80099a2:	465b      	mov	r3, fp
 80099a4:	4650      	mov	r0, sl
 80099a6:	4659      	mov	r1, fp
 80099a8:	f7f6 ff50 	bl	800084c <__aeabi_ddiv>
 80099ac:	f1b9 0f02 	cmp.w	r9, #2
 80099b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099b4:	e7c1      	b.n	800993a <pow+0x146>
 80099b6:	2203      	movs	r2, #3
 80099b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80099bc:	900a      	str	r0, [sp, #40]	; 0x28
 80099be:	4629      	mov	r1, r5
 80099c0:	4620      	mov	r0, r4
 80099c2:	2200      	movs	r2, #0
 80099c4:	4b3e      	ldr	r3, [pc, #248]	; (8009ac0 <pow+0x2cc>)
 80099c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80099ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80099ce:	f7f6 fe13 	bl	80005f8 <__aeabi_dmul>
 80099d2:	4604      	mov	r4, r0
 80099d4:	460d      	mov	r5, r1
 80099d6:	f1b9 0f00 	cmp.w	r9, #0
 80099da:	d124      	bne.n	8009a26 <pow+0x232>
 80099dc:	4b39      	ldr	r3, [pc, #228]	; (8009ac4 <pow+0x2d0>)
 80099de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80099e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80099e6:	4630      	mov	r0, r6
 80099e8:	4652      	mov	r2, sl
 80099ea:	465b      	mov	r3, fp
 80099ec:	4639      	mov	r1, r7
 80099ee:	f7f7 f875 	bl	8000adc <__aeabi_dcmplt>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	d056      	beq.n	8009aa4 <pow+0x2b0>
 80099f6:	ec45 4b10 	vmov	d0, r4, r5
 80099fa:	f000 fffd 	bl	800a9f8 <rint>
 80099fe:	4622      	mov	r2, r4
 8009a00:	462b      	mov	r3, r5
 8009a02:	ec51 0b10 	vmov	r0, r1, d0
 8009a06:	f7f7 f85f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a0a:	b920      	cbnz	r0, 8009a16 <pow+0x222>
 8009a0c:	4b2e      	ldr	r3, [pc, #184]	; (8009ac8 <pow+0x2d4>)
 8009a0e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009a12:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a16:	f998 3000 	ldrsb.w	r3, [r8]
 8009a1a:	2b02      	cmp	r3, #2
 8009a1c:	d142      	bne.n	8009aa4 <pow+0x2b0>
 8009a1e:	f7fc fb49 	bl	80060b4 <__errno>
 8009a22:	2322      	movs	r3, #34	; 0x22
 8009a24:	e78d      	b.n	8009942 <pow+0x14e>
 8009a26:	4b29      	ldr	r3, [pc, #164]	; (8009acc <pow+0x2d8>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009a2e:	4630      	mov	r0, r6
 8009a30:	4652      	mov	r2, sl
 8009a32:	465b      	mov	r3, fp
 8009a34:	4639      	mov	r1, r7
 8009a36:	f7f7 f851 	bl	8000adc <__aeabi_dcmplt>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d0eb      	beq.n	8009a16 <pow+0x222>
 8009a3e:	ec45 4b10 	vmov	d0, r4, r5
 8009a42:	f000 ffd9 	bl	800a9f8 <rint>
 8009a46:	4622      	mov	r2, r4
 8009a48:	462b      	mov	r3, r5
 8009a4a:	ec51 0b10 	vmov	r0, r1, d0
 8009a4e:	f7f7 f83b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a52:	2800      	cmp	r0, #0
 8009a54:	d1df      	bne.n	8009a16 <pow+0x222>
 8009a56:	2200      	movs	r2, #0
 8009a58:	4b18      	ldr	r3, [pc, #96]	; (8009abc <pow+0x2c8>)
 8009a5a:	e7da      	b.n	8009a12 <pow+0x21e>
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	2300      	movs	r3, #0
 8009a60:	ec51 0b18 	vmov	r0, r1, d8
 8009a64:	f7f7 f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	f43f af3a 	beq.w	80098e2 <pow+0xee>
 8009a6e:	ec47 6b10 	vmov	d0, r6, r7
 8009a72:	f000 ffac 	bl	800a9ce <finite>
 8009a76:	2800      	cmp	r0, #0
 8009a78:	f43f af33 	beq.w	80098e2 <pow+0xee>
 8009a7c:	ec45 4b10 	vmov	d0, r4, r5
 8009a80:	f000 ffa5 	bl	800a9ce <finite>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f43f af2c 	beq.w	80098e2 <pow+0xee>
 8009a8a:	2304      	movs	r3, #4
 8009a8c:	9302      	str	r3, [sp, #8]
 8009a8e:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <pow+0x2c0>)
 8009a90:	9303      	str	r3, [sp, #12]
 8009a92:	2300      	movs	r3, #0
 8009a94:	930a      	str	r3, [sp, #40]	; 0x28
 8009a96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009a9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009a9e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8009aa2:	e7b8      	b.n	8009a16 <pow+0x222>
 8009aa4:	a802      	add	r0, sp, #8
 8009aa6:	f000 ff9a 	bl	800a9de <matherr>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	f47f af11 	bne.w	80098d2 <pow+0xde>
 8009ab0:	e7b5      	b.n	8009a1e <pow+0x22a>
 8009ab2:	bf00      	nop
 8009ab4:	0800af5a 	.word	0x0800af5a
 8009ab8:	3ff00000 	.word	0x3ff00000
 8009abc:	fff00000 	.word	0xfff00000
 8009ac0:	3fe00000 	.word	0x3fe00000
 8009ac4:	47efffff 	.word	0x47efffff
 8009ac8:	c7efffff 	.word	0xc7efffff
 8009acc:	7ff00000 	.word	0x7ff00000
 8009ad0:	20000204 	.word	0x20000204
 8009ad4:	00000000 	.word	0x00000000

08009ad8 <__ieee754_log>:
 8009ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009adc:	ec51 0b10 	vmov	r0, r1, d0
 8009ae0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8009ae4:	b087      	sub	sp, #28
 8009ae6:	460d      	mov	r5, r1
 8009ae8:	da27      	bge.n	8009b3a <__ieee754_log+0x62>
 8009aea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009aee:	4303      	orrs	r3, r0
 8009af0:	ee10 2a10 	vmov	r2, s0
 8009af4:	d10a      	bne.n	8009b0c <__ieee754_log+0x34>
 8009af6:	49cc      	ldr	r1, [pc, #816]	; (8009e28 <__ieee754_log+0x350>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	2300      	movs	r3, #0
 8009afc:	2000      	movs	r0, #0
 8009afe:	f7f6 fea5 	bl	800084c <__aeabi_ddiv>
 8009b02:	ec41 0b10 	vmov	d0, r0, r1
 8009b06:	b007      	add	sp, #28
 8009b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0c:	2900      	cmp	r1, #0
 8009b0e:	da05      	bge.n	8009b1c <__ieee754_log+0x44>
 8009b10:	460b      	mov	r3, r1
 8009b12:	f7f6 fbb9 	bl	8000288 <__aeabi_dsub>
 8009b16:	2200      	movs	r2, #0
 8009b18:	2300      	movs	r3, #0
 8009b1a:	e7f0      	b.n	8009afe <__ieee754_log+0x26>
 8009b1c:	4bc3      	ldr	r3, [pc, #780]	; (8009e2c <__ieee754_log+0x354>)
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f7f6 fd6a 	bl	80005f8 <__aeabi_dmul>
 8009b24:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8009b28:	460d      	mov	r5, r1
 8009b2a:	4ac1      	ldr	r2, [pc, #772]	; (8009e30 <__ieee754_log+0x358>)
 8009b2c:	4295      	cmp	r5, r2
 8009b2e:	dd06      	ble.n	8009b3e <__ieee754_log+0x66>
 8009b30:	4602      	mov	r2, r0
 8009b32:	460b      	mov	r3, r1
 8009b34:	f7f6 fbaa 	bl	800028c <__adddf3>
 8009b38:	e7e3      	b.n	8009b02 <__ieee754_log+0x2a>
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	e7f5      	b.n	8009b2a <__ieee754_log+0x52>
 8009b3e:	152c      	asrs	r4, r5, #20
 8009b40:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009b44:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8009b48:	441c      	add	r4, r3
 8009b4a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8009b4e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8009b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b56:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8009b5a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8009b5e:	ea42 0105 	orr.w	r1, r2, r5
 8009b62:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8009b66:	2200      	movs	r2, #0
 8009b68:	4bb2      	ldr	r3, [pc, #712]	; (8009e34 <__ieee754_log+0x35c>)
 8009b6a:	f7f6 fb8d 	bl	8000288 <__aeabi_dsub>
 8009b6e:	1cab      	adds	r3, r5, #2
 8009b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	4682      	mov	sl, r0
 8009b78:	468b      	mov	fp, r1
 8009b7a:	f04f 0200 	mov.w	r2, #0
 8009b7e:	dc53      	bgt.n	8009c28 <__ieee754_log+0x150>
 8009b80:	2300      	movs	r3, #0
 8009b82:	f7f6 ffa1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b86:	b1d0      	cbz	r0, 8009bbe <__ieee754_log+0xe6>
 8009b88:	2c00      	cmp	r4, #0
 8009b8a:	f000 8120 	beq.w	8009dce <__ieee754_log+0x2f6>
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f7f6 fcc8 	bl	8000524 <__aeabi_i2d>
 8009b94:	a390      	add	r3, pc, #576	; (adr r3, 8009dd8 <__ieee754_log+0x300>)
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	4606      	mov	r6, r0
 8009b9c:	460f      	mov	r7, r1
 8009b9e:	f7f6 fd2b 	bl	80005f8 <__aeabi_dmul>
 8009ba2:	a38f      	add	r3, pc, #572	; (adr r3, 8009de0 <__ieee754_log+0x308>)
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	4604      	mov	r4, r0
 8009baa:	460d      	mov	r5, r1
 8009bac:	4630      	mov	r0, r6
 8009bae:	4639      	mov	r1, r7
 8009bb0:	f7f6 fd22 	bl	80005f8 <__aeabi_dmul>
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4620      	mov	r0, r4
 8009bba:	4629      	mov	r1, r5
 8009bbc:	e7ba      	b.n	8009b34 <__ieee754_log+0x5c>
 8009bbe:	a38a      	add	r3, pc, #552	; (adr r3, 8009de8 <__ieee754_log+0x310>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	4650      	mov	r0, sl
 8009bc6:	4659      	mov	r1, fp
 8009bc8:	f7f6 fd16 	bl	80005f8 <__aeabi_dmul>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	4999      	ldr	r1, [pc, #612]	; (8009e38 <__ieee754_log+0x360>)
 8009bd4:	f7f6 fb58 	bl	8000288 <__aeabi_dsub>
 8009bd8:	4652      	mov	r2, sl
 8009bda:	4606      	mov	r6, r0
 8009bdc:	460f      	mov	r7, r1
 8009bde:	465b      	mov	r3, fp
 8009be0:	4650      	mov	r0, sl
 8009be2:	4659      	mov	r1, fp
 8009be4:	f7f6 fd08 	bl	80005f8 <__aeabi_dmul>
 8009be8:	4602      	mov	r2, r0
 8009bea:	460b      	mov	r3, r1
 8009bec:	4630      	mov	r0, r6
 8009bee:	4639      	mov	r1, r7
 8009bf0:	f7f6 fd02 	bl	80005f8 <__aeabi_dmul>
 8009bf4:	4606      	mov	r6, r0
 8009bf6:	460f      	mov	r7, r1
 8009bf8:	b914      	cbnz	r4, 8009c00 <__ieee754_log+0x128>
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	463b      	mov	r3, r7
 8009bfe:	e0a0      	b.n	8009d42 <__ieee754_log+0x26a>
 8009c00:	4620      	mov	r0, r4
 8009c02:	f7f6 fc8f 	bl	8000524 <__aeabi_i2d>
 8009c06:	a374      	add	r3, pc, #464	; (adr r3, 8009dd8 <__ieee754_log+0x300>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	4680      	mov	r8, r0
 8009c0e:	4689      	mov	r9, r1
 8009c10:	f7f6 fcf2 	bl	80005f8 <__aeabi_dmul>
 8009c14:	a372      	add	r3, pc, #456	; (adr r3, 8009de0 <__ieee754_log+0x308>)
 8009c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1a:	4604      	mov	r4, r0
 8009c1c:	460d      	mov	r5, r1
 8009c1e:	4640      	mov	r0, r8
 8009c20:	4649      	mov	r1, r9
 8009c22:	f7f6 fce9 	bl	80005f8 <__aeabi_dmul>
 8009c26:	e0a5      	b.n	8009d74 <__ieee754_log+0x29c>
 8009c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c2c:	f7f6 fb2e 	bl	800028c <__adddf3>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4650      	mov	r0, sl
 8009c36:	4659      	mov	r1, fp
 8009c38:	f7f6 fe08 	bl	800084c <__aeabi_ddiv>
 8009c3c:	e9cd 0100 	strd	r0, r1, [sp]
 8009c40:	4620      	mov	r0, r4
 8009c42:	f7f6 fc6f 	bl	8000524 <__aeabi_i2d>
 8009c46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c4e:	4610      	mov	r0, r2
 8009c50:	4619      	mov	r1, r3
 8009c52:	f7f6 fcd1 	bl	80005f8 <__aeabi_dmul>
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c5e:	f7f6 fccb 	bl	80005f8 <__aeabi_dmul>
 8009c62:	a363      	add	r3, pc, #396	; (adr r3, 8009df0 <__ieee754_log+0x318>)
 8009c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	a361      	add	r3, pc, #388	; (adr r3, 8009df8 <__ieee754_log+0x320>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fb09 	bl	800028c <__adddf3>
 8009c7a:	4642      	mov	r2, r8
 8009c7c:	464b      	mov	r3, r9
 8009c7e:	f7f6 fcbb 	bl	80005f8 <__aeabi_dmul>
 8009c82:	a35f      	add	r3, pc, #380	; (adr r3, 8009e00 <__ieee754_log+0x328>)
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f7f6 fb00 	bl	800028c <__adddf3>
 8009c8c:	4642      	mov	r2, r8
 8009c8e:	464b      	mov	r3, r9
 8009c90:	f7f6 fcb2 	bl	80005f8 <__aeabi_dmul>
 8009c94:	a35c      	add	r3, pc, #368	; (adr r3, 8009e08 <__ieee754_log+0x330>)
 8009c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9a:	f7f6 faf7 	bl	800028c <__adddf3>
 8009c9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ca2:	f7f6 fca9 	bl	80005f8 <__aeabi_dmul>
 8009ca6:	a35a      	add	r3, pc, #360	; (adr r3, 8009e10 <__ieee754_log+0x338>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	4649      	mov	r1, r9
 8009cb4:	f7f6 fca0 	bl	80005f8 <__aeabi_dmul>
 8009cb8:	a357      	add	r3, pc, #348	; (adr r3, 8009e18 <__ieee754_log+0x340>)
 8009cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cbe:	f7f6 fae5 	bl	800028c <__adddf3>
 8009cc2:	4642      	mov	r2, r8
 8009cc4:	464b      	mov	r3, r9
 8009cc6:	f7f6 fc97 	bl	80005f8 <__aeabi_dmul>
 8009cca:	a355      	add	r3, pc, #340	; (adr r3, 8009e20 <__ieee754_log+0x348>)
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	f7f6 fadc 	bl	800028c <__adddf3>
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	464b      	mov	r3, r9
 8009cd8:	f7f6 fc8e 	bl	80005f8 <__aeabi_dmul>
 8009cdc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8009ce8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cec:	f7f6 face 	bl	800028c <__adddf3>
 8009cf0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8009cf4:	3551      	adds	r5, #81	; 0x51
 8009cf6:	4335      	orrs	r5, r6
 8009cf8:	2d00      	cmp	r5, #0
 8009cfa:	4680      	mov	r8, r0
 8009cfc:	4689      	mov	r9, r1
 8009cfe:	dd48      	ble.n	8009d92 <__ieee754_log+0x2ba>
 8009d00:	2200      	movs	r2, #0
 8009d02:	4b4d      	ldr	r3, [pc, #308]	; (8009e38 <__ieee754_log+0x360>)
 8009d04:	4650      	mov	r0, sl
 8009d06:	4659      	mov	r1, fp
 8009d08:	f7f6 fc76 	bl	80005f8 <__aeabi_dmul>
 8009d0c:	4652      	mov	r2, sl
 8009d0e:	465b      	mov	r3, fp
 8009d10:	f7f6 fc72 	bl	80005f8 <__aeabi_dmul>
 8009d14:	4602      	mov	r2, r0
 8009d16:	460b      	mov	r3, r1
 8009d18:	4606      	mov	r6, r0
 8009d1a:	460f      	mov	r7, r1
 8009d1c:	4640      	mov	r0, r8
 8009d1e:	4649      	mov	r1, r9
 8009d20:	f7f6 fab4 	bl	800028c <__adddf3>
 8009d24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d28:	f7f6 fc66 	bl	80005f8 <__aeabi_dmul>
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	4689      	mov	r9, r1
 8009d30:	b964      	cbnz	r4, 8009d4c <__ieee754_log+0x274>
 8009d32:	4602      	mov	r2, r0
 8009d34:	460b      	mov	r3, r1
 8009d36:	4630      	mov	r0, r6
 8009d38:	4639      	mov	r1, r7
 8009d3a:	f7f6 faa5 	bl	8000288 <__aeabi_dsub>
 8009d3e:	4602      	mov	r2, r0
 8009d40:	460b      	mov	r3, r1
 8009d42:	4650      	mov	r0, sl
 8009d44:	4659      	mov	r1, fp
 8009d46:	f7f6 fa9f 	bl	8000288 <__aeabi_dsub>
 8009d4a:	e6da      	b.n	8009b02 <__ieee754_log+0x2a>
 8009d4c:	a322      	add	r3, pc, #136	; (adr r3, 8009dd8 <__ieee754_log+0x300>)
 8009d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d56:	f7f6 fc4f 	bl	80005f8 <__aeabi_dmul>
 8009d5a:	a321      	add	r3, pc, #132	; (adr r3, 8009de0 <__ieee754_log+0x308>)
 8009d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d60:	4604      	mov	r4, r0
 8009d62:	460d      	mov	r5, r1
 8009d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d68:	f7f6 fc46 	bl	80005f8 <__aeabi_dmul>
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	464b      	mov	r3, r9
 8009d70:	f7f6 fa8c 	bl	800028c <__adddf3>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4630      	mov	r0, r6
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	f7f6 fa84 	bl	8000288 <__aeabi_dsub>
 8009d80:	4652      	mov	r2, sl
 8009d82:	465b      	mov	r3, fp
 8009d84:	f7f6 fa80 	bl	8000288 <__aeabi_dsub>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4620      	mov	r0, r4
 8009d8e:	4629      	mov	r1, r5
 8009d90:	e7d9      	b.n	8009d46 <__ieee754_log+0x26e>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4650      	mov	r0, sl
 8009d98:	4659      	mov	r1, fp
 8009d9a:	f7f6 fa75 	bl	8000288 <__aeabi_dsub>
 8009d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009da2:	f7f6 fc29 	bl	80005f8 <__aeabi_dmul>
 8009da6:	4606      	mov	r6, r0
 8009da8:	460f      	mov	r7, r1
 8009daa:	2c00      	cmp	r4, #0
 8009dac:	f43f af25 	beq.w	8009bfa <__ieee754_log+0x122>
 8009db0:	a309      	add	r3, pc, #36	; (adr r3, 8009dd8 <__ieee754_log+0x300>)
 8009db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dba:	f7f6 fc1d 	bl	80005f8 <__aeabi_dmul>
 8009dbe:	a308      	add	r3, pc, #32	; (adr r3, 8009de0 <__ieee754_log+0x308>)
 8009dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009dcc:	e729      	b.n	8009c22 <__ieee754_log+0x14a>
 8009dce:	2000      	movs	r0, #0
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	e696      	b.n	8009b02 <__ieee754_log+0x2a>
 8009dd4:	f3af 8000 	nop.w
 8009dd8:	fee00000 	.word	0xfee00000
 8009ddc:	3fe62e42 	.word	0x3fe62e42
 8009de0:	35793c76 	.word	0x35793c76
 8009de4:	3dea39ef 	.word	0x3dea39ef
 8009de8:	55555555 	.word	0x55555555
 8009dec:	3fd55555 	.word	0x3fd55555
 8009df0:	df3e5244 	.word	0xdf3e5244
 8009df4:	3fc2f112 	.word	0x3fc2f112
 8009df8:	96cb03de 	.word	0x96cb03de
 8009dfc:	3fc74664 	.word	0x3fc74664
 8009e00:	94229359 	.word	0x94229359
 8009e04:	3fd24924 	.word	0x3fd24924
 8009e08:	55555593 	.word	0x55555593
 8009e0c:	3fe55555 	.word	0x3fe55555
 8009e10:	d078c69f 	.word	0xd078c69f
 8009e14:	3fc39a09 	.word	0x3fc39a09
 8009e18:	1d8e78af 	.word	0x1d8e78af
 8009e1c:	3fcc71c5 	.word	0x3fcc71c5
 8009e20:	9997fa04 	.word	0x9997fa04
 8009e24:	3fd99999 	.word	0x3fd99999
 8009e28:	c3500000 	.word	0xc3500000
 8009e2c:	43500000 	.word	0x43500000
 8009e30:	7fefffff 	.word	0x7fefffff
 8009e34:	3ff00000 	.word	0x3ff00000
 8009e38:	3fe00000 	.word	0x3fe00000
 8009e3c:	00000000 	.word	0x00000000

08009e40 <__ieee754_pow>:
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	b091      	sub	sp, #68	; 0x44
 8009e46:	ed8d 1b00 	vstr	d1, [sp]
 8009e4a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009e4e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009e52:	ea58 0302 	orrs.w	r3, r8, r2
 8009e56:	ec57 6b10 	vmov	r6, r7, d0
 8009e5a:	f000 84be 	beq.w	800a7da <__ieee754_pow+0x99a>
 8009e5e:	4b7a      	ldr	r3, [pc, #488]	; (800a048 <__ieee754_pow+0x208>)
 8009e60:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009e64:	429c      	cmp	r4, r3
 8009e66:	463d      	mov	r5, r7
 8009e68:	ee10 aa10 	vmov	sl, s0
 8009e6c:	dc09      	bgt.n	8009e82 <__ieee754_pow+0x42>
 8009e6e:	d103      	bne.n	8009e78 <__ieee754_pow+0x38>
 8009e70:	b93e      	cbnz	r6, 8009e82 <__ieee754_pow+0x42>
 8009e72:	45a0      	cmp	r8, r4
 8009e74:	dc0d      	bgt.n	8009e92 <__ieee754_pow+0x52>
 8009e76:	e001      	b.n	8009e7c <__ieee754_pow+0x3c>
 8009e78:	4598      	cmp	r8, r3
 8009e7a:	dc02      	bgt.n	8009e82 <__ieee754_pow+0x42>
 8009e7c:	4598      	cmp	r8, r3
 8009e7e:	d10e      	bne.n	8009e9e <__ieee754_pow+0x5e>
 8009e80:	b16a      	cbz	r2, 8009e9e <__ieee754_pow+0x5e>
 8009e82:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009e86:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009e8a:	ea54 030a 	orrs.w	r3, r4, sl
 8009e8e:	f000 84a4 	beq.w	800a7da <__ieee754_pow+0x99a>
 8009e92:	486e      	ldr	r0, [pc, #440]	; (800a04c <__ieee754_pow+0x20c>)
 8009e94:	b011      	add	sp, #68	; 0x44
 8009e96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e9a:	f000 bda5 	b.w	800a9e8 <nan>
 8009e9e:	2d00      	cmp	r5, #0
 8009ea0:	da53      	bge.n	8009f4a <__ieee754_pow+0x10a>
 8009ea2:	4b6b      	ldr	r3, [pc, #428]	; (800a050 <__ieee754_pow+0x210>)
 8009ea4:	4598      	cmp	r8, r3
 8009ea6:	dc4d      	bgt.n	8009f44 <__ieee754_pow+0x104>
 8009ea8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009eac:	4598      	cmp	r8, r3
 8009eae:	dd4c      	ble.n	8009f4a <__ieee754_pow+0x10a>
 8009eb0:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009eb4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009eb8:	2b14      	cmp	r3, #20
 8009eba:	dd26      	ble.n	8009f0a <__ieee754_pow+0xca>
 8009ebc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009ec0:	fa22 f103 	lsr.w	r1, r2, r3
 8009ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d13e      	bne.n	8009f4a <__ieee754_pow+0x10a>
 8009ecc:	f001 0101 	and.w	r1, r1, #1
 8009ed0:	f1c1 0b02 	rsb	fp, r1, #2
 8009ed4:	2a00      	cmp	r2, #0
 8009ed6:	d15b      	bne.n	8009f90 <__ieee754_pow+0x150>
 8009ed8:	4b5b      	ldr	r3, [pc, #364]	; (800a048 <__ieee754_pow+0x208>)
 8009eda:	4598      	cmp	r8, r3
 8009edc:	d124      	bne.n	8009f28 <__ieee754_pow+0xe8>
 8009ede:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009ee2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009ee6:	ea53 030a 	orrs.w	r3, r3, sl
 8009eea:	f000 8476 	beq.w	800a7da <__ieee754_pow+0x99a>
 8009eee:	4b59      	ldr	r3, [pc, #356]	; (800a054 <__ieee754_pow+0x214>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	dd2d      	ble.n	8009f50 <__ieee754_pow+0x110>
 8009ef4:	f1b9 0f00 	cmp.w	r9, #0
 8009ef8:	f280 8473 	bge.w	800a7e2 <__ieee754_pow+0x9a2>
 8009efc:	2000      	movs	r0, #0
 8009efe:	2100      	movs	r1, #0
 8009f00:	ec41 0b10 	vmov	d0, r0, r1
 8009f04:	b011      	add	sp, #68	; 0x44
 8009f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0a:	2a00      	cmp	r2, #0
 8009f0c:	d13e      	bne.n	8009f8c <__ieee754_pow+0x14c>
 8009f0e:	f1c3 0314 	rsb	r3, r3, #20
 8009f12:	fa48 f103 	asr.w	r1, r8, r3
 8009f16:	fa01 f303 	lsl.w	r3, r1, r3
 8009f1a:	4543      	cmp	r3, r8
 8009f1c:	f040 8469 	bne.w	800a7f2 <__ieee754_pow+0x9b2>
 8009f20:	f001 0101 	and.w	r1, r1, #1
 8009f24:	f1c1 0b02 	rsb	fp, r1, #2
 8009f28:	4b4b      	ldr	r3, [pc, #300]	; (800a058 <__ieee754_pow+0x218>)
 8009f2a:	4598      	cmp	r8, r3
 8009f2c:	d118      	bne.n	8009f60 <__ieee754_pow+0x120>
 8009f2e:	f1b9 0f00 	cmp.w	r9, #0
 8009f32:	f280 845a 	bge.w	800a7ea <__ieee754_pow+0x9aa>
 8009f36:	4948      	ldr	r1, [pc, #288]	; (800a058 <__ieee754_pow+0x218>)
 8009f38:	4632      	mov	r2, r6
 8009f3a:	463b      	mov	r3, r7
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	f7f6 fc85 	bl	800084c <__aeabi_ddiv>
 8009f42:	e7dd      	b.n	8009f00 <__ieee754_pow+0xc0>
 8009f44:	f04f 0b02 	mov.w	fp, #2
 8009f48:	e7c4      	b.n	8009ed4 <__ieee754_pow+0x94>
 8009f4a:	f04f 0b00 	mov.w	fp, #0
 8009f4e:	e7c1      	b.n	8009ed4 <__ieee754_pow+0x94>
 8009f50:	f1b9 0f00 	cmp.w	r9, #0
 8009f54:	dad2      	bge.n	8009efc <__ieee754_pow+0xbc>
 8009f56:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009f5a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009f5e:	e7cf      	b.n	8009f00 <__ieee754_pow+0xc0>
 8009f60:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009f64:	d106      	bne.n	8009f74 <__ieee754_pow+0x134>
 8009f66:	4632      	mov	r2, r6
 8009f68:	463b      	mov	r3, r7
 8009f6a:	4610      	mov	r0, r2
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	f7f6 fb43 	bl	80005f8 <__aeabi_dmul>
 8009f72:	e7c5      	b.n	8009f00 <__ieee754_pow+0xc0>
 8009f74:	4b39      	ldr	r3, [pc, #228]	; (800a05c <__ieee754_pow+0x21c>)
 8009f76:	4599      	cmp	r9, r3
 8009f78:	d10a      	bne.n	8009f90 <__ieee754_pow+0x150>
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	db08      	blt.n	8009f90 <__ieee754_pow+0x150>
 8009f7e:	ec47 6b10 	vmov	d0, r6, r7
 8009f82:	b011      	add	sp, #68	; 0x44
 8009f84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	f000 bc68 	b.w	800a85c <__ieee754_sqrt>
 8009f8c:	f04f 0b00 	mov.w	fp, #0
 8009f90:	ec47 6b10 	vmov	d0, r6, r7
 8009f94:	f000 fd12 	bl	800a9bc <fabs>
 8009f98:	ec51 0b10 	vmov	r0, r1, d0
 8009f9c:	f1ba 0f00 	cmp.w	sl, #0
 8009fa0:	d127      	bne.n	8009ff2 <__ieee754_pow+0x1b2>
 8009fa2:	b124      	cbz	r4, 8009fae <__ieee754_pow+0x16e>
 8009fa4:	4b2c      	ldr	r3, [pc, #176]	; (800a058 <__ieee754_pow+0x218>)
 8009fa6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009faa:	429a      	cmp	r2, r3
 8009fac:	d121      	bne.n	8009ff2 <__ieee754_pow+0x1b2>
 8009fae:	f1b9 0f00 	cmp.w	r9, #0
 8009fb2:	da05      	bge.n	8009fc0 <__ieee754_pow+0x180>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	2000      	movs	r0, #0
 8009fba:	4927      	ldr	r1, [pc, #156]	; (800a058 <__ieee754_pow+0x218>)
 8009fbc:	f7f6 fc46 	bl	800084c <__aeabi_ddiv>
 8009fc0:	2d00      	cmp	r5, #0
 8009fc2:	da9d      	bge.n	8009f00 <__ieee754_pow+0xc0>
 8009fc4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009fc8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009fcc:	ea54 030b 	orrs.w	r3, r4, fp
 8009fd0:	d108      	bne.n	8009fe4 <__ieee754_pow+0x1a4>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	4619      	mov	r1, r3
 8009fda:	f7f6 f955 	bl	8000288 <__aeabi_dsub>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	e7ac      	b.n	8009f3e <__ieee754_pow+0xfe>
 8009fe4:	f1bb 0f01 	cmp.w	fp, #1
 8009fe8:	d18a      	bne.n	8009f00 <__ieee754_pow+0xc0>
 8009fea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fee:	4619      	mov	r1, r3
 8009ff0:	e786      	b.n	8009f00 <__ieee754_pow+0xc0>
 8009ff2:	0fed      	lsrs	r5, r5, #31
 8009ff4:	1e6b      	subs	r3, r5, #1
 8009ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8009ff8:	ea5b 0303 	orrs.w	r3, fp, r3
 8009ffc:	d102      	bne.n	800a004 <__ieee754_pow+0x1c4>
 8009ffe:	4632      	mov	r2, r6
 800a000:	463b      	mov	r3, r7
 800a002:	e7e8      	b.n	8009fd6 <__ieee754_pow+0x196>
 800a004:	4b16      	ldr	r3, [pc, #88]	; (800a060 <__ieee754_pow+0x220>)
 800a006:	4598      	cmp	r8, r3
 800a008:	f340 80fe 	ble.w	800a208 <__ieee754_pow+0x3c8>
 800a00c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a010:	4598      	cmp	r8, r3
 800a012:	dd0a      	ble.n	800a02a <__ieee754_pow+0x1ea>
 800a014:	4b0f      	ldr	r3, [pc, #60]	; (800a054 <__ieee754_pow+0x214>)
 800a016:	429c      	cmp	r4, r3
 800a018:	dc0d      	bgt.n	800a036 <__ieee754_pow+0x1f6>
 800a01a:	f1b9 0f00 	cmp.w	r9, #0
 800a01e:	f6bf af6d 	bge.w	8009efc <__ieee754_pow+0xbc>
 800a022:	a307      	add	r3, pc, #28	; (adr r3, 800a040 <__ieee754_pow+0x200>)
 800a024:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a028:	e79f      	b.n	8009f6a <__ieee754_pow+0x12a>
 800a02a:	4b0e      	ldr	r3, [pc, #56]	; (800a064 <__ieee754_pow+0x224>)
 800a02c:	429c      	cmp	r4, r3
 800a02e:	ddf4      	ble.n	800a01a <__ieee754_pow+0x1da>
 800a030:	4b09      	ldr	r3, [pc, #36]	; (800a058 <__ieee754_pow+0x218>)
 800a032:	429c      	cmp	r4, r3
 800a034:	dd18      	ble.n	800a068 <__ieee754_pow+0x228>
 800a036:	f1b9 0f00 	cmp.w	r9, #0
 800a03a:	dcf2      	bgt.n	800a022 <__ieee754_pow+0x1e2>
 800a03c:	e75e      	b.n	8009efc <__ieee754_pow+0xbc>
 800a03e:	bf00      	nop
 800a040:	8800759c 	.word	0x8800759c
 800a044:	7e37e43c 	.word	0x7e37e43c
 800a048:	7ff00000 	.word	0x7ff00000
 800a04c:	0800ae49 	.word	0x0800ae49
 800a050:	433fffff 	.word	0x433fffff
 800a054:	3fefffff 	.word	0x3fefffff
 800a058:	3ff00000 	.word	0x3ff00000
 800a05c:	3fe00000 	.word	0x3fe00000
 800a060:	41e00000 	.word	0x41e00000
 800a064:	3feffffe 	.word	0x3feffffe
 800a068:	2200      	movs	r2, #0
 800a06a:	4b63      	ldr	r3, [pc, #396]	; (800a1f8 <__ieee754_pow+0x3b8>)
 800a06c:	f7f6 f90c 	bl	8000288 <__aeabi_dsub>
 800a070:	a355      	add	r3, pc, #340	; (adr r3, 800a1c8 <__ieee754_pow+0x388>)
 800a072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a076:	4604      	mov	r4, r0
 800a078:	460d      	mov	r5, r1
 800a07a:	f7f6 fabd 	bl	80005f8 <__aeabi_dmul>
 800a07e:	a354      	add	r3, pc, #336	; (adr r3, 800a1d0 <__ieee754_pow+0x390>)
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	4606      	mov	r6, r0
 800a086:	460f      	mov	r7, r1
 800a088:	4620      	mov	r0, r4
 800a08a:	4629      	mov	r1, r5
 800a08c:	f7f6 fab4 	bl	80005f8 <__aeabi_dmul>
 800a090:	2200      	movs	r2, #0
 800a092:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a096:	4b59      	ldr	r3, [pc, #356]	; (800a1fc <__ieee754_pow+0x3bc>)
 800a098:	4620      	mov	r0, r4
 800a09a:	4629      	mov	r1, r5
 800a09c:	f7f6 faac 	bl	80005f8 <__aeabi_dmul>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	460b      	mov	r3, r1
 800a0a4:	a14c      	add	r1, pc, #304	; (adr r1, 800a1d8 <__ieee754_pow+0x398>)
 800a0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0aa:	f7f6 f8ed 	bl	8000288 <__aeabi_dsub>
 800a0ae:	4622      	mov	r2, r4
 800a0b0:	462b      	mov	r3, r5
 800a0b2:	f7f6 faa1 	bl	80005f8 <__aeabi_dmul>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	4950      	ldr	r1, [pc, #320]	; (800a200 <__ieee754_pow+0x3c0>)
 800a0be:	f7f6 f8e3 	bl	8000288 <__aeabi_dsub>
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	462b      	mov	r3, r5
 800a0c6:	4680      	mov	r8, r0
 800a0c8:	4689      	mov	r9, r1
 800a0ca:	4620      	mov	r0, r4
 800a0cc:	4629      	mov	r1, r5
 800a0ce:	f7f6 fa93 	bl	80005f8 <__aeabi_dmul>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	4649      	mov	r1, r9
 800a0da:	f7f6 fa8d 	bl	80005f8 <__aeabi_dmul>
 800a0de:	a340      	add	r3, pc, #256	; (adr r3, 800a1e0 <__ieee754_pow+0x3a0>)
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 fa88 	bl	80005f8 <__aeabi_dmul>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f0:	f7f6 f8ca 	bl	8000288 <__aeabi_dsub>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	4630      	mov	r0, r6
 800a0fe:	4639      	mov	r1, r7
 800a100:	f7f6 f8c4 	bl	800028c <__adddf3>
 800a104:	2000      	movs	r0, #0
 800a106:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a10a:	4632      	mov	r2, r6
 800a10c:	463b      	mov	r3, r7
 800a10e:	f7f6 f8bb 	bl	8000288 <__aeabi_dsub>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	f7f6 f8b5 	bl	8000288 <__aeabi_dsub>
 800a11e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a120:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a124:	4313      	orrs	r3, r2
 800a126:	4606      	mov	r6, r0
 800a128:	460f      	mov	r7, r1
 800a12a:	f040 81eb 	bne.w	800a504 <__ieee754_pow+0x6c4>
 800a12e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800a1e8 <__ieee754_pow+0x3a8>
 800a132:	e9dd 4500 	ldrd	r4, r5, [sp]
 800a136:	2400      	movs	r4, #0
 800a138:	4622      	mov	r2, r4
 800a13a:	462b      	mov	r3, r5
 800a13c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a140:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a144:	f7f6 f8a0 	bl	8000288 <__aeabi_dsub>
 800a148:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a14c:	f7f6 fa54 	bl	80005f8 <__aeabi_dmul>
 800a150:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a154:	4680      	mov	r8, r0
 800a156:	4689      	mov	r9, r1
 800a158:	4630      	mov	r0, r6
 800a15a:	4639      	mov	r1, r7
 800a15c:	f7f6 fa4c 	bl	80005f8 <__aeabi_dmul>
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	4640      	mov	r0, r8
 800a166:	4649      	mov	r1, r9
 800a168:	f7f6 f890 	bl	800028c <__adddf3>
 800a16c:	4622      	mov	r2, r4
 800a16e:	462b      	mov	r3, r5
 800a170:	4680      	mov	r8, r0
 800a172:	4689      	mov	r9, r1
 800a174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a178:	f7f6 fa3e 	bl	80005f8 <__aeabi_dmul>
 800a17c:	460b      	mov	r3, r1
 800a17e:	4604      	mov	r4, r0
 800a180:	460d      	mov	r5, r1
 800a182:	4602      	mov	r2, r0
 800a184:	4649      	mov	r1, r9
 800a186:	4640      	mov	r0, r8
 800a188:	e9cd 4500 	strd	r4, r5, [sp]
 800a18c:	f7f6 f87e 	bl	800028c <__adddf3>
 800a190:	4b1c      	ldr	r3, [pc, #112]	; (800a204 <__ieee754_pow+0x3c4>)
 800a192:	4299      	cmp	r1, r3
 800a194:	4606      	mov	r6, r0
 800a196:	460f      	mov	r7, r1
 800a198:	468b      	mov	fp, r1
 800a19a:	f340 82f7 	ble.w	800a78c <__ieee754_pow+0x94c>
 800a19e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a1a2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a1a6:	4303      	orrs	r3, r0
 800a1a8:	f000 81ea 	beq.w	800a580 <__ieee754_pow+0x740>
 800a1ac:	a310      	add	r3, pc, #64	; (adr r3, 800a1f0 <__ieee754_pow+0x3b0>)
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1b6:	f7f6 fa1f 	bl	80005f8 <__aeabi_dmul>
 800a1ba:	a30d      	add	r3, pc, #52	; (adr r3, 800a1f0 <__ieee754_pow+0x3b0>)
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	e6d5      	b.n	8009f6e <__ieee754_pow+0x12e>
 800a1c2:	bf00      	nop
 800a1c4:	f3af 8000 	nop.w
 800a1c8:	60000000 	.word	0x60000000
 800a1cc:	3ff71547 	.word	0x3ff71547
 800a1d0:	f85ddf44 	.word	0xf85ddf44
 800a1d4:	3e54ae0b 	.word	0x3e54ae0b
 800a1d8:	55555555 	.word	0x55555555
 800a1dc:	3fd55555 	.word	0x3fd55555
 800a1e0:	652b82fe 	.word	0x652b82fe
 800a1e4:	3ff71547 	.word	0x3ff71547
 800a1e8:	00000000 	.word	0x00000000
 800a1ec:	bff00000 	.word	0xbff00000
 800a1f0:	8800759c 	.word	0x8800759c
 800a1f4:	7e37e43c 	.word	0x7e37e43c
 800a1f8:	3ff00000 	.word	0x3ff00000
 800a1fc:	3fd00000 	.word	0x3fd00000
 800a200:	3fe00000 	.word	0x3fe00000
 800a204:	408fffff 	.word	0x408fffff
 800a208:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a20c:	f04f 0200 	mov.w	r2, #0
 800a210:	da05      	bge.n	800a21e <__ieee754_pow+0x3de>
 800a212:	4bd3      	ldr	r3, [pc, #844]	; (800a560 <__ieee754_pow+0x720>)
 800a214:	f7f6 f9f0 	bl	80005f8 <__aeabi_dmul>
 800a218:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a21c:	460c      	mov	r4, r1
 800a21e:	1523      	asrs	r3, r4, #20
 800a220:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a224:	4413      	add	r3, r2
 800a226:	9309      	str	r3, [sp, #36]	; 0x24
 800a228:	4bce      	ldr	r3, [pc, #824]	; (800a564 <__ieee754_pow+0x724>)
 800a22a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a22e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a232:	429c      	cmp	r4, r3
 800a234:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a238:	dd08      	ble.n	800a24c <__ieee754_pow+0x40c>
 800a23a:	4bcb      	ldr	r3, [pc, #812]	; (800a568 <__ieee754_pow+0x728>)
 800a23c:	429c      	cmp	r4, r3
 800a23e:	f340 815e 	ble.w	800a4fe <__ieee754_pow+0x6be>
 800a242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a244:	3301      	adds	r3, #1
 800a246:	9309      	str	r3, [sp, #36]	; 0x24
 800a248:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a24c:	f04f 0a00 	mov.w	sl, #0
 800a250:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a254:	930c      	str	r3, [sp, #48]	; 0x30
 800a256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a258:	4bc4      	ldr	r3, [pc, #784]	; (800a56c <__ieee754_pow+0x72c>)
 800a25a:	4413      	add	r3, r2
 800a25c:	ed93 7b00 	vldr	d7, [r3]
 800a260:	4629      	mov	r1, r5
 800a262:	ec53 2b17 	vmov	r2, r3, d7
 800a266:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a26a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a26e:	f7f6 f80b 	bl	8000288 <__aeabi_dsub>
 800a272:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a276:	4606      	mov	r6, r0
 800a278:	460f      	mov	r7, r1
 800a27a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a27e:	f7f6 f805 	bl	800028c <__adddf3>
 800a282:	4602      	mov	r2, r0
 800a284:	460b      	mov	r3, r1
 800a286:	2000      	movs	r0, #0
 800a288:	49b9      	ldr	r1, [pc, #740]	; (800a570 <__ieee754_pow+0x730>)
 800a28a:	f7f6 fadf 	bl	800084c <__aeabi_ddiv>
 800a28e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a292:	4602      	mov	r2, r0
 800a294:	460b      	mov	r3, r1
 800a296:	4630      	mov	r0, r6
 800a298:	4639      	mov	r1, r7
 800a29a:	f7f6 f9ad 	bl	80005f8 <__aeabi_dmul>
 800a29e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2a2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a2a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	9302      	str	r3, [sp, #8]
 800a2ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a2b2:	106d      	asrs	r5, r5, #1
 800a2b4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a2b8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a2bc:	2200      	movs	r2, #0
 800a2be:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a2c2:	4640      	mov	r0, r8
 800a2c4:	4649      	mov	r1, r9
 800a2c6:	4614      	mov	r4, r2
 800a2c8:	461d      	mov	r5, r3
 800a2ca:	f7f6 f995 	bl	80005f8 <__aeabi_dmul>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4630      	mov	r0, r6
 800a2d4:	4639      	mov	r1, r7
 800a2d6:	f7f5 ffd7 	bl	8000288 <__aeabi_dsub>
 800a2da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a2de:	4606      	mov	r6, r0
 800a2e0:	460f      	mov	r7, r1
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	4629      	mov	r1, r5
 800a2e6:	f7f5 ffcf 	bl	8000288 <__aeabi_dsub>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2f2:	f7f5 ffc9 	bl	8000288 <__aeabi_dsub>
 800a2f6:	4642      	mov	r2, r8
 800a2f8:	464b      	mov	r3, r9
 800a2fa:	f7f6 f97d 	bl	80005f8 <__aeabi_dmul>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4630      	mov	r0, r6
 800a304:	4639      	mov	r1, r7
 800a306:	f7f5 ffbf 	bl	8000288 <__aeabi_dsub>
 800a30a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a30e:	f7f6 f973 	bl	80005f8 <__aeabi_dmul>
 800a312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a316:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a31a:	4610      	mov	r0, r2
 800a31c:	4619      	mov	r1, r3
 800a31e:	f7f6 f96b 	bl	80005f8 <__aeabi_dmul>
 800a322:	a37b      	add	r3, pc, #492	; (adr r3, 800a510 <__ieee754_pow+0x6d0>)
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	4604      	mov	r4, r0
 800a32a:	460d      	mov	r5, r1
 800a32c:	f7f6 f964 	bl	80005f8 <__aeabi_dmul>
 800a330:	a379      	add	r3, pc, #484	; (adr r3, 800a518 <__ieee754_pow+0x6d8>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f7f5 ffa9 	bl	800028c <__adddf3>
 800a33a:	4622      	mov	r2, r4
 800a33c:	462b      	mov	r3, r5
 800a33e:	f7f6 f95b 	bl	80005f8 <__aeabi_dmul>
 800a342:	a377      	add	r3, pc, #476	; (adr r3, 800a520 <__ieee754_pow+0x6e0>)
 800a344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a348:	f7f5 ffa0 	bl	800028c <__adddf3>
 800a34c:	4622      	mov	r2, r4
 800a34e:	462b      	mov	r3, r5
 800a350:	f7f6 f952 	bl	80005f8 <__aeabi_dmul>
 800a354:	a374      	add	r3, pc, #464	; (adr r3, 800a528 <__ieee754_pow+0x6e8>)
 800a356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35a:	f7f5 ff97 	bl	800028c <__adddf3>
 800a35e:	4622      	mov	r2, r4
 800a360:	462b      	mov	r3, r5
 800a362:	f7f6 f949 	bl	80005f8 <__aeabi_dmul>
 800a366:	a372      	add	r3, pc, #456	; (adr r3, 800a530 <__ieee754_pow+0x6f0>)
 800a368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36c:	f7f5 ff8e 	bl	800028c <__adddf3>
 800a370:	4622      	mov	r2, r4
 800a372:	462b      	mov	r3, r5
 800a374:	f7f6 f940 	bl	80005f8 <__aeabi_dmul>
 800a378:	a36f      	add	r3, pc, #444	; (adr r3, 800a538 <__ieee754_pow+0x6f8>)
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	f7f5 ff85 	bl	800028c <__adddf3>
 800a382:	4622      	mov	r2, r4
 800a384:	4606      	mov	r6, r0
 800a386:	460f      	mov	r7, r1
 800a388:	462b      	mov	r3, r5
 800a38a:	4620      	mov	r0, r4
 800a38c:	4629      	mov	r1, r5
 800a38e:	f7f6 f933 	bl	80005f8 <__aeabi_dmul>
 800a392:	4602      	mov	r2, r0
 800a394:	460b      	mov	r3, r1
 800a396:	4630      	mov	r0, r6
 800a398:	4639      	mov	r1, r7
 800a39a:	f7f6 f92d 	bl	80005f8 <__aeabi_dmul>
 800a39e:	4642      	mov	r2, r8
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	460d      	mov	r5, r1
 800a3a4:	464b      	mov	r3, r9
 800a3a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3aa:	f7f5 ff6f 	bl	800028c <__adddf3>
 800a3ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3b2:	f7f6 f921 	bl	80005f8 <__aeabi_dmul>
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	f7f5 ff67 	bl	800028c <__adddf3>
 800a3be:	4642      	mov	r2, r8
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	460f      	mov	r7, r1
 800a3c4:	464b      	mov	r3, r9
 800a3c6:	4640      	mov	r0, r8
 800a3c8:	4649      	mov	r1, r9
 800a3ca:	f7f6 f915 	bl	80005f8 <__aeabi_dmul>
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	4b68      	ldr	r3, [pc, #416]	; (800a574 <__ieee754_pow+0x734>)
 800a3d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a3d6:	f7f5 ff59 	bl	800028c <__adddf3>
 800a3da:	4632      	mov	r2, r6
 800a3dc:	463b      	mov	r3, r7
 800a3de:	f7f5 ff55 	bl	800028c <__adddf3>
 800a3e2:	9802      	ldr	r0, [sp, #8]
 800a3e4:	460d      	mov	r5, r1
 800a3e6:	4604      	mov	r4, r0
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	460b      	mov	r3, r1
 800a3ec:	4640      	mov	r0, r8
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	f7f6 f902 	bl	80005f8 <__aeabi_dmul>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	4680      	mov	r8, r0
 800a3f8:	4689      	mov	r9, r1
 800a3fa:	4b5e      	ldr	r3, [pc, #376]	; (800a574 <__ieee754_pow+0x734>)
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	4629      	mov	r1, r5
 800a400:	f7f5 ff42 	bl	8000288 <__aeabi_dsub>
 800a404:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a408:	f7f5 ff3e 	bl	8000288 <__aeabi_dsub>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	4630      	mov	r0, r6
 800a412:	4639      	mov	r1, r7
 800a414:	f7f5 ff38 	bl	8000288 <__aeabi_dsub>
 800a418:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a41c:	f7f6 f8ec 	bl	80005f8 <__aeabi_dmul>
 800a420:	4622      	mov	r2, r4
 800a422:	4606      	mov	r6, r0
 800a424:	460f      	mov	r7, r1
 800a426:	462b      	mov	r3, r5
 800a428:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a42c:	f7f6 f8e4 	bl	80005f8 <__aeabi_dmul>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4630      	mov	r0, r6
 800a436:	4639      	mov	r1, r7
 800a438:	f7f5 ff28 	bl	800028c <__adddf3>
 800a43c:	4606      	mov	r6, r0
 800a43e:	460f      	mov	r7, r1
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4640      	mov	r0, r8
 800a446:	4649      	mov	r1, r9
 800a448:	f7f5 ff20 	bl	800028c <__adddf3>
 800a44c:	9802      	ldr	r0, [sp, #8]
 800a44e:	a33c      	add	r3, pc, #240	; (adr r3, 800a540 <__ieee754_pow+0x700>)
 800a450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a454:	4604      	mov	r4, r0
 800a456:	460d      	mov	r5, r1
 800a458:	f7f6 f8ce 	bl	80005f8 <__aeabi_dmul>
 800a45c:	4642      	mov	r2, r8
 800a45e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a462:	464b      	mov	r3, r9
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f5 ff0e 	bl	8000288 <__aeabi_dsub>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f5 ff08 	bl	8000288 <__aeabi_dsub>
 800a478:	a333      	add	r3, pc, #204	; (adr r3, 800a548 <__ieee754_pow+0x708>)
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f7f6 f8bb 	bl	80005f8 <__aeabi_dmul>
 800a482:	a333      	add	r3, pc, #204	; (adr r3, 800a550 <__ieee754_pow+0x710>)
 800a484:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a488:	4606      	mov	r6, r0
 800a48a:	460f      	mov	r7, r1
 800a48c:	4620      	mov	r0, r4
 800a48e:	4629      	mov	r1, r5
 800a490:	f7f6 f8b2 	bl	80005f8 <__aeabi_dmul>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	4630      	mov	r0, r6
 800a49a:	4639      	mov	r1, r7
 800a49c:	f7f5 fef6 	bl	800028c <__adddf3>
 800a4a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4a2:	4b35      	ldr	r3, [pc, #212]	; (800a578 <__ieee754_pow+0x738>)
 800a4a4:	4413      	add	r3, r2
 800a4a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4aa:	f7f5 feef 	bl	800028c <__adddf3>
 800a4ae:	4604      	mov	r4, r0
 800a4b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a4b2:	460d      	mov	r5, r1
 800a4b4:	f7f6 f836 	bl	8000524 <__aeabi_i2d>
 800a4b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4ba:	4b30      	ldr	r3, [pc, #192]	; (800a57c <__ieee754_pow+0x73c>)
 800a4bc:	4413      	add	r3, r2
 800a4be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4c2:	4606      	mov	r6, r0
 800a4c4:	460f      	mov	r7, r1
 800a4c6:	4622      	mov	r2, r4
 800a4c8:	462b      	mov	r3, r5
 800a4ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4ce:	f7f5 fedd 	bl	800028c <__adddf3>
 800a4d2:	4642      	mov	r2, r8
 800a4d4:	464b      	mov	r3, r9
 800a4d6:	f7f5 fed9 	bl	800028c <__adddf3>
 800a4da:	4632      	mov	r2, r6
 800a4dc:	463b      	mov	r3, r7
 800a4de:	f7f5 fed5 	bl	800028c <__adddf3>
 800a4e2:	9802      	ldr	r0, [sp, #8]
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	463b      	mov	r3, r7
 800a4e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4ec:	f7f5 fecc 	bl	8000288 <__aeabi_dsub>
 800a4f0:	4642      	mov	r2, r8
 800a4f2:	464b      	mov	r3, r9
 800a4f4:	f7f5 fec8 	bl	8000288 <__aeabi_dsub>
 800a4f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a4fc:	e607      	b.n	800a10e <__ieee754_pow+0x2ce>
 800a4fe:	f04f 0a01 	mov.w	sl, #1
 800a502:	e6a5      	b.n	800a250 <__ieee754_pow+0x410>
 800a504:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800a558 <__ieee754_pow+0x718>
 800a508:	e613      	b.n	800a132 <__ieee754_pow+0x2f2>
 800a50a:	bf00      	nop
 800a50c:	f3af 8000 	nop.w
 800a510:	4a454eef 	.word	0x4a454eef
 800a514:	3fca7e28 	.word	0x3fca7e28
 800a518:	93c9db65 	.word	0x93c9db65
 800a51c:	3fcd864a 	.word	0x3fcd864a
 800a520:	a91d4101 	.word	0xa91d4101
 800a524:	3fd17460 	.word	0x3fd17460
 800a528:	518f264d 	.word	0x518f264d
 800a52c:	3fd55555 	.word	0x3fd55555
 800a530:	db6fabff 	.word	0xdb6fabff
 800a534:	3fdb6db6 	.word	0x3fdb6db6
 800a538:	33333303 	.word	0x33333303
 800a53c:	3fe33333 	.word	0x3fe33333
 800a540:	e0000000 	.word	0xe0000000
 800a544:	3feec709 	.word	0x3feec709
 800a548:	dc3a03fd 	.word	0xdc3a03fd
 800a54c:	3feec709 	.word	0x3feec709
 800a550:	145b01f5 	.word	0x145b01f5
 800a554:	be3e2fe0 	.word	0xbe3e2fe0
 800a558:	00000000 	.word	0x00000000
 800a55c:	3ff00000 	.word	0x3ff00000
 800a560:	43400000 	.word	0x43400000
 800a564:	0003988e 	.word	0x0003988e
 800a568:	000bb679 	.word	0x000bb679
 800a56c:	0800af60 	.word	0x0800af60
 800a570:	3ff00000 	.word	0x3ff00000
 800a574:	40080000 	.word	0x40080000
 800a578:	0800af80 	.word	0x0800af80
 800a57c:	0800af70 	.word	0x0800af70
 800a580:	a3b4      	add	r3, pc, #720	; (adr r3, 800a854 <__ieee754_pow+0xa14>)
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	4640      	mov	r0, r8
 800a588:	4649      	mov	r1, r9
 800a58a:	f7f5 fe7f 	bl	800028c <__adddf3>
 800a58e:	4622      	mov	r2, r4
 800a590:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a594:	462b      	mov	r3, r5
 800a596:	4630      	mov	r0, r6
 800a598:	4639      	mov	r1, r7
 800a59a:	f7f5 fe75 	bl	8000288 <__aeabi_dsub>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a5a6:	f7f6 fab7 	bl	8000b18 <__aeabi_dcmpgt>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	f47f adfe 	bne.w	800a1ac <__ieee754_pow+0x36c>
 800a5b0:	4aa3      	ldr	r2, [pc, #652]	; (800a840 <__ieee754_pow+0xa00>)
 800a5b2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	f340 810a 	ble.w	800a7d0 <__ieee754_pow+0x990>
 800a5bc:	151b      	asrs	r3, r3, #20
 800a5be:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a5c2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a5c6:	fa4a f303 	asr.w	r3, sl, r3
 800a5ca:	445b      	add	r3, fp
 800a5cc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a5d0:	4e9c      	ldr	r6, [pc, #624]	; (800a844 <__ieee754_pow+0xa04>)
 800a5d2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a5d6:	4116      	asrs	r6, r2
 800a5d8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a5dc:	2000      	movs	r0, #0
 800a5de:	ea23 0106 	bic.w	r1, r3, r6
 800a5e2:	f1c2 0214 	rsb	r2, r2, #20
 800a5e6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a5ea:	fa4a fa02 	asr.w	sl, sl, r2
 800a5ee:	f1bb 0f00 	cmp.w	fp, #0
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	4620      	mov	r0, r4
 800a5f8:	4629      	mov	r1, r5
 800a5fa:	bfb8      	it	lt
 800a5fc:	f1ca 0a00 	rsblt	sl, sl, #0
 800a600:	f7f5 fe42 	bl	8000288 <__aeabi_dsub>
 800a604:	e9cd 0100 	strd	r0, r1, [sp]
 800a608:	4642      	mov	r2, r8
 800a60a:	464b      	mov	r3, r9
 800a60c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a610:	f7f5 fe3c 	bl	800028c <__adddf3>
 800a614:	2000      	movs	r0, #0
 800a616:	a378      	add	r3, pc, #480	; (adr r3, 800a7f8 <__ieee754_pow+0x9b8>)
 800a618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	f7f5 ffea 	bl	80005f8 <__aeabi_dmul>
 800a624:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a628:	4606      	mov	r6, r0
 800a62a:	460f      	mov	r7, r1
 800a62c:	4620      	mov	r0, r4
 800a62e:	4629      	mov	r1, r5
 800a630:	f7f5 fe2a 	bl	8000288 <__aeabi_dsub>
 800a634:	4602      	mov	r2, r0
 800a636:	460b      	mov	r3, r1
 800a638:	4640      	mov	r0, r8
 800a63a:	4649      	mov	r1, r9
 800a63c:	f7f5 fe24 	bl	8000288 <__aeabi_dsub>
 800a640:	a36f      	add	r3, pc, #444	; (adr r3, 800a800 <__ieee754_pow+0x9c0>)
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f7f5 ffd7 	bl	80005f8 <__aeabi_dmul>
 800a64a:	a36f      	add	r3, pc, #444	; (adr r3, 800a808 <__ieee754_pow+0x9c8>)
 800a64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a650:	4680      	mov	r8, r0
 800a652:	4689      	mov	r9, r1
 800a654:	4620      	mov	r0, r4
 800a656:	4629      	mov	r1, r5
 800a658:	f7f5 ffce 	bl	80005f8 <__aeabi_dmul>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4640      	mov	r0, r8
 800a662:	4649      	mov	r1, r9
 800a664:	f7f5 fe12 	bl	800028c <__adddf3>
 800a668:	4604      	mov	r4, r0
 800a66a:	460d      	mov	r5, r1
 800a66c:	4602      	mov	r2, r0
 800a66e:	460b      	mov	r3, r1
 800a670:	4630      	mov	r0, r6
 800a672:	4639      	mov	r1, r7
 800a674:	f7f5 fe0a 	bl	800028c <__adddf3>
 800a678:	4632      	mov	r2, r6
 800a67a:	463b      	mov	r3, r7
 800a67c:	4680      	mov	r8, r0
 800a67e:	4689      	mov	r9, r1
 800a680:	f7f5 fe02 	bl	8000288 <__aeabi_dsub>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4620      	mov	r0, r4
 800a68a:	4629      	mov	r1, r5
 800a68c:	f7f5 fdfc 	bl	8000288 <__aeabi_dsub>
 800a690:	4642      	mov	r2, r8
 800a692:	4606      	mov	r6, r0
 800a694:	460f      	mov	r7, r1
 800a696:	464b      	mov	r3, r9
 800a698:	4640      	mov	r0, r8
 800a69a:	4649      	mov	r1, r9
 800a69c:	f7f5 ffac 	bl	80005f8 <__aeabi_dmul>
 800a6a0:	a35b      	add	r3, pc, #364	; (adr r3, 800a810 <__ieee754_pow+0x9d0>)
 800a6a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	460d      	mov	r5, r1
 800a6aa:	f7f5 ffa5 	bl	80005f8 <__aeabi_dmul>
 800a6ae:	a35a      	add	r3, pc, #360	; (adr r3, 800a818 <__ieee754_pow+0x9d8>)
 800a6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b4:	f7f5 fde8 	bl	8000288 <__aeabi_dsub>
 800a6b8:	4622      	mov	r2, r4
 800a6ba:	462b      	mov	r3, r5
 800a6bc:	f7f5 ff9c 	bl	80005f8 <__aeabi_dmul>
 800a6c0:	a357      	add	r3, pc, #348	; (adr r3, 800a820 <__ieee754_pow+0x9e0>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f7f5 fde1 	bl	800028c <__adddf3>
 800a6ca:	4622      	mov	r2, r4
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	f7f5 ff93 	bl	80005f8 <__aeabi_dmul>
 800a6d2:	a355      	add	r3, pc, #340	; (adr r3, 800a828 <__ieee754_pow+0x9e8>)
 800a6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d8:	f7f5 fdd6 	bl	8000288 <__aeabi_dsub>
 800a6dc:	4622      	mov	r2, r4
 800a6de:	462b      	mov	r3, r5
 800a6e0:	f7f5 ff8a 	bl	80005f8 <__aeabi_dmul>
 800a6e4:	a352      	add	r3, pc, #328	; (adr r3, 800a830 <__ieee754_pow+0x9f0>)
 800a6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ea:	f7f5 fdcf 	bl	800028c <__adddf3>
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	462b      	mov	r3, r5
 800a6f2:	f7f5 ff81 	bl	80005f8 <__aeabi_dmul>
 800a6f6:	4602      	mov	r2, r0
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f5 fdc3 	bl	8000288 <__aeabi_dsub>
 800a702:	4604      	mov	r4, r0
 800a704:	460d      	mov	r5, r1
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4640      	mov	r0, r8
 800a70c:	4649      	mov	r1, r9
 800a70e:	f7f5 ff73 	bl	80005f8 <__aeabi_dmul>
 800a712:	2200      	movs	r2, #0
 800a714:	e9cd 0100 	strd	r0, r1, [sp]
 800a718:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a71c:	4620      	mov	r0, r4
 800a71e:	4629      	mov	r1, r5
 800a720:	f7f5 fdb2 	bl	8000288 <__aeabi_dsub>
 800a724:	4602      	mov	r2, r0
 800a726:	460b      	mov	r3, r1
 800a728:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a72c:	f7f6 f88e 	bl	800084c <__aeabi_ddiv>
 800a730:	4632      	mov	r2, r6
 800a732:	4604      	mov	r4, r0
 800a734:	460d      	mov	r5, r1
 800a736:	463b      	mov	r3, r7
 800a738:	4640      	mov	r0, r8
 800a73a:	4649      	mov	r1, r9
 800a73c:	f7f5 ff5c 	bl	80005f8 <__aeabi_dmul>
 800a740:	4632      	mov	r2, r6
 800a742:	463b      	mov	r3, r7
 800a744:	f7f5 fda2 	bl	800028c <__adddf3>
 800a748:	4602      	mov	r2, r0
 800a74a:	460b      	mov	r3, r1
 800a74c:	4620      	mov	r0, r4
 800a74e:	4629      	mov	r1, r5
 800a750:	f7f5 fd9a 	bl	8000288 <__aeabi_dsub>
 800a754:	4642      	mov	r2, r8
 800a756:	464b      	mov	r3, r9
 800a758:	f7f5 fd96 	bl	8000288 <__aeabi_dsub>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	2000      	movs	r0, #0
 800a762:	4939      	ldr	r1, [pc, #228]	; (800a848 <__ieee754_pow+0xa08>)
 800a764:	f7f5 fd90 	bl	8000288 <__aeabi_dsub>
 800a768:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a76c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a770:	4602      	mov	r2, r0
 800a772:	460b      	mov	r3, r1
 800a774:	da2f      	bge.n	800a7d6 <__ieee754_pow+0x996>
 800a776:	4650      	mov	r0, sl
 800a778:	ec43 2b10 	vmov	d0, r2, r3
 800a77c:	f000 f9c0 	bl	800ab00 <scalbn>
 800a780:	ec51 0b10 	vmov	r0, r1, d0
 800a784:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a788:	f7ff bbf1 	b.w	8009f6e <__ieee754_pow+0x12e>
 800a78c:	4b2f      	ldr	r3, [pc, #188]	; (800a84c <__ieee754_pow+0xa0c>)
 800a78e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a792:	429e      	cmp	r6, r3
 800a794:	f77f af0c 	ble.w	800a5b0 <__ieee754_pow+0x770>
 800a798:	4b2d      	ldr	r3, [pc, #180]	; (800a850 <__ieee754_pow+0xa10>)
 800a79a:	440b      	add	r3, r1
 800a79c:	4303      	orrs	r3, r0
 800a79e:	d00b      	beq.n	800a7b8 <__ieee754_pow+0x978>
 800a7a0:	a325      	add	r3, pc, #148	; (adr r3, 800a838 <__ieee754_pow+0x9f8>)
 800a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7aa:	f7f5 ff25 	bl	80005f8 <__aeabi_dmul>
 800a7ae:	a322      	add	r3, pc, #136	; (adr r3, 800a838 <__ieee754_pow+0x9f8>)
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	f7ff bbdb 	b.w	8009f6e <__ieee754_pow+0x12e>
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	462b      	mov	r3, r5
 800a7bc:	f7f5 fd64 	bl	8000288 <__aeabi_dsub>
 800a7c0:	4642      	mov	r2, r8
 800a7c2:	464b      	mov	r3, r9
 800a7c4:	f7f6 f99e 	bl	8000b04 <__aeabi_dcmpge>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	f43f aef1 	beq.w	800a5b0 <__ieee754_pow+0x770>
 800a7ce:	e7e7      	b.n	800a7a0 <__ieee754_pow+0x960>
 800a7d0:	f04f 0a00 	mov.w	sl, #0
 800a7d4:	e718      	b.n	800a608 <__ieee754_pow+0x7c8>
 800a7d6:	4621      	mov	r1, r4
 800a7d8:	e7d4      	b.n	800a784 <__ieee754_pow+0x944>
 800a7da:	2000      	movs	r0, #0
 800a7dc:	491a      	ldr	r1, [pc, #104]	; (800a848 <__ieee754_pow+0xa08>)
 800a7de:	f7ff bb8f 	b.w	8009f00 <__ieee754_pow+0xc0>
 800a7e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a7e6:	f7ff bb8b 	b.w	8009f00 <__ieee754_pow+0xc0>
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	f7ff bb87 	b.w	8009f00 <__ieee754_pow+0xc0>
 800a7f2:	4693      	mov	fp, r2
 800a7f4:	f7ff bb98 	b.w	8009f28 <__ieee754_pow+0xe8>
 800a7f8:	00000000 	.word	0x00000000
 800a7fc:	3fe62e43 	.word	0x3fe62e43
 800a800:	fefa39ef 	.word	0xfefa39ef
 800a804:	3fe62e42 	.word	0x3fe62e42
 800a808:	0ca86c39 	.word	0x0ca86c39
 800a80c:	be205c61 	.word	0xbe205c61
 800a810:	72bea4d0 	.word	0x72bea4d0
 800a814:	3e663769 	.word	0x3e663769
 800a818:	c5d26bf1 	.word	0xc5d26bf1
 800a81c:	3ebbbd41 	.word	0x3ebbbd41
 800a820:	af25de2c 	.word	0xaf25de2c
 800a824:	3f11566a 	.word	0x3f11566a
 800a828:	16bebd93 	.word	0x16bebd93
 800a82c:	3f66c16c 	.word	0x3f66c16c
 800a830:	5555553e 	.word	0x5555553e
 800a834:	3fc55555 	.word	0x3fc55555
 800a838:	c2f8f359 	.word	0xc2f8f359
 800a83c:	01a56e1f 	.word	0x01a56e1f
 800a840:	3fe00000 	.word	0x3fe00000
 800a844:	000fffff 	.word	0x000fffff
 800a848:	3ff00000 	.word	0x3ff00000
 800a84c:	4090cbff 	.word	0x4090cbff
 800a850:	3f6f3400 	.word	0x3f6f3400
 800a854:	652b82fe 	.word	0x652b82fe
 800a858:	3c971547 	.word	0x3c971547

0800a85c <__ieee754_sqrt>:
 800a85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a860:	4955      	ldr	r1, [pc, #340]	; (800a9b8 <__ieee754_sqrt+0x15c>)
 800a862:	ec55 4b10 	vmov	r4, r5, d0
 800a866:	43a9      	bics	r1, r5
 800a868:	462b      	mov	r3, r5
 800a86a:	462a      	mov	r2, r5
 800a86c:	d112      	bne.n	800a894 <__ieee754_sqrt+0x38>
 800a86e:	ee10 2a10 	vmov	r2, s0
 800a872:	ee10 0a10 	vmov	r0, s0
 800a876:	4629      	mov	r1, r5
 800a878:	f7f5 febe 	bl	80005f8 <__aeabi_dmul>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	4620      	mov	r0, r4
 800a882:	4629      	mov	r1, r5
 800a884:	f7f5 fd02 	bl	800028c <__adddf3>
 800a888:	4604      	mov	r4, r0
 800a88a:	460d      	mov	r5, r1
 800a88c:	ec45 4b10 	vmov	d0, r4, r5
 800a890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a894:	2d00      	cmp	r5, #0
 800a896:	ee10 0a10 	vmov	r0, s0
 800a89a:	4621      	mov	r1, r4
 800a89c:	dc0f      	bgt.n	800a8be <__ieee754_sqrt+0x62>
 800a89e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a8a2:	4330      	orrs	r0, r6
 800a8a4:	d0f2      	beq.n	800a88c <__ieee754_sqrt+0x30>
 800a8a6:	b155      	cbz	r5, 800a8be <__ieee754_sqrt+0x62>
 800a8a8:	ee10 2a10 	vmov	r2, s0
 800a8ac:	4620      	mov	r0, r4
 800a8ae:	4629      	mov	r1, r5
 800a8b0:	f7f5 fcea 	bl	8000288 <__aeabi_dsub>
 800a8b4:	4602      	mov	r2, r0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	f7f5 ffc8 	bl	800084c <__aeabi_ddiv>
 800a8bc:	e7e4      	b.n	800a888 <__ieee754_sqrt+0x2c>
 800a8be:	151b      	asrs	r3, r3, #20
 800a8c0:	d073      	beq.n	800a9aa <__ieee754_sqrt+0x14e>
 800a8c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a8c6:	07dd      	lsls	r5, r3, #31
 800a8c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a8cc:	bf48      	it	mi
 800a8ce:	0fc8      	lsrmi	r0, r1, #31
 800a8d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a8d4:	bf44      	itt	mi
 800a8d6:	0049      	lslmi	r1, r1, #1
 800a8d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a8dc:	2500      	movs	r5, #0
 800a8de:	1058      	asrs	r0, r3, #1
 800a8e0:	0fcb      	lsrs	r3, r1, #31
 800a8e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a8e6:	0049      	lsls	r1, r1, #1
 800a8e8:	2316      	movs	r3, #22
 800a8ea:	462c      	mov	r4, r5
 800a8ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a8f0:	19a7      	adds	r7, r4, r6
 800a8f2:	4297      	cmp	r7, r2
 800a8f4:	bfde      	ittt	le
 800a8f6:	19bc      	addle	r4, r7, r6
 800a8f8:	1bd2      	suble	r2, r2, r7
 800a8fa:	19ad      	addle	r5, r5, r6
 800a8fc:	0fcf      	lsrs	r7, r1, #31
 800a8fe:	3b01      	subs	r3, #1
 800a900:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a904:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a908:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a90c:	d1f0      	bne.n	800a8f0 <__ieee754_sqrt+0x94>
 800a90e:	f04f 0c20 	mov.w	ip, #32
 800a912:	469e      	mov	lr, r3
 800a914:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a918:	42a2      	cmp	r2, r4
 800a91a:	eb06 070e 	add.w	r7, r6, lr
 800a91e:	dc02      	bgt.n	800a926 <__ieee754_sqrt+0xca>
 800a920:	d112      	bne.n	800a948 <__ieee754_sqrt+0xec>
 800a922:	428f      	cmp	r7, r1
 800a924:	d810      	bhi.n	800a948 <__ieee754_sqrt+0xec>
 800a926:	2f00      	cmp	r7, #0
 800a928:	eb07 0e06 	add.w	lr, r7, r6
 800a92c:	da42      	bge.n	800a9b4 <__ieee754_sqrt+0x158>
 800a92e:	f1be 0f00 	cmp.w	lr, #0
 800a932:	db3f      	blt.n	800a9b4 <__ieee754_sqrt+0x158>
 800a934:	f104 0801 	add.w	r8, r4, #1
 800a938:	1b12      	subs	r2, r2, r4
 800a93a:	428f      	cmp	r7, r1
 800a93c:	bf88      	it	hi
 800a93e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a942:	1bc9      	subs	r1, r1, r7
 800a944:	4433      	add	r3, r6
 800a946:	4644      	mov	r4, r8
 800a948:	0052      	lsls	r2, r2, #1
 800a94a:	f1bc 0c01 	subs.w	ip, ip, #1
 800a94e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a952:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a956:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a95a:	d1dd      	bne.n	800a918 <__ieee754_sqrt+0xbc>
 800a95c:	430a      	orrs	r2, r1
 800a95e:	d006      	beq.n	800a96e <__ieee754_sqrt+0x112>
 800a960:	1c5c      	adds	r4, r3, #1
 800a962:	bf13      	iteet	ne
 800a964:	3301      	addne	r3, #1
 800a966:	3501      	addeq	r5, #1
 800a968:	4663      	moveq	r3, ip
 800a96a:	f023 0301 	bicne.w	r3, r3, #1
 800a96e:	106a      	asrs	r2, r5, #1
 800a970:	085b      	lsrs	r3, r3, #1
 800a972:	07e9      	lsls	r1, r5, #31
 800a974:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a978:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a97c:	bf48      	it	mi
 800a97e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a982:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a986:	461c      	mov	r4, r3
 800a988:	e780      	b.n	800a88c <__ieee754_sqrt+0x30>
 800a98a:	0aca      	lsrs	r2, r1, #11
 800a98c:	3815      	subs	r0, #21
 800a98e:	0549      	lsls	r1, r1, #21
 800a990:	2a00      	cmp	r2, #0
 800a992:	d0fa      	beq.n	800a98a <__ieee754_sqrt+0x12e>
 800a994:	02d6      	lsls	r6, r2, #11
 800a996:	d50a      	bpl.n	800a9ae <__ieee754_sqrt+0x152>
 800a998:	f1c3 0420 	rsb	r4, r3, #32
 800a99c:	fa21 f404 	lsr.w	r4, r1, r4
 800a9a0:	1e5d      	subs	r5, r3, #1
 800a9a2:	4099      	lsls	r1, r3
 800a9a4:	4322      	orrs	r2, r4
 800a9a6:	1b43      	subs	r3, r0, r5
 800a9a8:	e78b      	b.n	800a8c2 <__ieee754_sqrt+0x66>
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	e7f0      	b.n	800a990 <__ieee754_sqrt+0x134>
 800a9ae:	0052      	lsls	r2, r2, #1
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	e7ef      	b.n	800a994 <__ieee754_sqrt+0x138>
 800a9b4:	46a0      	mov	r8, r4
 800a9b6:	e7bf      	b.n	800a938 <__ieee754_sqrt+0xdc>
 800a9b8:	7ff00000 	.word	0x7ff00000

0800a9bc <fabs>:
 800a9bc:	ec51 0b10 	vmov	r0, r1, d0
 800a9c0:	ee10 2a10 	vmov	r2, s0
 800a9c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a9c8:	ec43 2b10 	vmov	d0, r2, r3
 800a9cc:	4770      	bx	lr

0800a9ce <finite>:
 800a9ce:	ee10 3a90 	vmov	r3, s1
 800a9d2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a9d6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a9da:	0fc0      	lsrs	r0, r0, #31
 800a9dc:	4770      	bx	lr

0800a9de <matherr>:
 800a9de:	2000      	movs	r0, #0
 800a9e0:	4770      	bx	lr
 800a9e2:	0000      	movs	r0, r0
 800a9e4:	0000      	movs	r0, r0
	...

0800a9e8 <nan>:
 800a9e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a9f0 <nan+0x8>
 800a9ec:	4770      	bx	lr
 800a9ee:	bf00      	nop
 800a9f0:	00000000 	.word	0x00000000
 800a9f4:	7ff80000 	.word	0x7ff80000

0800a9f8 <rint>:
 800a9f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9fa:	ec51 0b10 	vmov	r0, r1, d0
 800a9fe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800aa02:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800aa06:	2e13      	cmp	r6, #19
 800aa08:	460b      	mov	r3, r1
 800aa0a:	ee10 4a10 	vmov	r4, s0
 800aa0e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800aa12:	dc56      	bgt.n	800aac2 <rint+0xca>
 800aa14:	2e00      	cmp	r6, #0
 800aa16:	da2b      	bge.n	800aa70 <rint+0x78>
 800aa18:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800aa1c:	4302      	orrs	r2, r0
 800aa1e:	d023      	beq.n	800aa68 <rint+0x70>
 800aa20:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800aa24:	4302      	orrs	r2, r0
 800aa26:	4254      	negs	r4, r2
 800aa28:	4314      	orrs	r4, r2
 800aa2a:	0c4b      	lsrs	r3, r1, #17
 800aa2c:	0b24      	lsrs	r4, r4, #12
 800aa2e:	045b      	lsls	r3, r3, #17
 800aa30:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800aa34:	ea44 0103 	orr.w	r1, r4, r3
 800aa38:	460b      	mov	r3, r1
 800aa3a:	492f      	ldr	r1, [pc, #188]	; (800aaf8 <rint+0x100>)
 800aa3c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800aa40:	e9d1 6700 	ldrd	r6, r7, [r1]
 800aa44:	4602      	mov	r2, r0
 800aa46:	4639      	mov	r1, r7
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f7f5 fc1f 	bl	800028c <__adddf3>
 800aa4e:	e9cd 0100 	strd	r0, r1, [sp]
 800aa52:	463b      	mov	r3, r7
 800aa54:	4632      	mov	r2, r6
 800aa56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa5a:	f7f5 fc15 	bl	8000288 <__aeabi_dsub>
 800aa5e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa62:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800aa66:	4639      	mov	r1, r7
 800aa68:	ec41 0b10 	vmov	d0, r0, r1
 800aa6c:	b003      	add	sp, #12
 800aa6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa70:	4a22      	ldr	r2, [pc, #136]	; (800aafc <rint+0x104>)
 800aa72:	4132      	asrs	r2, r6
 800aa74:	ea01 0702 	and.w	r7, r1, r2
 800aa78:	4307      	orrs	r7, r0
 800aa7a:	d0f5      	beq.n	800aa68 <rint+0x70>
 800aa7c:	0852      	lsrs	r2, r2, #1
 800aa7e:	4011      	ands	r1, r2
 800aa80:	430c      	orrs	r4, r1
 800aa82:	d00b      	beq.n	800aa9c <rint+0xa4>
 800aa84:	ea23 0202 	bic.w	r2, r3, r2
 800aa88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa8c:	2e13      	cmp	r6, #19
 800aa8e:	fa43 f306 	asr.w	r3, r3, r6
 800aa92:	bf0c      	ite	eq
 800aa94:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800aa98:	2400      	movne	r4, #0
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	4916      	ldr	r1, [pc, #88]	; (800aaf8 <rint+0x100>)
 800aa9e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	4629      	mov	r1, r5
 800aaac:	f7f5 fbee 	bl	800028c <__adddf3>
 800aab0:	e9cd 0100 	strd	r0, r1, [sp]
 800aab4:	4622      	mov	r2, r4
 800aab6:	462b      	mov	r3, r5
 800aab8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aabc:	f7f5 fbe4 	bl	8000288 <__aeabi_dsub>
 800aac0:	e7d2      	b.n	800aa68 <rint+0x70>
 800aac2:	2e33      	cmp	r6, #51	; 0x33
 800aac4:	dd07      	ble.n	800aad6 <rint+0xde>
 800aac6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800aaca:	d1cd      	bne.n	800aa68 <rint+0x70>
 800aacc:	ee10 2a10 	vmov	r2, s0
 800aad0:	f7f5 fbdc 	bl	800028c <__adddf3>
 800aad4:	e7c8      	b.n	800aa68 <rint+0x70>
 800aad6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800aada:	f04f 32ff 	mov.w	r2, #4294967295
 800aade:	40f2      	lsrs	r2, r6
 800aae0:	4210      	tst	r0, r2
 800aae2:	d0c1      	beq.n	800aa68 <rint+0x70>
 800aae4:	0852      	lsrs	r2, r2, #1
 800aae6:	4210      	tst	r0, r2
 800aae8:	bf1f      	itttt	ne
 800aaea:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800aaee:	ea20 0202 	bicne.w	r2, r0, r2
 800aaf2:	4134      	asrne	r4, r6
 800aaf4:	4314      	orrne	r4, r2
 800aaf6:	e7d1      	b.n	800aa9c <rint+0xa4>
 800aaf8:	0800af90 	.word	0x0800af90
 800aafc:	000fffff 	.word	0x000fffff

0800ab00 <scalbn>:
 800ab00:	b570      	push	{r4, r5, r6, lr}
 800ab02:	ec55 4b10 	vmov	r4, r5, d0
 800ab06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ab0a:	4606      	mov	r6, r0
 800ab0c:	462b      	mov	r3, r5
 800ab0e:	b9aa      	cbnz	r2, 800ab3c <scalbn+0x3c>
 800ab10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ab14:	4323      	orrs	r3, r4
 800ab16:	d03b      	beq.n	800ab90 <scalbn+0x90>
 800ab18:	4b31      	ldr	r3, [pc, #196]	; (800abe0 <scalbn+0xe0>)
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	ee10 0a10 	vmov	r0, s0
 800ab22:	f7f5 fd69 	bl	80005f8 <__aeabi_dmul>
 800ab26:	4b2f      	ldr	r3, [pc, #188]	; (800abe4 <scalbn+0xe4>)
 800ab28:	429e      	cmp	r6, r3
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	460d      	mov	r5, r1
 800ab2e:	da12      	bge.n	800ab56 <scalbn+0x56>
 800ab30:	a327      	add	r3, pc, #156	; (adr r3, 800abd0 <scalbn+0xd0>)
 800ab32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab36:	f7f5 fd5f 	bl	80005f8 <__aeabi_dmul>
 800ab3a:	e009      	b.n	800ab50 <scalbn+0x50>
 800ab3c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ab40:	428a      	cmp	r2, r1
 800ab42:	d10c      	bne.n	800ab5e <scalbn+0x5e>
 800ab44:	ee10 2a10 	vmov	r2, s0
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 fb9e 	bl	800028c <__adddf3>
 800ab50:	4604      	mov	r4, r0
 800ab52:	460d      	mov	r5, r1
 800ab54:	e01c      	b.n	800ab90 <scalbn+0x90>
 800ab56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ab5a:	460b      	mov	r3, r1
 800ab5c:	3a36      	subs	r2, #54	; 0x36
 800ab5e:	4432      	add	r2, r6
 800ab60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ab64:	428a      	cmp	r2, r1
 800ab66:	dd0b      	ble.n	800ab80 <scalbn+0x80>
 800ab68:	ec45 4b11 	vmov	d1, r4, r5
 800ab6c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800abd8 <scalbn+0xd8>
 800ab70:	f000 f83c 	bl	800abec <copysign>
 800ab74:	a318      	add	r3, pc, #96	; (adr r3, 800abd8 <scalbn+0xd8>)
 800ab76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab7a:	ec51 0b10 	vmov	r0, r1, d0
 800ab7e:	e7da      	b.n	800ab36 <scalbn+0x36>
 800ab80:	2a00      	cmp	r2, #0
 800ab82:	dd08      	ble.n	800ab96 <scalbn+0x96>
 800ab84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab90:	ec45 4b10 	vmov	d0, r4, r5
 800ab94:	bd70      	pop	{r4, r5, r6, pc}
 800ab96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ab9a:	da0d      	bge.n	800abb8 <scalbn+0xb8>
 800ab9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aba0:	429e      	cmp	r6, r3
 800aba2:	ec45 4b11 	vmov	d1, r4, r5
 800aba6:	dce1      	bgt.n	800ab6c <scalbn+0x6c>
 800aba8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800abd0 <scalbn+0xd0>
 800abac:	f000 f81e 	bl	800abec <copysign>
 800abb0:	a307      	add	r3, pc, #28	; (adr r3, 800abd0 <scalbn+0xd0>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	e7e0      	b.n	800ab7a <scalbn+0x7a>
 800abb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800abbc:	3236      	adds	r2, #54	; 0x36
 800abbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800abc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800abc6:	4620      	mov	r0, r4
 800abc8:	4629      	mov	r1, r5
 800abca:	2200      	movs	r2, #0
 800abcc:	4b06      	ldr	r3, [pc, #24]	; (800abe8 <scalbn+0xe8>)
 800abce:	e7b2      	b.n	800ab36 <scalbn+0x36>
 800abd0:	c2f8f359 	.word	0xc2f8f359
 800abd4:	01a56e1f 	.word	0x01a56e1f
 800abd8:	8800759c 	.word	0x8800759c
 800abdc:	7e37e43c 	.word	0x7e37e43c
 800abe0:	43500000 	.word	0x43500000
 800abe4:	ffff3cb0 	.word	0xffff3cb0
 800abe8:	3c900000 	.word	0x3c900000

0800abec <copysign>:
 800abec:	ec51 0b10 	vmov	r0, r1, d0
 800abf0:	ee11 0a90 	vmov	r0, s3
 800abf4:	ee10 2a10 	vmov	r2, s0
 800abf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800abfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ac00:	ea41 0300 	orr.w	r3, r1, r0
 800ac04:	ec43 2b10 	vmov	d0, r2, r3
 800ac08:	4770      	bx	lr
	...

0800ac0c <_init>:
 800ac0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac0e:	bf00      	nop
 800ac10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac12:	bc08      	pop	{r3}
 800ac14:	469e      	mov	lr, r3
 800ac16:	4770      	bx	lr

0800ac18 <_fini>:
 800ac18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1a:	bf00      	nop
 800ac1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac1e:	bc08      	pop	{r3}
 800ac20:	469e      	mov	lr, r3
 800ac22:	4770      	bx	lr
