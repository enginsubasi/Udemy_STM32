
PIDController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007924  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007ab0  08007ab0  00017ab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b28  08007b28  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007b28  08007b28  00017b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b30  08007b30  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b34  08007b34  00017b34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007b38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000974  2000009c  08007bd4  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a10  08007bd4  00020a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a32  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000053f6  00000000  00000000  00047afe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015e9e  00000000  00000000  0004cef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014b0  00000000  00000000  00062d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002390  00000000  00000000  00064248  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00026049  00000000  00000000  000665d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00017acf  00000000  00000000  0008c621  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d9c43  00000000  00000000  000a40f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017dd33  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c40  00000000  00000000  0017ddb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000009c 	.word	0x2000009c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a94 	.word	0x08007a94

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a0 	.word	0x200000a0
 80001c4:	08007a94 	.word	0x08007a94

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_uldivmod>:
 8000b40:	b953      	cbnz	r3, 8000b58 <__aeabi_uldivmod+0x18>
 8000b42:	b94a      	cbnz	r2, 8000b58 <__aeabi_uldivmod+0x18>
 8000b44:	2900      	cmp	r1, #0
 8000b46:	bf08      	it	eq
 8000b48:	2800      	cmpeq	r0, #0
 8000b4a:	bf1c      	itt	ne
 8000b4c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b50:	f04f 30ff 	movne.w	r0, #4294967295
 8000b54:	f000 b972 	b.w	8000e3c <__aeabi_idiv0>
 8000b58:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b5c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b60:	f000 f806 	bl	8000b70 <__udivmoddi4>
 8000b64:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b6c:	b004      	add	sp, #16
 8000b6e:	4770      	bx	lr

08000b70 <__udivmoddi4>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	9e08      	ldr	r6, [sp, #32]
 8000b76:	4604      	mov	r4, r0
 8000b78:	4688      	mov	r8, r1
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d14b      	bne.n	8000c16 <__udivmoddi4+0xa6>
 8000b7e:	428a      	cmp	r2, r1
 8000b80:	4615      	mov	r5, r2
 8000b82:	d967      	bls.n	8000c54 <__udivmoddi4+0xe4>
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	b14a      	cbz	r2, 8000b9e <__udivmoddi4+0x2e>
 8000b8a:	f1c2 0720 	rsb	r7, r2, #32
 8000b8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b92:	fa20 f707 	lsr.w	r7, r0, r7
 8000b96:	4095      	lsls	r5, r2
 8000b98:	ea47 0803 	orr.w	r8, r7, r3
 8000b9c:	4094      	lsls	r4, r2
 8000b9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ba2:	0c23      	lsrs	r3, r4, #16
 8000ba4:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ba8:	fa1f fc85 	uxth.w	ip, r5
 8000bac:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bb0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bb4:	fb07 f10c 	mul.w	r1, r7, ip
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x60>
 8000bbc:	18eb      	adds	r3, r5, r3
 8000bbe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bc2:	f080 811b 	bcs.w	8000dfc <__udivmoddi4+0x28c>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 8118 	bls.w	8000dfc <__udivmoddi4+0x28c>
 8000bcc:	3f02      	subs	r7, #2
 8000bce:	442b      	add	r3, r5
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000be4:	45a4      	cmp	ip, r4
 8000be6:	d909      	bls.n	8000bfc <__udivmoddi4+0x8c>
 8000be8:	192c      	adds	r4, r5, r4
 8000bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bee:	f080 8107 	bcs.w	8000e00 <__udivmoddi4+0x290>
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	f240 8104 	bls.w	8000e00 <__udivmoddi4+0x290>
 8000bf8:	3802      	subs	r0, #2
 8000bfa:	442c      	add	r4, r5
 8000bfc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c00:	eba4 040c 	sub.w	r4, r4, ip
 8000c04:	2700      	movs	r7, #0
 8000c06:	b11e      	cbz	r6, 8000c10 <__udivmoddi4+0xa0>
 8000c08:	40d4      	lsrs	r4, r2
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c10:	4639      	mov	r1, r7
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d909      	bls.n	8000c2e <__udivmoddi4+0xbe>
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	f000 80eb 	beq.w	8000df6 <__udivmoddi4+0x286>
 8000c20:	2700      	movs	r7, #0
 8000c22:	e9c6 0100 	strd	r0, r1, [r6]
 8000c26:	4638      	mov	r0, r7
 8000c28:	4639      	mov	r1, r7
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	fab3 f783 	clz	r7, r3
 8000c32:	2f00      	cmp	r7, #0
 8000c34:	d147      	bne.n	8000cc6 <__udivmoddi4+0x156>
 8000c36:	428b      	cmp	r3, r1
 8000c38:	d302      	bcc.n	8000c40 <__udivmoddi4+0xd0>
 8000c3a:	4282      	cmp	r2, r0
 8000c3c:	f200 80fa 	bhi.w	8000e34 <__udivmoddi4+0x2c4>
 8000c40:	1a84      	subs	r4, r0, r2
 8000c42:	eb61 0303 	sbc.w	r3, r1, r3
 8000c46:	2001      	movs	r0, #1
 8000c48:	4698      	mov	r8, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d0e0      	beq.n	8000c10 <__udivmoddi4+0xa0>
 8000c4e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c52:	e7dd      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000c54:	b902      	cbnz	r2, 8000c58 <__udivmoddi4+0xe8>
 8000c56:	deff      	udf	#255	; 0xff
 8000c58:	fab2 f282 	clz	r2, r2
 8000c5c:	2a00      	cmp	r2, #0
 8000c5e:	f040 808f 	bne.w	8000d80 <__udivmoddi4+0x210>
 8000c62:	1b49      	subs	r1, r1, r5
 8000c64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c68:	fa1f f885 	uxth.w	r8, r5
 8000c6c:	2701      	movs	r7, #1
 8000c6e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c72:	0c23      	lsrs	r3, r4, #16
 8000c74:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x124>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x122>
 8000c8c:	4299      	cmp	r1, r3
 8000c8e:	f200 80cd 	bhi.w	8000e2c <__udivmoddi4+0x2bc>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1a59      	subs	r1, r3, r1
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ca0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x14c>
 8000cac:	192c      	adds	r4, r5, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x14a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80b6 	bhi.w	8000e26 <__udivmoddi4+0x2b6>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e79f      	b.n	8000c06 <__udivmoddi4+0x96>
 8000cc6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cca:	40bb      	lsls	r3, r7
 8000ccc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cd0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cd4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cd8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cdc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ce0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ce4:	4325      	orrs	r5, r4
 8000ce6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cea:	0c2c      	lsrs	r4, r5, #16
 8000cec:	fb08 3319 	mls	r3, r8, r9, r3
 8000cf0:	fa1f fa8e 	uxth.w	sl, lr
 8000cf4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cf8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cfc:	429c      	cmp	r4, r3
 8000cfe:	fa02 f207 	lsl.w	r2, r2, r7
 8000d02:	fa00 f107 	lsl.w	r1, r0, r7
 8000d06:	d90b      	bls.n	8000d20 <__udivmoddi4+0x1b0>
 8000d08:	eb1e 0303 	adds.w	r3, lr, r3
 8000d0c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d10:	f080 8087 	bcs.w	8000e22 <__udivmoddi4+0x2b2>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f240 8084 	bls.w	8000e22 <__udivmoddi4+0x2b2>
 8000d1a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d1e:	4473      	add	r3, lr
 8000d20:	1b1b      	subs	r3, r3, r4
 8000d22:	b2ad      	uxth	r5, r5
 8000d24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d28:	fb08 3310 	mls	r3, r8, r0, r3
 8000d2c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d30:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d34:	45a2      	cmp	sl, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x1da>
 8000d38:	eb1e 0404 	adds.w	r4, lr, r4
 8000d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d40:	d26b      	bcs.n	8000e1a <__udivmoddi4+0x2aa>
 8000d42:	45a2      	cmp	sl, r4
 8000d44:	d969      	bls.n	8000e1a <__udivmoddi4+0x2aa>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4474      	add	r4, lr
 8000d4a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d52:	eba4 040a 	sub.w	r4, r4, sl
 8000d56:	454c      	cmp	r4, r9
 8000d58:	46c2      	mov	sl, r8
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	d354      	bcc.n	8000e08 <__udivmoddi4+0x298>
 8000d5e:	d051      	beq.n	8000e04 <__udivmoddi4+0x294>
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d069      	beq.n	8000e38 <__udivmoddi4+0x2c8>
 8000d64:	ebb1 050a 	subs.w	r5, r1, sl
 8000d68:	eb64 0403 	sbc.w	r4, r4, r3
 8000d6c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d70:	40fd      	lsrs	r5, r7
 8000d72:	40fc      	lsrs	r4, r7
 8000d74:	ea4c 0505 	orr.w	r5, ip, r5
 8000d78:	e9c6 5400 	strd	r5, r4, [r6]
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e747      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f703 	lsr.w	r7, r0, r3
 8000d88:	4095      	lsls	r5, r2
 8000d8a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d8e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d92:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d96:	4338      	orrs	r0, r7
 8000d98:	0c01      	lsrs	r1, r0, #16
 8000d9a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d9e:	fa1f f885 	uxth.w	r8, r5
 8000da2:	fb0e 3317 	mls	r3, lr, r7, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb07 f308 	mul.w	r3, r7, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	fa04 f402 	lsl.w	r4, r4, r2
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x256>
 8000db6:	1869      	adds	r1, r5, r1
 8000db8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dbc:	d22f      	bcs.n	8000e1e <__udivmoddi4+0x2ae>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d92d      	bls.n	8000e1e <__udivmoddi4+0x2ae>
 8000dc2:	3f02      	subs	r7, #2
 8000dc4:	4429      	add	r1, r5
 8000dc6:	1acb      	subs	r3, r1, r3
 8000dc8:	b281      	uxth	r1, r0
 8000dca:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dce:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd6:	fb00 f308 	mul.w	r3, r0, r8
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d907      	bls.n	8000dee <__udivmoddi4+0x27e>
 8000dde:	1869      	adds	r1, r5, r1
 8000de0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000de4:	d217      	bcs.n	8000e16 <__udivmoddi4+0x2a6>
 8000de6:	428b      	cmp	r3, r1
 8000de8:	d915      	bls.n	8000e16 <__udivmoddi4+0x2a6>
 8000dea:	3802      	subs	r0, #2
 8000dec:	4429      	add	r1, r5
 8000dee:	1ac9      	subs	r1, r1, r3
 8000df0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000df4:	e73b      	b.n	8000c6e <__udivmoddi4+0xfe>
 8000df6:	4637      	mov	r7, r6
 8000df8:	4630      	mov	r0, r6
 8000dfa:	e709      	b.n	8000c10 <__udivmoddi4+0xa0>
 8000dfc:	4607      	mov	r7, r0
 8000dfe:	e6e7      	b.n	8000bd0 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fb      	b.n	8000bfc <__udivmoddi4+0x8c>
 8000e04:	4541      	cmp	r1, r8
 8000e06:	d2ab      	bcs.n	8000d60 <__udivmoddi4+0x1f0>
 8000e08:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e0c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e10:	3801      	subs	r0, #1
 8000e12:	4613      	mov	r3, r2
 8000e14:	e7a4      	b.n	8000d60 <__udivmoddi4+0x1f0>
 8000e16:	4660      	mov	r0, ip
 8000e18:	e7e9      	b.n	8000dee <__udivmoddi4+0x27e>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	e795      	b.n	8000d4a <__udivmoddi4+0x1da>
 8000e1e:	4667      	mov	r7, ip
 8000e20:	e7d1      	b.n	8000dc6 <__udivmoddi4+0x256>
 8000e22:	4681      	mov	r9, r0
 8000e24:	e77c      	b.n	8000d20 <__udivmoddi4+0x1b0>
 8000e26:	3802      	subs	r0, #2
 8000e28:	442c      	add	r4, r5
 8000e2a:	e747      	b.n	8000cbc <__udivmoddi4+0x14c>
 8000e2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e30:	442b      	add	r3, r5
 8000e32:	e72f      	b.n	8000c94 <__udivmoddi4+0x124>
 8000e34:	4638      	mov	r0, r7
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xda>
 8000e38:	4637      	mov	r7, r6
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0xa0>

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <adcToTemp>:
	__HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, (uint32_t) inp * 10 );
}

float adcToTemp ( uint32_t adcRaw ) //Calculate temperature from 10 bit ADC value
{
	float adcRawVar = adcRaw;
 8000e40:	ee07 0a90 	vmov	s15, r0
 8000e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
	// T = ( 1 / a + b ( Ln Rt / R25 ) + c ( Ln Rt / R25 ) 2 + d ( Ln Rt / R25 ) ) - 273
	float Vo=3*adcRawVar/4095;
 8000e48:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8000e4c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e50:	ed9f 5abf 	vldr	s10, [pc, #764]	; 8001150 <adcToTemp+0x310>
	float RtRT25=(Vo*10000/(3-Vo))/30000;
 8000e54:	eddf 5abf 	vldr	s11, [pc, #764]	; 8001154 <adcToTemp+0x314>
 8000e58:	ed9f 6abf 	vldr	s12, [pc, #764]	; 8001158 <adcToTemp+0x318>
	float Vo=3*adcRawVar/4095;
 8000e5c:	ee86 7a85 	vdiv.f32	s14, s13, s10
{
 8000e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e62:	b085      	sub	sp, #20
	float RtRT25=(Vo*10000/(3-Vo))/30000;
 8000e64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000e68:	ee27 7a25 	vmul.f32	s14, s14, s11
 8000e6c:	eec7 6a27 	vdiv.f32	s13, s14, s15

	if((RtRT25<60.16)&&(RtRT25>3.195))
 8000e70:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8000e74:	ee17 0a90 	vmov	r0, s15
 8000e78:	f7ff fb0a 	bl	8000490 <__aeabi_f2d>
 8000e7c:	a38e      	add	r3, pc, #568	; (adr r3, 80010b8 <adcToTemp+0x278>)
 8000e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e82:	4604      	mov	r4, r0
 8000e84:	460d      	mov	r5, r1
 8000e86:	f7ff fdcd 	bl	8000a24 <__aeabi_dcmplt>
 8000e8a:	b140      	cbz	r0, 8000e9e <adcToTemp+0x5e>
 8000e8c:	a38c      	add	r3, pc, #560	; (adr r3, 80010c0 <adcToTemp+0x280>)
 8000e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e92:	4620      	mov	r0, r4
 8000e94:	4629      	mov	r1, r5
 8000e96:	f7ff fde3 	bl	8000a60 <__aeabi_dcmpgt>
 8000e9a:	2800      	cmp	r0, #0
 8000e9c:	d139      	bne.n	8000f12 <adcToTemp+0xd2>
		return((1/(3.3545590E-3+(2.5903082E-4*log(RtRT25))+(4.1929419E-6*pow(log(RtRT25),2))+(-7.1497776E-8*pow(log(RtRT25),3))))-273);
	else if((RtRT25<3.195)&&(RtRT25>0.3636))
 8000e9e:	a388      	add	r3, pc, #544	; (adr r3, 80010c0 <adcToTemp+0x280>)
 8000ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	4629      	mov	r1, r5
 8000ea8:	f7ff fdbc 	bl	8000a24 <__aeabi_dcmplt>
 8000eac:	b148      	cbz	r0, 8000ec2 <adcToTemp+0x82>
 8000eae:	a386      	add	r3, pc, #536	; (adr r3, 80010c8 <adcToTemp+0x288>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	4620      	mov	r0, r4
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	f7ff fdd2 	bl	8000a60 <__aeabi_dcmpgt>
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	f040 8081 	bne.w	8000fc4 <adcToTemp+0x184>
		return((1/(3.3540178E-3+(2.6021087E-4*log(RtRT25))+(3.5946173E-6*pow(log(RtRT25),2))+(-8.5676875E-8*pow(log(RtRT25),3))))-273);
	else if((RtRT25<0.3636)&&(RtRT25>0.06933))
 8000ec2:	a381      	add	r3, pc, #516	; (adr r3, 80010c8 <adcToTemp+0x288>)
 8000ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec8:	4620      	mov	r0, r4
 8000eca:	4629      	mov	r1, r5
 8000ecc:	f7ff fdaa 	bl	8000a24 <__aeabi_dcmplt>
 8000ed0:	b148      	cbz	r0, 8000ee6 <adcToTemp+0xa6>
 8000ed2:	a37f      	add	r3, pc, #508	; (adr r3, 80010d0 <adcToTemp+0x290>)
 8000ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed8:	4620      	mov	r0, r4
 8000eda:	4629      	mov	r1, r5
 8000edc:	f7ff fdc0 	bl	8000a60 <__aeabi_dcmpgt>
 8000ee0:	2800      	cmp	r0, #0
 8000ee2:	f040 80ac 	bne.w	800103e <adcToTemp+0x1fe>
		return((1/(3.3531474E-3+(2.5743868E-4*log(RtRT25))+(1.7022402E-6*pow(log(RtRT25),2))+(-8.8297492E-8*pow(log(RtRT25),3))))-273);
	else if((RtRT25<0.06933)&&(RtRT25>0.0187))
 8000ee6:	a37a      	add	r3, pc, #488	; (adr r3, 80010d0 <adcToTemp+0x290>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	4620      	mov	r0, r4
 8000eee:	4629      	mov	r1, r5
 8000ef0:	f7ff fd98 	bl	8000a24 <__aeabi_dcmplt>
 8000ef4:	b148      	cbz	r0, 8000f0a <adcToTemp+0xca>
 8000ef6:	a378      	add	r3, pc, #480	; (adr r3, 80010d8 <adcToTemp+0x298>)
 8000ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efc:	4620      	mov	r0, r4
 8000efe:	4629      	mov	r1, r5
 8000f00:	f7ff fdae 	bl	8000a60 <__aeabi_dcmpgt>
 8000f04:	2800      	cmp	r0, #0
 8000f06:	f040 812d 	bne.w	8001164 <adcToTemp+0x324>
		return((1/(3.3547977E-3+(2.5879299E-4*log(RtRT25))+(1.8964602E-6*pow(log(RtRT25),2))+(-1.1884916E-7*pow(log(RtRT25),3))))-273);
	else
		return(255.0); //Error Value
 8000f0a:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800115c <adcToTemp+0x31c>
}
 8000f0e:	b005      	add	sp, #20
 8000f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return((1/(3.3545590E-3+(2.5903082E-4*log(RtRT25))+(4.1929419E-6*pow(log(RtRT25),2))+(-7.1497776E-8*pow(log(RtRT25),3))))-273);
 8000f12:	ec45 4b10 	vmov	d0, r4, r5
 8000f16:	f005 fb33 	bl	8006580 <log>
 8000f1a:	ec51 0b10 	vmov	r0, r1, d0
 8000f1e:	ec45 4b10 	vmov	d0, r4, r5
 8000f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f26:	f005 fb2b 	bl	8006580 <log>
 8000f2a:	ec57 6b10 	vmov	r6, r7, d0
 8000f2e:	ec45 4b10 	vmov	d0, r4, r5
 8000f32:	f005 fb25 	bl	8006580 <log>
 8000f36:	ed9f 1b6a 	vldr	d1, [pc, #424]	; 80010e0 <adcToTemp+0x2a0>
 8000f3a:	f005 fba1 	bl	8006680 <pow>
 8000f3e:	a36a      	add	r3, pc, #424	; (adr r3, 80010e8 <adcToTemp+0x2a8>)
 8000f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000f48:	ed8d 0b00 	vstr	d0, [sp]
 8000f4c:	f7ff faf8 	bl	8000540 <__aeabi_dmul>
 8000f50:	a367      	add	r3, pc, #412	; (adr r3, 80010f0 <adcToTemp+0x2b0>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff f93d 	bl	80001d4 <__adddf3>
 8000f5a:	4632      	mov	r2, r6
 8000f5c:	4604      	mov	r4, r0
 8000f5e:	460d      	mov	r5, r1
 8000f60:	463b      	mov	r3, r7
 8000f62:	4630      	mov	r0, r6
 8000f64:	4639      	mov	r1, r7
 8000f66:	f7ff faeb 	bl	8000540 <__aeabi_dmul>
 8000f6a:	a363      	add	r3, pc, #396	; (adr r3, 80010f8 <adcToTemp+0x2b8>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fae6 	bl	8000540 <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4620      	mov	r0, r4
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	f7ff f92a 	bl	80001d4 <__adddf3>
 8000f80:	a35f      	add	r3, pc, #380	; (adr r3, 8001100 <adcToTemp+0x2c0>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	4604      	mov	r4, r0
 8000f88:	460d      	mov	r5, r1
		return((1/(3.3547977E-3+(2.5879299E-4*log(RtRT25))+(1.8964602E-6*pow(log(RtRT25),2))+(-1.1884916E-7*pow(log(RtRT25),3))))-273);
 8000f8a:	ed9d 0b00 	vldr	d0, [sp]
 8000f8e:	ec51 0b10 	vmov	r0, r1, d0
 8000f92:	f7ff fad5 	bl	8000540 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4620      	mov	r0, r4
 8000f9c:	4629      	mov	r1, r5
 8000f9e:	f7ff f919 	bl	80001d4 <__adddf3>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	2000      	movs	r0, #0
 8000fa8:	496d      	ldr	r1, [pc, #436]	; (8001160 <adcToTemp+0x320>)
 8000faa:	f7ff fbf3 	bl	8000794 <__aeabi_ddiv>
 8000fae:	a356      	add	r3, pc, #344	; (adr r3, 8001108 <adcToTemp+0x2c8>)
 8000fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb4:	f7ff f90c 	bl	80001d0 <__aeabi_dsub>
 8000fb8:	f7ff fd72 	bl	8000aa0 <__aeabi_d2f>
 8000fbc:	ee00 0a10 	vmov	s0, r0
}
 8000fc0:	b005      	add	sp, #20
 8000fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return((1/(3.3540178E-3+(2.6021087E-4*log(RtRT25))+(3.5946173E-6*pow(log(RtRT25),2))+(-8.5676875E-8*pow(log(RtRT25),3))))-273);
 8000fc4:	ec45 4b10 	vmov	d0, r4, r5
 8000fc8:	f005 fada 	bl	8006580 <log>
 8000fcc:	ec51 0b10 	vmov	r0, r1, d0
 8000fd0:	ec45 4b10 	vmov	d0, r4, r5
 8000fd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000fd8:	f005 fad2 	bl	8006580 <log>
 8000fdc:	ec57 6b10 	vmov	r6, r7, d0
 8000fe0:	ec45 4b10 	vmov	d0, r4, r5
 8000fe4:	f005 facc 	bl	8006580 <log>
 8000fe8:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80010e0 <adcToTemp+0x2a0>
 8000fec:	f005 fb48 	bl	8006680 <pow>
 8000ff0:	a347      	add	r3, pc, #284	; (adr r3, 8001110 <adcToTemp+0x2d0>)
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000ffa:	ed8d 0b00 	vstr	d0, [sp]
 8000ffe:	f7ff fa9f 	bl	8000540 <__aeabi_dmul>
 8001002:	a345      	add	r3, pc, #276	; (adr r3, 8001118 <adcToTemp+0x2d8>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff f8e4 	bl	80001d4 <__adddf3>
 800100c:	4632      	mov	r2, r6
 800100e:	4604      	mov	r4, r0
 8001010:	460d      	mov	r5, r1
 8001012:	463b      	mov	r3, r7
 8001014:	4630      	mov	r0, r6
 8001016:	4639      	mov	r1, r7
 8001018:	f7ff fa92 	bl	8000540 <__aeabi_dmul>
 800101c:	a340      	add	r3, pc, #256	; (adr r3, 8001120 <adcToTemp+0x2e0>)
 800101e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001022:	f7ff fa8d 	bl	8000540 <__aeabi_dmul>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4620      	mov	r0, r4
 800102c:	4629      	mov	r1, r5
 800102e:	f7ff f8d1 	bl	80001d4 <__adddf3>
 8001032:	a33d      	add	r3, pc, #244	; (adr r3, 8001128 <adcToTemp+0x2e8>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	4604      	mov	r4, r0
 800103a:	460d      	mov	r5, r1
 800103c:	e7a5      	b.n	8000f8a <adcToTemp+0x14a>
		return((1/(3.3531474E-3+(2.5743868E-4*log(RtRT25))+(1.7022402E-6*pow(log(RtRT25),2))+(-8.8297492E-8*pow(log(RtRT25),3))))-273);
 800103e:	ec45 4b10 	vmov	d0, r4, r5
 8001042:	f005 fa9d 	bl	8006580 <log>
 8001046:	ec51 0b10 	vmov	r0, r1, d0
 800104a:	ec45 4b10 	vmov	d0, r4, r5
 800104e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001052:	f005 fa95 	bl	8006580 <log>
 8001056:	ec57 6b10 	vmov	r6, r7, d0
 800105a:	ec45 4b10 	vmov	d0, r4, r5
 800105e:	f005 fa8f 	bl	8006580 <log>
 8001062:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80010e0 <adcToTemp+0x2a0>
 8001066:	f005 fb0b 	bl	8006680 <pow>
 800106a:	a331      	add	r3, pc, #196	; (adr r3, 8001130 <adcToTemp+0x2f0>)
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8001074:	ed8d 0b00 	vstr	d0, [sp]
 8001078:	f7ff fa62 	bl	8000540 <__aeabi_dmul>
 800107c:	a32e      	add	r3, pc, #184	; (adr r3, 8001138 <adcToTemp+0x2f8>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f7ff f8a7 	bl	80001d4 <__adddf3>
 8001086:	4632      	mov	r2, r6
 8001088:	4604      	mov	r4, r0
 800108a:	460d      	mov	r5, r1
 800108c:	463b      	mov	r3, r7
 800108e:	4630      	mov	r0, r6
 8001090:	4639      	mov	r1, r7
 8001092:	f7ff fa55 	bl	8000540 <__aeabi_dmul>
 8001096:	a32a      	add	r3, pc, #168	; (adr r3, 8001140 <adcToTemp+0x300>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff fa50 	bl	8000540 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4620      	mov	r0, r4
 80010a6:	4629      	mov	r1, r5
 80010a8:	f7ff f894 	bl	80001d4 <__adddf3>
 80010ac:	a326      	add	r3, pc, #152	; (adr r3, 8001148 <adcToTemp+0x308>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	4604      	mov	r4, r0
 80010b4:	460d      	mov	r5, r1
 80010b6:	e768      	b.n	8000f8a <adcToTemp+0x14a>
 80010b8:	e147ae14 	.word	0xe147ae14
 80010bc:	404e147a 	.word	0x404e147a
 80010c0:	28f5c28f 	.word	0x28f5c28f
 80010c4:	40098f5c 	.word	0x40098f5c
 80010c8:	ef34d6a1 	.word	0xef34d6a1
 80010cc:	3fd74538 	.word	0x3fd74538
 80010d0:	62a1b5c8 	.word	0x62a1b5c8
 80010d4:	3fb1bf9c 	.word	0x3fb1bf9c
 80010d8:	c1bda512 	.word	0xc1bda512
 80010dc:	3f932617 	.word	0x3f932617
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40080000 	.word	0x40080000
 80010e8:	e68ad796 	.word	0xe68ad796
 80010ec:	3f30f9d0 	.word	0x3f30f9d0
 80010f0:	2651f0b0 	.word	0x2651f0b0
 80010f4:	3f6b7b05 	.word	0x3f6b7b05
 80010f8:	17e9b45e 	.word	0x17e9b45e
 80010fc:	3ed19623 	.word	0x3ed19623
 8001100:	2d59f69c 	.word	0x2d59f69c
 8001104:	be73314a 	.word	0xbe73314a
 8001108:	00000000 	.word	0x00000000
 800110c:	40711000 	.word	0x40711000
 8001110:	2d3d1c0b 	.word	0x2d3d1c0b
 8001114:	3f310d9d 	.word	0x3f310d9d
 8001118:	985bc406 	.word	0x985bc406
 800111c:	3f6b79e2 	.word	0x3f6b79e2
 8001120:	c2668e6a 	.word	0xc2668e6a
 8001124:	3ece2761 	.word	0x3ece2761
 8001128:	86530344 	.word	0x86530344
 800112c:	be76ffab 	.word	0xbe76ffab
 8001130:	b6196c0a 	.word	0xb6196c0a
 8001134:	3f30df1a 	.word	0x3f30df1a
 8001138:	4d7e4cb2 	.word	0x4d7e4cb2
 800113c:	3f6b780f 	.word	0x3f6b780f
 8001140:	e4a6a429 	.word	0xe4a6a429
 8001144:	3ebc8f10 	.word	0x3ebc8f10
 8001148:	e811a6aa 	.word	0xe811a6aa
 800114c:	be77b3c1 	.word	0xbe77b3c1
 8001150:	457ff000 	.word	0x457ff000
 8001154:	461c4000 	.word	0x461c4000
 8001158:	46ea6000 	.word	0x46ea6000
 800115c:	437f0000 	.word	0x437f0000
 8001160:	3ff00000 	.word	0x3ff00000
		return((1/(3.3547977E-3+(2.5879299E-4*log(RtRT25))+(1.8964602E-6*pow(log(RtRT25),2))+(-1.1884916E-7*pow(log(RtRT25),3))))-273);
 8001164:	ec45 4b10 	vmov	d0, r4, r5
 8001168:	f005 fa0a 	bl	8006580 <log>
 800116c:	ec51 0b10 	vmov	r0, r1, d0
 8001170:	ec45 4b10 	vmov	d0, r4, r5
 8001174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001178:	f005 fa02 	bl	8006580 <log>
 800117c:	ec57 6b10 	vmov	r6, r7, d0
 8001180:	ec45 4b10 	vmov	d0, r4, r5
 8001184:	f005 f9fc 	bl	8006580 <log>
 8001188:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80011e0 <adcToTemp+0x3a0>
 800118c:	f005 fa78 	bl	8006680 <pow>
 8001190:	a315      	add	r3, pc, #84	; (adr r3, 80011e8 <adcToTemp+0x3a8>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800119a:	ed8d 0b00 	vstr	d0, [sp]
 800119e:	f7ff f9cf 	bl	8000540 <__aeabi_dmul>
 80011a2:	a313      	add	r3, pc, #76	; (adr r3, 80011f0 <adcToTemp+0x3b0>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff f814 	bl	80001d4 <__adddf3>
 80011ac:	4632      	mov	r2, r6
 80011ae:	4604      	mov	r4, r0
 80011b0:	460d      	mov	r5, r1
 80011b2:	463b      	mov	r3, r7
 80011b4:	4630      	mov	r0, r6
 80011b6:	4639      	mov	r1, r7
 80011b8:	f7ff f9c2 	bl	8000540 <__aeabi_dmul>
 80011bc:	a30e      	add	r3, pc, #56	; (adr r3, 80011f8 <adcToTemp+0x3b8>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff f9bd 	bl	8000540 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4620      	mov	r0, r4
 80011cc:	4629      	mov	r1, r5
 80011ce:	f7ff f801 	bl	80001d4 <__adddf3>
 80011d2:	a30b      	add	r3, pc, #44	; (adr r3, 8001200 <adcToTemp+0x3c0>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	4604      	mov	r4, r0
 80011da:	460d      	mov	r5, r1
 80011dc:	e6d5      	b.n	8000f8a <adcToTemp+0x14a>
 80011de:	bf00      	nop
 80011e0:	00000000 	.word	0x00000000
 80011e4:	40080000 	.word	0x40080000
 80011e8:	6db1218b 	.word	0x6db1218b
 80011ec:	3f30f5d3 	.word	0x3f30f5d3
 80011f0:	4cff8ecb 	.word	0x4cff8ecb
 80011f4:	3f6b7b85 	.word	0x3f6b7b85
 80011f8:	0aa0b008 	.word	0x0aa0b008
 80011fc:	3ebfd13c 	.word	0x3ebfd13c
 8001200:	88b075bc 	.word	0x88b075bc
 8001204:	be7fe740 	.word	0xbe7fe740

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	2400      	movs	r4, #0
{
 800120c:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8001212:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001216:	e9cd 4408 	strd	r4, r4, [sp, #32]
 800121a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121e:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4a22      	ldr	r2, [pc, #136]	; (80012ac <SystemClock_Config+0xa4>)
 8001224:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001226:	9407      	str	r4, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001228:	9403      	str	r4, [sp, #12]
 800122a:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122c:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001230:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001234:	6411      	str	r1, [r2, #64]	; 0x40
 8001236:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001238:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800123c:	9201      	str	r2, [sp, #4]
 800123e:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001240:	9402      	str	r4, [sp, #8]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001250:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001252:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001260:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001262:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001264:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001266:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001268:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800126c:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001272:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001274:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001276:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001278:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800127a:	f002 fb4d 	bl	8003918 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127e:	210f      	movs	r1, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001280:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	e9cd 1507 	strd	r1, r5, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800128c:	a807      	add	r0, sp, #28
 800128e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001290:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001296:	f002 fd53 	bl	8003d40 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800129a:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800129c:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800129e:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80012a0:	e9cd 3504 	strd	r3, r5, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012a4:	f002 fe0a 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80012a8:	b018      	add	sp, #96	; 0x60
 80012aa:	bd70      	pop	{r4, r5, r6, pc}
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40007000 	.word	0x40007000

080012b4 <main>:
{
 80012b4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	2400      	movs	r4, #0
{
 80012ba:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 80012bc:	f000 fd3c 	bl	8001d38 <HAL_Init>
  SystemClock_Config();
 80012c0:	f7ff ffa2 	bl	8001208 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80012c8:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012cc:	4dbd      	ldr	r5, [pc, #756]	; (80015c4 <main+0x310>)
 80012ce:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012d2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80012d4:	48bc      	ldr	r0, [pc, #752]	; (80015c8 <main+0x314>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012d6:	f8df 9340 	ldr.w	r9, [pc, #832]	; 8001618 <main+0x364>
  hadc1.Instance = ADC1;
 80012da:	4ebc      	ldr	r6, [pc, #752]	; (80015cc <main+0x318>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012dc:	f043 0310 	orr.w	r3, r3, #16
 80012e0:	632b      	str	r3, [r5, #48]	; 0x30
 80012e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ec:	9402      	str	r4, [sp, #8]
 80012ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80012f0:	f043 0304 	orr.w	r3, r3, #4
 80012f4:	632b      	str	r3, [r5, #48]	; 0x30
 80012f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	9302      	str	r3, [sp, #8]
 80012fe:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001300:	9403      	str	r4, [sp, #12]
 8001302:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001308:	632b      	str	r3, [r5, #48]	; 0x30
 800130a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800130c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001310:	9303      	str	r3, [sp, #12]
 8001312:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001314:	9404      	str	r4, [sp, #16]
 8001316:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	632b      	str	r3, [r5, #48]	; 0x30
 800131e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	9304      	str	r3, [sp, #16]
 8001326:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	9405      	str	r4, [sp, #20]
 800132a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	632b      	str	r3, [r5, #48]	; 0x30
 8001332:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	9305      	str	r3, [sp, #20]
 800133a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800133c:	9406      	str	r4, [sp, #24]
 800133e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	632b      	str	r3, [r5, #48]	; 0x30
 8001346:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800134e:	4622      	mov	r2, r4
 8001350:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001352:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001354:	f001 faac 	bl	80028b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001358:	2201      	movs	r2, #1
 800135a:	4611      	mov	r1, r2
 800135c:	489c      	ldr	r0, [pc, #624]	; (80015d0 <main+0x31c>)
 800135e:	f001 faa7 	bl	80028b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001362:	4622      	mov	r2, r4
 8001364:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001368:	489a      	ldr	r0, [pc, #616]	; (80015d4 <main+0x320>)
 800136a:	f001 faa1 	bl	80028b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001372:	f04f 0b08 	mov.w	fp, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001376:	a909      	add	r1, sp, #36	; 0x24
 8001378:	4893      	ldr	r0, [pc, #588]	; (80015c8 <main+0x314>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137e:	e9cd b809 	strd	fp, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001382:	f001 f991 	bl	80026a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001386:	a909      	add	r1, sp, #36	; 0x24
 8001388:	4891      	ldr	r0, [pc, #580]	; (80015d0 <main+0x31c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800138c:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001390:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001398:	f001 f986 	bl	80026a8 <HAL_GPIO_Init>
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800139c:	a909      	add	r1, sp, #36	; 0x24
 800139e:	488c      	ldr	r0, [pc, #560]	; (80015d0 <main+0x31c>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013a2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80013a6:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f001 f97b 	bl	80026a8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b2:	a909      	add	r1, sp, #36	; 0x24
 80013b4:	4888      	ldr	r0, [pc, #544]	; (80015d8 <main+0x324>)
  GPIO_InitStruct.Pin = B1_Pin;
 80013b6:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013ba:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013be:	f001 f973 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013c2:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80013c4:	a909      	add	r1, sp, #36	; 0x24
 80013c6:	4885      	ldr	r0, [pc, #532]	; (80015dc <main+0x328>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013c8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f001 f96b 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80013d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80013d6:	a909      	add	r1, sp, #36	; 0x24
 80013d8:	4880      	ldr	r0, [pc, #512]	; (80015dc <main+0x328>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80013da:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	e9cd 740a 	strd	r7, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80013e2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f001 f95f 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80013ea:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ee:	a909      	add	r1, sp, #36	; 0x24
 80013f0:	4878      	ldr	r0, [pc, #480]	; (80015d4 <main+0x320>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80013f2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fa:	f001 f955 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80013fe:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001400:	a909      	add	r1, sp, #36	; 0x24
 8001402:	4874      	ldr	r0, [pc, #464]	; (80015d4 <main+0x320>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001404:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800140a:	f001 f94d 	bl	80026a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800140e:	a909      	add	r1, sp, #36	; 0x24
 8001410:	486d      	ldr	r0, [pc, #436]	; (80015c8 <main+0x314>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001414:	e9cd 7909 	strd	r7, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001418:	f001 f946 	bl	80026a8 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800141c:	4b70      	ldr	r3, [pc, #448]	; (80015e0 <main+0x32c>)
  hi2c1.Init.ClockSpeed = 100000;
 800141e:	4971      	ldr	r1, [pc, #452]	; (80015e4 <main+0x330>)
  hi2c1.Instance = I2C1;
 8001420:	4f71      	ldr	r7, [pc, #452]	; (80015e8 <main+0x334>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001422:	609c      	str	r4, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001424:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001428:	4618      	mov	r0, r3
  hi2c1.Init.ClockSpeed = 100000;
 800142a:	e9c3 7100 	strd	r7, r1, [r3]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800142e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8001430:	60dc      	str	r4, [r3, #12]
  hi2c1.Init.OwnAddress2 = 0;
 8001432:	e9c3 4405 	strd	r4, r4, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001436:	e9c3 4407 	strd	r4, r4, [r3, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800143a:	f001 ff4b 	bl	80032d4 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 800143e:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <main+0x338>)
 8001440:	496b      	ldr	r1, [pc, #428]	; (80015f0 <main+0x33c>)
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001442:	4a6c      	ldr	r2, [pc, #432]	; (80015f4 <main+0x340>)
  hi2s3.Instance = SPI3;
 8001444:	6019      	str	r1, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001446:	f44f 7700 	mov.w	r7, #512	; 0x200
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800144a:	4618      	mov	r0, r3
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800144c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800144e:	605f      	str	r7, [r3, #4]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001450:	611f      	str	r7, [r3, #16]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001452:	609c      	str	r4, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001454:	60dc      	str	r4, [r3, #12]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001456:	e9c3 4406 	strd	r4, r4, [r3, #24]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800145a:	621c      	str	r4, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800145c:	f001 fffa 	bl	8003454 <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 8001460:	4b65      	ldr	r3, [pc, #404]	; (80015f8 <main+0x344>)
 8001462:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800161c <main+0x368>
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001466:	619f      	str	r7, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001468:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi1.Init.CRCPolynomial = 10;
 800146c:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800146e:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001470:	e9c3 c100 	strd	ip, r1, [r3]
  hspi1.Init.CRCPolynomial = 10;
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001476:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800147a:	e9c3 4404 	strd	r4, r4, [r3, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800147e:	e9c3 4407 	strd	r4, r4, [r3, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001482:	e9c3 4409 	strd	r4, r4, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001486:	f002 fde9 	bl	800405c <HAL_SPI_Init>
  MX_USB_HOST_Init();
 800148a:	f004 fe23 	bl	80060d4 <MX_USB_HOST_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800148e:	9400      	str	r4, [sp, #0]
 8001490:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  htim3.Instance = TIM3;
 8001492:	4f5a      	ldr	r7, [pc, #360]	; (80015fc <main+0x348>)
  huart2.Instance = USART2;
 8001494:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8001620 <main+0x36c>
  htim7.Instance = TIM7;
 8001498:	f8df a188 	ldr.w	sl, [pc, #392]	; 8001624 <main+0x370>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800149c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014a0:	632b      	str	r3, [r5, #48]	; 0x30
 80014a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80014a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014a8:	4622      	mov	r2, r4
 80014aa:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ac:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014ae:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014b0:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80014b2:	f000 fedb 	bl	800226c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014b6:	2038      	movs	r0, #56	; 0x38
 80014b8:	f000 ff0e 	bl	80022d8 <HAL_NVIC_EnableIRQ>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  hadc1.Instance = ADC1;
 80014c0:	494f      	ldr	r1, [pc, #316]	; (8001600 <main+0x34c>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014c2:	4b50      	ldr	r3, [pc, #320]	; (8001604 <main+0x350>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014c4:	6072      	str	r2, [r6, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014c6:	4630      	mov	r0, r6
  hadc1.Instance = ADC1;
 80014c8:	6031      	str	r1, [r6, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014ca:	62b3      	str	r3, [r6, #40]	; 0x28
  ADC_ChannelConfTypeDef sConfig = {0};
 80014cc:	9409      	str	r4, [sp, #36]	; 0x24
 80014ce:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80014d2:	940c      	str	r4, [sp, #48]	; 0x30
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014d4:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014d6:	6134      	str	r4, [r6, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80014d8:	f886 8018 	strb.w	r8, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014dc:	f886 4020 	strb.w	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014e0:	62f4      	str	r4, [r6, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e2:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014e4:	f8c6 801c 	str.w	r8, [r6, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80014e8:	f886 8030 	strb.w	r8, [r6, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014ec:	f8c6 8014 	str.w	r8, [r6, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f0:	f000 fc60 	bl	8001db4 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80014f4:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f6:	a909      	add	r1, sp, #36	; 0x24
 80014f8:	4630      	mov	r0, r6
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80014fa:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.Rank = 1;
 80014fc:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001500:	f000 fdfa 	bl	80020f8 <HAL_ADC_ConfigChannel>
  htim3.Instance = TIM3;
 8001504:	4b40      	ldr	r3, [pc, #256]	; (8001608 <main+0x354>)
 8001506:	603b      	str	r3, [r7, #0]
  htim3.Init.Period = 999;
 8001508:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800150c:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Prescaler = 83;
 800150e:	2153      	movs	r1, #83	; 0x53
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001510:	4638      	mov	r0, r7
  htim3.Init.Period = 999;
 8001512:	60fa      	str	r2, [r7, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001514:	61bb      	str	r3, [r7, #24]
  htim3.Init.Prescaler = 83;
 8001516:	6079      	str	r1, [r7, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800151e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001522:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001526:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	9408      	str	r4, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	60bc      	str	r4, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	613c      	str	r4, [r7, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800152e:	f002 ffdb 	bl	80044e8 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001532:	a907      	add	r1, sp, #28
 8001534:	4638      	mov	r0, r7
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153a:	f003 f89f 	bl	800467c <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153e:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001540:	4622      	mov	r2, r4
 8001542:	a909      	add	r1, sp, #36	; 0x24
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001544:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001546:	4638      	mov	r0, r7
  sConfigOC.Pulse = 499;
 8001548:	f240 13f3 	movw	r3, #499	; 0x1f3
 800154c:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154e:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001550:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001552:	f003 f817 	bl	8004584 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001556:	4638      	mov	r0, r7
 8001558:	f000 fa64 	bl	8001a24 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 800155c:	482b      	ldr	r0, [pc, #172]	; (800160c <main+0x358>)
 800155e:	f8c9 0000 	str.w	r0, [r9]
  huart2.Init.BaudRate = 115200;
 8001562:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001566:	220c      	movs	r2, #12
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001568:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156c:	4648      	mov	r0, r9
  huart2.Init.BaudRate = 115200;
 800156e:	f8c9 1004 	str.w	r1, [r9, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001572:	f8c9 2014 	str.w	r2, [r9, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001576:	f8c9 301c 	str.w	r3, [r9, #28]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	f8c9 4008 	str.w	r4, [r9, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 800157e:	e9c9 4403 	strd	r4, r4, [r9, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001586:	f003 f93b 	bl	8004800 <HAL_UART_Init>
  htim7.Instance = TIM7;
 800158a:	4921      	ldr	r1, [pc, #132]	; (8001610 <main+0x35c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	9409      	str	r4, [sp, #36]	; 0x24
  htim7.Init.Period = 9999;
 800158e:	f242 730f 	movw	r3, #9999	; 0x270f
  htim7.Init.Prescaler = 167;
 8001592:	22a7      	movs	r2, #167	; 0xa7
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001594:	4650      	mov	r0, sl
  htim7.Init.Period = 9999;
 8001596:	f8ca 300c 	str.w	r3, [sl, #12]
  htim7.Init.Prescaler = 167;
 800159a:	e9ca 1200 	strd	r1, r2, [sl]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159e:	940a      	str	r4, [sp, #40]	; 0x28
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	f8ca 4008 	str.w	r4, [sl, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	f8ca 4018 	str.w	r4, [sl, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015a8:	f002 ff82 	bl	80044b0 <HAL_TIM_Base_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015ac:	a909      	add	r1, sp, #36	; 0x24
 80015ae:	4650      	mov	r0, sl
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015b4:	f003 f862 	bl	800467c <HAL_TIMEx_MasterConfigSynchronization>
  HAL_UART_Receive_IT ( &huart2, &u2rx, 1 );
 80015b8:	4642      	mov	r2, r8
 80015ba:	4916      	ldr	r1, [pc, #88]	; (8001614 <main+0x360>)
 80015bc:	4648      	mov	r0, r9
 80015be:	f003 f94f 	bl	8004860 <HAL_UART_Receive_IT>
 80015c2:	e039      	b.n	8001638 <main+0x384>
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	200001b0 	.word	0x200001b0
 80015d0:	40020800 	.word	0x40020800
 80015d4:	40020c00 	.word	0x40020c00
 80015d8:	40020000 	.word	0x40020000
 80015dc:	40020400 	.word	0x40020400
 80015e0:	2000011c 	.word	0x2000011c
 80015e4:	000186a0 	.word	0x000186a0
 80015e8:	40005400 	.word	0x40005400
 80015ec:	20000330 	.word	0x20000330
 80015f0:	40003c00 	.word	0x40003c00
 80015f4:	00017700 	.word	0x00017700
 80015f8:	20000258 	.word	0x20000258
 80015fc:	20000170 	.word	0x20000170
 8001600:	40012000 	.word	0x40012000
 8001604:	0f000001 	.word	0x0f000001
 8001608:	40000400 	.word	0x40000400
 800160c:	40004400 	.word	0x40004400
 8001610:	40001400 	.word	0x40001400
 8001614:	200000c4 	.word	0x200000c4
 8001618:	10120000 	.word	0x10120000
 800161c:	40013000 	.word	0x40013000
 8001620:	200002b0 	.word	0x200002b0
 8001624:	200002f0 	.word	0x200002f0
 8001628:	00000000 	.word	0x00000000
 800162c:	42c80000 	.word	0x42c80000
 8001630:	c2c80000 	.word	0xc2c80000
 8001634:	3c23d70a 	.word	0x3c23d70a
  HAL_TIM_Base_Start_IT ( &htim7 );
 8001638:	4650      	mov	r0, sl
 800163a:	f002 fdd9 	bl	80041f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start ( &htim3, TIM_CHANNEL_1 );
 800163e:	4621      	mov	r1, r4
 8001640:	4638      	mov	r0, r7
 8001642:	f002 fe0f 	bl	8004264 <HAL_TIM_PWM_Start>
  pidInit ( &pid, KP, KI, KD, TS, 100, -100, 100, 0, 100, 0 );
 8001646:	ed5f 4a08 	vldr	s9, [pc, #-32]	; 8001628 <main+0x374>
 800164a:	ed1f 4a08 	vldr	s8, [pc, #-32]	; 800162c <main+0x378>
  __HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, 0 );
 800164e:	683b      	ldr	r3, [r7, #0]
  pidInit ( &pid, KP, KI, KD, TS, 100, -100, 100, 0, 100, 0 );
 8001650:	ed5f 2a09 	vldr	s5, [pc, #-36]	; 8001630 <main+0x37c>
  __HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, 0 );
 8001654:	635c      	str	r4, [r3, #52]	; 0x34
  pidInit ( &pid, KP, KI, KD, TS, 100, -100, 100, 0, 100, 0 );
 8001656:	eef0 3a64 	vmov.f32	s7, s9
 800165a:	eeb0 1a64 	vmov.f32	s2, s9
 800165e:	eeb0 3a44 	vmov.f32	s6, s8
 8001662:	eeb0 2a44 	vmov.f32	s4, s8
 8001666:	ed5f 1a0d 	vldr	s3, [pc, #-52]	; 8001634 <main+0x380>
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <main+0x3cc>)
 800166c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001670:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001674:	f000 fac0 	bl	8001bf8 <pidInit>
    MX_USB_HOST_Process();
 8001678:	f004 fd4e 	bl	8006118 <MX_USB_HOST_Process>
 800167c:	e7fc      	b.n	8001678 <main+0x3c4>
 800167e:	bf00      	nop
 8001680:	200000dc 	.word	0x200000dc

08001684 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001684:	b508      	push	{r3, lr}
    if ( htim->Instance == TIM7 )
 8001686:	6802      	ldr	r2, [r0, #0]
 8001688:	4b23      	ldr	r3, [pc, #140]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800168a:	429a      	cmp	r2, r3
 800168c:	d000      	beq.n	8001690 <HAL_TIM_PeriodElapsedCallback+0xc>

    	powerDriver ( pidGetOutput ( &pid ) );

    	HAL_ADC_Start_DMA ( &hadc1, (uint32_t *)&adcRawValue, 1 );
    }
}
 800168e:	bd08      	pop	{r3, pc}
    	temperature = adcToTemp ( adcRawValue );
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f7ff fbd4 	bl	8000e40 <adcToTemp>
    	temperatureFiltered = ( temperature * filterRate ) +  ( temperatureFiltered * ( 1 - filterRate ) );
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800169c:	ed92 7a00 	vldr	s14, [r2]
 80016a0:	ed93 6a00 	vldr	s12, [r3]
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 80016a4:	4920      	ldr	r1, [pc, #128]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0xa4>)
    	temperature = adcToTemp ( adcRawValue );
 80016a6:	4a21      	ldr	r2, [pc, #132]	; (800172c <HAL_TIM_PeriodElapsedCallback+0xa8>)
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 80016a8:	edd1 6a00 	vldr	s13, [r1]
    	temperature = adcToTemp ( adcRawValue );
 80016ac:	ed82 0a00 	vstr	s0, [r2]
    	temperatureFiltered = ( temperature * filterRate ) +  ( temperatureFiltered * ( 1 - filterRate ) );
 80016b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80016b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 80016b8:	481d      	ldr	r0, [pc, #116]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0xac>)
    	temperatureFiltered = ( temperature * filterRate ) +  ( temperatureFiltered * ( 1 - filterRate ) );
 80016ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80016be:	eee0 7a07 	vfma.f32	s15, s0, s14
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 80016c2:	ee36 0ae7 	vsub.f32	s0, s13, s15
    	temperatureFiltered = ( temperature * filterRate ) +  ( temperatureFiltered * ( 1 - filterRate ) );
 80016c6:	edc3 7a00 	vstr	s15, [r3]
    	pidControl ( &pid, ( temperatureSetPoint - temperatureFiltered ) );
 80016ca:	f000 faad 	bl	8001c28 <pidControl>
    	powerDriver ( pidGetOutput ( &pid ) );
 80016ce:	4818      	ldr	r0, [pc, #96]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80016d0:	f000 fb0a 	bl	8001ce8 <pidGetOutput>
	if ( inp > 100 )
 80016d4:	eddf 7a17 	vldr	s15, [pc, #92]	; 8001734 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80016d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	dc15      	bgt.n	800170e <HAL_TIM_PeriodElapsedCallback+0x8a>
	else if (inp < 0 )
 80016e2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80016e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ea:	d413      	bmi.n	8001714 <HAL_TIM_PeriodElapsedCallback+0x90>
 80016ec:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80016f0:	ee17 3a90 	vmov	r3, s15
 80016f4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80016f8:	005b      	lsls	r3, r3, #1
	__HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, (uint32_t) inp * 10 );
 80016fa:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0xb4>)
    	HAL_ADC_Start_DMA ( &hadc1, (uint32_t *)&adcRawValue, 1 );
 80016fc:	4907      	ldr	r1, [pc, #28]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x98>)
	__HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, (uint32_t) inp * 10 );
 80016fe:	6812      	ldr	r2, [r2, #0]
    	HAL_ADC_Start_DMA ( &hadc1, (uint32_t *)&adcRawValue, 1 );
 8001700:	480e      	ldr	r0, [pc, #56]	; (800173c <HAL_TIM_PeriodElapsedCallback+0xb8>)
	__HAL_TIM_SET_COMPARE ( &htim3, TIM_CHANNEL_1, (uint32_t) inp * 10 );
 8001702:	6353      	str	r3, [r2, #52]	; 0x34
    	HAL_ADC_Start_DMA ( &hadc1, (uint32_t *)&adcRawValue, 1 );
 8001704:	2201      	movs	r2, #1
}
 8001706:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    	HAL_ADC_Start_DMA ( &hadc1, (uint32_t *)&adcRawValue, 1 );
 800170a:	f000 bc05 	b.w	8001f18 <HAL_ADC_Start_DMA>
	if ( inp > 100 )
 800170e:	f240 33de 	movw	r3, #990	; 0x3de
 8001712:	e7f2      	b.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x76>
	else if (inp < 0 )
 8001714:	2300      	movs	r3, #0
 8001716:	e7f0      	b.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x76>
 8001718:	40001400 	.word	0x40001400
 800171c:	200000b8 	.word	0x200000b8
 8001720:	20000000 	.word	0x20000000
 8001724:	200000c0 	.word	0x200000c0
 8001728:	20000004 	.word	0x20000004
 800172c:	200000bc 	.word	0x200000bc
 8001730:	200000dc 	.word	0x200000dc
 8001734:	42c80000 	.word	0x42c80000
 8001738:	20000170 	.word	0x20000170
 800173c:	200001b0 	.word	0x200001b0

08001740 <HAL_UART_TxCpltCallback>:
{
    if ( huart->Instance == USART2 )
    {

    }
}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
    if ( huart->Instance == USART2 )
 8001744:	6802      	ldr	r2, [r0, #0]
 8001746:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_UART_RxCpltCallback+0x14>)
 8001748:	429a      	cmp	r2, r3
 800174a:	d000      	beq.n	800174e <HAL_UART_RxCpltCallback+0xa>
    {

        HAL_UART_Receive_IT ( &huart2, &u2rx, 1 );
    }
}
 800174c:	4770      	bx	lr
        HAL_UART_Receive_IT ( &huart2, &u2rx, 1 );
 800174e:	2201      	movs	r2, #1
 8001750:	4902      	ldr	r1, [pc, #8]	; (800175c <HAL_UART_RxCpltCallback+0x18>)
 8001752:	4803      	ldr	r0, [pc, #12]	; (8001760 <HAL_UART_RxCpltCallback+0x1c>)
 8001754:	f003 b884 	b.w	8004860 <HAL_UART_Receive_IT>
 8001758:	40004400 	.word	0x40004400
 800175c:	200000c4 	.word	0x200000c4
 8001760:	200002b0 	.word	0x200002b0

08001764 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop

08001768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <HAL_MspInit+0x34>)
 800176c:	2100      	movs	r1, #0
 800176e:	9100      	str	r1, [sp, #0]
 8001770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001772:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001776:	645a      	str	r2, [r3, #68]	; 0x44
 8001778:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800177a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800177e:	9200      	str	r2, [sp, #0]
 8001780:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	9101      	str	r1, [sp, #4]
 8001784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001786:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	9301      	str	r3, [sp, #4]
 8001794:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	b002      	add	sp, #8
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800

080017a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80017a2:	6802      	ldr	r2, [r0, #0]
 80017a4:	4b23      	ldr	r3, [pc, #140]	; (8001834 <HAL_ADC_MspInit+0x94>)
{
 80017a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80017aa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80017b0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80017b4:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC1)
 80017b6:	d001      	beq.n	80017bc <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017b8:	b008      	add	sp, #32
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017bc:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80017c0:	9401      	str	r4, [sp, #4]
 80017c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 80017c4:	4d1c      	ldr	r5, [pc, #112]	; (8001838 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017ca:	645a      	str	r2, [r3, #68]	; 0x44
 80017cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80017ce:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80017d2:	9201      	str	r2, [sp, #4]
 80017d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	9402      	str	r4, [sp, #8]
 80017d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	631a      	str	r2, [r3, #48]	; 0x30
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017e8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80017ec:	9303      	str	r3, [sp, #12]
 80017ee:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	4812      	ldr	r0, [pc, #72]	; (800183c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f8:	f000 ff56 	bl	80026a8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80017fc:	4810      	ldr	r0, [pc, #64]	; (8001840 <HAL_ADC_MspInit+0xa0>)
 80017fe:	6028      	str	r0, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001800:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001804:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001808:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800180c:	4628      	mov	r0, r5
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800180e:	606c      	str	r4, [r5, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001814:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001818:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800181a:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800181e:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001820:	f000 fd82 	bl	8002328 <HAL_DMA_Init>
 8001824:	b918      	cbnz	r0, 800182e <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001826:	63b5      	str	r5, [r6, #56]	; 0x38
 8001828:	63ae      	str	r6, [r5, #56]	; 0x38
}
 800182a:	b008      	add	sp, #32
 800182c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800182e:	f7ff ff99 	bl	8001764 <Error_Handler>
 8001832:	e7f8      	b.n	8001826 <HAL_ADC_MspInit+0x86>
 8001834:	40012000 	.word	0x40012000
 8001838:	200001f8 	.word	0x200001f8
 800183c:	40020000 	.word	0x40020000
 8001840:	40026410 	.word	0x40026410

08001844 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001844:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8001846:	6802      	ldr	r2, [r0, #0]
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <HAL_I2C_MspInit+0x64>)
{
 800184a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 800184e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001850:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001854:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001858:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 800185a:	d001      	beq.n	8001860 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800185c:	b008      	add	sp, #32
 800185e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001860:	4d12      	ldr	r5, [pc, #72]	; (80018ac <HAL_I2C_MspInit+0x68>)
 8001862:	9401      	str	r4, [sp, #4]
 8001864:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	4812      	ldr	r0, [pc, #72]	; (80018b0 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	632b      	str	r3, [r5, #48]	; 0x30
 800186e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001876:	f44f 7210 	mov.w	r2, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187a:	2312      	movs	r3, #18
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800187c:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800187e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001880:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001882:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001884:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001886:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001888:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188a:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188c:	f000 ff0c 	bl	80026a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001890:	9402      	str	r4, [sp, #8]
 8001892:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001898:	642b      	str	r3, [r5, #64]	; 0x40
 800189a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800189c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a0:	9302      	str	r3, [sp, #8]
 80018a2:	9b02      	ldr	r3, [sp, #8]
}
 80018a4:	b008      	add	sp, #32
 80018a6:	bd70      	pop	{r4, r5, r6, pc}
 80018a8:	40005400 	.word	0x40005400
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020400 	.word	0x40020400

080018b4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80018b4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2s->Instance==SPI3)
 80018b6:	6802      	ldr	r2, [r0, #0]
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <HAL_I2S_MspInit+0x8c>)
{
 80018ba:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	2400      	movs	r4, #0
  if(hi2s->Instance==SPI3)
 80018be:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c0:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80018c4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80018c8:	9407      	str	r4, [sp, #28]
  if(hi2s->Instance==SPI3)
 80018ca:	d001      	beq.n	80018d0 <HAL_I2S_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018cc:	b008      	add	sp, #32
 80018ce:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018d0:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 80018d4:	9400      	str	r4, [sp, #0]
 80018d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80018d8:	481a      	ldr	r0, [pc, #104]	; (8001944 <HAL_I2S_MspInit+0x90>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 80018da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018de:	641a      	str	r2, [r3, #64]	; 0x40
 80018e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018e2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80018e6:	9200      	str	r2, [sp, #0]
 80018e8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ea:	9401      	str	r4, [sp, #4]
 80018ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ee:	f042 0201 	orr.w	r2, r2, #1
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
 80018f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018f6:	f002 0201 	and.w	r2, r2, #1
 80018fa:	9201      	str	r2, [sp, #4]
 80018fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018fe:	9402      	str	r4, [sp, #8]
 8001900:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001902:	f042 0204 	orr.w	r2, r2, #4
 8001906:	631a      	str	r2, [r3, #48]	; 0x30
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001912:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001914:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001916:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001918:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800191a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001920:	f000 fec2 	bl	80026a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001924:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001928:	a903      	add	r1, sp, #12
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <HAL_I2S_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800192e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001930:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001934:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001936:	f000 feb7 	bl	80026a8 <HAL_GPIO_Init>
}
 800193a:	b008      	add	sp, #32
 800193c:	bd70      	pop	{r4, r5, r6, pc}
 800193e:	bf00      	nop
 8001940:	40003c00 	.word	0x40003c00
 8001944:	40020000 	.word	0x40020000
 8001948:	40020800 	.word	0x40020800

0800194c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800194c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 800194e:	6801      	ldr	r1, [r0, #0]
 8001950:	4a16      	ldr	r2, [pc, #88]	; (80019ac <HAL_SPI_MspInit+0x60>)
{
 8001952:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8001956:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800195c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001960:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8001962:	d001      	beq.n	8001968 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001964:	b009      	add	sp, #36	; 0x24
 8001966:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001968:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	480f      	ldr	r0, [pc, #60]	; (80019b0 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001972:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001976:	6451      	str	r1, [r2, #68]	; 0x44
 8001978:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800197a:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 800197e:	9101      	str	r1, [sp, #4]
 8001980:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6313      	str	r3, [r2, #48]	; 0x30
 800198c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001996:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800199a:	24e0      	movs	r4, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800199e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a0:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a4:	f000 fe80 	bl	80026a8 <HAL_GPIO_Init>
}
 80019a8:	b009      	add	sp, #36	; 0x24
 80019aa:	bd30      	pop	{r4, r5, pc}
 80019ac:	40013000 	.word	0x40013000
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 80019b4:	6802      	ldr	r2, [r0, #0]
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <HAL_TIM_PWM_MspInit+0x2c>)
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d000      	beq.n	80019be <HAL_TIM_PWM_MspInit+0xa>
 80019bc:	4770      	bx	lr
{
 80019be:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019c0:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 80019c4:	2200      	movs	r2, #0
 80019c6:	9201      	str	r2, [sp, #4]
 80019c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019ca:	f042 0202 	orr.w	r2, r2, #2
 80019ce:	641a      	str	r2, [r3, #64]	; 0x40
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019da:	b002      	add	sp, #8
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40000400 	.word	0x40000400

080019e4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM7)
 80019e4:	6802      	ldr	r2, [r0, #0]
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <HAL_TIM_Base_MspInit+0x3c>)
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d000      	beq.n	80019ee <HAL_TIM_Base_MspInit+0xa>
 80019ec:	4770      	bx	lr
{
 80019ee:	b500      	push	{lr}
 80019f0:	b083      	sub	sp, #12
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80019f2:	2200      	movs	r2, #0
 80019f4:	f503 3309 	add.w	r3, r3, #140288	; 0x22400
 80019f8:	9201      	str	r2, [sp, #4]
 80019fa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80019fc:	f041 0120 	orr.w	r1, r1, #32
 8001a00:	6419      	str	r1, [r3, #64]	; 0x40
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	9301      	str	r3, [sp, #4]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a0a:	4611      	mov	r1, r2
 8001a0c:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a0e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a10:	f000 fc2c 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a14:	2037      	movs	r0, #55	; 0x37
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001a16:	b003      	add	sp, #12
 8001a18:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a1c:	f000 bc5c 	b.w	80022d8 <HAL_NVIC_EnableIRQ>
 8001a20:	40001400 	.word	0x40001400

08001a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a24:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8001a26:	6801      	ldr	r1, [r0, #0]
 8001a28:	4a11      	ldr	r2, [pc, #68]	; (8001a70 <HAL_TIM_MspPostInit+0x4c>)
{
 8001a2a:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8001a2e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a30:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8001a34:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001a38:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8001a3a:	d001      	beq.n	8001a40 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a3c:	b006      	add	sp, #24
 8001a3e:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a40:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a48:	480a      	ldr	r0, [pc, #40]	; (8001a74 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4a:	f043 0304 	orr.w	r3, r3, #4
 8001a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a50:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a58:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a5c:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5e:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a60:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a62:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a66:	f000 fe1f 	bl	80026a8 <HAL_GPIO_Init>
}
 8001a6a:	b006      	add	sp, #24
 8001a6c:	bd10      	pop	{r4, pc}
 8001a6e:	bf00      	nop
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40020800 	.word	0x40020800

08001a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a78:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8001a7a:	6802      	ldr	r2, [r0, #0]
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <HAL_UART_MspInit+0x78>)
{
 8001a7e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8001a82:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001a88:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001a8c:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART2)
 8001a8e:	d001      	beq.n	8001a94 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a90:	b008      	add	sp, #32
 8001a92:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a94:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001a98:	9401      	str	r4, [sp, #4]
 8001a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	4815      	ldr	r0, [pc, #84]	; (8001af4 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aa6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001aaa:	9201      	str	r2, [sp, #4]
 8001aac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	9402      	str	r4, [sp, #8]
 8001ab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac0:	220c      	movs	r2, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ac6:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aca:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001acc:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ace:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ad0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	e9cd 5205 	strd	r5, r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad8:	f000 fde6 	bl	80026a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001adc:	4622      	mov	r2, r4
 8001ade:	4621      	mov	r1, r4
 8001ae0:	2026      	movs	r0, #38	; 0x26
 8001ae2:	f000 fbc3 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ae6:	2026      	movs	r0, #38	; 0x26
 8001ae8:	f000 fbf6 	bl	80022d8 <HAL_NVIC_EnableIRQ>
}
 8001aec:	b008      	add	sp, #32
 8001aee:	bd70      	pop	{r4, r5, r6, pc}
 8001af0:	40004400 	.word	0x40004400
 8001af4:	40020000 	.word	0x40020000

08001af8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop

08001afc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afc:	e7fe      	b.n	8001afc <HardFault_Handler>
 8001afe:	bf00      	nop

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	e7fe      	b.n	8001b00 <MemManage_Handler>
 8001b02:	bf00      	nop

08001b04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b04:	e7fe      	b.n	8001b04 <BusFault_Handler>
 8001b06:	bf00      	nop

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	e7fe      	b.n	8001b08 <UsageFault_Handler>
 8001b0a:	bf00      	nop

08001b0c <SVC_Handler>:
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop

08001b10 <DebugMon_Handler>:
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop

08001b14 <PendSV_Handler>:
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop

08001b18 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b18:	f000 b928 	b.w	8001d6c <HAL_IncTick>

08001b1c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b1c:	4801      	ldr	r0, [pc, #4]	; (8001b24 <USART2_IRQHandler+0x8>)
 8001b1e:	f002 bf01 	b.w	8004924 <HAL_UART_IRQHandler>
 8001b22:	bf00      	nop
 8001b24:	200002b0 	.word	0x200002b0

08001b28 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b28:	4801      	ldr	r0, [pc, #4]	; (8001b30 <TIM7_IRQHandler+0x8>)
 8001b2a:	f002 bba5 	b.w	8004278 <HAL_TIM_IRQHandler>
 8001b2e:	bf00      	nop
 8001b30:	200002f0 	.word	0x200002f0

08001b34 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b34:	4801      	ldr	r0, [pc, #4]	; (8001b3c <DMA2_Stream0_IRQHandler+0x8>)
 8001b36:	f000 bce1 	b.w	80024fc <HAL_DMA_IRQHandler>
 8001b3a:	bf00      	nop
 8001b3c:	200001f8 	.word	0x200001f8

08001b40 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001b40:	4801      	ldr	r0, [pc, #4]	; (8001b48 <OTG_FS_IRQHandler+0x8>)
 8001b42:	f000 bfc7 	b.w	8002ad4 <HAL_HCD_IRQHandler>
 8001b46:	bf00      	nop
 8001b48:	20000748 	.word	0x20000748

08001b4c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001b4c:	4a0c      	ldr	r2, [pc, #48]	; (8001b80 <_sbrk+0x34>)
{
 8001b4e:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8001b50:	6813      	ldr	r3, [r2, #0]
 8001b52:	b133      	cbz	r3, 8001b62 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001b54:	4418      	add	r0, r3
 8001b56:	4669      	mov	r1, sp
 8001b58:	4288      	cmp	r0, r1
 8001b5a:	d808      	bhi.n	8001b6e <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8001b5c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <_sbrk+0x38>)
 8001b64:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8001b66:	4418      	add	r0, r3
 8001b68:	4669      	mov	r1, sp
 8001b6a:	4288      	cmp	r0, r1
 8001b6c:	d9f6      	bls.n	8001b5c <_sbrk+0x10>
		errno = ENOMEM;
 8001b6e:	f004 fc13 	bl	8006398 <__errno>
 8001b72:	230c      	movs	r3, #12
 8001b74:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd08      	pop	{r3, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000c8 	.word	0x200000c8
 8001b84:	20000a10 	.word	0x20000a10

08001b88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SystemInit+0x18>)
 8001b8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b8e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b92:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001b96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b9a:	6099      	str	r1, [r3, #8]
#endif
}
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ba8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001baa:	e003      	b.n	8001bb4 <LoopCopyDataInit>

08001bac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001bb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001bb2:	3104      	adds	r1, #4

08001bb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001bb4:	480b      	ldr	r0, [pc, #44]	; (8001be4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001bb6:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001bb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bbc:	d3f6      	bcc.n	8001bac <CopyDataInit>
  ldr  r2, =_sbss
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bc0:	e002      	b.n	8001bc8 <LoopFillZerobss>

08001bc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bc4:	f842 3b04 	str.w	r3, [r2], #4

08001bc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bcc:	d3f9      	bcc.n	8001bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bce:	f7ff ffdb 	bl	8001b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f004 fbe7 	bl	80063a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd6:	f7ff fb6d 	bl	80012b4 <main>
  bx  lr    
 8001bda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bdc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001be0:	08007b38 	.word	0x08007b38
  ldr  r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001be8:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8001bec:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8001bf0:	20000a10 	.word	0x20000a10

08001bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC_IRQHandler>
	...

08001bf8 <pidInit>:
 * @about: Initialize pid structure.
 */
void pidInit ( pidc_t* driver, float kp, float ki, float kd, float ts, float iPartMaxLimit, float iPartMinLimit,
                float dPartMaxLimit, float dPartMinLimit, float pidOutputMaxLimit, float pidOutputMinLimit )
{
    driver->output = pidOutputMinLimit;
 8001bf8:	edc0 4a02 	vstr	s9, [r0, #8]

    // Coefficients.
    driver->kp = kp;
 8001bfc:	ed80 0a03 	vstr	s0, [r0, #12]
    driver->ki = ki;
 8001c00:	edc0 0a04 	vstr	s1, [r0, #16]
    driver->kd = kd;
 8001c04:	ed80 1a05 	vstr	s2, [r0, #20]

    driver->ts = ts;
 8001c08:	edc0 1a06 	vstr	s3, [r0, #24]

    // Limits of integral part.
    driver->iMax = iPartMaxLimit;
 8001c0c:	ed80 2a07 	vstr	s4, [r0, #28]
    driver->iMin = iPartMinLimit;
 8001c10:	edc0 2a08 	vstr	s5, [r0, #32]
    
    // Limits of derivative part.
    driver->dMax = dPartMaxLimit;
 8001c14:	ed80 3a09 	vstr	s6, [r0, #36]	; 0x24
    driver->dMin = dPartMinLimit;
 8001c18:	edc0 3a0a 	vstr	s7, [r0, #40]	; 0x28

    // Limits of PID output value.
    driver->pidMax = pidOutputMaxLimit;
 8001c1c:	ed80 4a0e 	vstr	s8, [r0, #56]	; 0x38
    driver->pidMin = pidOutputMinLimit;
 8001c20:	edc0 4a0f 	vstr	s9, [r0, #60]	; 0x3c
}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop

08001c28 <pidControl>:

    // Calculate proportional part
    driver->partP = driver->error;

    // Calculate integral part
    driver->partI += ( driver->error * driver->ts );
 8001c28:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
 8001c2c:	edd0 5a06 	vldr	s11, [r0, #24]

    // Control integral range
    if ( driver->partI > driver->iMax )
 8001c30:	edd0 7a07 	vldr	s15, [r0, #28]
    driver->error = error;
 8001c34:	ed80 0a00 	vstr	s0, [r0]
    driver->partI += ( driver->error * driver->ts );
 8001c38:	eea5 7a80 	vfma.f32	s14, s11, s0
    driver->partP = driver->error;
 8001c3c:	ed80 0a0b 	vstr	s0, [r0, #44]	; 0x2c
    if ( driver->partI > driver->iMax )
 8001c40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    driver->partI += ( driver->error * driver->ts );
 8001c48:	ed80 7a0c 	vstr	s14, [r0, #48]	; 0x30
    if ( driver->partI > driver->iMax )
 8001c4c:	dc06      	bgt.n	8001c5c <pidControl+0x34>
    {
        driver->partI = driver->iMax;
    }
    else if ( driver->partI < driver->iMin )
 8001c4e:	edd0 7a08 	vldr	s15, [r0, #32]
 8001c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d53d      	bpl.n	8001cd8 <pidControl+0xb0>
    {
        driver->partI = driver->iMin;
 8001c5c:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    {
        /* Intentionally blank. */
    }

    // Calculate derivative part
    driver->partD = ( ( driver->error - driver->lastError ) / driver->ts );
 8001c60:	edd0 6a01 	vldr	s13, [r0, #4]
    
    // Control derivative range
    if ( driver->partD > driver->dMax )
 8001c64:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
    driver->partD = ( ( driver->error - driver->lastError ) / driver->ts );
 8001c68:	ee70 6a66 	vsub.f32	s13, s0, s13
 8001c6c:	ee86 6aa5 	vdiv.f32	s12, s13, s11
    if ( driver->partD > driver->dMax )
 8001c70:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    driver->partD = ( ( driver->error - driver->lastError ) / driver->ts );
 8001c78:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    if ( driver->partD > driver->dMax )
 8001c7c:	dc06      	bgt.n	8001c8c <pidControl+0x64>
    {
        driver->partD = driver->dMax;
    }
    else if ( driver->partD < driver->dMin )
 8001c7e:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
 8001c82:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d522      	bpl.n	8001cd2 <pidControl+0xaa>
    {
        driver->partD = driver->dMin;
 8001c8c:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
        /* Intentionally blank. */
    }

    // Calculate PID output value
    driver->output = ( driver->kp * driver->partP ) +
                        ( driver->ki * driver->partI ) +
 8001c90:	ed90 5a04 	vldr	s10, [r0, #16]
    driver->output = ( driver->kp * driver->partP ) +
 8001c94:	edd0 5a03 	vldr	s11, [r0, #12]
                        ( driver->ki * driver->partI ) +
 8001c98:	ed90 6a05 	vldr	s12, [r0, #20]
                        ( driver->kd * driver->partD );

    // Control PID range
    if ( driver->output > driver->pidMax )
 8001c9c:	edd0 6a0e 	vldr	s13, [r0, #56]	; 0x38
                        ( driver->ki * driver->partI ) +
 8001ca0:	ee67 7a85 	vmul.f32	s15, s15, s10
    driver->output = ( driver->kp * driver->partP ) +
 8001ca4:	eee5 7a80 	vfma.f32	s15, s11, s0
                        ( driver->ki * driver->partI ) +
 8001ca8:	eee6 7a07 	vfma.f32	s15, s12, s14
    if ( driver->output > driver->pidMax )
 8001cac:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    driver->output = ( driver->kp * driver->partP ) +
 8001cb4:	edc0 7a02 	vstr	s15, [r0, #8]
    if ( driver->output > driver->pidMax )
 8001cb8:	dc11      	bgt.n	8001cde <pidControl+0xb6>
    {
        driver->output = driver->pidMax;
    }
    else if ( driver->output < driver->pidMin )
 8001cba:	ed90 7a0f 	vldr	s14, [r0, #60]	; 0x3c
    {
        /* Intentionally blank. */
    }

    // Save current error for next iteration over lastError
    driver->lastError = driver->error;
 8001cbe:	ed80 0a01 	vstr	s0, [r0, #4]
    else if ( driver->output < driver->pidMin )
 8001cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        driver->output = driver->pidMin;
 8001cca:	bf48      	it	mi
 8001ccc:	ed80 7a02 	vstrmi	s14, [r0, #8]
}
 8001cd0:	4770      	bx	lr
 8001cd2:	eeb0 7a46 	vmov.f32	s14, s12
 8001cd6:	e7db      	b.n	8001c90 <pidControl+0x68>
 8001cd8:	eef0 7a47 	vmov.f32	s15, s14
 8001cdc:	e7c0      	b.n	8001c60 <pidControl+0x38>
        driver->output = driver->pidMax;
 8001cde:	edc0 6a02 	vstr	s13, [r0, #8]
    driver->lastError = driver->error;
 8001ce2:	ed80 0a01 	vstr	s0, [r0, #4]
}
 8001ce6:	4770      	bx	lr

08001ce8 <pidGetOutput>:
 * @about:
 */
float pidGetOutput ( pidc_t* driver )
{
    return ( driver->output );
}
 8001ce8:	ed90 0a02 	vldr	s0, [r0, #8]
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_InitTick+0x3c>)
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_InitTick+0x40>)
 8001cf6:	7812      	ldrb	r2, [r2, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
{
 8001cfa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d00:	fbb0 f0f2 	udiv	r0, r0, r2
 8001d04:	fbb3 f0f0 	udiv	r0, r3, r0
 8001d08:	f000 faf4 	bl	80022f4 <HAL_SYSTICK_Config>
 8001d0c:	b908      	cbnz	r0, 8001d12 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	2d0f      	cmp	r5, #15
 8001d10:	d901      	bls.n	8001d16 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001d12:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001d14:	bd38      	pop	{r3, r4, r5, pc}
 8001d16:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4629      	mov	r1, r5
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f000 faa4 	bl	800226c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <HAL_InitTick+0x44>)
 8001d26:	4620      	mov	r0, r4
 8001d28:	601d      	str	r5, [r3, #0]
}
 8001d2a:	bd38      	pop	{r3, r4, r5, pc}
 8001d2c:	2000000c 	.word	0x2000000c
 8001d30:	20000008 	.word	0x20000008
 8001d34:	20000010 	.word	0x20000010

08001d38 <HAL_Init>:
{
 8001d38:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_Init+0x30>)
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d42:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d4a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d52:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d54:	2003      	movs	r0, #3
 8001d56:	f000 fa77 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff ffc8 	bl	8001cf0 <HAL_InitTick>
  HAL_MspInit();
 8001d60:	f7ff fd02 	bl	8001768 <HAL_MspInit>
}
 8001d64:	2000      	movs	r0, #0
 8001d66:	bd08      	pop	{r3, pc}
 8001d68:	40023c00 	.word	0x40023c00

08001d6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001d6c:	4a03      	ldr	r2, [pc, #12]	; (8001d7c <HAL_IncTick+0x10>)
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_IncTick+0x14>)
 8001d70:	6811      	ldr	r1, [r2, #0]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	440b      	add	r3, r1
 8001d76:	6013      	str	r3, [r2, #0]
}
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000378 	.word	0x20000378
 8001d80:	2000000c 	.word	0x2000000c

08001d84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001d84:	4b01      	ldr	r3, [pc, #4]	; (8001d8c <HAL_GetTick+0x8>)
 8001d86:	6818      	ldr	r0, [r3, #0]
}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	20000378 	.word	0x20000378

08001d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001d94:	f7ff fff6 	bl	8001d84 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d98:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001d9a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001d9c:	d002      	beq.n	8001da4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_Delay+0x20>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	1b40      	subs	r0, r0, r5
 8001daa:	42a0      	cmp	r0, r4
 8001dac:	d3fa      	bcc.n	8001da4 <HAL_Delay+0x14>
  {
  }
}
 8001dae:	bd38      	pop	{r3, r4, r5, pc}
 8001db0:	2000000c 	.word	0x2000000c

08001db4 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001db4:	2800      	cmp	r0, #0
 8001db6:	f000 8091 	beq.w	8001edc <HAL_ADC_Init+0x128>
{
 8001dba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001dbc:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001dbe:	4604      	mov	r4, r0
 8001dc0:	2d00      	cmp	r5, #0
 8001dc2:	f000 8081 	beq.w	8001ec8 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001dc8:	06db      	lsls	r3, r3, #27
 8001dca:	d504      	bpl.n	8001dd6 <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dcc:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8001dce:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001dd0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8001dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8001dd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dd8:	494d      	ldr	r1, [pc, #308]	; (8001f10 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dda:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ddc:	4d4d      	ldr	r5, [pc, #308]	; (8001f14 <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 8001dde:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8001de2:	f022 0202 	bic.w	r2, r2, #2
 8001de6:	f042 0202 	orr.w	r2, r2, #2
 8001dea:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001dec:	684a      	ldr	r2, [r1, #4]
 8001dee:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001df2:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001df4:	684a      	ldr	r2, [r1, #4]
 8001df6:	6860      	ldr	r0, [r4, #4]
 8001df8:	4302      	orrs	r2, r0
 8001dfa:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dfc:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dfe:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e00:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e02:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e04:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8001e08:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e12:	6858      	ldr	r0, [r3, #4]
 8001e14:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8001e18:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e1a:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e1c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e1e:	4339      	orrs	r1, r7
 8001e20:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e22:	6899      	ldr	r1, [r3, #8]
 8001e24:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8001e28:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e2a:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e2c:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e2e:	ea42 0206 	orr.w	r2, r2, r6
 8001e32:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e34:	d054      	beq.n	8001ee0 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e36:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e38:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e3a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001e3e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	4310      	orrs	r0, r2
 8001e44:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8001e4c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	432a      	orrs	r2, r5
 8001e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e54:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e56:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e58:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e5c:	f021 0102 	bic.w	r1, r1, #2
 8001e60:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8001e68:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001e6a:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d140      	bne.n	8001ef2 <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e74:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e78:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e7a:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e7e:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e80:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e88:	3d01      	subs	r5, #1
 8001e8a:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8001e8e:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e90:	6898      	ldr	r0, [r3, #8]
 8001e92:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8001e96:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 8001e9e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ea0:	6899      	ldr	r1, [r3, #8]
 8001ea2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001ea6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ea8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001eaa:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001eac:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8001eb0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001eb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8001ec8:	f7ff fc6a 	bl	80017a0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ece:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8001ed0:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ed4:	06db      	lsls	r3, r3, #27
 8001ed6:	f53f af79 	bmi.w	8001dcc <HAL_ADC_Init+0x18>
 8001eda:	e77c      	b.n	8001dd6 <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
}
 8001ede:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ee6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001eee:	609a      	str	r2, [r3, #8]
 8001ef0:	e7b0      	b.n	8001e54 <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef6:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ef8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f00:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	3901      	subs	r1, #1
 8001f06:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001f0a:	605a      	str	r2, [r3, #4]
 8001f0c:	e7b3      	b.n	8001e76 <HAL_ADC_Init+0xc2>
 8001f0e:	bf00      	nop
 8001f10:	40012300 	.word	0x40012300
 8001f14:	0f000001 	.word	0x0f000001

08001f18 <HAL_ADC_Start_DMA>:
{
 8001f18:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001f1a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001f1e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8001f20:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 8001f22:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8001f24:	9401      	str	r4, [sp, #4]
  __HAL_LOCK(hadc);
 8001f26:	f000 8081 	beq.w	800202c <HAL_ADC_Start_DMA+0x114>
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f2a:	6805      	ldr	r5, [r0, #0]
 8001f2c:	68ab      	ldr	r3, [r5, #8]
  __HAL_LOCK(hadc);
 8001f2e:	2401      	movs	r4, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f30:	07df      	lsls	r7, r3, #31
  __HAL_LOCK(hadc);
 8001f32:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f36:	d414      	bmi.n	8001f62 <HAL_ADC_Start_DMA+0x4a>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f38:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_ADC_Start_DMA+0x124>)
 8001f3a:	4e41      	ldr	r6, [pc, #260]	; (8002040 <HAL_ADC_Start_DMA+0x128>)
 8001f3c:	681c      	ldr	r4, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8001f3e:	68ab      	ldr	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f40:	fba6 6404 	umull	r6, r4, r6, r4
 8001f44:	0ca4      	lsrs	r4, r4, #18
    __HAL_ADC_ENABLE(hadc);
 8001f46:	f043 0301 	orr.w	r3, r3, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f4a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    __HAL_ADC_ENABLE(hadc);
 8001f4e:	60ab      	str	r3, [r5, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f50:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8001f52:	9b01      	ldr	r3, [sp, #4]
 8001f54:	b12b      	cbz	r3, 8001f62 <HAL_ADC_Start_DMA+0x4a>
      counter--;
 8001f56:	9c01      	ldr	r4, [sp, #4]
 8001f58:	3c01      	subs	r4, #1
 8001f5a:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 8001f5c:	9c01      	ldr	r4, [sp, #4]
 8001f5e:	2c00      	cmp	r4, #0
 8001f60:	d1f9      	bne.n	8001f56 <HAL_ADC_Start_DMA+0x3e>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f62:	68ab      	ldr	r3, [r5, #8]
 8001f64:	07de      	lsls	r6, r3, #31
 8001f66:	d543      	bpl.n	8001ff0 <HAL_ADC_Start_DMA+0xd8>
    ADC_STATE_CLR_SET(hadc->State,
 8001f68:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001f6a:	f424 64e0 	bic.w	r4, r4, #1792	; 0x700
 8001f6e:	f024 0401 	bic.w	r4, r4, #1
 8001f72:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001f76:	6404      	str	r4, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f78:	686b      	ldr	r3, [r5, #4]
 8001f7a:	055c      	lsls	r4, r3, #21
 8001f7c:	d505      	bpl.n	8001f8a <HAL_ADC_Start_DMA+0x72>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f7e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f88:	6403      	str	r3, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8a:	6c03      	ldr	r3, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f8c:	4e2d      	ldr	r6, [pc, #180]	; (8002044 <HAL_ADC_Start_DMA+0x12c>)
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8e:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f92:	bf1c      	itt	ne
 8001f94:	6c43      	ldrne	r3, [r0, #68]	; 0x44
 8001f96:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001f9a:	6443      	str	r3, [r0, #68]	; 0x44
 8001f9c:	4604      	mov	r4, r0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001fa0:	4613      	mov	r3, r2
    __HAL_UNLOCK(hadc);   
 8001fa2:	2700      	movs	r7, #0
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <HAL_ADC_Start_DMA+0x130>)
    __HAL_UNLOCK(hadc);   
 8001fa6:	f884 703c 	strb.w	r7, [r4, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001faa:	63c6      	str	r6, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fac:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fae:	4e27      	ldr	r6, [pc, #156]	; (800204c <HAL_ADC_Start_DMA+0x134>)
 8001fb0:	64c6      	str	r6, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fb2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fb6:	602a      	str	r2, [r5, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fb8:	686e      	ldr	r6, [r5, #4]
 8001fba:	f046 6680 	orr.w	r6, r6, #67108864	; 0x4000000
 8001fbe:	606e      	str	r6, [r5, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fc0:	68ae      	ldr	r6, [r5, #8]
 8001fc2:	f446 7680 	orr.w	r6, r6, #256	; 0x100
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fc6:	460a      	mov	r2, r1
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001fc8:	60ae      	str	r6, [r5, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fca:	f105 014c 	add.w	r1, r5, #76	; 0x4c
 8001fce:	f000 fa45 	bl	800245c <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <HAL_ADC_Start_DMA+0x138>)
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	06d2      	lsls	r2, r2, #27
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_ADC_Start_DMA+0xde>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fda:	6822      	ldr	r2, [r4, #0]
 8001fdc:	491d      	ldr	r1, [pc, #116]	; (8002054 <HAL_ADC_Start_DMA+0x13c>)
 8001fde:	428a      	cmp	r2, r1
 8001fe0:	d01b      	beq.n	800201a <HAL_ADC_Start_DMA+0x102>
 8001fe2:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8001fe6:	428a      	cmp	r2, r1
 8001fe8:	d023      	beq.n	8002032 <HAL_ADC_Start_DMA+0x11a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fea:	491b      	ldr	r1, [pc, #108]	; (8002058 <HAL_ADC_Start_DMA+0x140>)
 8001fec:	428a      	cmp	r2, r1
 8001fee:	d00f      	beq.n	8002010 <HAL_ADC_Start_DMA+0xf8>
  return HAL_OK;
 8001ff0:	2000      	movs	r0, #0
}
 8001ff2:	b003      	add	sp, #12
 8001ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	4a16      	ldr	r2, [pc, #88]	; (8002054 <HAL_ADC_Start_DMA+0x13c>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d1f8      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0xd8>
 8001ffe:	6898      	ldr	r0, [r3, #8]
 8002000:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002004:	d1f4      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	e7f0      	b.n	8001ff2 <HAL_ADC_Start_DMA+0xda>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2b0f      	cmp	r3, #15
 8002018:	d8ea      	bhi.n	8001ff0 <HAL_ADC_Start_DMA+0xd8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800201a:	6890      	ldr	r0, [r2, #8]
 800201c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002020:	d1e6      	bne.n	8001ff0 <HAL_ADC_Start_DMA+0xd8>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002022:	6893      	ldr	r3, [r2, #8]
 8002024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002028:	6093      	str	r3, [r2, #8]
 800202a:	e7e2      	b.n	8001ff2 <HAL_ADC_Start_DMA+0xda>
  __HAL_LOCK(hadc);
 800202c:	2002      	movs	r0, #2
}
 800202e:	b003      	add	sp, #12
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	06db      	lsls	r3, r3, #27
 8002036:	d0f0      	beq.n	800201a <HAL_ADC_Start_DMA+0x102>
 8002038:	e7da      	b.n	8001ff0 <HAL_ADC_Start_DMA+0xd8>
 800203a:	bf00      	nop
 800203c:	20000008 	.word	0x20000008
 8002040:	431bde83 	.word	0x431bde83
 8002044:	0800208d 	.word	0x0800208d
 8002048:	08002065 	.word	0x08002065
 800204c:	08002075 	.word	0x08002075
 8002050:	40012300 	.word	0x40012300
 8002054:	40012000 	.word	0x40012000
 8002058:	40012200 	.word	0x40012200

0800205c <HAL_ADC_ConvCpltCallback>:
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop

08002060 <HAL_ADC_ConvHalfCpltCallback>:
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop

08002064 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002064:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002066:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002068:	f7ff fffa 	bl	8002060 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800206c:	bd08      	pop	{r3, pc}
 800206e:	bf00      	nop

08002070 <HAL_ADC_ErrorCallback>:
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop

08002074 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002074:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002076:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002078:	2340      	movs	r3, #64	; 0x40
 800207a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800207c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800207e:	f043 0304 	orr.w	r3, r3, #4
 8002082:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002084:	f7ff fff4 	bl	8002070 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002088:	bd08      	pop	{r3, pc}
 800208a:	bf00      	nop

0800208c <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800208c:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800208e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002090:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8002094:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002098:	d123      	bne.n	80020e2 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800209e:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a2:	688a      	ldr	r2, [r1, #8]
 80020a4:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80020a8:	d117      	bne.n	80020da <ADC_DMAConvCplt+0x4e>
 80020aa:	7e1a      	ldrb	r2, [r3, #24]
 80020ac:	b9aa      	cbnz	r2, 80020da <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b0:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 80020b4:	d002      	beq.n	80020bc <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80020b6:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80020b8:	0550      	lsls	r0, r2, #21
 80020ba:	d40e      	bmi.n	80020da <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80020bc:	684a      	ldr	r2, [r1, #4]
 80020be:	f022 0220 	bic.w	r2, r2, #32
 80020c2:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80020c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ca:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ce:	04d1      	lsls	r1, r2, #19
 80020d0:	d403      	bmi.n	80020da <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020d4:	f042 0201 	orr.w	r2, r2, #1
 80020d8:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ffbe 	bl	800205c <HAL_ADC_ConvCpltCallback>
}
 80020e0:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80020e2:	06d2      	lsls	r2, r2, #27
 80020e4:	d404      	bmi.n	80020f0 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80020e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80020ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ee:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ffbd 	bl	8002070 <HAL_ADC_ErrorCallback>
}
 80020f6:	bd10      	pop	{r4, pc}

080020f8 <HAL_ADC_ConfigChannel>:
{
 80020f8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 80020fa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80020fe:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002100:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002102:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8002104:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002106:	f000 8095 	beq.w	8002234 <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800210a:	680d      	ldr	r5, [r1, #0]
 800210c:	688a      	ldr	r2, [r1, #8]
 800210e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8002110:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002112:	2d09      	cmp	r5, #9
 8002114:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 8002116:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 800211a:	d829      	bhi.n	8002170 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800211c:	691c      	ldr	r4, [r3, #16]
 800211e:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8002122:	f04f 0c07 	mov.w	ip, #7
 8002126:	fa0c fc06 	lsl.w	ip, ip, r6
 800212a:	ea24 040c 	bic.w	r4, r4, ip
 800212e:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002130:	691c      	ldr	r4, [r3, #16]
 8002132:	fa02 f606 	lsl.w	r6, r2, r6
 8002136:	4326      	orrs	r6, r4
 8002138:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 800213a:	684e      	ldr	r6, [r1, #4]
 800213c:	2e06      	cmp	r6, #6
 800213e:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8002142:	d82a      	bhi.n	800219a <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002144:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002146:	3a05      	subs	r2, #5
 8002148:	241f      	movs	r4, #31
 800214a:	4094      	lsls	r4, r2
 800214c:	ea21 0104 	bic.w	r1, r1, r4
 8002150:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002152:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002154:	fa07 f202 	lsl.w	r2, r7, r2
 8002158:	430a      	orrs	r2, r1
 800215a:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800215c:	4a37      	ldr	r2, [pc, #220]	; (800223c <HAL_ADC_ConfigChannel+0x144>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d02d      	beq.n	80021be <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 8002162:	2300      	movs	r3, #0
 8002164:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002168:	4618      	mov	r0, r3
}
 800216a:	b002      	add	sp, #8
 800216c:	bcf0      	pop	{r4, r5, r6, r7}
 800216e:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002170:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8002174:	68dc      	ldr	r4, [r3, #12]
 8002176:	3e1e      	subs	r6, #30
 8002178:	f04f 0c07 	mov.w	ip, #7
 800217c:	fa0c fc06 	lsl.w	ip, ip, r6
 8002180:	ea24 040c 	bic.w	r4, r4, ip
 8002184:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002186:	68dc      	ldr	r4, [r3, #12]
 8002188:	fa02 f606 	lsl.w	r6, r2, r6
 800218c:	4326      	orrs	r6, r4
 800218e:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 8002190:	684e      	ldr	r6, [r1, #4]
 8002192:	2e06      	cmp	r6, #6
 8002194:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8002198:	d9d4      	bls.n	8002144 <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 800219a:	2e0c      	cmp	r6, #12
 800219c:	d835      	bhi.n	800220a <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800219e:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 80021a2:	211f      	movs	r1, #31
 80021a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a6:	40a1      	lsls	r1, r4
 80021a8:	ea22 0201 	bic.w	r2, r2, r1
 80021ac:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021b0:	fa07 f204 	lsl.w	r2, r7, r4
 80021b4:	430a      	orrs	r2, r1
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021b8:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_ADC_ConfigChannel+0x144>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d1d1      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x6a>
 80021be:	2d12      	cmp	r5, #18
 80021c0:	d031      	beq.n	8002226 <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021c2:	f1a5 0310 	sub.w	r3, r5, #16
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d8cb      	bhi.n	8002162 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021ca:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_ADC_ConfigChannel+0x148>)
 80021cc:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021ce:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80021d4:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021d6:	d1c4      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021d8:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_ADC_ConfigChannel+0x14c>)
 80021da:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80021de:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f202 3283 	addw	r2, r2, #899	; 0x383
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0c9b      	lsrs	r3, r3, #18
 80021ee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80021f6:	9b01      	ldr	r3, [sp, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0b2      	beq.n	8002162 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80021fc:	9b01      	ldr	r3, [sp, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002202:	9b01      	ldr	r3, [sp, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f9      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x104>
 8002208:	e7ab      	b.n	8002162 <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800220a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 800220e:	241f      	movs	r4, #31
 8002210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002212:	408c      	lsls	r4, r1
 8002214:	ea22 0204 	bic.w	r2, r2, r4
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800221a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800221c:	fa07 f201 	lsl.w	r2, r7, r1
 8002220:	4322      	orrs	r2, r4
 8002222:	62da      	str	r2, [r3, #44]	; 0x2c
 8002224:	e79a      	b.n	800215c <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002226:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 800222a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800222e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8002232:	e796      	b.n	8002162 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8002234:	2002      	movs	r0, #2
}
 8002236:	b002      	add	sp, #8
 8002238:	bcf0      	pop	{r4, r5, r6, r7}
 800223a:	4770      	bx	lr
 800223c:	40012000 	.word	0x40012000
 8002240:	40012300 	.word	0x40012300
 8002244:	20000008 	.word	0x20000008

08002248 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002248:	4a07      	ldr	r2, [pc, #28]	; (8002268 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800224a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224c:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8002250:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002252:	0200      	lsls	r0, r0, #8
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800225c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8002260:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8002262:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_NVIC_SetPriority+0x64>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002274:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002276:	f1c3 0507 	rsb	r5, r3, #7
 800227a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	bf28      	it	cs
 8002282:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002284:	2c06      	cmp	r4, #6
 8002286:	d919      	bls.n	80022bc <HAL_NVIC_SetPriority+0x50>
 8002288:	3b03      	subs	r3, #3
 800228a:	f04f 34ff 	mov.w	r4, #4294967295
 800228e:	409c      	lsls	r4, r3
 8002290:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	40aa      	lsls	r2, r5
 800229a:	ea21 0102 	bic.w	r1, r1, r2
 800229e:	fa01 f203 	lsl.w	r2, r1, r3
 80022a2:	4322      	orrs	r2, r4
 80022a4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80022a6:	2800      	cmp	r0, #0
 80022a8:	b2d2      	uxtb	r2, r2
 80022aa:	db0a      	blt.n	80022c2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80022b0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80022b4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80022b8:	bc30      	pop	{r4, r5}
 80022ba:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022bc:	2400      	movs	r4, #0
 80022be:	4623      	mov	r3, r4
 80022c0:	e7e8      	b.n	8002294 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <HAL_NVIC_SetPriority+0x68>)
 80022c4:	f000 000f 	and.w	r0, r0, #15
 80022c8:	4403      	add	r3, r0
 80022ca:	761a      	strb	r2, [r3, #24]
 80022cc:	bc30      	pop	{r4, r5}
 80022ce:	4770      	bx	lr
 80022d0:	e000ed00 	.word	0xe000ed00
 80022d4:	e000ecfc 	.word	0xe000ecfc

080022d8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80022d8:	2800      	cmp	r0, #0
 80022da:	db07      	blt.n	80022ec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022dc:	f000 011f 	and.w	r1, r0, #31
 80022e0:	2301      	movs	r3, #1
 80022e2:	0940      	lsrs	r0, r0, #5
 80022e4:	4a02      	ldr	r2, [pc, #8]	; (80022f0 <HAL_NVIC_EnableIRQ+0x18>)
 80022e6:	408b      	lsls	r3, r1
 80022e8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022f4:	3801      	subs	r0, #1
 80022f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80022fa:	d20e      	bcs.n	800231a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022fc:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022fe:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	4c08      	ldr	r4, [pc, #32]	; (8002324 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002302:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002304:	20f0      	movs	r0, #240	; 0xf0
 8002306:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800230a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800230e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002312:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8002314:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002318:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800231a:	2001      	movs	r0, #1
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800232a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fd2a 	bl	8001d84 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002330:	2c00      	cmp	r4, #0
 8002332:	d054      	beq.n	80023de <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002336:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8002338:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800233c:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800233e:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8002340:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8002344:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8002348:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800234a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234c:	e005      	b.n	800235a <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800234e:	f7ff fd19 	bl	8001d84 <HAL_GetTick>
 8002352:	1b40      	subs	r0, r0, r5
 8002354:	2805      	cmp	r0, #5
 8002356:	d83b      	bhi.n	80023d0 <HAL_DMA_Init+0xa8>
 8002358:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	07d1      	lsls	r1, r2, #31
 800235e:	d4f6      	bmi.n	800234e <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002360:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002364:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002368:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236a:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800236c:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800236e:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002370:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002374:	430a      	orrs	r2, r1
 8002376:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002378:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800237a:	4835      	ldr	r0, [pc, #212]	; (8002450 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237c:	4332      	orrs	r2, r6
 800237e:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002380:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002382:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002384:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002386:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002388:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800238c:	d029      	beq.n	80023e2 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800238e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002390:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002392:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002396:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002398:	b2da      	uxtb	r2, r3
 800239a:	482e      	ldr	r0, [pc, #184]	; (8002454 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 800239c:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800239e:	3a10      	subs	r2, #16
 80023a0:	fba0 1202 	umull	r1, r2, r0, r2
 80023a4:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023a6:	492c      	ldr	r1, [pc, #176]	; (8002458 <HAL_DMA_Init+0x130>)
 80023a8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ac:	5c89      	ldrb	r1, [r1, r2]
 80023ae:	65e1      	str	r1, [r4, #92]	; 0x5c
 80023b0:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 80023b4:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023b6:	bf88      	it	hi
 80023b8:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023ba:	223f      	movs	r2, #63	; 0x3f
 80023bc:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 80023be:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c0:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023c2:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80023c4:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023c6:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023c8:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80023ca:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80023ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d2:	2220      	movs	r2, #32
 80023d4:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80023d6:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80023dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80023de:	2001      	movs	r0, #1
}
 80023e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023e2:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 80023e6:	4301      	orrs	r1, r0
 80023e8:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 80023ea:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 80023ec:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80023ee:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80023f0:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f4:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80023f8:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023fa:	2800      	cmp	r0, #0
 80023fc:	d0cc      	beq.n	8002398 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023fe:	b17e      	cbz	r6, 8002420 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002400:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8002404:	d016      	beq.n	8002434 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002406:	2d02      	cmp	r5, #2
 8002408:	d903      	bls.n	8002412 <HAL_DMA_Init+0xea>
 800240a:	2d03      	cmp	r5, #3
 800240c:	d1c4      	bne.n	8002398 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240e:	01c2      	lsls	r2, r0, #7
 8002410:	d5c2      	bpl.n	8002398 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8002412:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002414:	2240      	movs	r2, #64	; 0x40
 8002416:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8002418:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800241a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800241e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8002420:	2d01      	cmp	r5, #1
 8002422:	d003      	beq.n	800242c <HAL_DMA_Init+0x104>
 8002424:	d3f3      	bcc.n	800240e <HAL_DMA_Init+0xe6>
 8002426:	2d02      	cmp	r5, #2
 8002428:	d1b6      	bne.n	8002398 <HAL_DMA_Init+0x70>
 800242a:	e7f0      	b.n	800240e <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800242c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8002430:	d1b2      	bne.n	8002398 <HAL_DMA_Init+0x70>
 8002432:	e7ee      	b.n	8002412 <HAL_DMA_Init+0xea>
    switch (tmp)
 8002434:	2d03      	cmp	r5, #3
 8002436:	d8af      	bhi.n	8002398 <HAL_DMA_Init+0x70>
 8002438:	a201      	add	r2, pc, #4	; (adr r2, 8002440 <HAL_DMA_Init+0x118>)
 800243a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800243e:	bf00      	nop
 8002440:	08002413 	.word	0x08002413
 8002444:	0800240f 	.word	0x0800240f
 8002448:	08002413 	.word	0x08002413
 800244c:	0800242d 	.word	0x0800242d
 8002450:	f010803f 	.word	0xf010803f
 8002454:	aaaaaaab 	.word	0xaaaaaaab
 8002458:	08007ac8 	.word	0x08007ac8

0800245c <HAL_DMA_Start_IT>:
{
 800245c:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 800245e:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8002462:	2c01      	cmp	r4, #1
 8002464:	d035      	beq.n	80024d2 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8002466:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800246a:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 800246c:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800246e:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8002470:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8002474:	d127      	bne.n	80024c6 <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002476:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8002478:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800247a:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800247c:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002480:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002482:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002484:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002486:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800248a:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800248c:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800248e:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8002490:	bf0a      	itet	eq
 8002492:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002494:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8002496:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002498:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 800249a:	bf18      	it	ne
 800249c:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800249e:	233f      	movs	r3, #63	; 0x3f
 80024a0:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 80024a2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024a4:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024a6:	6823      	ldr	r3, [r4, #0]
 80024a8:	f043 0316 	orr.w	r3, r3, #22
 80024ac:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80024ae:	b11a      	cbz	r2, 80024b8 <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 80024b0:	6823      	ldr	r3, [r4, #0]
 80024b2:	f043 0308 	orr.w	r3, r3, #8
 80024b6:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	f043 0301 	orr.w	r3, r3, #1
 80024be:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024c0:	2000      	movs	r0, #0
}
 80024c2:	bcf0      	pop	{r4, r5, r6, r7}
 80024c4:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 80024c6:	2300      	movs	r3, #0
 80024c8:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 80024cc:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 80024ce:	2002      	movs	r0, #2
}
 80024d0:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80024d2:	2002      	movs	r0, #2
}
 80024d4:	bcf0      	pop	{r4, r5, r6, r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024d8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d003      	beq.n	80024e8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80024e4:	2001      	movs	r0, #1
 80024e6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80024e8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80024ea:	2305      	movs	r3, #5
 80024ec:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80024f0:	6813      	ldr	r3, [r2, #0]
 80024f2:	f023 0301 	bic.w	r3, r3, #1
 80024f6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80024f8:	2000      	movs	r0, #0
}
 80024fa:	4770      	bx	lr

080024fc <HAL_DMA_IRQHandler>:
{
 80024fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fe:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8002500:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002502:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8002504:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002506:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002508:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800250a:	4965      	ldr	r1, [pc, #404]	; (80026a0 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800250c:	2208      	movs	r2, #8
 800250e:	409a      	lsls	r2, r3
 8002510:	422a      	tst	r2, r5
{
 8002512:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8002514:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002516:	d003      	beq.n	8002520 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002518:	6801      	ldr	r1, [r0, #0]
 800251a:	6808      	ldr	r0, [r1, #0]
 800251c:	0740      	lsls	r0, r0, #29
 800251e:	d459      	bmi.n	80025d4 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002520:	2201      	movs	r2, #1
 8002522:	409a      	lsls	r2, r3
 8002524:	422a      	tst	r2, r5
 8002526:	d003      	beq.n	8002530 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002528:	6821      	ldr	r1, [r4, #0]
 800252a:	6949      	ldr	r1, [r1, #20]
 800252c:	0608      	lsls	r0, r1, #24
 800252e:	d474      	bmi.n	800261a <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002530:	2204      	movs	r2, #4
 8002532:	409a      	lsls	r2, r3
 8002534:	422a      	tst	r2, r5
 8002536:	d003      	beq.n	8002540 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002538:	6821      	ldr	r1, [r4, #0]
 800253a:	6809      	ldr	r1, [r1, #0]
 800253c:	0789      	lsls	r1, r1, #30
 800253e:	d466      	bmi.n	800260e <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002540:	2210      	movs	r2, #16
 8002542:	409a      	lsls	r2, r3
 8002544:	422a      	tst	r2, r5
 8002546:	d003      	beq.n	8002550 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002548:	6821      	ldr	r1, [r4, #0]
 800254a:	6808      	ldr	r0, [r1, #0]
 800254c:	0700      	lsls	r0, r0, #28
 800254e:	d44b      	bmi.n	80025e8 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	2220      	movs	r2, #32
 8002552:	409a      	lsls	r2, r3
 8002554:	422a      	tst	r2, r5
 8002556:	d014      	beq.n	8002582 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002558:	6821      	ldr	r1, [r4, #0]
 800255a:	6808      	ldr	r0, [r1, #0]
 800255c:	06c0      	lsls	r0, r0, #27
 800255e:	d510      	bpl.n	8002582 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002560:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002562:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002566:	2a05      	cmp	r2, #5
 8002568:	d063      	beq.n	8002632 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800256a:	680b      	ldr	r3, [r1, #0]
 800256c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002570:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002572:	d07e      	beq.n	8002672 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002574:	0319      	lsls	r1, r3, #12
 8002576:	f140 8089 	bpl.w	800268c <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800257a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800257c:	b10b      	cbz	r3, 8002582 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800257e:	4620      	mov	r0, r4
 8002580:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002582:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002584:	b323      	cbz	r3, 80025d0 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002586:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002588:	07da      	lsls	r2, r3, #31
 800258a:	d51a      	bpl.n	80025c2 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 800258c:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800258e:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8002590:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002594:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002596:	4943      	ldr	r1, [pc, #268]	; (80026a4 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 8002598:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800259c:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80025a0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025a2:	0ab6      	lsrs	r6, r6, #10
 80025a4:	e002      	b.n	80025ac <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025a6:	6813      	ldr	r3, [r2, #0]
 80025a8:	07db      	lsls	r3, r3, #31
 80025aa:	d504      	bpl.n	80025b6 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80025ac:	9b01      	ldr	r3, [sp, #4]
 80025ae:	3301      	adds	r3, #1
 80025b0:	42b3      	cmp	r3, r6
 80025b2:	9301      	str	r3, [sp, #4]
 80025b4:	d9f7      	bls.n	80025a6 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 80025b6:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80025b8:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80025ba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80025be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80025c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80025c4:	b123      	cbz	r3, 80025d0 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80025c6:	4620      	mov	r0, r4
}
 80025c8:	b003      	add	sp, #12
 80025ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80025ce:	4718      	bx	r3
}
 80025d0:	b003      	add	sp, #12
 80025d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025d4:	6808      	ldr	r0, [r1, #0]
 80025d6:	f020 0004 	bic.w	r0, r0, #4
 80025da:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025dc:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025de:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	6562      	str	r2, [r4, #84]	; 0x54
 80025e6:	e79b      	b.n	8002520 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025e8:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025ea:	680a      	ldr	r2, [r1, #0]
 80025ec:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f0:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025f2:	d118      	bne.n	8002626 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f4:	05d2      	lsls	r2, r2, #23
 80025f6:	d403      	bmi.n	8002600 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f8:	680a      	ldr	r2, [r1, #0]
 80025fa:	f022 0208 	bic.w	r2, r2, #8
 80025fe:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002600:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002602:	2a00      	cmp	r2, #0
 8002604:	d0a4      	beq.n	8002550 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002606:	4620      	mov	r0, r4
 8002608:	4790      	blx	r2
 800260a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800260c:	e7a0      	b.n	8002550 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800260e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002610:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002612:	f042 0204 	orr.w	r2, r2, #4
 8002616:	6562      	str	r2, [r4, #84]	; 0x54
 8002618:	e792      	b.n	8002540 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800261a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800261c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800261e:	f042 0202 	orr.w	r2, r2, #2
 8002622:	6562      	str	r2, [r4, #84]	; 0x54
 8002624:	e784      	b.n	8002530 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002626:	0311      	lsls	r1, r2, #12
 8002628:	d5ea      	bpl.n	8002600 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800262a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800262c:	2a00      	cmp	r2, #0
 800262e:	d1ea      	bne.n	8002606 <HAL_DMA_IRQHandler+0x10a>
 8002630:	e78e      	b.n	8002550 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002632:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002634:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002636:	f022 0216 	bic.w	r2, r2, #22
 800263a:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263c:	694a      	ldr	r2, [r1, #20]
 800263e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002642:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002644:	b338      	cbz	r0, 8002696 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002646:	680a      	ldr	r2, [r1, #0]
 8002648:	f022 0208 	bic.w	r2, r2, #8
 800264c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264e:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8002650:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8002656:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8002658:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800265a:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800265c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8002660:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8002664:	2900      	cmp	r1, #0
 8002666:	d0b3      	beq.n	80025d0 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8002668:	4620      	mov	r0, r4
}
 800266a:	b003      	add	sp, #12
 800266c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8002670:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002672:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002676:	d180      	bne.n	800257a <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002678:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800267a:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800267c:	f022 0210 	bic.w	r2, r2, #16
 8002680:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8002682:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8002686:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 800268a:	e776      	b.n	800257a <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800268c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800268e:	2b00      	cmp	r3, #0
 8002690:	f47f af75 	bne.w	800257e <HAL_DMA_IRQHandler+0x82>
 8002694:	e775      	b.n	8002582 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002696:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002698:	2a00      	cmp	r2, #0
 800269a:	d1d4      	bne.n	8002646 <HAL_DMA_IRQHandler+0x14a>
 800269c:	e7d7      	b.n	800264e <HAL_DMA_IRQHandler+0x152>
 800269e:	bf00      	nop
 80026a0:	20000008 	.word	0x20000008
 80026a4:	1b4e81b5 	.word	0x1b4e81b5

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ac:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026b0:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 80028a8 <HAL_GPIO_Init+0x200>
{
 80026b4:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b6:	2400      	movs	r4, #0
 80026b8:	e003      	b.n	80026c2 <HAL_GPIO_Init+0x1a>
 80026ba:	3401      	adds	r4, #1
 80026bc:	2c10      	cmp	r4, #16
 80026be:	f000 808c 	beq.w	80027da <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 80026c2:	2301      	movs	r3, #1
 80026c4:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026c6:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d1f5      	bne.n	80026ba <HAL_GPIO_Init+0x12>
 80026ce:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80026d2:	f026 0910 	bic.w	r9, r6, #16
 80026d6:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 80026da:	2303      	movs	r3, #3
 80026dc:	f109 37ff 	add.w	r7, r9, #4294967295
 80026e0:	fa03 f30c 	lsl.w	r3, r3, ip
 80026e4:	2f01      	cmp	r7, #1
 80026e6:	ea6f 0303 	mvn.w	r3, r3
 80026ea:	fa05 f50c 	lsl.w	r5, r5, ip
 80026ee:	d977      	bls.n	80027e0 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 80026f0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026f2:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80026f6:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 80026f8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026fa:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80026fe:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002700:	fa05 f30c 	lsl.w	r3, r5, ip
 8002704:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8002706:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002708:	00f3      	lsls	r3, r6, #3
 800270a:	d5d6      	bpl.n	80026ba <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800270c:	4d5f      	ldr	r5, [pc, #380]	; (800288c <HAL_GPIO_Init+0x1e4>)
 800270e:	2300      	movs	r3, #0
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002718:	646b      	str	r3, [r5, #68]	; 0x44
 800271a:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 800271c:	f024 0303 	bic.w	r3, r4, #3
 8002720:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8002724:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002728:	9501      	str	r5, [sp, #4]
 800272a:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800272e:	f004 0503 	and.w	r5, r4, #3
 8002732:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002736:	4d56      	ldr	r5, [pc, #344]	; (8002890 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002738:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800273a:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800273e:	270f      	movs	r7, #15
 8002740:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002744:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002746:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800274a:	d01f      	beq.n	800278c <HAL_GPIO_Init+0xe4>
 800274c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002750:	42a8      	cmp	r0, r5
 8002752:	d076      	beq.n	8002842 <HAL_GPIO_Init+0x19a>
 8002754:	4d4f      	ldr	r5, [pc, #316]	; (8002894 <HAL_GPIO_Init+0x1ec>)
 8002756:	42a8      	cmp	r0, r5
 8002758:	d079      	beq.n	800284e <HAL_GPIO_Init+0x1a6>
 800275a:	4d4f      	ldr	r5, [pc, #316]	; (8002898 <HAL_GPIO_Init+0x1f0>)
 800275c:	42a8      	cmp	r0, r5
 800275e:	d07c      	beq.n	800285a <HAL_GPIO_Init+0x1b2>
 8002760:	4d4e      	ldr	r5, [pc, #312]	; (800289c <HAL_GPIO_Init+0x1f4>)
 8002762:	42a8      	cmp	r0, r5
 8002764:	d07f      	beq.n	8002866 <HAL_GPIO_Init+0x1be>
 8002766:	4d4e      	ldr	r5, [pc, #312]	; (80028a0 <HAL_GPIO_Init+0x1f8>)
 8002768:	42a8      	cmp	r0, r5
 800276a:	f000 8082 	beq.w	8002872 <HAL_GPIO_Init+0x1ca>
 800276e:	4d4d      	ldr	r5, [pc, #308]	; (80028a4 <HAL_GPIO_Init+0x1fc>)
 8002770:	42a8      	cmp	r0, r5
 8002772:	f000 8084 	beq.w	800287e <HAL_GPIO_Init+0x1d6>
 8002776:	f8df c134 	ldr.w	ip, [pc, #308]	; 80028ac <HAL_GPIO_Init+0x204>
 800277a:	4560      	cmp	r0, ip
 800277c:	bf0c      	ite	eq
 800277e:	f04f 0c07 	moveq.w	ip, #7
 8002782:	f04f 0c08 	movne.w	ip, #8
 8002786:	fa0c f509 	lsl.w	r5, ip, r9
 800278a:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800278e:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8002792:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002794:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8002796:	bf54      	ite	pl
 8002798:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800279a:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 800279c:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80027a0:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a4:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 80027a6:	bf54      	ite	pl
 80027a8:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80027aa:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 80027ac:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b0:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b4:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 80027b6:	bf54      	ite	pl
 80027b8:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80027ba:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 80027bc:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80027c0:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027c4:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027c6:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 80027ca:	bf54      	ite	pl
 80027cc:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 80027ce:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d0:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 80027d2:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	f47f af74 	bne.w	80026c2 <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 80027da:	b003      	add	sp, #12
 80027dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 80027e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e2:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027e6:	68cf      	ldr	r7, [r1, #12]
 80027e8:	fa07 f70c 	lsl.w	r7, r7, ip
 80027ec:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80027f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80027f2:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027f6:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027fa:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027fe:	40a7      	lsls	r7, r4
 8002800:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8002804:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002806:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002808:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280a:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800280c:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8002810:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002812:	f47f af71 	bne.w	80026f8 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8002816:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800281a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800281e:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8002822:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002826:	00bf      	lsls	r7, r7, #2
 8002828:	f04f 0b0f 	mov.w	fp, #15
 800282c:	fa0b fb07 	lsl.w	fp, fp, r7
 8002830:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002834:	690d      	ldr	r5, [r1, #16]
 8002836:	40bd      	lsls	r5, r7
 8002838:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 800283c:	f8c9 5020 	str.w	r5, [r9, #32]
 8002840:	e75a      	b.n	80026f8 <HAL_GPIO_Init+0x50>
 8002842:	f04f 0c01 	mov.w	ip, #1
 8002846:	fa0c f509 	lsl.w	r5, ip, r9
 800284a:	432f      	orrs	r7, r5
 800284c:	e79e      	b.n	800278c <HAL_GPIO_Init+0xe4>
 800284e:	f04f 0c02 	mov.w	ip, #2
 8002852:	fa0c f509 	lsl.w	r5, ip, r9
 8002856:	432f      	orrs	r7, r5
 8002858:	e798      	b.n	800278c <HAL_GPIO_Init+0xe4>
 800285a:	f04f 0c03 	mov.w	ip, #3
 800285e:	fa0c f509 	lsl.w	r5, ip, r9
 8002862:	432f      	orrs	r7, r5
 8002864:	e792      	b.n	800278c <HAL_GPIO_Init+0xe4>
 8002866:	f04f 0c04 	mov.w	ip, #4
 800286a:	fa0c f509 	lsl.w	r5, ip, r9
 800286e:	432f      	orrs	r7, r5
 8002870:	e78c      	b.n	800278c <HAL_GPIO_Init+0xe4>
 8002872:	f04f 0c05 	mov.w	ip, #5
 8002876:	fa0c f509 	lsl.w	r5, ip, r9
 800287a:	432f      	orrs	r7, r5
 800287c:	e786      	b.n	800278c <HAL_GPIO_Init+0xe4>
 800287e:	f04f 0c06 	mov.w	ip, #6
 8002882:	fa0c f509 	lsl.w	r5, ip, r9
 8002886:	432f      	orrs	r7, r5
 8002888:	e780      	b.n	800278c <HAL_GPIO_Init+0xe4>
 800288a:	bf00      	nop
 800288c:	40023800 	.word	0x40023800
 8002890:	40020000 	.word	0x40020000
 8002894:	40020800 	.word	0x40020800
 8002898:	40020c00 	.word	0x40020c00
 800289c:	40021000 	.word	0x40021000
 80028a0:	40021400 	.word	0x40021400
 80028a4:	40021800 	.word	0x40021800
 80028a8:	40013c00 	.word	0x40013c00
 80028ac:	40021c00 	.word	0x40021c00

080028b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028b0:	b902      	cbnz	r2, 80028b4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028b2:	0409      	lsls	r1, r1, #16
 80028b4:	6181      	str	r1, [r0, #24]
  }
}
 80028b6:	4770      	bx	lr

080028b8 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80028b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80028bc:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
{
 80028c0:	b084      	sub	sp, #16
  __HAL_LOCK(hhcd);
 80028c2:	2c01      	cmp	r4, #1
{
 80028c4:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 80028c8:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80028cc:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 80028d0:	d02b      	beq.n	800292a <HAL_HCD_HC_Init+0x72>
 80028d2:	4605      	mov	r5, r0
  hhcd->hc[ch_num].do_ping = 0U;
 80028d4:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 80028d8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80028dc:	f04f 0800 	mov.w	r8, #0
  __HAL_LOCK(hhcd);
 80028e0:	2001      	movs	r0, #1
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80028e2:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 80028e6:	f885 02b8 	strb.w	r0, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80028ea:	f002 067f 	and.w	r6, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 80028ee:	bf08      	it	eq
 80028f0:	4640      	moveq	r0, r8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80028f2:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  hhcd->hc[ch_num].dev_addr = dev_address;
 80028f6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 80028fa:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 80028fe:	f884 e03f 	strb.w	lr, [r4, #63]	; 0x3f
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8002902:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002906:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].do_ping = 0U;
 800290a:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d

  status =  USB_HC_Init(hhcd->Instance,
 800290e:	6828      	ldr	r0, [r5, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002910:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
  status =  USB_HC_Init(hhcd->Instance,
 8002914:	e9cd e901 	strd	lr, r9, [sp, #4]
 8002918:	f8cd c000 	str.w	ip, [sp]
 800291c:	f002 fa64 	bl	8004de8 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002920:	f885 82b8 	strb.w	r8, [r5, #696]	; 0x2b8

  return status;
}
 8002924:	b004      	add	sp, #16
 8002926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 800292a:	2002      	movs	r0, #2
}
 800292c:	b004      	add	sp, #16
 800292e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002932:	bf00      	nop

08002934 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8002934:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8002938:	2b01      	cmp	r3, #1
 800293a:	d00b      	beq.n	8002954 <HAL_HCD_HC_Halt+0x20>
{
 800293c:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 800293e:	2301      	movs	r3, #1
 8002940:	4604      	mov	r4, r0
 8002942:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002946:	6800      	ldr	r0, [r0, #0]
 8002948:	f002 fbce 	bl	80050e8 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800294c:	2000      	movs	r0, #0
 800294e:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 8002952:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002954:	2002      	movs	r0, #2
}
 8002956:	4770      	bx	lr

08002958 <HAL_HCD_Init>:
  if (hhcd == NULL)
 8002958:	2800      	cmp	r0, #0
 800295a:	d04a      	beq.n	80029f2 <HAL_HCD_Init+0x9a>
{
 800295c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002960:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8002964:	6804      	ldr	r4, [r0, #0]
{
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	4607      	mov	r7, r0
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800296a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800296e:	2b00      	cmp	r3, #0
 8002970:	d039      	beq.n	80029e6 <HAL_HCD_Init+0x8e>
 8002972:	4620      	mov	r0, r4
  hhcd->State = HAL_HCD_STATE_BUSY;
 8002974:	2303      	movs	r3, #3
 8002976:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800297a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800297c:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800297e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 8002982:	bf08      	it	eq
 8002984:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8002986:	f002 f8fb 	bl	8004b80 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800298a:	f854 6b10 	ldr.w	r6, [r4], #16
 800298e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002990:	466d      	mov	r5, sp
 8002992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002994:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002996:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002998:	e894 0003 	ldmia.w	r4, {r0, r1}
 800299c:	e885 0003 	stmia.w	r5, {r0, r1}
 80029a0:	f107 0804 	add.w	r8, r7, #4
 80029a4:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80029a8:	4630      	mov	r0, r6
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029aa:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029ac:	f002 f89c 	bl	8004ae8 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029b0:	2101      	movs	r1, #1
 80029b2:	6838      	ldr	r0, [r7, #0]
 80029b4:	f002 f8ec 	bl	8004b90 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029b8:	f856 cb10 	ldr.w	ip, [r6], #16
 80029bc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029be:	466d      	mov	r5, sp
 80029c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80029c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ce:	4660      	mov	r0, ip
 80029d0:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80029d4:	f002 f970 	bl	8004cb8 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 80029d8:	2301      	movs	r3, #1
  return HAL_OK;
 80029da:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 80029dc:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 80029e0:	b00a      	add	sp, #40	; 0x28
 80029e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hhcd->Lock = HAL_UNLOCKED;
 80029e6:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 80029ea:	f003 fb9b 	bl	8006124 <HAL_HCD_MspInit>
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	e7c0      	b.n	8002974 <HAL_HCD_Init+0x1c>
    return HAL_ERROR;
 80029f2:	2001      	movs	r0, #1
}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop

080029f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80029f8:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80029fa:	008c      	lsls	r4, r1, #2
 80029fc:	1865      	adds	r5, r4, r1
 80029fe:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
{
 8002a02:	f89d c014 	ldrb.w	ip, [sp, #20]
 8002a06:	9f06      	ldr	r7, [sp, #24]
 8002a08:	f8bd 601c 	ldrh.w	r6, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002a0c:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002a10:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f

  if (token == 0U)
 8002a14:	f1bc 0f00 	cmp.w	ip, #0
 8002a18:	d120      	bne.n	8002a5c <HAL_HCD_HC_SubmitRequest+0x64>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a1a:	f04f 0c03 	mov.w	ip, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002a1e:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002a20:	f885 c042 	strb.w	ip, [r5, #66]	; 0x42
  switch (ep_type)
 8002a24:	d024      	beq.n	8002a70 <HAL_HCD_HC_SubmitRequest+0x78>
 8002a26:	4563      	cmp	r3, ip
 8002a28:	d022      	beq.n	8002a70 <HAL_HCD_HC_SubmitRequest+0x78>
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d02b      	beq.n	8002a86 <HAL_HCD_HC_SubmitRequest+0x8e>

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a2e:	1863      	adds	r3, r4, r1
 8002a30:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a34:	2228      	movs	r2, #40	; 0x28
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a36:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a3a:	2400      	movs	r4, #0
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a3c:	fb02 0101 	mla	r1, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
 8002a40:	e9c3 7611 	strd	r7, r6, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a44:	7c02      	ldrb	r2, [r0, #16]
 8002a46:	6800      	ldr	r0, [r0, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a48:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a4c:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8002a4e:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a52:	3138      	adds	r1, #56	; 0x38
}
 8002a54:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002a58:	f002 ba66 	b.w	8004f28 <USB_HC_StartXfer>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a5c:	f04f 0e02 	mov.w	lr, #2
 8002a60:	f885 e042 	strb.w	lr, [r5, #66]	; 0x42
  switch (ep_type)
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d8e2      	bhi.n	8002a2e <HAL_HCD_HC_SubmitRequest+0x36>
 8002a68:	e8df f003 	tbb	[pc, r3]
 8002a6c:	02020d1c 	.word	0x02020d1c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a70:	1863      	adds	r3, r4, r1
 8002a72:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
      if (direction == 0U)
 8002a76:	b96a      	cbnz	r2, 8002a94 <HAL_HCD_HC_SubmitRequest+0x9c>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002a78:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8002a7c:	b13d      	cbz	r5, 8002a8e <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a84:	e7d3      	b.n	8002a2e <HAL_HCD_HC_SubmitRequest+0x36>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a86:	1863      	adds	r3, r4, r1
 8002a88:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 8002a92:	e7cc      	b.n	8002a2e <HAL_HCD_HC_SubmitRequest+0x36>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a94:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002a98:	2a00      	cmp	r2, #0
 8002a9a:	d0f8      	beq.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa2:	e7c4      	b.n	8002a2e <HAL_HCD_HC_SubmitRequest+0x36>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002aa4:	f1bc 0f01 	cmp.w	ip, #1
 8002aa8:	d1c1      	bne.n	8002a2e <HAL_HCD_HC_SubmitRequest+0x36>
 8002aaa:	2a00      	cmp	r2, #0
 8002aac:	d1bf      	bne.n	8002a2e <HAL_HCD_HC_SubmitRequest+0x36>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002aae:	1863      	adds	r3, r4, r1
 8002ab0:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (length == 0U)
 8002ab4:	b946      	cbnz	r6, 8002ac8 <HAL_HCD_HC_SubmitRequest+0xd0>
          hhcd->hc[ch_num].toggle_out = 1U;
 8002ab6:	f883 c051 	strb.w	ip, [r3, #81]	; 0x51
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002aba:	1863      	adds	r3, r4, r1
 8002abc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8002ac0:	2202      	movs	r2, #2
 8002ac2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ac6:	e7b2      	b.n	8002a2e <HAL_HCD_HC_SubmitRequest+0x36>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ac8:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8002acc:	2d00      	cmp	r5, #0
 8002ace:	d0de      	beq.n	8002a8e <HAL_HCD_HC_SubmitRequest+0x96>
 8002ad0:	e7f3      	b.n	8002aba <HAL_HCD_HC_SubmitRequest+0xc2>
 8002ad2:	bf00      	nop

08002ad4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ad8:	6805      	ldr	r5, [r0, #0]
{
 8002ada:	b085      	sub	sp, #20
 8002adc:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002ade:	4628      	mov	r0, r5
 8002ae0:	f002 f884 	bl	8004bec <USB_GetMode>
 8002ae4:	2801      	cmp	r0, #1
 8002ae6:	d002      	beq.n	8002aee <HAL_HCD_IRQHandler+0x1a>
      HCD_RXQLVL_IRQHandler(hhcd);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
  }
}
 8002ae8:	b005      	add	sp, #20
 8002aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002aee:	6820      	ldr	r0, [r4, #0]
 8002af0:	f002 f878 	bl	8004be4 <USB_ReadInterrupts>
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d0f7      	beq.n	8002ae8 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002af8:	6820      	ldr	r0, [r4, #0]
 8002afa:	f002 f873 	bl	8004be4 <USB_ReadInterrupts>
 8002afe:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b02:	6820      	ldr	r0, [r4, #0]
 8002b04:	bf1c      	itt	ne
 8002b06:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 8002b0a:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b0c:	f002 f86a 	bl	8004be4 <USB_ReadInterrupts>
 8002b10:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b14:	6820      	ldr	r0, [r4, #0]
 8002b16:	bf1c      	itt	ne
 8002b18:	f44f 1380 	movne.w	r3, #1048576	; 0x100000
 8002b1c:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b1e:	f002 f861 	bl	8004be4 <USB_ReadInterrupts>
 8002b22:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b26:	6820      	ldr	r0, [r4, #0]
 8002b28:	bf1c      	itt	ne
 8002b2a:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8002b2e:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b30:	f002 f858 	bl	8004be4 <USB_ReadInterrupts>
 8002b34:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b38:	6820      	ldr	r0, [r4, #0]
 8002b3a:	bf1c      	itt	ne
 8002b3c:	2302      	movne	r3, #2
 8002b3e:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002b40:	f002 f850 	bl	8004be4 <USB_ReadInterrupts>
 8002b44:	0083      	lsls	r3, r0, #2
 8002b46:	f100 8113 	bmi.w	8002d70 <HAL_HCD_IRQHandler+0x29c>
 8002b4a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b4c:	f002 f84a 	bl	8004be4 <USB_ReadInterrupts>
 8002b50:	01c7      	lsls	r7, r0, #7
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b52:	6826      	ldr	r6, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002b54:	f100 80ce 	bmi.w	8002cf4 <HAL_HCD_IRQHandler+0x220>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002b58:	4630      	mov	r0, r6
 8002b5a:	f002 f843 	bl	8004be4 <USB_ReadInterrupts>
 8002b5e:	0701      	lsls	r1, r0, #28
 8002b60:	f100 811c 	bmi.w	8002d9c <HAL_HCD_IRQHandler+0x2c8>
 8002b64:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b66:	f002 f83d 	bl	8004be4 <USB_ReadInterrupts>
 8002b6a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b6e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002b70:	d13e      	bne.n	8002bf0 <HAL_HCD_IRQHandler+0x11c>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002b72:	f002 f837 	bl	8004be4 <USB_ReadInterrupts>
 8002b76:	06c3      	lsls	r3, r0, #27
 8002b78:	d5b6      	bpl.n	8002ae8 <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b7a:	6825      	ldr	r5, [r4, #0]
 8002b7c:	69ab      	ldr	r3, [r5, #24]
 8002b7e:	f023 0310 	bic.w	r3, r3, #16
 8002b82:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8002b84:	6a2e      	ldr	r6, [r5, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002b86:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8002b8a:	2a02      	cmp	r2, #2
 8002b8c:	d12b      	bne.n	8002be6 <HAL_HCD_IRQHandler+0x112>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b8e:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b92:	f1b8 0f00 	cmp.w	r8, #0
 8002b96:	d026      	beq.n	8002be6 <HAL_HCD_IRQHandler+0x112>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002b98:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002b9c:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8002ba0:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8002ba4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002ba6:	b1f1      	cbz	r1, 8002be6 <HAL_HCD_IRQHandler+0x112>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002ba8:	4642      	mov	r2, r8
 8002baa:	4628      	mov	r0, r5
 8002bac:	f002 f808 	bl	8004bc0 <USB_ReadPacket>
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002bb0:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8002bb4:	0173      	lsls	r3, r6, #5
 8002bb6:	18e9      	adds	r1, r5, r3
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bb8:	6c78      	ldr	r0, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002bba:	690e      	ldr	r6, [r1, #16]
 8002bbc:	4abe      	ldr	r2, [pc, #760]	; (8002eb8 <HAL_HCD_IRQHandler+0x3e4>)
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002bbe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bc0:	4440      	add	r0, r8
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002bc2:	4441      	add	r1, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002bc4:	4032      	ands	r2, r6
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002bc6:	6478      	str	r0, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002bc8:	64f9      	str	r1, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002bca:	b15a      	cbz	r2, 8002be4 <HAL_HCD_IRQHandler+0x110>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002bcc:	58ea      	ldr	r2, [r5, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bce:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bd2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002bd6:	50ea      	str	r2, [r5, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002bd8:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8002bdc:	f083 0301 	eor.w	r3, r3, #1
 8002be0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8002be4:	6825      	ldr	r5, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002be6:	69ab      	ldr	r3, [r5, #24]
 8002be8:	f043 0310 	orr.w	r3, r3, #16
 8002bec:	61ab      	str	r3, [r5, #24]
 8002bee:	e77b      	b.n	8002ae8 <HAL_HCD_IRQHandler+0x14>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002bf0:	f002 fa74 	bl	80050dc <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bf4:	68a1      	ldr	r1, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002bf6:	4680      	mov	r8, r0
 8002bf8:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002bfa:	2900      	cmp	r1, #0
 8002bfc:	f000 80ca 	beq.w	8002d94 <HAL_HCD_IRQHandler+0x2c0>
 8002c00:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8002c04:	2600      	movs	r6, #0
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002c06:	f04f 0902 	mov.w	r9, #2
 8002c0a:	e03a      	b.n	8002c82 <HAL_HCD_IRQHandler+0x1ae>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c0c:	075b      	lsls	r3, r3, #29
 8002c0e:	f140 80cc 	bpl.w	8002daa <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c12:	2304      	movs	r3, #4
 8002c14:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f043 0302 	orr.w	r3, r3, #2
 8002c1c:	60fb      	str	r3, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	059b      	lsls	r3, r3, #22
 8002c22:	f100 8100 	bmi.w	8002e26 <HAL_HCD_IRQHandler+0x352>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	07d8      	lsls	r0, r3, #31
 8002c2a:	f140 80cc 	bpl.w	8002dc6 <HAL_HCD_IRQHandler+0x2f2>
    if (hhcd->Init.dma_enable != 0U)
 8002c2e:	6923      	ldr	r3, [r4, #16]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 819a 	bne.w	8002f6a <HAL_HCD_IRQHandler+0x496>
 8002c36:	ea4f 038a 	mov.w	r3, sl, lsl #2
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c3a:	eb03 010a 	add.w	r1, r3, sl
 8002c3e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c42:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c44:	f04f 0c01 	mov.w	ip, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c48:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c4a:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c4e:	f8c7 c008 	str.w	ip, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c52:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 8002c56:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8002c5a:	f000 814d 	beq.w	8002ef8 <HAL_HCD_IRQHandler+0x424>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c5e:	2803      	cmp	r0, #3
 8002c60:	f000 8237 	beq.w	80030d2 <HAL_HCD_IRQHandler+0x5fe>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c64:	4453      	add	r3, sl
 8002c66:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8002c6a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8002c6e:	f082 0201 	eor.w	r2, r2, #1
 8002c72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002c76:	6820      	ldr	r0, [r4, #0]
 8002c78:	68a1      	ldr	r1, [r4, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c7a:	3601      	adds	r6, #1
 8002c7c:	42b1      	cmp	r1, r6
 8002c7e:	f240 8089 	bls.w	8002d94 <HAL_HCD_IRQHandler+0x2c0>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c82:	f006 030f 	and.w	r3, r6, #15
 8002c86:	fa28 f303 	lsr.w	r3, r8, r3
 8002c8a:	07da      	lsls	r2, r3, #31
 8002c8c:	d5f5      	bpl.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
 8002c8e:	0173      	lsls	r3, r6, #5
 8002c90:	fa5f fa86 	uxtb.w	sl, r6
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002c94:	595b      	ldr	r3, [r3, r5]
 8002c96:	ea4f 1b4a 	mov.w	fp, sl, lsl #5
 8002c9a:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8002c9e:	eb02 070b 	add.w	r7, r2, fp
 8002ca2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ca8:	d1b0      	bne.n	8002c0c <HAL_HCD_IRQHandler+0x138>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002caa:	f013 0304 	ands.w	r3, r3, #4
 8002cae:	f040 8083 	bne.w	8002db8 <HAL_HCD_IRQHandler+0x2e4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cb2:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8002cb6:	f01c 0c20 	ands.w	ip, ip, #32
 8002cba:	f000 80c2 	beq.w	8002e42 <HAL_HCD_IRQHandler+0x36e>
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cbe:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cc2:	f04f 0c20 	mov.w	ip, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cc6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cca:	f8c7 c008 	str.w	ip, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cce:	f892 c03d 	ldrb.w	ip, [r2, #61]	; 0x3d
 8002cd2:	f1bc 0f01 	cmp.w	ip, #1
 8002cd6:	d1d0      	bne.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].do_ping = 0U;
 8002cd8:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002cde:	f882 905c 	strb.w	r9, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ce2:	f043 0302 	orr.w	r3, r3, #2
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ce6:	4651      	mov	r1, sl
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ce8:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cea:	f002 f9fd 	bl	80050e8 <USB_HC_Halt>
 8002cee:	6820      	ldr	r0, [r4, #0]
 8002cf0:	68a1      	ldr	r1, [r4, #8]
 8002cf2:	e7c2      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002cf4:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8002cf8:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8002cfa:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8002cfe:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d00:	9b03      	ldr	r3, [sp, #12]
 8002d02:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d06:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d08:	9b02      	ldr	r3, [sp, #8]
 8002d0a:	0798      	lsls	r0, r3, #30
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d0c:	4637      	mov	r7, r6
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d0e:	d507      	bpl.n	8002d20 <HAL_HCD_IRQHandler+0x24c>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d10:	9b02      	ldr	r3, [sp, #8]
 8002d12:	07d9      	lsls	r1, r3, #31
 8002d14:	f100 8137 	bmi.w	8002f86 <HAL_HCD_IRQHandler+0x4b2>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002d18:	9b03      	ldr	r3, [sp, #12]
 8002d1a:	f043 0302 	orr.w	r3, r3, #2
 8002d1e:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d20:	9b02      	ldr	r3, [sp, #8]
 8002d22:	071a      	lsls	r2, r3, #28
 8002d24:	d518      	bpl.n	8002d58 <HAL_HCD_IRQHandler+0x284>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d26:	9b03      	ldr	r3, [sp, #12]
 8002d28:	f043 0308 	orr.w	r3, r3, #8
 8002d2c:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d2e:	9b02      	ldr	r3, [sp, #8]
 8002d30:	075b      	lsls	r3, r3, #29
 8002d32:	f140 8130 	bpl.w	8002f96 <HAL_HCD_IRQHandler+0x4c2>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d36:	69a1      	ldr	r1, [r4, #24]
 8002d38:	2902      	cmp	r1, #2
 8002d3a:	f000 813e 	beq.w	8002fba <HAL_HCD_IRQHandler+0x4e6>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002d3e:	68e3      	ldr	r3, [r4, #12]
 8002d40:	2b01      	cmp	r3, #1
        {
          USBx_HOST->HFIR = 60000U;
 8002d42:	bf04      	itt	eq
 8002d44:	f64e 2360 	movweq	r3, #60000	; 0xea60
 8002d48:	f8c6 3404 	streq.w	r3, [r6, #1028]	; 0x404
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002d4c:	4620      	mov	r0, r4
 8002d4e:	f003 fa41 	bl	80061d4 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002d52:	4620      	mov	r0, r4
 8002d54:	f003 fa34 	bl	80061c0 <HAL_HCD_Connect_Callback>
 8002d58:	6826      	ldr	r6, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002d5a:	9b02      	ldr	r3, [sp, #8]
 8002d5c:	0698      	lsls	r0, r3, #26
 8002d5e:	d503      	bpl.n	8002d68 <HAL_HCD_IRQHandler+0x294>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002d60:	9b03      	ldr	r3, [sp, #12]
 8002d62:	f043 0320 	orr.w	r3, r3, #32
 8002d66:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002d68:	9b03      	ldr	r3, [sp, #12]
 8002d6a:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8002d6e:	e6f3      	b.n	8002b58 <HAL_HCD_IRQHandler+0x84>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d70:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8002d74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d78:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8002d7c:	4620      	mov	r0, r4
 8002d7e:	f003 fa23 	bl	80061c8 <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002d82:	2101      	movs	r1, #1
 8002d84:	6820      	ldr	r0, [r4, #0]
 8002d86:	f001 ff35 	bl	8004bf4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002d8a:	6820      	ldr	r0, [r4, #0]
 8002d8c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002d90:	6143      	str	r3, [r0, #20]
 8002d92:	e6db      	b.n	8002b4c <HAL_HCD_IRQHandler+0x78>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002d94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d98:	6143      	str	r3, [r0, #20]
 8002d9a:	e6ea      	b.n	8002b72 <HAL_HCD_IRQHandler+0x9e>
      HAL_HCD_SOF_Callback(hhcd);
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	f003 fa0b 	bl	80061b8 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002da2:	6820      	ldr	r0, [r4, #0]
 8002da4:	2308      	movs	r3, #8
 8002da6:	6143      	str	r3, [r0, #20]
 8002da8:	e6dd      	b.n	8002b66 <HAL_HCD_IRQHandler+0x92>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	0699      	lsls	r1, r3, #26
 8002dae:	f140 8085 	bpl.w	8002ebc <HAL_HCD_IRQHandler+0x3e8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002db2:	2320      	movs	r3, #32
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	e732      	b.n	8002c1e <HAL_HCD_IRQHandler+0x14a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002db8:	2304      	movs	r3, #4
 8002dba:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f043 0302 	orr.w	r3, r3, #2
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	e759      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	0799      	lsls	r1, r3, #30
 8002dca:	f140 80a2 	bpl.w	8002f12 <HAL_HCD_IRQHandler+0x43e>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002dce:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8002dd2:	eb03 000a 	add.w	r0, r3, sl
 8002dd6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002dda:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002dde:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002de2:	f02c 0c02 	bic.w	ip, ip, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002de6:	2901      	cmp	r1, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002de8:	f8c7 c00c 	str.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002dec:	f000 80e2 	beq.w	8002fb4 <HAL_HCD_IRQHandler+0x4e0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002df0:	2905      	cmp	r1, #5
 8002df2:	f000 80df 	beq.w	8002fb4 <HAL_HCD_IRQHandler+0x4e0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002df6:	2906      	cmp	r1, #6
 8002df8:	f000 8135 	beq.w	8003066 <HAL_HCD_IRQHandler+0x592>
 8002dfc:	2908      	cmp	r1, #8
 8002dfe:	f000 8132 	beq.w	8003066 <HAL_HCD_IRQHandler+0x592>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002e02:	2903      	cmp	r1, #3
 8002e04:	f000 81c0 	beq.w	8003188 <HAL_HCD_IRQHandler+0x6b4>
 8002e08:	2328      	movs	r3, #40	; 0x28
 8002e0a:	fb03 430a 	mla	r3, r3, sl, r4
 8002e0e:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e12:	f8c7 9008 	str.w	r9, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e16:	460a      	mov	r2, r1
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e18:	4620      	mov	r0, r4
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	f003 f9d8 	bl	80061d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e20:	6820      	ldr	r0, [r4, #0]
 8002e22:	68a1      	ldr	r1, [r4, #8]
 8002e24:	e729      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e26:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e28:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e2a:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e2e:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e30:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e32:	f002 f959 	bl	80050e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002e36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	6820      	ldr	r0, [r4, #0]
 8002e3e:	68a1      	ldr	r1, [r4, #8]
 8002e40:	e71b      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	065b      	lsls	r3, r3, #25
 8002e46:	f100 80db 	bmi.w	8003000 <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8002e50:	f040 80ef 	bne.w	8003032 <HAL_HCD_IRQHandler+0x55e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002e54:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8002e58:	f01c 0f01 	tst.w	ip, #1
 8002e5c:	f040 8125 	bne.w	80030aa <HAL_HCD_IRQHandler+0x5d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	f013 0308 	ands.w	r3, r3, #8
 8002e66:	f040 816c 	bne.w	8003142 <HAL_HCD_IRQHandler+0x66e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002e6a:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8002e6e:	f01c 0f10 	tst.w	ip, #16
 8002e72:	f000 813e 	beq.w	80030f2 <HAL_HCD_IRQHandler+0x61e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e76:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 8002e7a:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    hhcd->hc[ch_num].state = HC_NAK;
 8002e7e:	2103      	movs	r1, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e80:	6593      	str	r3, [r2, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e82:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 8002e86:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e8a:	b943      	cbnz	r3, 8002e9e <HAL_HCD_IRQHandler+0x3ca>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002e8c:	2328      	movs	r3, #40	; 0x28
 8002e8e:	fb03 430a 	mla	r3, r3, sl, r4
 8002e92:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8002e96:	b912      	cbnz	r2, 8002e9e <HAL_HCD_IRQHandler+0x3ca>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e98:	2201      	movs	r2, #1
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea4:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ea6:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ea8:	f002 f91e 	bl	80050e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002eac:	2310      	movs	r3, #16
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	6820      	ldr	r0, [r4, #0]
 8002eb2:	68a1      	ldr	r1, [r4, #8]
 8002eb4:	e6e1      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
 8002eb6:	bf00      	nop
 8002eb8:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	071b      	lsls	r3, r3, #28
 8002ec0:	f100 8086 	bmi.w	8002fd0 <HAL_HCD_IRQHandler+0x4fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	0559      	lsls	r1, r3, #21
 8002ec8:	f57f aea9 	bpl.w	8002c1e <HAL_HCD_IRQHandler+0x14a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	9201      	str	r2, [sp, #4]
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed6:	4651      	mov	r1, sl
 8002ed8:	f002 f906 	bl	80050e8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002edc:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee0:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ee2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ee6:	60b9      	str	r1, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002ee8:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002eea:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002eee:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ef2:	9a01      	ldr	r2, [sp, #4]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	e692      	b.n	8002c1e <HAL_HCD_IRQHandler+0x14a>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ef8:	68fa      	ldr	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002efa:	6820      	ldr	r0, [r4, #0]
 8002efc:	9301      	str	r3, [sp, #4]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002efe:	f042 0202 	orr.w	r2, r2, #2
 8002f02:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f04:	4651      	mov	r1, sl
 8002f06:	f002 f8ef 	bl	80050e8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	60ba      	str	r2, [r7, #8]
 8002f0e:	9b01      	ldr	r3, [sp, #4]
 8002f10:	e6a8      	b.n	8002c64 <HAL_HCD_IRQHandler+0x190>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6820      	ldr	r0, [r4, #0]
 8002f16:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8002f1a:	f040 808c 	bne.w	8003036 <HAL_HCD_IRQHandler+0x562>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f1e:	68ba      	ldr	r2, [r7, #8]
 8002f20:	06d2      	lsls	r2, r2, #27
 8002f22:	f57f af7e 	bpl.w	8002e22 <HAL_HCD_IRQHandler+0x34e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002f26:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 8002f2a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002f2e:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8002f32:	2a03      	cmp	r2, #3
 8002f34:	f000 811b 	beq.w	800316e <HAL_HCD_IRQHandler+0x69a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002f38:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8002f3c:	d111      	bne.n	8002f62 <HAL_HCD_IRQHandler+0x48e>
      if (hhcd->Init.dma_enable == 0U)
 8002f3e:	6923      	ldr	r3, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002f40:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8002f42:	b973      	cbnz	r3, 8002f62 <HAL_HCD_IRQHandler+0x48e>
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f44:	68fb      	ldr	r3, [r7, #12]
        hhcd->hc[ch_num].state = HC_NAK;
 8002f46:	2228      	movs	r2, #40	; 0x28
 8002f48:	fb02 420a 	mla	r2, r2, sl, r4
 8002f4c:	f04f 0c03 	mov.w	ip, #3
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f50:	f043 0302 	orr.w	r3, r3, #2
        hhcd->hc[ch_num].state = HC_NAK;
 8002f54:	f882 c05d 	strb.w	ip, [r2, #93]	; 0x5d
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f58:	4651      	mov	r1, sl
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f5a:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f5c:	f002 f8c4 	bl	80050e8 <USB_HC_Halt>
 8002f60:	6820      	ldr	r0, [r4, #0]
 8002f62:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002f64:	2310      	movs	r3, #16
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	e687      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f6a:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8002f6e:	eb03 010a 	add.w	r1, r3, sl
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f72:	6938      	ldr	r0, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f74:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002f78:	f3c0 0c12 	ubfx	ip, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002f7c:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8002f7e:	eba0 000c 	sub.w	r0, r0, ip
 8002f82:	64c8      	str	r0, [r1, #76]	; 0x4c
 8002f84:	e659      	b.n	8002c3a <HAL_HCD_IRQHandler+0x166>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002f86:	69b3      	ldr	r3, [r6, #24]
 8002f88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002f8c:	61b3      	str	r3, [r6, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8002f8e:	4620      	mov	r0, r4
 8002f90:	f003 f916 	bl	80061c0 <HAL_HCD_Connect_Callback>
 8002f94:	e6c0      	b.n	8002d18 <HAL_HCD_IRQHandler+0x244>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f96:	4620      	mov	r0, r4
 8002f98:	f003 f920 	bl	80061dc <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f9c:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8002fa0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002fa4:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002fa8:	6826      	ldr	r6, [r4, #0]
 8002faa:	69b3      	ldr	r3, [r6, #24]
 8002fac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002fb0:	61b3      	str	r3, [r6, #24]
 8002fb2:	e6d2      	b.n	8002d5a <HAL_HCD_IRQHandler+0x286>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002fb4:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 8002fb8:	e72b      	b.n	8002e12 <HAL_HCD_IRQHandler+0x33e>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002fba:	9b02      	ldr	r3, [sp, #8]
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002fc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002fc6:	bf18      	it	ne
 8002fc8:	2101      	movne	r1, #1
 8002fca:	f001 fe13 	bl	8004bf4 <USB_InitFSLSPClkSel>
 8002fce:	e6bd      	b.n	8002d4c <HAL_HCD_IRQHandler+0x278>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	9201      	str	r2, [sp, #4]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fd4:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 8002fd8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8002fe2:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fe6:	f04f 0e10 	mov.w	lr, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fea:	2308      	movs	r3, #8
    hhcd->hc[ch_num].state = HC_STALL;
 8002fec:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002ff0:	f8c7 e008 	str.w	lr, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff4:	4651      	mov	r1, sl
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ff6:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ff8:	f002 f876 	bl	80050e8 <USB_HC_Halt>
 8002ffc:	9a01      	ldr	r2, [sp, #4]
 8002ffe:	e60e      	b.n	8002c1e <HAL_HCD_IRQHandler+0x14a>
    hhcd->hc[ch_num].state = HC_NYET;
 8003000:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8003004:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    hhcd->hc[ch_num].do_ping = 1U;
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800300e:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003010:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003014:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].state = HC_NYET;
 8003018:	f04f 0c04 	mov.w	ip, #4
 800301c:	f883 c05d 	strb.w	ip, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003020:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003022:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003024:	f002 f860 	bl	80050e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003028:	2340      	movs	r3, #64	; 0x40
 800302a:	60bb      	str	r3, [r7, #8]
 800302c:	6820      	ldr	r0, [r4, #0]
 800302e:	68a1      	ldr	r1, [r4, #8]
 8003030:	e623      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	e6f9      	b.n	8002e2a <HAL_HCD_IRQHandler+0x356>
    hhcd->hc[ch_num].ErrCnt++;
 8003036:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 800303a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800303e:	68f9      	ldr	r1, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003040:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003042:	f041 0c02 	orr.w	ip, r1, #2
    hhcd->hc[ch_num].ErrCnt++;
 8003046:	3201      	adds	r2, #1
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003048:	f04f 0e06 	mov.w	lr, #6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800304c:	f8c7 c00c 	str.w	ip, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003050:	4651      	mov	r1, sl
    hhcd->hc[ch_num].ErrCnt++;
 8003052:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003054:	f883 e05d 	strb.w	lr, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003058:	f002 f846 	bl	80050e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	6820      	ldr	r0, [r4, #0]
 8003062:	68a1      	ldr	r1, [r4, #8]
 8003064:	e609      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].ErrCnt++;
 8003066:	eb03 000a 	add.w	r0, r3, sl
 800306a:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 800306e:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8003070:	3101      	adds	r1, #1
 8003072:	6581      	str	r1, [r0, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003074:	2903      	cmp	r1, #3
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003076:	f04f 0128 	mov.w	r1, #40	; 0x28
 800307a:	fb01 410a 	mla	r1, r1, sl, r4
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800307e:	d973      	bls.n	8003168 <HAL_HCD_IRQHandler+0x694>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003080:	f04f 0c00 	mov.w	ip, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003084:	2004      	movs	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003086:	f8c1 c058 	str.w	ip, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800308a:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800308e:	f852 000b 	ldr.w	r0, [r2, fp]
 8003092:	4453      	add	r3, sl
 8003094:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003098:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800309c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80030a0:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030a4:	f842 000b 	str.w	r0, [r2, fp]
 80030a8:	e6b3      	b.n	8002e12 <HAL_HCD_IRQHandler+0x33e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030aa:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030ac:	eb0a 0b8a 	add.w	fp, sl, sl, lsl #2
 80030b0:	eb04 0bcb 	add.w	fp, r4, fp, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030b4:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 80030b8:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030bc:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030be:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030c0:	f002 f812 	bl	80050e8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030c4:	2301      	movs	r3, #1
 80030c6:	60bb      	str	r3, [r7, #8]
 80030c8:	6820      	ldr	r0, [r4, #0]
 80030ca:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80030cc:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
 80030d0:	e5d3      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80030d2:	f852 000b 	ldr.w	r0, [r2, fp]
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 80030dc:	f842 000b 	str.w	r0, [r2, fp]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80030e0:	f881 c05c 	strb.w	ip, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80030e4:	4662      	mov	r2, ip
 80030e6:	4651      	mov	r1, sl
 80030e8:	4620      	mov	r0, r4
 80030ea:	f003 f871 	bl	80061d0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030ee:	9b01      	ldr	r3, [sp, #4]
 80030f0:	e5b8      	b.n	8002c64 <HAL_HCD_IRQHandler+0x190>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	d456      	bmi.n	80031a6 <HAL_HCD_IRQHandler+0x6d2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	055b      	lsls	r3, r3, #21
 80030fc:	d465      	bmi.n	80031ca <HAL_HCD_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	079b      	lsls	r3, r3, #30
 8003102:	f57f adba 	bpl.w	8002c7a <HAL_HCD_IRQHandler+0x1a6>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003106:	2128      	movs	r1, #40	; 0x28
 8003108:	fb01 410a 	mla	r1, r1, sl, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800310c:	68f8      	ldr	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800310e:	f891 305d 	ldrb.w	r3, [r1, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003112:	f020 0002 	bic.w	r0, r0, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003116:	2b01      	cmp	r3, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003118:	60f8      	str	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800311a:	d06e      	beq.n	80031fa <HAL_HCD_IRQHandler+0x726>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800311c:	2b03      	cmp	r3, #3
 800311e:	d069      	beq.n	80031f4 <HAL_HCD_IRQHandler+0x720>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003120:	2b04      	cmp	r3, #4
 8003122:	d067      	beq.n	80031f4 <HAL_HCD_IRQHandler+0x720>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003124:	2b05      	cmp	r3, #5
 8003126:	f000 808c 	beq.w	8003242 <HAL_HCD_IRQHandler+0x76e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800312a:	2b06      	cmp	r3, #6
 800312c:	d073      	beq.n	8003216 <HAL_HCD_IRQHandler+0x742>
 800312e:	2b08      	cmp	r3, #8
 8003130:	d071      	beq.n	8003216 <HAL_HCD_IRQHandler+0x742>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003132:	2328      	movs	r3, #40	; 0x28
 8003134:	fb03 430a 	mla	r3, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003138:	f8c7 9008 	str.w	r9, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800313c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8003140:	e66a      	b.n	8002e18 <HAL_HCD_IRQHandler+0x344>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003142:	2308      	movs	r3, #8
 8003144:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800314c:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800314e:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003150:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003154:	f001 ffc8 	bl	80050e8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003158:	eb04 03ca 	add.w	r3, r4, sl, lsl #3
 800315c:	2205      	movs	r2, #5
 800315e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8003162:	6820      	ldr	r0, [r4, #0]
 8003164:	68a1      	ldr	r1, [r4, #8]
 8003166:	e588      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003168:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
 800316c:	e78f      	b.n	800308e <HAL_HCD_IRQHandler+0x5ba>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800316e:	68fa      	ldr	r2, [r7, #12]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003170:	2128      	movs	r1, #40	; 0x28
 8003172:	fb01 410a 	mla	r1, r1, sl, r4
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003176:	f042 0202 	orr.w	r2, r2, #2
      hhcd->hc[ch_num].ErrCnt = 0U;
 800317a:	658b      	str	r3, [r1, #88]	; 0x58
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800317c:	4651      	mov	r1, sl
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800317e:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003180:	f001 ffb2 	bl	80050e8 <USB_HC_Halt>
 8003184:	6820      	ldr	r0, [r4, #0]
 8003186:	e6ec      	b.n	8002f62 <HAL_HCD_IRQHandler+0x48e>
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003188:	f852 300b 	ldr.w	r3, [r2, fp]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800318c:	2128      	movs	r1, #40	; 0x28
 800318e:	fb01 410a 	mla	r1, r1, sl, r4
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003192:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003196:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800319a:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800319e:	f842 300b 	str.w	r3, [r2, fp]
 80031a2:	2102      	movs	r1, #2
 80031a4:	e635      	b.n	8002e12 <HAL_HCD_IRQHandler+0x33e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031ac:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ae:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031b0:	f001 ff9a 	bl	80050e8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031b4:	2328      	movs	r3, #40	; 0x28
 80031b6:	fb03 4a0a 	mla	sl, r3, sl, r4
 80031ba:	2206      	movs	r2, #6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031bc:	2380      	movs	r3, #128	; 0x80
    hhcd->hc[ch_num].state = HC_XACTERR;
 80031be:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 80031c2:	6820      	ldr	r0, [r4, #0]
 80031c4:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80031c6:	60bb      	str	r3, [r7, #8]
 80031c8:	e557      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d0:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031d2:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031d4:	f001 ff88 	bl	80050e8 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031d8:	2328      	movs	r3, #40	; 0x28
 80031da:	fb03 4a0a 	mla	sl, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031de:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031e4:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031ea:	60ba      	str	r2, [r7, #8]
 80031ec:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031ee:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 80031f2:	e542      	b.n	8002c7a <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80031f4:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
 80031f8:	e79b      	b.n	8003132 <HAL_HCD_IRQHandler+0x65e>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80031fa:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031fe:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003202:	1e93      	subs	r3, r2, #2
 8003204:	2b01      	cmp	r3, #1
 8003206:	d894      	bhi.n	8003132 <HAL_HCD_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8003208:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
 800320c:	f083 0301 	eor.w	r3, r3, #1
 8003210:	f881 3051 	strb.w	r3, [r1, #81]	; 0x51
 8003214:	e78d      	b.n	8003132 <HAL_HCD_IRQHandler+0x65e>
      hhcd->hc[ch_num].ErrCnt++;
 8003216:	2328      	movs	r3, #40	; 0x28
 8003218:	fb03 430a 	mla	r3, r3, sl, r4
 800321c:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800321e:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003220:	2903      	cmp	r1, #3
      hhcd->hc[ch_num].ErrCnt++;
 8003222:	6599      	str	r1, [r3, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003224:	d910      	bls.n	8003248 <HAL_HCD_IRQHandler+0x774>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003226:	2000      	movs	r0, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003228:	2104      	movs	r1, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 800322a:	6598      	str	r0, [r3, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800322c:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003230:	f852 300b 	ldr.w	r3, [r2, fp]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003234:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800323c:	f842 300b 	str.w	r3, [r2, fp]
 8003240:	e777      	b.n	8003132 <HAL_HCD_IRQHandler+0x65e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003242:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
 8003246:	e774      	b.n	8003132 <HAL_HCD_IRQHandler+0x65e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003248:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 800324c:	e7f0      	b.n	8003230 <HAL_HCD_IRQHandler+0x75c>
 800324e:	bf00      	nop

08003250 <HAL_HCD_Start>:
{
 8003250:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8003252:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8003256:	2b01      	cmp	r3, #1
 8003258:	d00e      	beq.n	8003278 <HAL_HCD_Start+0x28>
 800325a:	4604      	mov	r4, r0
 800325c:	2501      	movs	r5, #1
 800325e:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003262:	6800      	ldr	r0, [r0, #0]
 8003264:	f001 fc84 	bl	8004b70 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003268:	4629      	mov	r1, r5
 800326a:	6820      	ldr	r0, [r4, #0]
 800326c:	f001 fd00 	bl	8004c70 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003270:	2000      	movs	r0, #0
 8003272:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8003276:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8003278:	2002      	movs	r0, #2
}
 800327a:	bd38      	pop	{r3, r4, r5, pc}

0800327c <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 800327c:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8003280:	2b01      	cmp	r3, #1
 8003282:	d00b      	beq.n	800329c <HAL_HCD_Stop+0x20>
{
 8003284:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8003286:	2301      	movs	r3, #1
 8003288:	4604      	mov	r4, r0
 800328a:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800328e:	6800      	ldr	r0, [r0, #0]
 8003290:	f001 ff88 	bl	80051a4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003294:	2000      	movs	r0, #0
 8003296:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 800329a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 800329c:	2002      	movs	r0, #2
}
 800329e:	4770      	bx	lr

080032a0 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80032a0:	6800      	ldr	r0, [r0, #0]
 80032a2:	f001 bcc5 	b.w	8004c30 <USB_ResetPort>
 80032a6:	bf00      	nop

080032a8 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 80032a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80032ac:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80032b0:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop

080032b8 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 80032b8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80032bc:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 80032c0:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80032c2:	4770      	bx	lr

080032c4 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 80032c4:	6800      	ldr	r0, [r0, #0]
 80032c6:	f001 bd89 	b.w	8004ddc <USB_GetCurrentFrame>
 80032ca:	bf00      	nop

080032cc <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 80032cc:	6800      	ldr	r0, [r0, #0]
 80032ce:	f001 bd79 	b.w	8004dc4 <USB_GetHostSpeed>
 80032d2:	bf00      	nop

080032d4 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032d4:	2800      	cmp	r0, #0
 80032d6:	f000 809f 	beq.w	8003418 <HAL_I2C_Init+0x144>
{
 80032da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032dc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80032e0:	4604      	mov	r4, r0
 80032e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 808f 	beq.w	800340a <HAL_I2C_Init+0x136>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ec:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800330c:	f000 fdb6 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003310:	6861      	ldr	r1, [r4, #4]
 8003312:	4b4b      	ldr	r3, [pc, #300]	; (8003440 <HAL_I2C_Init+0x16c>)
 8003314:	4299      	cmp	r1, r3
 8003316:	d84b      	bhi.n	80033b0 <HAL_I2C_Init+0xdc>
 8003318:	4b4a      	ldr	r3, [pc, #296]	; (8003444 <HAL_I2C_Init+0x170>)
 800331a:	4298      	cmp	r0, r3
 800331c:	d97a      	bls.n	8003414 <HAL_I2C_Init+0x140>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8003320:	4b49      	ldr	r3, [pc, #292]	; (8003448 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003322:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003324:	fba3 6300 	umull	r6, r3, r3, r0
 8003328:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800332a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800332e:	431d      	orrs	r5, r3
 8003330:	6055      	str	r5, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003332:	6a15      	ldr	r5, [r2, #32]
 8003334:	3301      	adds	r3, #1
 8003336:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800333a:	432b      	orrs	r3, r5
 800333c:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800333e:	69d5      	ldr	r5, [r2, #28]
 8003340:	0049      	lsls	r1, r1, #1
 8003342:	1e43      	subs	r3, r0, #1
 8003344:	fbb3 f3f1 	udiv	r3, r3, r1
 8003348:	3301      	adds	r3, #1
 800334a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334e:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8003352:	2b04      	cmp	r3, #4
 8003354:	bf38      	it	cc
 8003356:	2304      	movcc	r3, #4
 8003358:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800335c:	432b      	orrs	r3, r5
 800335e:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003360:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 8003364:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003366:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003368:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 800336c:	432b      	orrs	r3, r5
 800336e:	4303      	orrs	r3, r0
 8003370:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003372:	6890      	ldr	r0, [r2, #8]
 8003374:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003376:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003378:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 800337c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8003380:	4329      	orrs	r1, r5
 8003382:	4301      	orrs	r1, r0
 8003384:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003386:	68d1      	ldr	r1, [r2, #12]
 8003388:	69a0      	ldr	r0, [r4, #24]
 800338a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800338e:	4303      	orrs	r3, r0
 8003390:	430b      	orrs	r3, r1
 8003392:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003394:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003396:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8003398:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800339c:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 800339e:	6011      	str	r1, [r2, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80033a0:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a2:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033a4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033a8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033aa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80033ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b0:	4b26      	ldr	r3, [pc, #152]	; (800344c <HAL_I2C_Init+0x178>)
 80033b2:	4298      	cmp	r0, r3
 80033b4:	d92e      	bls.n	8003414 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033b6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80033b8:	4b23      	ldr	r3, [pc, #140]	; (8003448 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ba:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033bc:	4f24      	ldr	r7, [pc, #144]	; (8003450 <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80033be:	fba3 5300 	umull	r5, r3, r3, r0
 80033c2:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033c4:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 80033c8:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033ca:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ce:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033d0:	fb03 f305 	mul.w	r3, r3, r5
 80033d4:	fba7 5303 	umull	r5, r3, r7, r3
 80033d8:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033da:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80033e2:	3301      	adds	r3, #1
 80033e4:	432b      	orrs	r3, r5
 80033e6:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033e8:	69d5      	ldr	r5, [r2, #28]
 80033ea:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80033ee:	3801      	subs	r0, #1
 80033f0:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80033f4:	b996      	cbnz	r6, 800341c <HAL_I2C_Init+0x148>
 80033f6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80033fa:	fbb0 f0f1 	udiv	r0, r0, r1
 80033fe:	3001      	adds	r0, #1
 8003400:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8003404:	b9c0      	cbnz	r0, 8003438 <HAL_I2C_Init+0x164>
 8003406:	2301      	movs	r3, #1
 8003408:	e7a8      	b.n	800335c <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 800340a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800340e:	f7fe fa19 	bl	8001844 <HAL_I2C_MspInit>
 8003412:	e76b      	b.n	80032ec <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8003414:	2001      	movs	r0, #1
}
 8003416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003418:	2001      	movs	r0, #1
}
 800341a:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800341c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003420:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003424:	fbb0 f0f1 	udiv	r0, r0, r1
 8003428:	3001      	adds	r0, #1
 800342a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800342e:	2800      	cmp	r0, #0
 8003430:	d0e9      	beq.n	8003406 <HAL_I2C_Init+0x132>
 8003432:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 8003436:	e791      	b.n	800335c <HAL_I2C_Init+0x88>
 8003438:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 800343c:	e78e      	b.n	800335c <HAL_I2C_Init+0x88>
 800343e:	bf00      	nop
 8003440:	000186a0 	.word	0x000186a0
 8003444:	001e847f 	.word	0x001e847f
 8003448:	431bde83 	.word	0x431bde83
 800344c:	003d08ff 	.word	0x003d08ff
 8003450:	10624dd3 	.word	0x10624dd3

08003454 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003454:	2800      	cmp	r0, #0
 8003456:	f000 8085 	beq.w	8003564 <HAL_I2S_Init+0x110>
{
 800345a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800345c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003460:	4604      	mov	r4, r0
 8003462:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003466:	2b00      	cmp	r3, #0
 8003468:	d075      	beq.n	8003556 <HAL_I2S_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800346a:	2202      	movs	r2, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800346c:	6821      	ldr	r1, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 800346e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003472:	69c8      	ldr	r0, [r1, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003474:	6963      	ldr	r3, [r4, #20]
 8003476:	68e5      	ldr	r5, [r4, #12]
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003478:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 800347c:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003480:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003482:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8003484:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003486:	d027      	beq.n	80034d8 <HAL_I2S_Init+0x84>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003488:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 800348a:	2d00      	cmp	r5, #0
 800348c:	bf0c      	ite	eq
 800348e:	2510      	moveq	r5, #16
 8003490:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003492:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003494:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8003496:	bf98      	it	ls
 8003498:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800349a:	f000 fdaf 	bl	8003ffc <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800349e:	6922      	ldr	r2, [r4, #16]
 80034a0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80034a4:	d060      	beq.n	8003568 <HAL_I2S_Init+0x114>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80034a6:	fbb0 f0f5 	udiv	r0, r0, r5
 80034aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80034ae:	0043      	lsls	r3, r0, #1
 80034b0:	6960      	ldr	r0, [r4, #20]
 80034b2:	fbb3 f3f0 	udiv	r3, r3, r0
 80034b6:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80034b8:	4935      	ldr	r1, [pc, #212]	; (8003590 <HAL_I2S_Init+0x13c>)
 80034ba:	fba1 1303 	umull	r1, r3, r1, r3
 80034be:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034c0:	0859      	lsrs	r1, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80034c2:	1e88      	subs	r0, r1, #2
 80034c4:	28fd      	cmp	r0, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80034c6:	f003 0301 	and.w	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80034ca:	d95a      	bls.n	8003582 <HAL_I2S_Init+0x12e>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80034cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80034ce:	f043 0310 	orr.w	r3, r3, #16
 80034d2:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 80034d4:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 80034d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034d8:	6922      	ldr	r2, [r4, #16]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034da:	69a7      	ldr	r7, [r4, #24]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034dc:	f8d4 e020 	ldr.w	lr, [r4, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034e0:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80035a4 <HAL_I2S_Init+0x150>
 80034e4:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034e8:	4313      	orrs	r3, r2
 80034ea:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034ec:	ea46 0300 	orr.w	r3, r6, r0
 80034f0:	69ca      	ldr	r2, [r1, #28]
 80034f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80034f6:	433b      	orrs	r3, r7
 80034f8:	432b      	orrs	r3, r5
 80034fa:	ea02 020c 	and.w	r2, r2, ip
 80034fe:	4313      	orrs	r3, r2
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003500:	f1be 0f01 	cmp.w	lr, #1
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003504:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003506:	d120      	bne.n	800354a <HAL_I2S_Init+0xf6>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003508:	4a22      	ldr	r2, [pc, #136]	; (8003594 <HAL_I2S_Init+0x140>)
 800350a:	4b23      	ldr	r3, [pc, #140]	; (8003598 <HAL_I2S_Init+0x144>)
 800350c:	4291      	cmp	r1, r2
 800350e:	bf0c      	ite	eq
 8003510:	4619      	moveq	r1, r3
 8003512:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003516:	4b21      	ldr	r3, [pc, #132]	; (800359c <HAL_I2S_Init+0x148>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003518:	69ca      	ldr	r2, [r1, #28]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800351a:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800351c:	ea02 020c 	and.w	r2, r2, ip
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003520:	f04f 0c02 	mov.w	ip, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003524:	61ca      	str	r2, [r1, #28]
 8003526:	ea40 0307 	orr.w	r3, r0, r7
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800352a:	f8c1 c020 	str.w	ip, [r1, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800352e:	69ca      	ldr	r2, [r1, #28]
 8003530:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003534:	432b      	orrs	r3, r5
 8003536:	4313      	orrs	r3, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003538:	f436 7000 	bics.w	r0, r6, #512	; 0x200
 800353c:	b29b      	uxth	r3, r3
 800353e:	bf14      	ite	ne
 8003540:	2200      	movne	r2, #0
 8003542:	f44f 7280 	moveq.w	r2, #256	; 0x100
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003546:	4313      	orrs	r3, r2
 8003548:	61cb      	str	r3, [r1, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800354a:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 800354c:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800354e:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003550:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 8003554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <HAL_I2S_Init+0x14c>)
    hi2s->Lock = HAL_UNLOCKED;
 8003558:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800355c:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 800355e:	f7fe f9a9 	bl	80018b4 <HAL_I2S_MspInit>
 8003562:	e782      	b.n	800346a <HAL_I2S_Init+0x16>
    return HAL_ERROR;
 8003564:	2001      	movs	r0, #1
}
 8003566:	4770      	bx	lr
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003568:	68e3      	ldr	r3, [r4, #12]
 800356a:	6961      	ldr	r1, [r4, #20]
 800356c:	b173      	cbz	r3, 800358c <HAL_I2S_Init+0x138>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800356e:	00ad      	lsls	r5, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003570:	fbb0 f0f5 	udiv	r0, r0, r5
 8003574:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003578:	0043      	lsls	r3, r0, #1
 800357a:	fbb3 f3f1 	udiv	r3, r3, r1
 800357e:	3305      	adds	r3, #5
 8003580:	e79a      	b.n	80034b8 <HAL_I2S_Init+0x64>
 8003582:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8003586:	68e5      	ldr	r5, [r4, #12]
 8003588:	6821      	ldr	r1, [r4, #0]
 800358a:	e7a6      	b.n	80034da <HAL_I2S_Init+0x86>
 800358c:	00ed      	lsls	r5, r5, #3
 800358e:	e7ef      	b.n	8003570 <HAL_I2S_Init+0x11c>
 8003590:	cccccccd 	.word	0xcccccccd
 8003594:	40003800 	.word	0x40003800
 8003598:	40003400 	.word	0x40003400
 800359c:	080036c1 	.word	0x080036c1
 80035a0:	080035b5 	.word	0x080035b5
 80035a4:	fffff040 	.word	0xfffff040

080035a8 <HAL_I2S_TxCpltCallback>:
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop

080035ac <HAL_I2S_RxCpltCallback>:
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop

080035b0 <HAL_I2S_ErrorCallback>:
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop

080035b4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035b4:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035b6:	6803      	ldr	r3, [r0, #0]
{
 80035b8:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035be:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80035c2:	2a04      	cmp	r2, #4
{
 80035c4:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035c6:	d034      	beq.n	8003632 <I2S_IRQHandler+0x7e>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80035c8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d001      	beq.n	80035d4 <I2S_IRQHandler+0x20>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035d0:	b004      	add	sp, #16
 80035d2:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80035d4:	9b01      	ldr	r3, [sp, #4]
 80035d6:	079b      	lsls	r3, r3, #30
 80035d8:	d510      	bpl.n	80035fc <I2S_IRQHandler+0x48>
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	0610      	lsls	r0, r2, #24
 80035e0:	d50c      	bpl.n	80035fc <I2S_IRQHandler+0x48>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80035e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80035e4:	f831 2b02 	ldrh.w	r2, [r1], #2
 80035e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80035ea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 80035ec:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80035ee:	3a01      	subs	r2, #1
 80035f0:	b292      	uxth	r2, r2
 80035f2:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80035f4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80035f6:	b292      	uxth	r2, r2
 80035f8:	2a00      	cmp	r2, #0
 80035fa:	d049      	beq.n	8003690 <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80035fc:	9b01      	ldr	r3, [sp, #4]
 80035fe:	0719      	lsls	r1, r3, #28
 8003600:	d5e6      	bpl.n	80035d0 <I2S_IRQHandler+0x1c>
 8003602:	6823      	ldr	r3, [r4, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	0692      	lsls	r2, r2, #26
 8003608:	d5e2      	bpl.n	80035d0 <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800360a:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800360c:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800360e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003612:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003614:	9103      	str	r1, [sp, #12]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 800361a:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800361c:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 800361e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003622:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003624:	f043 0304 	orr.w	r3, r3, #4
 8003628:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800362a:	4620      	mov	r0, r4
 800362c:	f7ff ffc0 	bl	80035b0 <HAL_I2S_ErrorCallback>
}
 8003630:	e7ce      	b.n	80035d0 <I2S_IRQHandler+0x1c>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003632:	9a01      	ldr	r2, [sp, #4]
 8003634:	07d1      	lsls	r1, r2, #31
 8003636:	d50e      	bpl.n	8003656 <I2S_IRQHandler+0xa2>
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	0652      	lsls	r2, r2, #25
 800363c:	d50b      	bpl.n	8003656 <I2S_IRQHandler+0xa2>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800363e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 8003646:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 8003648:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 800364a:	3a01      	subs	r2, #1
 800364c:	b292      	uxth	r2, r2
 800364e:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8003650:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8003652:	b292      	uxth	r2, r2
 8003654:	b33a      	cbz	r2, 80036a6 <I2S_IRQHandler+0xf2>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003656:	9b01      	ldr	r3, [sp, #4]
 8003658:	0659      	lsls	r1, r3, #25
 800365a:	d5b5      	bpl.n	80035c8 <I2S_IRQHandler+0x14>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	685a      	ldr	r2, [r3, #4]
 8003660:	0692      	lsls	r2, r2, #26
 8003662:	d5b1      	bpl.n	80035c8 <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003664:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003666:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003668:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800366c:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800366e:	9102      	str	r1, [sp, #8]
 8003670:	68da      	ldr	r2, [r3, #12]
 8003672:	9202      	str	r2, [sp, #8]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8003678:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800367a:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 800367c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003680:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003682:	f043 0302 	orr.w	r3, r3, #2
 8003686:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003688:	4620      	mov	r0, r4
 800368a:	f7ff ff91 	bl	80035b0 <HAL_I2S_ErrorCallback>
 800368e:	e79b      	b.n	80035c8 <I2S_IRQHandler+0x14>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003690:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8003692:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003694:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003698:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 800369a:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 800369c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80036a0:	f7ff ff82 	bl	80035a8 <HAL_I2S_TxCpltCallback>
 80036a4:	e7aa      	b.n	80035fc <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a6:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80036a8:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ae:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80036b0:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80036b4:	f7ff ff7a 	bl	80035ac <HAL_I2S_RxCpltCallback>
 80036b8:	e7cd      	b.n	8003656 <I2S_IRQHandler+0xa2>
 80036ba:	bf00      	nop

080036bc <HAL_I2SEx_TxRxCpltCallback>:
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop

080036c0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036c0:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036c2:	4a93      	ldr	r2, [pc, #588]	; (8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036c4:	6805      	ldr	r5, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036c6:	4b93      	ldr	r3, [pc, #588]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036c8:	68a9      	ldr	r1, [r5, #8]
{
 80036ca:	b087      	sub	sp, #28
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036cc:	4295      	cmp	r5, r2
 80036ce:	bf18      	it	ne
 80036d0:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036d4:	9100      	str	r1, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036d6:	6899      	ldr	r1, [r3, #8]
 80036d8:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036da:	6869      	ldr	r1, [r5, #4]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036dc:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80036de:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036e4:	f432 7200 	bics.w	r2, r2, #512	; 0x200
{
 80036e8:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80036ea:	d075      	beq.n	80037d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x118>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036ec:	9a01      	ldr	r2, [sp, #4]
 80036ee:	0791      	lsls	r1, r2, #30
 80036f0:	d51a      	bpl.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 80036f2:	9a03      	ldr	r2, [sp, #12]
 80036f4:	0612      	lsls	r2, r2, #24
 80036f6:	d517      	bpl.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80036f8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80036fa:	1c91      	adds	r1, r2, #2
 80036fc:	8812      	ldrh	r2, [r2, #0]
 80036fe:	6241      	str	r1, [r0, #36]	; 0x24
 8003700:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003702:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8003704:	3a01      	subs	r2, #1
 8003706:	b292      	uxth	r2, r2
 8003708:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800370a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800370c:	b292      	uxth	r2, r2
 800370e:	b95a      	cbnz	r2, 8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003716:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003718:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800371a:	b29b      	uxth	r3, r3
 800371c:	b923      	cbnz	r3, 8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800371e:	2301      	movs	r3, #1
 8003720:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003724:	f7ff ffca 	bl	80036bc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003728:	9b00      	ldr	r3, [sp, #0]
 800372a:	07db      	lsls	r3, r3, #31
 800372c:	d51c      	bpl.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 800372e:	9b02      	ldr	r3, [sp, #8]
 8003730:	065d      	lsls	r5, r3, #25
 8003732:	d519      	bpl.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003734:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	1c98      	adds	r0, r3, #2
 800373a:	68d1      	ldr	r1, [r2, #12]
 800373c:	62e0      	str	r0, [r4, #44]	; 0x2c
 800373e:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8003740:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003748:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800374a:	b29b      	uxth	r3, r3
 800374c:	b963      	cbnz	r3, 8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800374e:	6853      	ldr	r3, [r2, #4]
 8003750:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003754:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8003756:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	b92b      	cbnz	r3, 8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800375c:	2301      	movs	r3, #1
 800375e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff ffaa 	bl	80036bc <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003768:	9b00      	ldr	r3, [sp, #0]
 800376a:	0658      	lsls	r0, r3, #25
 800376c:	d51b      	bpl.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 800376e:	9b02      	ldr	r3, [sp, #8]
 8003770:	0699      	lsls	r1, r3, #26
 8003772:	d518      	bpl.n	80037a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003774:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003776:	4866      	ldr	r0, [pc, #408]	; (8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003778:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800377a:	4b66      	ldr	r3, [pc, #408]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800377c:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003780:	4282      	cmp	r2, r0
 8003782:	bf18      	it	ne
 8003784:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003788:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800378a:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800378c:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800378e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003792:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8003794:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003798:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800379a:	f043 0302 	orr.w	r3, r3, #2
 800379e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff ff05 	bl	80035b0 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037a6:	9b01      	ldr	r3, [sp, #4]
 80037a8:	071a      	lsls	r2, r3, #28
 80037aa:	d56e      	bpl.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 80037ac:	9b03      	ldr	r3, [sp, #12]
 80037ae:	069b      	lsls	r3, r3, #26
 80037b0:	d56b      	bpl.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037b2:	6822      	ldr	r2, [r4, #0]
 80037b4:	4956      	ldr	r1, [pc, #344]	; (8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80037b6:	4b57      	ldr	r3, [pc, #348]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80037b8:	428a      	cmp	r2, r1
 80037ba:	bf18      	it	ne
 80037bc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 80037c0:	2001      	movs	r0, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c2:	6859      	ldr	r1, [r3, #4]
 80037c4:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 80037c8:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037ca:	6853      	ldr	r3, [r2, #4]
 80037cc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80037d0:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80037d2:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 80037d6:	e04e      	b.n	8003876 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80037d8:	9b00      	ldr	r3, [sp, #0]
 80037da:	079a      	lsls	r2, r3, #30
 80037dc:	d502      	bpl.n	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 80037de:	9b02      	ldr	r3, [sp, #8]
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	d477      	bmi.n	80038d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x214>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80037e4:	9b01      	ldr	r3, [sp, #4]
 80037e6:	07d8      	lsls	r0, r3, #31
 80037e8:	d502      	bpl.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 80037ea:	9b03      	ldr	r3, [sp, #12]
 80037ec:	0659      	lsls	r1, r3, #25
 80037ee:	d44e      	bmi.n	800388e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ce>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037f0:	9b01      	ldr	r3, [sp, #4]
 80037f2:	065a      	lsls	r2, r3, #25
 80037f4:	d522      	bpl.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
 80037f6:	9b03      	ldr	r3, [sp, #12]
 80037f8:	069b      	lsls	r3, r3, #26
 80037fa:	d51f      	bpl.n	800383c <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	4944      	ldr	r1, [pc, #272]	; (8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8003800:	4a44      	ldr	r2, [pc, #272]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8003802:	428b      	cmp	r3, r1
 8003804:	bf18      	it	ne
 8003806:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800380a:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800380c:	6851      	ldr	r1, [r2, #4]
 800380e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8003812:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800381a:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800381c:	9004      	str	r0, [sp, #16]
 800381e:	68da      	ldr	r2, [r3, #12]
 8003820:	9204      	str	r2, [sp, #16]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8003826:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003828:	9a04      	ldr	r2, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 800382a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800382e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003836:	4620      	mov	r0, r4
 8003838:	f7ff feba 	bl	80035b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800383c:	9b00      	ldr	r3, [sp, #0]
 800383e:	071d      	lsls	r5, r3, #28
 8003840:	d523      	bpl.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8003842:	9b02      	ldr	r3, [sp, #8]
 8003844:	0698      	lsls	r0, r3, #26
 8003846:	d520      	bpl.n	800388a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003848:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384a:	4831      	ldr	r0, [pc, #196]	; (8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800384c:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800384e:	4a31      	ldr	r2, [pc, #196]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003850:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003854:	4283      	cmp	r3, r0
 8003856:	bf18      	it	ne
 8003858:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800385c:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800385e:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003860:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003862:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8003866:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003868:	9005      	str	r0, [sp, #20]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 800386e:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003870:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8003872:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003876:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8003878:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800387a:	f043 0304 	orr.w	r3, r3, #4
 800387e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8003880:	b007      	add	sp, #28
 8003882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8003886:	f7ff be93 	b.w	80035b0 <HAL_I2S_ErrorCallback>
}
 800388a:	b007      	add	sp, #28
 800388c:	bd30      	pop	{r4, r5, pc}
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800388e:	6820      	ldr	r0, [r4, #0]
 8003890:	491f      	ldr	r1, [pc, #124]	; (8003910 <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8003892:	4a20      	ldr	r2, [pc, #128]	; (8003914 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8003894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003896:	4288      	cmp	r0, r1
 8003898:	bf18      	it	ne
 800389a:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800389e:	1c98      	adds	r0, r3, #2
 80038a0:	68d1      	ldr	r1, [r2, #12]
 80038a2:	62e0      	str	r0, [r4, #44]	; 0x2c
 80038a4:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80038a6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80038ae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d19c      	bne.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038b6:	6853      	ldr	r3, [r2, #4]
 80038b8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80038bc:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80038be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d194      	bne.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7ff fef5 	bl	80036bc <HAL_I2SEx_TxRxCpltCallback>
 80038d2:	e78d      	b.n	80037f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80038d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80038d6:	1c9a      	adds	r2, r3, #2
 80038d8:	881b      	ldrh	r3, [r3, #0]
 80038da:	6242      	str	r2, [r0, #36]	; 0x24
 80038dc:	60eb      	str	r3, [r5, #12]
  hi2s->TxXferCount--;
 80038de:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80038e6:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f47f af7a 	bne.w	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038f0:	686b      	ldr	r3, [r5, #4]
 80038f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038f6:	606b      	str	r3, [r5, #4]
    if (hi2s->RxXferCount == 0U)
 80038f8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f47f af71 	bne.w	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
      hi2s->State = HAL_I2S_STATE_READY;
 8003902:	2301      	movs	r3, #1
 8003904:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003908:	f7ff fed8 	bl	80036bc <HAL_I2SEx_TxRxCpltCallback>
 800390c:	e76a      	b.n	80037e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 800390e:	bf00      	nop
 8003910:	40003800 	.word	0x40003800
 8003914:	40003400 	.word	0x40003400

08003918 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003918:	2800      	cmp	r0, #0
 800391a:	f000 8132 	beq.w	8003b82 <HAL_RCC_OscConfig+0x26a>
{
 800391e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003922:	6803      	ldr	r3, [r0, #0]
 8003924:	07dd      	lsls	r5, r3, #31
{
 8003926:	b082      	sub	sp, #8
 8003928:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800392a:	d52f      	bpl.n	800398c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392c:	49ac      	ldr	r1, [pc, #688]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 800392e:	688a      	ldr	r2, [r1, #8]
 8003930:	f002 020c 	and.w	r2, r2, #12
 8003934:	2a04      	cmp	r2, #4
 8003936:	f000 80ea 	beq.w	8003b0e <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800393a:	688a      	ldr	r2, [r1, #8]
 800393c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003940:	2a08      	cmp	r2, #8
 8003942:	f000 80e0 	beq.w	8003b06 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003946:	6863      	ldr	r3, [r4, #4]
 8003948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394c:	f000 80e9 	beq.w	8003b22 <HAL_RCC_OscConfig+0x20a>
 8003950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003954:	f000 8178 	beq.w	8003c48 <HAL_RCC_OscConfig+0x330>
 8003958:	4da1      	ldr	r5, [pc, #644]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 800395a:	682a      	ldr	r2, [r5, #0]
 800395c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003960:	602a      	str	r2, [r5, #0]
 8003962:	682a      	ldr	r2, [r5, #0]
 8003964:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003968:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800396a:	2b00      	cmp	r3, #0
 800396c:	f040 80de 	bne.w	8003b2c <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7fe fa08 	bl	8001d84 <HAL_GetTick>
 8003974:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003976:	e005      	b.n	8003984 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003978:	f7fe fa04 	bl	8001d84 <HAL_GetTick>
 800397c:	1b80      	subs	r0, r0, r6
 800397e:	2864      	cmp	r0, #100	; 0x64
 8003980:	f200 80f2 	bhi.w	8003b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003984:	682b      	ldr	r3, [r5, #0]
 8003986:	039b      	lsls	r3, r3, #14
 8003988:	d4f6      	bmi.n	8003978 <HAL_RCC_OscConfig+0x60>
 800398a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800398c:	079f      	lsls	r7, r3, #30
 800398e:	d475      	bmi.n	8003a7c <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003990:	071a      	lsls	r2, r3, #28
 8003992:	d515      	bpl.n	80039c0 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003994:	6963      	ldr	r3, [r4, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80a5 	beq.w	8003ae6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800399c:	4b91      	ldr	r3, [pc, #580]	; (8003be4 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800399e:	4d90      	ldr	r5, [pc, #576]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 80039a0:	2201      	movs	r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80039a4:	f7fe f9ee 	bl	8001d84 <HAL_GetTick>
 80039a8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039aa:	e005      	b.n	80039b8 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039ac:	f7fe f9ea 	bl	8001d84 <HAL_GetTick>
 80039b0:	1b80      	subs	r0, r0, r6
 80039b2:	2802      	cmp	r0, #2
 80039b4:	f200 80d8 	bhi.w	8003b68 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80039ba:	079b      	lsls	r3, r3, #30
 80039bc:	d5f6      	bpl.n	80039ac <HAL_RCC_OscConfig+0x94>
 80039be:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c0:	0758      	lsls	r0, r3, #29
 80039c2:	d53b      	bpl.n	8003a3c <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c4:	4a86      	ldr	r2, [pc, #536]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 80039c6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80039c8:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80039cc:	f040 80db 	bne.w	8003b86 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6413      	str	r3, [r2, #64]	; 0x40
 80039da:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80039e4:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e6:	4d80      	ldr	r5, [pc, #512]	; (8003be8 <HAL_RCC_OscConfig+0x2d0>)
 80039e8:	682a      	ldr	r2, [r5, #0]
 80039ea:	05d1      	lsls	r1, r2, #23
 80039ec:	f140 80ac 	bpl.w	8003b48 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f0:	68a3      	ldr	r3, [r4, #8]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	f000 80c9 	beq.w	8003b8a <HAL_RCC_OscConfig+0x272>
 80039f8:	2b05      	cmp	r3, #5
 80039fa:	f000 812f 	beq.w	8003c5c <HAL_RCC_OscConfig+0x344>
 80039fe:	4d78      	ldr	r5, [pc, #480]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 8003a00:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003a02:	f022 0201 	bic.w	r2, r2, #1
 8003a06:	672a      	str	r2, [r5, #112]	; 0x70
 8003a08:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003a0a:	f022 0204 	bic.w	r2, r2, #4
 8003a0e:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f040 80bf 	bne.w	8003b94 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a16:	f7fe f9b5 	bl	8001d84 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a1e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	e006      	b.n	8003a30 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a22:	f7fe f9af 	bl	8001d84 <HAL_GetTick>
 8003a26:	eba0 0008 	sub.w	r0, r0, r8
 8003a2a:	42b8      	cmp	r0, r7
 8003a2c:	f200 809c 	bhi.w	8003b68 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a32:	0798      	lsls	r0, r3, #30
 8003a34:	d4f5      	bmi.n	8003a22 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a36:	2e00      	cmp	r6, #0
 8003a38:	f040 80dc 	bne.w	8003bf4 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a3c:	69a0      	ldr	r0, [r4, #24]
 8003a3e:	b1c8      	cbz	r0, 8003a74 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a40:	4d67      	ldr	r5, [pc, #412]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 8003a42:	68aa      	ldr	r2, [r5, #8]
 8003a44:	f002 020c 	and.w	r2, r2, #12
 8003a48:	2a08      	cmp	r2, #8
 8003a4a:	f000 80d9 	beq.w	8003c00 <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4e:	4a67      	ldr	r2, [pc, #412]	; (8003bec <HAL_RCC_OscConfig+0x2d4>)
 8003a50:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a52:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003a54:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a56:	f000 810b 	beq.w	8003c70 <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fe f993 	bl	8001d84 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8003a60:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	e004      	b.n	8003a6e <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a64:	f7fe f98e 	bl	8001d84 <HAL_GetTick>
 8003a68:	1b40      	subs	r0, r0, r5
 8003a6a:	2802      	cmp	r0, #2
 8003a6c:	d87c      	bhi.n	8003b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	d4f7      	bmi.n	8003a64 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003a74:	2000      	movs	r0, #0
}
 8003a76:	b002      	add	sp, #8
 8003a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a7c:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 8003a7e:	6891      	ldr	r1, [r2, #8]
 8003a80:	f011 0f0c 	tst.w	r1, #12
 8003a84:	d024      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a86:	6891      	ldr	r1, [r2, #8]
 8003a88:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8c:	2908      	cmp	r1, #8
 8003a8e:	d01c      	beq.n	8003aca <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a90:	68e3      	ldr	r3, [r4, #12]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 8092 	beq.w	8003bbc <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8003a98:	4b55      	ldr	r3, [pc, #340]	; (8003bf0 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4d51      	ldr	r5, [pc, #324]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003aa0:	f7fe f970 	bl	8001d84 <HAL_GetTick>
 8003aa4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	e004      	b.n	8003ab2 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aa8:	f7fe f96c 	bl	8001d84 <HAL_GetTick>
 8003aac:	1b80      	subs	r0, r0, r6
 8003aae:	2802      	cmp	r0, #2
 8003ab0:	d85a      	bhi.n	8003b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab2:	682b      	ldr	r3, [r5, #0]
 8003ab4:	0798      	lsls	r0, r3, #30
 8003ab6:	d5f7      	bpl.n	8003aa8 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	6922      	ldr	r2, [r4, #16]
 8003abc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003ac0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003ac4:	602b      	str	r3, [r5, #0]
 8003ac6:	6823      	ldr	r3, [r4, #0]
 8003ac8:	e762      	b.n	8003990 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aca:	6852      	ldr	r2, [r2, #4]
 8003acc:	0256      	lsls	r6, r2, #9
 8003ace:	d4df      	bmi.n	8003a90 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad0:	4a43      	ldr	r2, [pc, #268]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	0795      	lsls	r5, r2, #30
 8003ad6:	d54b      	bpl.n	8003b70 <HAL_RCC_OscConfig+0x258>
 8003ad8:	68e2      	ldr	r2, [r4, #12]
 8003ada:	2a01      	cmp	r2, #1
 8003adc:	d048      	beq.n	8003b70 <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 8003ade:	2001      	movs	r0, #1
}
 8003ae0:	b002      	add	sp, #8
 8003ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003ae6:	4a3f      	ldr	r2, [pc, #252]	; (8003be4 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae8:	4d3d      	ldr	r5, [pc, #244]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8003aea:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003aec:	f7fe f94a 	bl	8001d84 <HAL_GetTick>
 8003af0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af2:	e004      	b.n	8003afe <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003af4:	f7fe f946 	bl	8001d84 <HAL_GetTick>
 8003af8:	1b80      	subs	r0, r0, r6
 8003afa:	2802      	cmp	r0, #2
 8003afc:	d834      	bhi.n	8003b68 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003afe:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8003b00:	079f      	lsls	r7, r3, #30
 8003b02:	d4f7      	bmi.n	8003af4 <HAL_RCC_OscConfig+0x1dc>
 8003b04:	e75b      	b.n	80039be <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b06:	684a      	ldr	r2, [r1, #4]
 8003b08:	0250      	lsls	r0, r2, #9
 8003b0a:	f57f af1c 	bpl.w	8003946 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	0391      	lsls	r1, r2, #14
 8003b14:	f57f af3a 	bpl.w	800398c <HAL_RCC_OscConfig+0x74>
 8003b18:	6862      	ldr	r2, [r4, #4]
 8003b1a:	2a00      	cmp	r2, #0
 8003b1c:	f47f af36 	bne.w	800398c <HAL_RCC_OscConfig+0x74>
 8003b20:	e7dd      	b.n	8003ade <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b22:	4a2f      	ldr	r2, [pc, #188]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 8003b24:	6813      	ldr	r3, [r2, #0]
 8003b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003b2c:	f7fe f92a 	bl	8001d84 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b30:	4d2b      	ldr	r5, [pc, #172]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8003b32:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b34:	e004      	b.n	8003b40 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b36:	f7fe f925 	bl	8001d84 <HAL_GetTick>
 8003b3a:	1b80      	subs	r0, r0, r6
 8003b3c:	2864      	cmp	r0, #100	; 0x64
 8003b3e:	d813      	bhi.n	8003b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b40:	682b      	ldr	r3, [r5, #0]
 8003b42:	039a      	lsls	r2, r3, #14
 8003b44:	d5f7      	bpl.n	8003b36 <HAL_RCC_OscConfig+0x21e>
 8003b46:	e720      	b.n	800398a <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b48:	682a      	ldr	r2, [r5, #0]
 8003b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b4e:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8003b50:	f7fe f918 	bl	8001d84 <HAL_GetTick>
 8003b54:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	682b      	ldr	r3, [r5, #0]
 8003b58:	05da      	lsls	r2, r3, #23
 8003b5a:	f53f af49 	bmi.w	80039f0 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b5e:	f7fe f911 	bl	8001d84 <HAL_GetTick>
 8003b62:	1bc0      	subs	r0, r0, r7
 8003b64:	2802      	cmp	r0, #2
 8003b66:	d9f6      	bls.n	8003b56 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8003b68:	2003      	movs	r0, #3
}
 8003b6a:	b002      	add	sp, #8
 8003b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	491b      	ldr	r1, [pc, #108]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 8003b72:	6920      	ldr	r0, [r4, #16]
 8003b74:	680a      	ldr	r2, [r1, #0]
 8003b76:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8003b7a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003b7e:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b80:	e706      	b.n	8003990 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8003b82:	2001      	movs	r0, #1
}
 8003b84:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8003b86:	2600      	movs	r6, #0
 8003b88:	e72d      	b.n	80039e6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
 8003b8c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003b94:	f7fe f8f6 	bl	8001d84 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b98:	4d11      	ldr	r5, [pc, #68]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8003b9a:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	e005      	b.n	8003bae <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ba2:	f7fe f8ef 	bl	8001d84 <HAL_GetTick>
 8003ba6:	eba0 0008 	sub.w	r0, r0, r8
 8003baa:	42b8      	cmp	r0, r7
 8003bac:	d8dc      	bhi.n	8003b68 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003bb0:	079b      	lsls	r3, r3, #30
 8003bb2:	d5f6      	bpl.n	8003ba2 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8003bb4:	2e00      	cmp	r6, #0
 8003bb6:	f43f af41 	beq.w	8003a3c <HAL_RCC_OscConfig+0x124>
 8003bba:	e01b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8003bbc:	4a0c      	ldr	r2, [pc, #48]	; (8003bf0 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bbe:	4d08      	ldr	r5, [pc, #32]	; (8003be0 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8003bc0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003bc2:	f7fe f8df 	bl	8001d84 <HAL_GetTick>
 8003bc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc8:	e004      	b.n	8003bd4 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bca:	f7fe f8db 	bl	8001d84 <HAL_GetTick>
 8003bce:	1b80      	subs	r0, r0, r6
 8003bd0:	2802      	cmp	r0, #2
 8003bd2:	d8c9      	bhi.n	8003b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bd4:	682b      	ldr	r3, [r5, #0]
 8003bd6:	0799      	lsls	r1, r3, #30
 8003bd8:	d4f7      	bmi.n	8003bca <HAL_RCC_OscConfig+0x2b2>
 8003bda:	6823      	ldr	r3, [r4, #0]
 8003bdc:	e6d8      	b.n	8003990 <HAL_RCC_OscConfig+0x78>
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	42470e80 	.word	0x42470e80
 8003be8:	40007000 	.word	0x40007000
 8003bec:	42470060 	.word	0x42470060
 8003bf0:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bf4:	4a35      	ldr	r2, [pc, #212]	; (8003ccc <HAL_RCC_OscConfig+0x3b4>)
 8003bf6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfe:	e71d      	b.n	8003a3c <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c00:	2801      	cmp	r0, #1
 8003c02:	f43f af6d 	beq.w	8003ae0 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->CFGR;
 8003c06:	68ab      	ldr	r3, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c08:	69e2      	ldr	r2, [r4, #28]
 8003c0a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8003c0e:	4291      	cmp	r1, r2
 8003c10:	f47f af65 	bne.w	8003ade <HAL_RCC_OscConfig+0x1c6>
 8003c14:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c16:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c1a:	4291      	cmp	r1, r2
 8003c1c:	f47f af5f 	bne.w	8003ade <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c20:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c24:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c26:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c28:	428a      	cmp	r2, r1
 8003c2a:	f47f af58 	bne.w	8003ade <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c30:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c34:	4291      	cmp	r1, r2
 8003c36:	f47f af52 	bne.w	8003ade <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c3c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8003c40:	1a18      	subs	r0, r3, r0
 8003c42:	bf18      	it	ne
 8003c44:	2001      	movne	r0, #1
 8003c46:	e74b      	b.n	8003ae0 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c48:	4b20      	ldr	r3, [pc, #128]	; (8003ccc <HAL_RCC_OscConfig+0x3b4>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e767      	b.n	8003b2c <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ccc <HAL_RCC_OscConfig+0x3b4>)
 8003c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c60:	f042 0204 	orr.w	r2, r2, #4
 8003c64:	671a      	str	r2, [r3, #112]	; 0x70
 8003c66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	671a      	str	r2, [r3, #112]	; 0x70
 8003c6e:	e791      	b.n	8003b94 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8003c70:	f7fe f888 	bl	8001d84 <HAL_GetTick>
 8003c74:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	e005      	b.n	8003c84 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fe f884 	bl	8001d84 <HAL_GetTick>
 8003c7c:	1b80      	subs	r0, r0, r6
 8003c7e:	2802      	cmp	r0, #2
 8003c80:	f63f af72 	bhi.w	8003b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	0199      	lsls	r1, r3, #6
 8003c88:	d4f6      	bmi.n	8003c78 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c8a:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8003c8e:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8003c92:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c94:	4c0d      	ldr	r4, [pc, #52]	; (8003ccc <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c96:	4333      	orrs	r3, r6
 8003c98:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8003c9c:	0852      	lsrs	r2, r2, #1
 8003c9e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003ca2:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003ca4:	490a      	ldr	r1, [pc, #40]	; (8003cd0 <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003caa:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003cae:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f868 	bl	8001d84 <HAL_GetTick>
 8003cb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb6:	e005      	b.n	8003cc4 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cb8:	f7fe f864 	bl	8001d84 <HAL_GetTick>
 8003cbc:	1b40      	subs	r0, r0, r5
 8003cbe:	2802      	cmp	r0, #2
 8003cc0:	f63f af52 	bhi.w	8003b68 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc4:	6823      	ldr	r3, [r4, #0]
 8003cc6:	019a      	lsls	r2, r3, #6
 8003cc8:	d5f6      	bpl.n	8003cb8 <HAL_RCC_OscConfig+0x3a0>
 8003cca:	e6d3      	b.n	8003a74 <HAL_RCC_OscConfig+0x15c>
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	42470060 	.word	0x42470060

08003cd4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd4:	4917      	ldr	r1, [pc, #92]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8003cd6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cd8:	688b      	ldr	r3, [r1, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d01b      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0x46>
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d117      	bne.n	8003d16 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ce8:	684b      	ldr	r3, [r1, #4]
 8003cea:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cf2:	d114      	bne.n	8003d1e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf4:	6849      	ldr	r1, [r1, #4]
 8003cf6:	4810      	ldr	r0, [pc, #64]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x64>)
 8003cf8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003cfc:	fba1 0100 	umull	r0, r1, r1, r0
 8003d00:	f7fc ff1e 	bl	8000b40 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d04:	4b0b      	ldr	r3, [pc, #44]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x60>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003d10:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003d14:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8003d16:	4808      	ldr	r0, [pc, #32]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003d18:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8003d1a:	4808      	ldr	r0, [pc, #32]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x68>)
}
 8003d1c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d1e:	684b      	ldr	r3, [r1, #4]
 8003d20:	4806      	ldr	r0, [pc, #24]	; (8003d3c <HAL_RCC_GetSysClockFreq+0x68>)
 8003d22:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003d26:	fba3 0100 	umull	r0, r1, r3, r0
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	f7fc ff08 	bl	8000b40 <__aeabi_uldivmod>
 8003d30:	e7e8      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x30>
 8003d32:	bf00      	nop
 8003d34:	40023800 	.word	0x40023800
 8003d38:	00f42400 	.word	0x00f42400
 8003d3c:	007a1200 	.word	0x007a1200

08003d40 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003d40:	b160      	cbz	r0, 8003d5c <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d42:	4a49      	ldr	r2, [pc, #292]	; (8003e68 <HAL_RCC_ClockConfig+0x128>)
 8003d44:	6813      	ldr	r3, [r2, #0]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	428b      	cmp	r3, r1
 8003d4c:	d208      	bcs.n	8003d60 <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4e:	b2cb      	uxtb	r3, r1
 8003d50:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	6813      	ldr	r3, [r2, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	428b      	cmp	r3, r1
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8003d5c:	2001      	movs	r0, #1
}
 8003d5e:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	6803      	ldr	r3, [r0, #0]
{
 8003d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d66:	079d      	lsls	r5, r3, #30
 8003d68:	d514      	bpl.n	8003d94 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6a:	075c      	lsls	r4, r3, #29
 8003d6c:	d504      	bpl.n	8003d78 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d6e:	4c3f      	ldr	r4, [pc, #252]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003d70:	68a2      	ldr	r2, [r4, #8]
 8003d72:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8003d76:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d78:	071a      	lsls	r2, r3, #28
 8003d7a:	d504      	bpl.n	8003d86 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d7c:	4c3b      	ldr	r4, [pc, #236]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003d7e:	68a2      	ldr	r2, [r4, #8]
 8003d80:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8003d84:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d86:	4c39      	ldr	r4, [pc, #228]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003d88:	6885      	ldr	r5, [r0, #8]
 8003d8a:	68a2      	ldr	r2, [r4, #8]
 8003d8c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003d90:	432a      	orrs	r2, r5
 8003d92:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d94:	07df      	lsls	r7, r3, #31
 8003d96:	4604      	mov	r4, r0
 8003d98:	460d      	mov	r5, r1
 8003d9a:	d522      	bpl.n	8003de2 <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d9c:	6842      	ldr	r2, [r0, #4]
 8003d9e:	2a01      	cmp	r2, #1
 8003da0:	d057      	beq.n	8003e52 <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003da2:	1e93      	subs	r3, r2, #2
 8003da4:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da6:	4b31      	ldr	r3, [pc, #196]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003daa:	d959      	bls.n	8003e60 <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dac:	0799      	lsls	r1, r3, #30
 8003dae:	d525      	bpl.n	8003dfc <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003db0:	4e2e      	ldr	r6, [pc, #184]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003db2:	68b3      	ldr	r3, [r6, #8]
 8003db4:	f023 0303 	bic.w	r3, r3, #3
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003dbc:	f7fd ffe2 	bl	8001d84 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003dc4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	e005      	b.n	8003dd4 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc8:	f7fd ffdc 	bl	8001d84 <HAL_GetTick>
 8003dcc:	eba0 0008 	sub.w	r0, r0, r8
 8003dd0:	42b8      	cmp	r0, r7
 8003dd2:	d843      	bhi.n	8003e5c <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd4:	68b3      	ldr	r3, [r6, #8]
 8003dd6:	6862      	ldr	r2, [r4, #4]
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003de0:	d1f2      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003de2:	4a21      	ldr	r2, [pc, #132]	; (8003e68 <HAL_RCC_ClockConfig+0x128>)
 8003de4:	6813      	ldr	r3, [r2, #0]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	42ab      	cmp	r3, r5
 8003dec:	d909      	bls.n	8003e02 <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dee:	b2eb      	uxtb	r3, r5
 8003df0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	6813      	ldr	r3, [r2, #0]
 8003df4:	f003 030f 	and.w	r3, r3, #15
 8003df8:	42ab      	cmp	r3, r5
 8003dfa:	d002      	beq.n	8003e02 <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8003dfc:	2001      	movs	r0, #1
}
 8003dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	075a      	lsls	r2, r3, #29
 8003e06:	d506      	bpl.n	8003e16 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e08:	4918      	ldr	r1, [pc, #96]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003e0a:	68e0      	ldr	r0, [r4, #12]
 8003e0c:	688a      	ldr	r2, [r1, #8]
 8003e0e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8003e12:	4302      	orrs	r2, r0
 8003e14:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e16:	071b      	lsls	r3, r3, #28
 8003e18:	d412      	bmi.n	8003e40 <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e1a:	f7ff ff5b 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8003e1e:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003e20:	4c13      	ldr	r4, [pc, #76]	; (8003e70 <HAL_RCC_ClockConfig+0x130>)
 8003e22:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8003e24:	4913      	ldr	r1, [pc, #76]	; (8003e74 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e26:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <HAL_RCC_ClockConfig+0x138>)
 8003e28:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003e2c:	5ce3      	ldrb	r3, [r4, r3]
 8003e2e:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8003e32:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e34:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8003e36:	f7fd ff5b 	bl	8001cf0 <HAL_InitTick>
  return HAL_OK;
 8003e3a:	2000      	movs	r0, #0
}
 8003e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e40:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003e42:	6921      	ldr	r1, [r4, #16]
 8003e44:	6893      	ldr	r3, [r2, #8]
 8003e46:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003e4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003e4e:	6093      	str	r3, [r2, #8]
 8003e50:	e7e3      	b.n	8003e1a <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b06      	ldr	r3, [pc, #24]	; (8003e6c <HAL_RCC_ClockConfig+0x12c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	039e      	lsls	r6, r3, #14
 8003e58:	d4aa      	bmi.n	8003db0 <HAL_RCC_ClockConfig+0x70>
 8003e5a:	e7cf      	b.n	8003dfc <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8003e5c:	2003      	movs	r0, #3
 8003e5e:	e7ed      	b.n	8003e3c <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e60:	0198      	lsls	r0, r3, #6
 8003e62:	d4a5      	bmi.n	8003db0 <HAL_RCC_ClockConfig+0x70>
 8003e64:	e7ca      	b.n	8003dfc <HAL_RCC_ClockConfig+0xbc>
 8003e66:	bf00      	nop
 8003e68:	40023c00 	.word	0x40023c00
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	08007ab0 	.word	0x08007ab0
 8003e74:	20000010 	.word	0x20000010
 8003e78:	20000008 	.word	0x20000008

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e7c:	4b04      	ldr	r3, [pc, #16]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003e7e:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003e80:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003e82:	4905      	ldr	r1, [pc, #20]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e84:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003e88:	6808      	ldr	r0, [r1, #0]
 8003e8a:	5cd3      	ldrb	r3, [r2, r3]
}
 8003e8c:	40d8      	lsrs	r0, r3
 8003e8e:	4770      	bx	lr
 8003e90:	40023800 	.word	0x40023800
 8003e94:	08007ac0 	.word	0x08007ac0
 8003e98:	20000008 	.word	0x20000008

08003e9c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e9c:	4b04      	ldr	r3, [pc, #16]	; (8003eb0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8003e9e:	4a05      	ldr	r2, [pc, #20]	; (8003eb4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8003ea2:	4905      	ldr	r1, [pc, #20]	; (8003eb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ea4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003ea8:	6808      	ldr	r0, [r1, #0]
 8003eaa:	5cd3      	ldrb	r3, [r2, r3]
}
 8003eac:	40d8      	lsrs	r0, r3
 8003eae:	4770      	bx	lr
 8003eb0:	40023800 	.word	0x40023800
 8003eb4:	08007ac0 	.word	0x08007ac0
 8003eb8:	20000008 	.word	0x20000008

08003ebc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ebe:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ec0:	6800      	ldr	r0, [r0, #0]
 8003ec2:	f010 0f05 	tst.w	r0, #5
{
 8003ec6:	b083      	sub	sp, #12
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ec8:	d15c      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003eca:	f010 0002 	ands.w	r0, r0, #2
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x18>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8003ed0:	b003      	add	sp, #12
 8003ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ed4:	4b45      	ldr	r3, [pc, #276]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
    PWR->CR |= PWR_CR_DBP;
 8003ed6:	4c46      	ldr	r4, [pc, #280]	; (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ed8:	2200      	movs	r2, #0
 8003eda:	9201      	str	r2, [sp, #4]
 8003edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ede:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	9301      	str	r3, [sp, #4]
 8003eec:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef4:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003ef6:	f7fd ff45 	bl	8001d84 <HAL_GetTick>
 8003efa:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003efc:	e004      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003efe:	f7fd ff41 	bl	8001d84 <HAL_GetTick>
 8003f02:	1b80      	subs	r0, r0, r6
 8003f04:	2802      	cmp	r0, #2
 8003f06:	d83a      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	05d9      	lsls	r1, r3, #23
 8003f0c:	d5f7      	bpl.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x42>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f0e:	4937      	ldr	r1, [pc, #220]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f10:	68eb      	ldr	r3, [r5, #12]
 8003f12:	6f0a      	ldr	r2, [r1, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f14:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8003f18:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8003f1c:	d010      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x84>
 8003f1e:	4282      	cmp	r2, r0
 8003f20:	d00e      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x84>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f22:	6f0b      	ldr	r3, [r1, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f24:	4a33      	ldr	r2, [pc, #204]	; (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x138>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f2a:	2401      	movs	r4, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f2c:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f2e:	6014      	str	r4, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f30:	6010      	str	r0, [r2, #0]
      RCC->BDCR = tmpreg1;
 8003f32:	670b      	str	r3, [r1, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f34:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003f36:	07da      	lsls	r2, r3, #31
 8003f38:	d413      	bmi.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8003f3a:	68eb      	ldr	r3, [r5, #12]
 8003f3c:	f403 7040 	and.w	r0, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f40:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8003f44:	d047      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8003f46:	4929      	ldr	r1, [pc, #164]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f48:	688a      	ldr	r2, [r1, #8]
 8003f4a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003f4e:	608a      	str	r2, [r1, #8]
 8003f50:	4a26      	ldr	r2, [pc, #152]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f52:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f58:	430b      	orrs	r3, r1
  return HAL_OK;
 8003f5a:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f5c:	6713      	str	r3, [r2, #112]	; 0x70
}
 8003f5e:	b003      	add	sp, #12
 8003f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	460c      	mov	r4, r1
        tickstart = HAL_GetTick();
 8003f64:	f7fd ff0e 	bl	8001d84 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f68:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003f6c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f6e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8003f70:	079b      	lsls	r3, r3, #30
 8003f72:	d4e2      	bmi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f74:	f7fd ff06 	bl	8001d84 <HAL_GetTick>
 8003f78:	1bc0      	subs	r0, r0, r7
 8003f7a:	42b0      	cmp	r0, r6
 8003f7c:	d9f7      	bls.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        return HAL_TIMEOUT;
 8003f7e:	2003      	movs	r0, #3
}
 8003f80:	b003      	add	sp, #12
 8003f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8003f84:	4b1c      	ldr	r3, [pc, #112]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f86:	4c19      	ldr	r4, [pc, #100]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_DISABLE();
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8003f8c:	f7fd fefa 	bl	8001d84 <HAL_GetTick>
 8003f90:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f92:	e004      	b.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f94:	f7fd fef6 	bl	8001d84 <HAL_GetTick>
 8003f98:	1b80      	subs	r0, r0, r6
 8003f9a:	2802      	cmp	r0, #2
 8003f9c:	d8ef      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	011f      	lsls	r7, r3, #4
 8003fa2:	d4f7      	bmi.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fa4:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    __HAL_RCC_PLLI2S_ENABLE();
 8003fa8:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003faa:	4e10      	ldr	r6, [pc, #64]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fac:	071b      	lsls	r3, r3, #28
 8003fae:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 8003fb2:	2101      	movs	r1, #1
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fb4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8003fb8:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8003fba:	f7fd fee3 	bl	8001d84 <HAL_GetTick>
 8003fbe:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fc0:	e004      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x110>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fc2:	f7fd fedf 	bl	8001d84 <HAL_GetTick>
 8003fc6:	1b00      	subs	r0, r0, r4
 8003fc8:	2802      	cmp	r0, #2
 8003fca:	d8d8      	bhi.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fcc:	6833      	ldr	r3, [r6, #0]
 8003fce:	0118      	lsls	r0, r3, #4
 8003fd0:	d5f7      	bpl.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003fd2:	6828      	ldr	r0, [r5, #0]
 8003fd4:	e779      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xe>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fd6:	4805      	ldr	r0, [pc, #20]	; (8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd8:	6882      	ldr	r2, [r0, #8]
 8003fda:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003fde:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003fe2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	6082      	str	r2, [r0, #8]
 8003fea:	e7b1      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x94>
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	42470e40 	.word	0x42470e40
 8003ff8:	42470068 	.word	0x42470068

08003ffc <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8003ffc:	2801      	cmp	r0, #1
 8003ffe:	d109      	bne.n	8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004000:	4a12      	ldr	r2, [pc, #72]	; (800404c <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8004002:	6893      	ldr	r3, [r2, #8]
      switch (srcclk)
 8004004:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8004008:	d006      	beq.n	8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 800400a:	2b01      	cmp	r3, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800400c:	4810      	ldr	r0, [pc, #64]	; (8004050 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 800400e:	bf18      	it	ne
 8004010:	2000      	movne	r0, #0
 8004012:	4770      	bx	lr
 8004014:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8004016:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004018:	6853      	ldr	r3, [r2, #4]
 800401a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800401e:	6853      	ldr	r3, [r2, #4]
 8004020:	bf14      	ite	ne
 8004022:	480c      	ldrne	r0, [pc, #48]	; (8004054 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004024:	480c      	ldreq	r0, [pc, #48]	; (8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>)
 8004026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800402a:	fbb0 f0f3 	udiv	r0, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800402e:	4b07      	ldr	r3, [pc, #28]	; (800404c <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8004030:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004038:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800403c:	fb00 f002 	mul.w	r0, r0, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004040:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8004044:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	40023800 	.word	0x40023800
 8004050:	00bb8000 	.word	0x00bb8000
 8004054:	007a1200 	.word	0x007a1200
 8004058:	00f42400 	.word	0x00f42400

0800405c <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800405c:	2800      	cmp	r0, #0
 800405e:	d03b      	beq.n	80040d8 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004060:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004064:	2300      	movs	r3, #0
{
 8004066:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004068:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800406c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004070:	b362      	cbz	r2, 80040cc <HAL_SPI_Init+0x70>
 8004072:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004074:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8004078:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800407c:	432b      	orrs	r3, r5
 800407e:	4313      	orrs	r3, r2
 8004080:	6962      	ldr	r2, [r4, #20]
 8004082:	69e5      	ldr	r5, [r4, #28]
 8004084:	6a26      	ldr	r6, [r4, #32]
 8004086:	430b      	orrs	r3, r1
 8004088:	4313      	orrs	r3, r2
 800408a:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800408c:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800408e:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8004090:	2502      	movs	r5, #2
 8004092:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004096:	4333      	orrs	r3, r6
 8004098:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 800409c:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800409e:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040a0:	0c12      	lsrs	r2, r2, #16
 80040a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80040a4:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80040a8:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040aa:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 80040ac:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 80040b0:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80040b2:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80040b4:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040b6:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040b8:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 80040be:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040c0:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 80040c2:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040c4:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040c6:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 80040ca:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80040cc:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80040d0:	f7fd fc3c 	bl	800194c <HAL_SPI_MspInit>
 80040d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80040d6:	e7cd      	b.n	8004074 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80040d8:	2001      	movs	r0, #1
}
 80040da:	4770      	bx	lr

080040dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040dc:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040de:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040e0:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 80040e2:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040e4:	4d14      	ldr	r5, [pc, #80]	; (8004138 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040e6:	f024 0401 	bic.w	r4, r4, #1
 80040ea:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80040ec:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80040ee:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80040f0:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 80040f2:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040fa:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80040fc:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 8004100:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004104:	d00a      	beq.n	800411c <TIM_OC1_SetConfig+0x40>
 8004106:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800410a:	42a8      	cmp	r0, r5
 800410c:	d006      	beq.n	800411c <TIM_OC1_SetConfig+0x40>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800410e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004110:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004112:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004114:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8004116:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8004118:	6203      	str	r3, [r0, #32]
}
 800411a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800411c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800411e:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004122:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004124:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004128:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800412c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800412e:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004132:	432c      	orrs	r4, r5
 8004134:	e7eb      	b.n	800410e <TIM_OC1_SetConfig+0x32>
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000

0800413c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800413c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800413e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004140:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8004142:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004144:	4d15      	ldr	r5, [pc, #84]	; (800419c <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004146:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 800414a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 800414c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800414e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8004150:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8004152:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004156:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800415a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800415c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8004160:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004164:	d00a      	beq.n	800417c <TIM_OC3_SetConfig+0x40>
 8004166:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800416a:	42a8      	cmp	r0, r5
 800416c:	d006      	beq.n	800417c <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800416e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004170:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004172:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004174:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8004176:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004178:	6203      	str	r3, [r0, #32]
}
 800417a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800417c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800417e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004182:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004186:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800418a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800418e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004190:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004194:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8004198:	e7e9      	b.n	800416e <TIM_OC3_SetConfig+0x32>
 800419a:	bf00      	nop
 800419c:	40010000 	.word	0x40010000

080041a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041a0:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041a2:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041a4:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041a6:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041a8:	4d10      	ldr	r5, [pc, #64]	; (80041ec <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041aa:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80041ae:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80041b0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80041b2:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 80041b4:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80041b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041ba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041be:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041c0:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041c4:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041c8:	d00a      	beq.n	80041e0 <TIM_OC4_SetConfig+0x40>
 80041ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80041ce:	42a8      	cmp	r0, r5
 80041d0:	d006      	beq.n	80041e0 <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80041d4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80041d6:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80041d8:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 80041da:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80041dc:	6203      	str	r3, [r0, #32]
}
 80041de:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041e0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041e2:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041e6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80041ea:	e7f2      	b.n	80041d2 <TIM_OC4_SetConfig+0x32>
 80041ec:	40010000 	.word	0x40010000

080041f0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041f0:	6803      	ldr	r3, [r0, #0]
 80041f2:	68da      	ldr	r2, [r3, #12]
 80041f4:	f042 0201 	orr.w	r2, r2, #1
 80041f8:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004200:	2a06      	cmp	r2, #6
 8004202:	d003      	beq.n	800420c <HAL_TIM_Base_Start_IT+0x1c>
    __HAL_TIM_ENABLE(htim);
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	f042 0201 	orr.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
}
 800420c:	2000      	movs	r0, #0
 800420e:	4770      	bx	lr

08004210 <HAL_TIM_OC_Start>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004210:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004212:	2201      	movs	r2, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004214:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004216:	f001 011f 	and.w	r1, r1, #31
 800421a:	fa02 f101 	lsl.w	r1, r2, r1
  TIMx->CCER &= ~tmp;
 800421e:	ea20 0001 	bic.w	r0, r0, r1
{
 8004222:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8004224:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004226:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004228:	4c0c      	ldr	r4, [pc, #48]	; (800425c <HAL_TIM_OC_Start+0x4c>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800422a:	4311      	orrs	r1, r2
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800422c:	42a3      	cmp	r3, r4
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800422e:	6219      	str	r1, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004230:	d00f      	beq.n	8004252 <HAL_TIM_OC_Start+0x42>
 8004232:	4a0b      	ldr	r2, [pc, #44]	; (8004260 <HAL_TIM_OC_Start+0x50>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d00c      	beq.n	8004252 <HAL_TIM_OC_Start+0x42>
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004238:	689a      	ldr	r2, [r3, #8]
 800423a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423e:	2a06      	cmp	r2, #6
 8004240:	d003      	beq.n	800424a <HAL_TIM_OC_Start+0x3a>
    __HAL_TIM_ENABLE(htim);
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	f042 0201 	orr.w	r2, r2, #1
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	2000      	movs	r0, #0
 800424c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004250:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 8004252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004254:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004258:	645a      	str	r2, [r3, #68]	; 0x44
 800425a:	e7ed      	b.n	8004238 <HAL_TIM_OC_Start+0x28>
 800425c:	40010000 	.word	0x40010000
 8004260:	40010400 	.word	0x40010400

08004264 <HAL_TIM_PWM_Start>:
 8004264:	f7ff bfd4 	b.w	8004210 <HAL_TIM_OC_Start>

08004268 <HAL_TIM_OC_DelayElapsedCallback>:
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop

0800426c <HAL_TIM_IC_CaptureCallback>:
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop

08004270 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop

08004274 <HAL_TIM_TriggerCallback>:
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop

08004278 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004278:	6803      	ldr	r3, [r0, #0]
 800427a:	691a      	ldr	r2, [r3, #16]
 800427c:	0791      	lsls	r1, r2, #30
{
 800427e:	b510      	push	{r4, lr}
 8004280:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004282:	d502      	bpl.n	800428a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	0792      	lsls	r2, r2, #30
 8004288:	d45f      	bmi.n	800434a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	0750      	lsls	r0, r2, #29
 800428e:	d502      	bpl.n	8004296 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	0751      	lsls	r1, r2, #29
 8004294:	d446      	bmi.n	8004324 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	0712      	lsls	r2, r2, #28
 800429a:	d502      	bpl.n	80042a2 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	0710      	lsls	r0, r2, #28
 80042a0:	d42e      	bmi.n	8004300 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042a2:	691a      	ldr	r2, [r3, #16]
 80042a4:	06d2      	lsls	r2, r2, #27
 80042a6:	d502      	bpl.n	80042ae <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	06d0      	lsls	r0, r2, #27
 80042ac:	d418      	bmi.n	80042e0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ae:	691a      	ldr	r2, [r3, #16]
 80042b0:	07d1      	lsls	r1, r2, #31
 80042b2:	d502      	bpl.n	80042ba <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	07d2      	lsls	r2, r2, #31
 80042b8:	d45d      	bmi.n	8004376 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ba:	691a      	ldr	r2, [r3, #16]
 80042bc:	0610      	lsls	r0, r2, #24
 80042be:	d502      	bpl.n	80042c6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	0611      	lsls	r1, r2, #24
 80042c4:	d45f      	bmi.n	8004386 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	0652      	lsls	r2, r2, #25
 80042ca:	d502      	bpl.n	80042d2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042cc:	68da      	ldr	r2, [r3, #12]
 80042ce:	0650      	lsls	r0, r2, #25
 80042d0:	d461      	bmi.n	8004396 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d2:	691a      	ldr	r2, [r3, #16]
 80042d4:	0691      	lsls	r1, r2, #26
 80042d6:	d502      	bpl.n	80042de <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	0692      	lsls	r2, r2, #26
 80042dc:	d443      	bmi.n	8004366 <HAL_TIM_IRQHandler+0xee>
}
 80042de:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042e0:	f06f 0210 	mvn.w	r2, #16
 80042e4:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e8:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042ea:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042ee:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80042f0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042f2:	d064      	beq.n	80043be <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80042f4:	f7ff ffba 	bl	800426c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042f8:	2200      	movs	r2, #0
 80042fa:	6823      	ldr	r3, [r4, #0]
 80042fc:	7722      	strb	r2, [r4, #28]
 80042fe:	e7d6      	b.n	80042ae <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004300:	f06f 0208 	mvn.w	r2, #8
 8004304:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004306:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004308:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800430a:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800430c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800430e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004310:	d152      	bne.n	80043b8 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004312:	f7ff ffa9 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004316:	4620      	mov	r0, r4
 8004318:	f7ff ffaa 	bl	8004270 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800431c:	2200      	movs	r2, #0
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	7722      	strb	r2, [r4, #28]
 8004322:	e7be      	b.n	80042a2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004324:	f06f 0204 	mvn.w	r2, #4
 8004328:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800432a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800432e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004332:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8004334:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004336:	d13c      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004338:	f7ff ff96 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	4620      	mov	r0, r4
 800433e:	f7ff ff97 	bl	8004270 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	2200      	movs	r2, #0
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	7722      	strb	r2, [r4, #28]
 8004348:	e7a5      	b.n	8004296 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800434a:	f06f 0202 	mvn.w	r2, #2
 800434e:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004350:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004352:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004354:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004356:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004358:	d025      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800435a:	f7ff ff87 	bl	800426c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	2200      	movs	r2, #0
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	7722      	strb	r2, [r4, #28]
 8004364:	e791      	b.n	800428a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004366:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800436a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800436c:	611a      	str	r2, [r3, #16]
}
 800436e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004372:	f000 b9c9 	b.w	8004708 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004376:	f06f 0201 	mvn.w	r2, #1
 800437a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800437c:	4620      	mov	r0, r4
 800437e:	f7fd f981 	bl	8001684 <HAL_TIM_PeriodElapsedCallback>
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	e799      	b.n	80042ba <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004386:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800438a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800438c:	4620      	mov	r0, r4
 800438e:	f000 f9bd 	bl	800470c <HAL_TIMEx_BreakCallback>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	e797      	b.n	80042c6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004396:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800439a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800439c:	4620      	mov	r0, r4
 800439e:	f7ff ff69 	bl	8004274 <HAL_TIM_TriggerCallback>
 80043a2:	6823      	ldr	r3, [r4, #0]
 80043a4:	e795      	b.n	80042d2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	f7ff ff5f 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043aa:	4620      	mov	r0, r4
 80043ac:	f7ff ff60 	bl	8004270 <HAL_TIM_PWM_PulseFinishedCallback>
 80043b0:	e7d5      	b.n	800435e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	f7ff ff5b 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 80043b6:	e7c4      	b.n	8004342 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 80043b8:	f7ff ff58 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 80043bc:	e7ae      	b.n	800431c <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043be:	f7ff ff53 	bl	8004268 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c2:	4620      	mov	r0, r4
 80043c4:	f7ff ff54 	bl	8004270 <HAL_TIM_PWM_PulseFinishedCallback>
 80043c8:	e796      	b.n	80042f8 <HAL_TIM_IRQHandler+0x80>
 80043ca:	bf00      	nop

080043cc <TIM_Base_SetConfig>:
{
 80043cc:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ce:	4e36      	ldr	r6, [pc, #216]	; (80044a8 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 80043d0:	6803      	ldr	r3, [r0, #0]
 80043d2:	694d      	ldr	r5, [r1, #20]
 80043d4:	688c      	ldr	r4, [r1, #8]
 80043d6:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d8:	42b0      	cmp	r0, r6
 80043da:	d055      	beq.n	8004488 <TIM_Base_SetConfig+0xbc>
 80043dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80043e0:	d029      	beq.n	8004436 <TIM_Base_SetConfig+0x6a>
 80043e2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80043e6:	42b0      	cmp	r0, r6
 80043e8:	d037      	beq.n	800445a <TIM_Base_SetConfig+0x8e>
 80043ea:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043ee:	42b0      	cmp	r0, r6
 80043f0:	d033      	beq.n	800445a <TIM_Base_SetConfig+0x8e>
 80043f2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80043f6:	42b0      	cmp	r0, r6
 80043f8:	d02f      	beq.n	800445a <TIM_Base_SetConfig+0x8e>
 80043fa:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80043fe:	42b0      	cmp	r0, r6
 8004400:	d02b      	beq.n	800445a <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004402:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8004406:	42b0      	cmp	r0, r6
 8004408:	d013      	beq.n	8004432 <TIM_Base_SetConfig+0x66>
 800440a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800440e:	42b0      	cmp	r0, r6
 8004410:	d00f      	beq.n	8004432 <TIM_Base_SetConfig+0x66>
 8004412:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004416:	42b0      	cmp	r0, r6
 8004418:	d00b      	beq.n	8004432 <TIM_Base_SetConfig+0x66>
 800441a:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 800441e:	42b0      	cmp	r0, r6
 8004420:	d007      	beq.n	8004432 <TIM_Base_SetConfig+0x66>
 8004422:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004426:	42b0      	cmp	r0, r6
 8004428:	d003      	beq.n	8004432 <TIM_Base_SetConfig+0x66>
 800442a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800442e:	42b0      	cmp	r0, r6
 8004430:	d109      	bne.n	8004446 <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004432:	68c9      	ldr	r1, [r1, #12]
 8004434:	e004      	b.n	8004440 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 8004436:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004438:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800443e:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004444:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800444c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800444e:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004450:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004452:	2301      	movs	r3, #1
 8004454:	6143      	str	r3, [r0, #20]
}
 8004456:	bcf0      	pop	{r4, r5, r6, r7}
 8004458:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800445a:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800445c:	4f13      	ldr	r7, [pc, #76]	; (80044ac <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800445e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004462:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004464:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004470:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004472:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 8004474:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004476:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004478:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800447a:	d1ea      	bne.n	8004452 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 800447c:	690b      	ldr	r3, [r1, #16]
 800447e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004480:	2301      	movs	r3, #1
 8004482:	6143      	str	r3, [r0, #20]
}
 8004484:	bcf0      	pop	{r4, r5, r6, r7}
 8004486:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8004488:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800448a:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800448c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004490:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8004492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004496:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800449c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800449e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044a0:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044a2:	6282      	str	r2, [r0, #40]	; 0x28
 80044a4:	e7ea      	b.n	800447c <TIM_Base_SetConfig+0xb0>
 80044a6:	bf00      	nop
 80044a8:	40010000 	.word	0x40010000
 80044ac:	40010400 	.word	0x40010400

080044b0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80044b0:	b1b8      	cbz	r0, 80044e2 <HAL_TIM_Base_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80044b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80044b6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80044b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044bc:	4604      	mov	r4, r0
 80044be:	b15b      	cbz	r3, 80044d8 <HAL_TIM_Base_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80044c0:	2302      	movs	r3, #2
 80044c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044c6:	6820      	ldr	r0, [r4, #0]
 80044c8:	1d21      	adds	r1, r4, #4
 80044ca:	f7ff ff7f 	bl	80043cc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80044d4:	2000      	movs	r0, #0
}
 80044d6:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80044d8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80044dc:	f7fd fa82 	bl	80019e4 <HAL_TIM_Base_MspInit>
 80044e0:	e7ee      	b.n	80044c0 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80044e2:	2001      	movs	r0, #1
}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop

080044e8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80044e8:	b1b8      	cbz	r0, 800451a <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 80044ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80044ee:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80044f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044f4:	4604      	mov	r4, r0
 80044f6:	b15b      	cbz	r3, 8004510 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	2302      	movs	r3, #2
 80044fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044fe:	6820      	ldr	r0, [r4, #0]
 8004500:	1d21      	adds	r1, r4, #4
 8004502:	f7ff ff63 	bl	80043cc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8004506:	2301      	movs	r3, #1
 8004508:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800450c:	2000      	movs	r0, #0
}
 800450e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004510:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004514:	f7fd fa4e 	bl	80019b4 <HAL_TIM_PWM_MspInit>
 8004518:	e7ee      	b.n	80044f8 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 800451a:	2001      	movs	r0, #1
}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop

08004520 <TIM_OC2_SetConfig>:
{
 8004520:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004522:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004524:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004526:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004528:	4d15      	ldr	r5, [pc, #84]	; (8004580 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800452a:	f024 0410 	bic.w	r4, r4, #16
 800452e:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8004530:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004532:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004534:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 8004536:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800453a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800453e:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004540:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004544:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004548:	d00a      	beq.n	8004560 <TIM_OC2_SetConfig+0x40>
 800454a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800454e:	42a8      	cmp	r0, r5
 8004550:	d006      	beq.n	8004560 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 8004552:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004554:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004556:	6182      	str	r2, [r0, #24]
}
 8004558:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 800455a:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800455c:	6203      	str	r3, [r0, #32]
}
 800455e:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004560:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004566:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800456a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800456e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004572:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004578:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800457c:	e7e9      	b.n	8004552 <TIM_OC2_SetConfig+0x32>
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000

08004584 <HAL_TIM_PWM_ConfigChannel>:
{
 8004584:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8004586:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800458a:	2b01      	cmp	r3, #1
 800458c:	d074      	beq.n	8004678 <HAL_TIM_PWM_ConfigChannel+0xf4>
 800458e:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 8004592:	2101      	movs	r1, #1
 8004594:	4604      	mov	r4, r0
 8004596:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800459a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 800459e:	2a0c      	cmp	r2, #12
 80045a0:	d819      	bhi.n	80045d6 <HAL_TIM_PWM_ConfigChannel+0x52>
 80045a2:	e8df f002 	tbb	[pc, r2]
 80045a6:	1807      	.short	0x1807
 80045a8:	18381818 	.word	0x18381818
 80045ac:	18511818 	.word	0x18511818
 80045b0:	1818      	.short	0x1818
 80045b2:	1f          	.byte	0x1f
 80045b3:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045b4:	4629      	mov	r1, r5
 80045b6:	6800      	ldr	r0, [r0, #0]
 80045b8:	f7ff fd90 	bl	80040dc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045be:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045c0:	6999      	ldr	r1, [r3, #24]
 80045c2:	f041 0108 	orr.w	r1, r1, #8
 80045c6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045c8:	6999      	ldr	r1, [r3, #24]
 80045ca:	f021 0104 	bic.w	r1, r1, #4
 80045ce:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80045d0:	699a      	ldr	r2, [r3, #24]
 80045d2:	4302      	orrs	r2, r0
 80045d4:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80045d6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80045d8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80045da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80045de:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045e4:	4629      	mov	r1, r5
 80045e6:	6800      	ldr	r0, [r0, #0]
 80045e8:	f7ff fdda 	bl	80041a0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045ec:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ee:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045f0:	69d9      	ldr	r1, [r3, #28]
 80045f2:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80045f6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045f8:	69d9      	ldr	r1, [r3, #28]
 80045fa:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80045fe:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004600:	69da      	ldr	r2, [r3, #28]
 8004602:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004606:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8004608:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800460a:	2301      	movs	r3, #1
 800460c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004610:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8004614:	e7e5      	b.n	80045e2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004616:	4629      	mov	r1, r5
 8004618:	6800      	ldr	r0, [r0, #0]
 800461a:	f7ff ff81 	bl	8004520 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800461e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004620:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004622:	6999      	ldr	r1, [r3, #24]
 8004624:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004628:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800462a:	6999      	ldr	r1, [r3, #24]
 800462c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004630:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004632:	699a      	ldr	r2, [r3, #24]
 8004634:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004638:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800463a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800463c:	2301      	movs	r3, #1
 800463e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004642:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8004646:	e7cc      	b.n	80045e2 <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004648:	4629      	mov	r1, r5
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	f7ff fd76 	bl	800413c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004650:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004652:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004654:	69d9      	ldr	r1, [r3, #28]
 8004656:	f041 0108 	orr.w	r1, r1, #8
 800465a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800465c:	69d9      	ldr	r1, [r3, #28]
 800465e:	f021 0104 	bic.w	r1, r1, #4
 8004662:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004664:	69da      	ldr	r2, [r3, #28]
 8004666:	4302      	orrs	r2, r0
 8004668:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800466a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800466c:	2301      	movs	r3, #1
 800466e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004672:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8004676:	e7b4      	b.n	80045e2 <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 8004678:	2002      	movs	r0, #2
}
 800467a:	bd38      	pop	{r3, r4, r5, pc}

0800467c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800467c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004680:	2b01      	cmp	r3, #1
 8004682:	d03a      	beq.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004686:	2202      	movs	r2, #2
{
 8004688:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 800468a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800468e:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004690:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004692:	4d1b      	ldr	r5, [pc, #108]	; (8004700 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8004694:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004696:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469a:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800469c:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 800469e:	f04f 0601 	mov.w	r6, #1
 80046a2:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 80046a6:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a8:	d019      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80046aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ae:	d016      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80046b0:	4a14      	ldr	r2, [pc, #80]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d013      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80046b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00f      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80046be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d00b      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80046c6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d007      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80046ce:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80046d6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80046da:	4293      	cmp	r3, r2
 80046dc:	d104      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046de:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046e0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046e4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80046e8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80046ea:	2201      	movs	r2, #1
 80046ec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80046f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80046f4:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 80046f6:	4618      	mov	r0, r3
}
 80046f8:	4770      	bx	lr
  __HAL_LOCK(htim);
 80046fa:	2002      	movs	r0, #2
}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40010000 	.word	0x40010000
 8004704:	40000400 	.word	0x40000400

08004708 <HAL_TIMEx_CommutCallback>:
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop

0800470c <HAL_TIMEx_BreakCallback>:
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop

08004710 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004710:	6802      	ldr	r2, [r0, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004712:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004714:	6911      	ldr	r1, [r2, #16]
{
 8004716:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004718:	68c5      	ldr	r5, [r0, #12]
 800471a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 800471e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004720:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004722:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004724:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004726:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004728:	6965      	ldr	r5, [r4, #20]
 800472a:	4303      	orrs	r3, r0
 800472c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800472e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004732:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 8004734:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004738:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800473a:	430b      	orrs	r3, r1
 800473c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800473e:	6953      	ldr	r3, [r2, #20]
 8004740:	69a1      	ldr	r1, [r4, #24]
 8004742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004746:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004748:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800474c:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800474e:	4b2a      	ldr	r3, [pc, #168]	; (80047f8 <UART_SetConfig+0xe8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004750:	d023      	beq.n	800479a <UART_SetConfig+0x8a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004752:	429a      	cmp	r2, r3
 8004754:	d01e      	beq.n	8004794 <UART_SetConfig+0x84>
 8004756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800475a:	429a      	cmp	r2, r3
 800475c:	d01a      	beq.n	8004794 <UART_SetConfig+0x84>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800475e:	f7ff fb8d 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004762:	6863      	ldr	r3, [r4, #4]
 8004764:	2219      	movs	r2, #25
 8004766:	fba0 0102 	umull	r0, r1, r0, r2
 800476a:	009a      	lsls	r2, r3, #2
 800476c:	0f9b      	lsrs	r3, r3, #30
 800476e:	f7fc f9e7 	bl	8000b40 <__aeabi_uldivmod>
 8004772:	4922      	ldr	r1, [pc, #136]	; (80047fc <UART_SetConfig+0xec>)
 8004774:	6824      	ldr	r4, [r4, #0]
 8004776:	fba1 3200 	umull	r3, r2, r1, r0
 800477a:	0952      	lsrs	r2, r2, #5
 800477c:	2364      	movs	r3, #100	; 0x64
 800477e:	fb03 0312 	mls	r3, r3, r2, r0
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	3332      	adds	r3, #50	; 0x32
 8004786:	fba1 1303 	umull	r1, r3, r1, r3
 800478a:	0112      	lsls	r2, r2, #4
 800478c:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8004790:	60a3      	str	r3, [r4, #8]
    }
  }
}
 8004792:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004794:	f7ff fb82 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 8004798:	e7e3      	b.n	8004762 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800479a:	429a      	cmp	r2, r3
 800479c:	d028      	beq.n	80047f0 <UART_SetConfig+0xe0>
 800479e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d024      	beq.n	80047f0 <UART_SetConfig+0xe0>
      pclk = HAL_RCC_GetPCLK1Freq();
 80047a6:	f7ff fb69 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047aa:	6862      	ldr	r2, [r4, #4]
 80047ac:	4d13      	ldr	r5, [pc, #76]	; (80047fc <UART_SetConfig+0xec>)
 80047ae:	1892      	adds	r2, r2, r2
 80047b0:	f04f 0119 	mov.w	r1, #25
 80047b4:	f04f 0600 	mov.w	r6, #0
 80047b8:	eb46 0306 	adc.w	r3, r6, r6
 80047bc:	fba0 0101 	umull	r0, r1, r0, r1
 80047c0:	f7fc f9be 	bl	8000b40 <__aeabi_uldivmod>
 80047c4:	fba5 3200 	umull	r3, r2, r5, r0
 80047c8:	0951      	lsrs	r1, r2, #5
 80047ca:	2364      	movs	r3, #100	; 0x64
 80047cc:	fb03 0311 	mls	r3, r3, r1, r0
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	3332      	adds	r3, #50	; 0x32
 80047d4:	fba5 2303 	umull	r2, r3, r5, r3
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	f003 0207 	and.w	r2, r3, #7
 80047de:	005b      	lsls	r3, r3, #1
 80047e0:	6824      	ldr	r4, [r4, #0]
 80047e2:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80047e6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047ea:	4413      	add	r3, r2
 80047ec:	60a3      	str	r3, [r4, #8]
}
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80047f0:	f7ff fb54 	bl	8003e9c <HAL_RCC_GetPCLK2Freq>
 80047f4:	e7d9      	b.n	80047aa <UART_SetConfig+0x9a>
 80047f6:	bf00      	nop
 80047f8:	40011000 	.word	0x40011000
 80047fc:	51eb851f 	.word	0x51eb851f

08004800 <HAL_UART_Init>:
  if (huart == NULL)
 8004800:	b360      	cbz	r0, 800485c <HAL_UART_Init+0x5c>
{
 8004802:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8004804:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004808:	4604      	mov	r4, r0
 800480a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800480e:	b303      	cbz	r3, 8004852 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8004810:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004812:	2324      	movs	r3, #36	; 0x24
 8004814:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8004818:	68d3      	ldr	r3, [r2, #12]
 800481a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800481e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff ff75 	bl	8004710 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	691a      	ldr	r2, [r3, #16]
 800482a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800482e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004836:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8004838:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800483a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800483c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800483e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004842:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8004844:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004846:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004848:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800484c:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8004850:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 8004852:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8004856:	f7fd f90f 	bl	8001a78 <HAL_UART_MspInit>
 800485a:	e7d9      	b.n	8004810 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 800485c:	2001      	movs	r0, #1
}
 800485e:	4770      	bx	lr

08004860 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004860:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8004864:	2b20      	cmp	r3, #32
 8004866:	d120      	bne.n	80048aa <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8004868:	b309      	cbz	r1, 80048ae <HAL_UART_Receive_IT+0x4e>
 800486a:	b302      	cbz	r2, 80048ae <HAL_UART_Receive_IT+0x4e>
    __HAL_LOCK(huart);
 800486c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8004870:	2b01      	cmp	r3, #1
 8004872:	d01a      	beq.n	80048aa <HAL_UART_Receive_IT+0x4a>
{
 8004874:	b430      	push	{r4, r5}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004876:	2300      	movs	r3, #0
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004878:	6804      	ldr	r4, [r0, #0]
    huart->RxXferCount = Size;
 800487a:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800487c:	2522      	movs	r5, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004880:	f880 503a 	strb.w	r5, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004884:	68e5      	ldr	r5, [r4, #12]
    huart->RxXferSize = Size;
 8004886:	8582      	strh	r2, [r0, #44]	; 0x2c
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004888:	f445 7580 	orr.w	r5, r5, #256	; 0x100
    huart->pRxBuffPtr = pData;
 800488c:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UNLOCK(huart);
 800488e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004892:	60e5      	str	r5, [r4, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004894:	6962      	ldr	r2, [r4, #20]
 8004896:	f042 0201 	orr.w	r2, r2, #1
 800489a:	6162      	str	r2, [r4, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800489c:	68e2      	ldr	r2, [r4, #12]
 800489e:	f042 0220 	orr.w	r2, r2, #32
    return HAL_OK;
 80048a2:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048a4:	60e2      	str	r2, [r4, #12]
}
 80048a6:	bc30      	pop	{r4, r5}
 80048a8:	4770      	bx	lr
    return HAL_BUSY;
 80048aa:	2002      	movs	r0, #2
}
 80048ac:	4770      	bx	lr
      return HAL_ERROR;
 80048ae:	2001      	movs	r0, #1
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop

080048b4 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80048b4:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80048b6:	6884      	ldr	r4, [r0, #8]
 80048b8:	6901      	ldr	r1, [r0, #16]
 80048ba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80048bc:	6802      	ldr	r2, [r0, #0]
 80048be:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80048c2:	d020      	beq.n	8004906 <UART_Receive_IT.part.1+0x52>
 80048c4:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048c6:	6852      	ldr	r2, [r2, #4]
 80048c8:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80048ca:	b9c9      	cbnz	r1, 8004900 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048cc:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80048ce:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80048d6:	b98b      	cbnz	r3, 80048fc <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048d8:	6802      	ldr	r2, [r0, #0]
 80048da:	68d1      	ldr	r1, [r2, #12]
 80048dc:	f021 0120 	bic.w	r1, r1, #32
 80048e0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048e2:	68d1      	ldr	r1, [r2, #12]
 80048e4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80048e8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048ea:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80048ec:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048ee:	f021 0101 	bic.w	r1, r1, #1
 80048f2:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80048f4:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80048f8:	f7fc ff24 	bl	8001744 <HAL_UART_RxCpltCallback>
}
 80048fc:	2000      	movs	r0, #0
 80048fe:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004900:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004904:	e7e2      	b.n	80048cc <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004906:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004908:	b929      	cbnz	r1, 8004916 <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800490a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490e:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8004912:	6283      	str	r3, [r0, #40]	; 0x28
 8004914:	e7db      	b.n	80048ce <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 800491c:	6283      	str	r3, [r0, #40]	; 0x28
 800491e:	e7d6      	b.n	80048ce <UART_Receive_IT.part.1+0x1a>

08004920 <HAL_UART_ErrorCallback>:
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop

08004924 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004924:	6803      	ldr	r3, [r0, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
{
 8004928:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800492a:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800492c:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800492e:	6959      	ldr	r1, [r3, #20]
{
 8004930:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004932:	d047      	beq.n	80049c4 <HAL_UART_IRQHandler+0xa0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004934:	f011 0101 	ands.w	r1, r1, #1
 8004938:	461e      	mov	r6, r3
 800493a:	d04c      	beq.n	80049d6 <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800493c:	07d3      	lsls	r3, r2, #31
 800493e:	d505      	bpl.n	800494c <HAL_UART_IRQHandler+0x28>
 8004940:	05e8      	lsls	r0, r5, #23
 8004942:	d503      	bpl.n	800494c <HAL_UART_IRQHandler+0x28>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004944:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800494c:	0753      	lsls	r3, r2, #29
 800494e:	d574      	bpl.n	8004a3a <HAL_UART_IRQHandler+0x116>
 8004950:	b129      	cbz	r1, 800495e <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004952:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004954:	0790      	lsls	r0, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004956:	f043 0302 	orr.w	r3, r3, #2
 800495a:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800495c:	d471      	bmi.n	8004a42 <HAL_UART_IRQHandler+0x11e>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800495e:	0710      	lsls	r0, r2, #28
 8004960:	d503      	bpl.n	800496a <HAL_UART_IRQHandler+0x46>
 8004962:	06ab      	lsls	r3, r5, #26
 8004964:	d472      	bmi.n	8004a4c <HAL_UART_IRQHandler+0x128>
 8004966:	2900      	cmp	r1, #0
 8004968:	d170      	bne.n	8004a4c <HAL_UART_IRQHandler+0x128>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800496a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800496c:	2b00      	cmp	r3, #0
 800496e:	d031      	beq.n	80049d4 <HAL_UART_IRQHandler+0xb0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004970:	0690      	lsls	r0, r2, #26
 8004972:	d501      	bpl.n	8004978 <HAL_UART_IRQHandler+0x54>
 8004974:	06a9      	lsls	r1, r5, #26
 8004976:	d472      	bmi.n	8004a5e <HAL_UART_IRQHandler+0x13a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004978:	6975      	ldr	r5, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800497a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800497c:	0712      	lsls	r2, r2, #28
 800497e:	d402      	bmi.n	8004986 <HAL_UART_IRQHandler+0x62>
 8004980:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8004984:	d078      	beq.n	8004a78 <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004986:	68f3      	ldr	r3, [r6, #12]
 8004988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800498c:	60f3      	str	r3, [r6, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	6973      	ldr	r3, [r6, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8004990:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004992:	f023 0301 	bic.w	r3, r3, #1
 8004996:	6173      	str	r3, [r6, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8004998:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499c:	6973      	ldr	r3, [r6, #20]
 800499e:	065b      	lsls	r3, r3, #25
 80049a0:	d559      	bpl.n	8004a56 <HAL_UART_IRQHandler+0x132>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	6973      	ldr	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 80049a4:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049aa:	6173      	str	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 80049ac:	2800      	cmp	r0, #0
 80049ae:	d052      	beq.n	8004a56 <HAL_UART_IRQHandler+0x132>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049b0:	4b3a      	ldr	r3, [pc, #232]	; (8004a9c <HAL_UART_IRQHandler+0x178>)
 80049b2:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049b4:	f7fd fd90 	bl	80024d8 <HAL_DMA_Abort_IT>
 80049b8:	b160      	cbz	r0, 80049d4 <HAL_UART_IRQHandler+0xb0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049ba:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80049bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049c0:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80049c2:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049c4:	0696      	lsls	r6, r2, #26
 80049c6:	d509      	bpl.n	80049dc <HAL_UART_IRQHandler+0xb8>
 80049c8:	06a9      	lsls	r1, r5, #26
 80049ca:	d507      	bpl.n	80049dc <HAL_UART_IRQHandler+0xb8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049cc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80049d0:	2b22      	cmp	r3, #34	; 0x22
 80049d2:	d04d      	beq.n	8004a70 <HAL_UART_IRQHandler+0x14c>
}
 80049d4:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049d6:	f415 7f90 	tst.w	r5, #288	; 0x120
 80049da:	d1af      	bne.n	800493c <HAL_UART_IRQHandler+0x18>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049dc:	0616      	lsls	r6, r2, #24
 80049de:	d40e      	bmi.n	80049fe <HAL_UART_IRQHandler+0xda>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049e0:	0651      	lsls	r1, r2, #25
 80049e2:	d5f7      	bpl.n	80049d4 <HAL_UART_IRQHandler+0xb0>
 80049e4:	066a      	lsls	r2, r5, #25
 80049e6:	d5f5      	bpl.n	80049d4 <HAL_UART_IRQHandler+0xb0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049e8:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80049ea:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f0:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80049f2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80049f4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80049f8:	f7fc fea2 	bl	8001740 <HAL_UART_TxCpltCallback>
}
 80049fc:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049fe:	0628      	lsls	r0, r5, #24
 8004a00:	d5ee      	bpl.n	80049e0 <HAL_UART_IRQHandler+0xbc>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a02:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8004a06:	2a21      	cmp	r2, #33	; 0x21
 8004a08:	d1e4      	bne.n	80049d4 <HAL_UART_IRQHandler+0xb0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a0a:	68a1      	ldr	r1, [r4, #8]
 8004a0c:	6a22      	ldr	r2, [r4, #32]
 8004a0e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004a12:	d036      	beq.n	8004a82 <HAL_UART_IRQHandler+0x15e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a14:	1c51      	adds	r1, r2, #1
 8004a16:	6221      	str	r1, [r4, #32]
 8004a18:	7812      	ldrb	r2, [r2, #0]
 8004a1a:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004a1c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004a1e:	3a01      	subs	r2, #1
 8004a20:	b292      	uxth	r2, r2
 8004a22:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004a24:	2a00      	cmp	r2, #0
 8004a26:	d1d5      	bne.n	80049d4 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a2e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a36:	60da      	str	r2, [r3, #12]
}
 8004a38:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a3a:	0793      	lsls	r3, r2, #30
 8004a3c:	d58f      	bpl.n	800495e <HAL_UART_IRQHandler+0x3a>
 8004a3e:	2900      	cmp	r1, #0
 8004a40:	d08d      	beq.n	800495e <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004a4a:	e788      	b.n	800495e <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004a4e:	f043 0308 	orr.w	r3, r3, #8
 8004a52:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004a54:	e789      	b.n	800496a <HAL_UART_IRQHandler+0x46>
            HAL_UART_ErrorCallback(huart);
 8004a56:	4620      	mov	r0, r4
 8004a58:	f7ff ff62 	bl	8004920 <HAL_UART_ErrorCallback>
}
 8004a5c:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a5e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8004a62:	2b22      	cmp	r3, #34	; 0x22
 8004a64:	d188      	bne.n	8004978 <HAL_UART_IRQHandler+0x54>
 8004a66:	4620      	mov	r0, r4
 8004a68:	f7ff ff24 	bl	80048b4 <UART_Receive_IT.part.1>
 8004a6c:	6826      	ldr	r6, [r4, #0]
 8004a6e:	e783      	b.n	8004978 <HAL_UART_IRQHandler+0x54>
}
 8004a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a74:	f7ff bf1e 	b.w	80048b4 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f7ff ff51 	bl	8004920 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7e:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8004a80:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a82:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a84:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a86:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004a8a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a8c:	b910      	cbnz	r0, 8004a94 <HAL_UART_IRQHandler+0x170>
        huart->pTxBuffPtr += 2U;
 8004a8e:	3202      	adds	r2, #2
 8004a90:	6222      	str	r2, [r4, #32]
 8004a92:	e7c3      	b.n	8004a1c <HAL_UART_IRQHandler+0xf8>
        huart->pTxBuffPtr += 1U;
 8004a94:	3201      	adds	r2, #1
 8004a96:	6222      	str	r2, [r4, #32]
 8004a98:	e7c0      	b.n	8004a1c <HAL_UART_IRQHandler+0xf8>
 8004a9a:	bf00      	nop
 8004a9c:	08004aa1 	.word	0x08004aa1

08004aa0 <UART_DMAAbortOnError>:
{
 8004aa0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aa2:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8004aa8:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8004aaa:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004aac:	f7ff ff38 	bl	8004920 <HAL_UART_ErrorCallback>
}
 8004ab0:	bd08      	pop	{r3, pc}
 8004ab2:	bf00      	nop

08004ab4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ab4:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <USB_CoreReset+0x30>)
 8004ab6:	e001      	b.n	8004abc <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	d010      	beq.n	8004ade <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004abc:	6902      	ldr	r2, [r0, #16]
 8004abe:	2a00      	cmp	r2, #0
 8004ac0:	dafa      	bge.n	8004ab8 <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ac2:	6903      	ldr	r3, [r0, #16]
 8004ac4:	4a07      	ldr	r2, [pc, #28]	; (8004ae4 <USB_CoreReset+0x30>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	6103      	str	r3, [r0, #16]
 8004acc:	e001      	b.n	8004ad2 <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 8004ace:	3a01      	subs	r2, #1
 8004ad0:	d005      	beq.n	8004ade <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ad2:	6903      	ldr	r3, [r0, #16]
 8004ad4:	f013 0301 	ands.w	r3, r3, #1
 8004ad8:	d1f9      	bne.n	8004ace <USB_CoreReset+0x1a>

  return HAL_OK;
 8004ada:	4618      	mov	r0, r3
}
 8004adc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004ade:	2003      	movs	r0, #3
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	00030d40 	.word	0x00030d40

08004ae8 <USB_CoreInit>:
{
 8004ae8:	b084      	sub	sp, #16
 8004aea:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004aec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 8004aee:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004af0:	2d01      	cmp	r5, #1
{
 8004af2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8004af6:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004af8:	d122      	bne.n	8004b40 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004afa:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8004afc:	9a11      	ldr	r2, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b02:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004b04:	68c3      	ldr	r3, [r0, #12]
 8004b06:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b10:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004b12:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004b14:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004b18:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004b1a:	d023      	beq.n	8004b64 <USB_CoreInit+0x7c>
    ret = USB_CoreReset(USBx);
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	f7ff ffc9 	bl	8004ab4 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004b22:	9b08      	ldr	r3, [sp, #32]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d107      	bne.n	8004b38 <USB_CoreInit+0x50>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004b28:	688b      	ldr	r3, [r1, #8]
 8004b2a:	f043 0306 	orr.w	r3, r3, #6
 8004b2e:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b30:	688b      	ldr	r3, [r1, #8]
 8004b32:	f043 0320 	orr.w	r3, r3, #32
 8004b36:	608b      	str	r3, [r1, #8]
}
 8004b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b3c:	b004      	add	sp, #16
 8004b3e:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004b40:	68c3      	ldr	r3, [r0, #12]
 8004b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b46:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004b48:	f7ff ffb4 	bl	8004ab4 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b4e:	b923      	cbnz	r3, 8004b5a <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004b50:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004b52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b56:	638b      	str	r3, [r1, #56]	; 0x38
 8004b58:	e7e3      	b.n	8004b22 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004b5a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b60:	638b      	str	r3, [r1, #56]	; 0x38
 8004b62:	e7de      	b.n	8004b22 <USB_CoreInit+0x3a>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004b64:	68c3      	ldr	r3, [r0, #12]
 8004b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6a:	60c3      	str	r3, [r0, #12]
 8004b6c:	e7d6      	b.n	8004b1c <USB_CoreInit+0x34>
 8004b6e:	bf00      	nop

08004b70 <USB_EnableGlobalInt>:
{
 8004b70:	4602      	mov	r2, r0
}
 8004b72:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b74:	6893      	ldr	r3, [r2, #8]
 8004b76:	f043 0301 	orr.w	r3, r3, #1
 8004b7a:	6093      	str	r3, [r2, #8]
}
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop

08004b80 <USB_DisableGlobalInt>:
{
 8004b80:	4602      	mov	r2, r0
}
 8004b82:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b84:	6893      	ldr	r3, [r2, #8]
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	6093      	str	r3, [r2, #8]
}
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop

08004b90 <USB_SetCurrentMode>:
{
 8004b90:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b92:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004b94:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b96:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004b9a:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004b9c:	d00b      	beq.n	8004bb6 <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 8004b9e:	b941      	cbnz	r1, 8004bb2 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004ba0:	68c3      	ldr	r3, [r0, #12]
 8004ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ba6:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8004ba8:	2032      	movs	r0, #50	; 0x32
 8004baa:	f7fd f8f1 	bl	8001d90 <HAL_Delay>
  return HAL_OK;
 8004bae:	2000      	movs	r0, #0
}
 8004bb0:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8004bb2:	2001      	movs	r0, #1
}
 8004bb4:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004bb6:	68c3      	ldr	r3, [r0, #12]
 8004bb8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bbc:	60c3      	str	r3, [r0, #12]
 8004bbe:	e7f3      	b.n	8004ba8 <USB_SetCurrentMode+0x18>

08004bc0 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004bc0:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 8004bc2:	0892      	lsrs	r2, r2, #2
 8004bc4:	d00c      	beq.n	8004be0 <USB_ReadPacket+0x20>
{
 8004bc6:	b410      	push	{r4}
 8004bc8:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 8004bcc:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 8004bd6:	4281      	cmp	r1, r0
 8004bd8:	d1fa      	bne.n	8004bd0 <USB_ReadPacket+0x10>
}
 8004bda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bde:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8004be0:	4608      	mov	r0, r1
}
 8004be2:	4770      	bx	lr

08004be4 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004be4:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004be6:	6980      	ldr	r0, [r0, #24]
}
 8004be8:	4010      	ands	r0, r2
 8004bea:	4770      	bx	lr

08004bec <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004bec:	6940      	ldr	r0, [r0, #20]
}
 8004bee:	f000 0001 	and.w	r0, r0, #1
 8004bf2:	4770      	bx	lr

08004bf4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bf4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004bf8:	f023 0303 	bic.w	r3, r3, #3
 8004bfc:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c00:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8004c04:	f001 0303 	and.w	r3, r1, #3
 8004c08:	4313      	orrs	r3, r2

  if (freq == HCFG_48_MHZ)
 8004c0a:	2901      	cmp	r1, #1
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c0c:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004c10:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  if (freq == HCFG_48_MHZ)
 8004c14:	d006      	beq.n	8004c24 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 8004c16:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = 6000U;
 8004c18:	bf04      	itt	eq
 8004c1a:	f241 7370 	movweq	r3, #6000	; 0x1770
 8004c1e:	6043      	streq	r3, [r0, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8004c20:	2000      	movs	r0, #0
 8004c22:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8004c24:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004c28:	6043      	str	r3, [r0, #4]
}
 8004c2a:	2000      	movs	r0, #0
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop

08004c30 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004c30:	b530      	push	{r4, r5, lr}
 8004c32:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8004c34:	2500      	movs	r5, #0
 8004c36:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004c38:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004c3c:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c3e:	9b01      	ldr	r3, [sp, #4]
 8004c40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c44:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c46:	9b01      	ldr	r3, [sp, #4]
 8004c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8004c4c:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c4e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c52:	2064      	movs	r0, #100	; 0x64
 8004c54:	f7fd f89c 	bl	8001d90 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c58:	9b01      	ldr	r3, [sp, #4]
 8004c5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5e:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8004c62:	200a      	movs	r0, #10
 8004c64:	f7fd f894 	bl	8001d90 <HAL_Delay>

  return HAL_OK;
}
 8004c68:	4628      	mov	r0, r5
 8004c6a:	b003      	add	sp, #12
 8004c6c:	bd30      	pop	{r4, r5, pc}
 8004c6e:	bf00      	nop

08004c70 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004c70:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004c76:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004c7a:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c7c:	9b01      	ldr	r3, [sp, #4]
 8004c7e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004c82:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c84:	9b01      	ldr	r3, [sp, #4]
 8004c86:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004c8a:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004c8c:	d101      	bne.n	8004c92 <USB_DriveVbus+0x22>
 8004c8e:	2901      	cmp	r1, #1
 8004c90:	d00a      	beq.n	8004ca8 <USB_DriveVbus+0x38>
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004c92:	04db      	lsls	r3, r3, #19
 8004c94:	d505      	bpl.n	8004ca2 <USB_DriveVbus+0x32>
 8004c96:	b921      	cbnz	r1, 8004ca2 <USB_DriveVbus+0x32>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004c98:	9b01      	ldr	r3, [sp, #4]
 8004c9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c9e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	b002      	add	sp, #8
 8004ca6:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ca8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cac:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004cb0:	9b01      	ldr	r3, [sp, #4]
}
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	b002      	add	sp, #8
 8004cb6:	4770      	bx	lr

08004cb8 <USB_HostInit>:
{
 8004cb8:	b084      	sub	sp, #16
 8004cba:	b538      	push	{r3, r4, r5, lr}
 8004cbc:	4604      	mov	r4, r0
  USBx_PCGCCTL = 0U;
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f8c4 0e00 	str.w	r0, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cc4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004cc6:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 8004cca:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ccc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004cce:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
 8004cd2:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cd4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
{
 8004cd6:	ad05      	add	r5, sp, #20
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004cd8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
{
 8004cdc:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ce0:	63a0      	str	r0, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ce2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ce4:	9906      	ldr	r1, [sp, #24]
 8004ce6:	05dd      	lsls	r5, r3, #23
 8004ce8:	d557      	bpl.n	8004d9a <USB_HostInit+0xe2>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004cea:	9b07      	ldr	r3, [sp, #28]
 8004cec:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004cee:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004cf2:	d055      	beq.n	8004da0 <USB_HostInit+0xe8>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004cf4:	f023 0304 	bic.w	r3, r3, #4
 8004cf8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004cfc:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	4b2a      	ldr	r3, [pc, #168]	; (8004dac <USB_HostInit+0xf4>)
 8004d04:	e001      	b.n	8004d0a <USB_HostInit+0x52>
    if (++count > 200000U)
 8004d06:	3b01      	subs	r3, #1
 8004d08:	d002      	beq.n	8004d10 <USB_HostInit+0x58>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d0a:	6922      	ldr	r2, [r4, #16]
 8004d0c:	0690      	lsls	r0, r2, #26
 8004d0e:	d4fa      	bmi.n	8004d06 <USB_HostInit+0x4e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d10:	2310      	movs	r3, #16
 8004d12:	6123      	str	r3, [r4, #16]
 8004d14:	4b25      	ldr	r3, [pc, #148]	; (8004dac <USB_HostInit+0xf4>)
 8004d16:	e001      	b.n	8004d1c <USB_HostInit+0x64>
    if (++count > 200000U)
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	d002      	beq.n	8004d22 <USB_HostInit+0x6a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d1c:	6922      	ldr	r2, [r4, #16]
 8004d1e:	06d2      	lsls	r2, r2, #27
 8004d20:	d4fa      	bmi.n	8004d18 <USB_HostInit+0x60>
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d22:	b161      	cbz	r1, 8004d3e <USB_HostInit+0x86>
 8004d24:	2200      	movs	r2, #0
    USBx_HC(i)->HCINTMSK = 0U;
 8004d26:	4615      	mov	r5, r2
 8004d28:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004d2c:	f04f 30ff 	mov.w	r0, #4294967295
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d30:	3201      	adds	r2, #1
 8004d32:	428a      	cmp	r2, r1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004d34:	6098      	str	r0, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004d36:	60dd      	str	r5, [r3, #12]
 8004d38:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d3c:	d1f8      	bne.n	8004d30 <USB_HostInit+0x78>
  (void)USB_DriveVbus(USBx, 1U);
 8004d3e:	2101      	movs	r1, #1
 8004d40:	4620      	mov	r0, r4
 8004d42:	f7ff ff95 	bl	8004c70 <USB_DriveVbus>
  HAL_Delay(200U);
 8004d46:	20c8      	movs	r0, #200	; 0xc8
 8004d48:	f7fd f822 	bl	8001d90 <HAL_Delay>
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTMSK = 0U;
 8004d50:	2200      	movs	r2, #0
 8004d52:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004d54:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d58:	05db      	lsls	r3, r3, #23
 8004d5a:	d516      	bpl.n	8004d8a <USB_HostInit+0xd2>
    USBx->GRXFSIZ  = 0x200U;
 8004d5c:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004d60:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <USB_HostInit+0xf8>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004d62:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <USB_HostInit+0xfc>)
    USBx->GRXFSIZ  = 0x200U;
 8004d64:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004d66:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004d68:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8004d6c:	9b08      	ldr	r3, [sp, #32]
 8004d6e:	b91b      	cbnz	r3, 8004d78 <USB_HostInit+0xc0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d70:	69a3      	ldr	r3, [r4, #24]
 8004d72:	f043 0310 	orr.w	r3, r3, #16
 8004d76:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004d78:	69a2      	ldr	r2, [r4, #24]
 8004d7a:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <USB_HostInit+0x100>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61a3      	str	r3, [r4, #24]
}
 8004d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d84:	2000      	movs	r0, #0
 8004d86:	b004      	add	sp, #16
 8004d88:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8004d8a:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004d8c:	4a0b      	ldr	r2, [pc, #44]	; (8004dbc <USB_HostInit+0x104>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	; (8004dc0 <USB_HostInit+0x108>)
    USBx->GRXFSIZ  = 0x80U;
 8004d90:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004d92:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004d94:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004d98:	e7e8      	b.n	8004d6c <USB_HostInit+0xb4>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004d9a:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8004d9e:	e7a9      	b.n	8004cf4 <USB_HostInit+0x3c>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004da0:	f043 0304 	orr.w	r3, r3, #4
 8004da4:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 8004da8:	e7a8      	b.n	8004cfc <USB_HostInit+0x44>
 8004daa:	bf00      	nop
 8004dac:	00030d40 	.word	0x00030d40
 8004db0:	01000200 	.word	0x01000200
 8004db4:	00e00300 	.word	0x00e00300
 8004db8:	a3200008 	.word	0xa3200008
 8004dbc:	00600080 	.word	0x00600080
 8004dc0:	004000e0 	.word	0x004000e0

08004dc4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc4:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004dca:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004dce:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004dd0:	9801      	ldr	r0, [sp, #4]
}
 8004dd2:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8004dd6:	b002      	add	sp, #8
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004ddc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8004de0:	6880      	ldr	r0, [r0, #8]
}
 8004de2:	b280      	uxth	r0, r0
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop

08004de8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004de8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004dec:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8004df0:	f505 6ca0 	add.w	ip, r5, #1280	; 0x500
{
 8004df4:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8004df8:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8004dfc:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004e00:	f04f 3eff 	mov.w	lr, #4294967295
 8004e04:	f001 010f 	and.w	r1, r1, #15
 8004e08:	f04f 0801 	mov.w	r8, #1
 8004e0c:	f8cc e008 	str.w	lr, [ip, #8]
 8004e10:	fa08 f101 	lsl.w	r1, r8, r1
 8004e14:	fa4f fe82 	sxtb.w	lr, r2
 8004e18:	f500 6980 	add.w	r9, r0, #1024	; 0x400

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004e1c:	2c03      	cmp	r4, #3
 8004e1e:	d85d      	bhi.n	8004edc <USB_HC_Init+0xf4>
 8004e20:	e8df f004 	tbb	[pc, r4]
 8004e24:	02493b49 	.word	0x02493b49
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e28:	f240 689d 	movw	r8, #1693	; 0x69d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e2c:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e30:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004e34:	db64      	blt.n	8004f00 <USB_HC_Init+0x118>
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004e36:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8004e3a:	ea48 0101 	orr.w	r1, r8, r1
 8004e3e:	f8c9 1018 	str.w	r1, [r9, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004e42:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8004e46:	2100      	movs	r1, #0
 8004e48:	f04c 7c00 	orr.w	ip, ip, #33554432	; 0x2000000
 8004e4c:	f8c0 c018 	str.w	ip, [r0, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8004e50:	4608      	mov	r0, r1
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e52:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e54:	f3c7 070a 	ubfx	r7, r7, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e58:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e5a:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e5e:	433b      	orrs	r3, r7
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004e60:	f402 47f0 	and.w	r7, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e64:	04a2      	lsls	r2, r4, #18
 8004e66:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8004e6a:	433b      	orrs	r3, r7
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e6c:	2e02      	cmp	r6, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004e6e:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e72:	ea43 0300 	orr.w	r3, r3, r0
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004e76:	bf14      	ite	ne
 8004e78:	2200      	movne	r2, #0
 8004e7a:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004e7e:	4313      	orrs	r3, r2

  if (ep_type == EP_TYPE_INTR)
 8004e80:	2c03      	cmp	r4, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004e82:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8004e86:	d105      	bne.n	8004e94 <USB_HC_Init+0xac>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004e88:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 8004e8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e90:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return ret;
}
 8004e94:	4608      	mov	r0, r1
 8004e96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e9a:	f240 2825 	movw	r8, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8004e9e:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ea2:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004ea6:	dac6      	bge.n	8004e36 <USB_HC_Init+0x4e>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004ea8:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8004eac:	f44e 7ec0 	orr.w	lr, lr, #384	; 0x180
 8004eb0:	f8cc e00c 	str.w	lr, [ip, #12]
 8004eb4:	e02a      	b.n	8004f0c <USB_HC_Init+0x124>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004eb6:	f240 489d 	movw	r8, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 8004eba:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004ebe:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8004ec2:	db1d      	blt.n	8004f00 <USB_HC_Init+0x118>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ec4:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8004ec8:	f41e 7f80 	tst.w	lr, #256	; 0x100
 8004ecc:	d0b3      	beq.n	8004e36 <USB_HC_Init+0x4e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004ece:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8004ed2:	f04e 0e60 	orr.w	lr, lr, #96	; 0x60
 8004ed6:	f8cc e00c 	str.w	lr, [ip, #12]
 8004eda:	e7ac      	b.n	8004e36 <USB_HC_Init+0x4e>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004edc:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8004ee0:	ea48 0101 	orr.w	r1, r8, r1
 8004ee4:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004ee8:	6981      	ldr	r1, [r0, #24]
      ret = HAL_ERROR;
 8004eea:	f1be 0f00 	cmp.w	lr, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004eee:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8004ef2:	6181      	str	r1, [r0, #24]
      ret = HAL_ERROR;
 8004ef4:	bfac      	ite	ge
 8004ef6:	2000      	movge	r0, #0
 8004ef8:	f44f 4000 	movlt.w	r0, #32768	; 0x8000
 8004efc:	2101      	movs	r1, #1
 8004efe:	e7a8      	b.n	8004e52 <USB_HC_Init+0x6a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004f00:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8004f04:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 8004f08:	f8cc e00c 	str.w	lr, [ip, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004f0c:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8004f10:	ea41 0108 	orr.w	r1, r1, r8
 8004f14:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004f18:	6981      	ldr	r1, [r0, #24]
 8004f1a:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8004f1e:	6181      	str	r1, [r0, #24]
 8004f20:	2100      	movs	r1, #0
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004f22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f26:	e794      	b.n	8004e52 <USB_HC_Init+0x6a>

08004f28 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004f2e:	784f      	ldrb	r7, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004f30:	05db      	lsls	r3, r3, #23
 8004f32:	eb00 1447 	add.w	r4, r0, r7, lsl #5
 8004f36:	f504 6ca0 	add.w	ip, r4, #1280	; 0x500
 8004f3a:	d50d      	bpl.n	8004f58 <USB_HC_StartXfer+0x30>
 8004f3c:	790b      	ldrb	r3, [r1, #4]
 8004f3e:	b95b      	cbnz	r3, 8004f58 <USB_HC_StartXfer+0x30>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004f40:	2a00      	cmp	r2, #0
 8004f42:	f000 808b 	beq.w	800505c <USB_HC_StartXfer+0x134>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
      return HAL_OK;
    }
    else if (dma == 1U)
 8004f46:	2a01      	cmp	r2, #1
 8004f48:	d106      	bne.n	8004f58 <USB_HC_StartXfer+0x30>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004f4a:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8004f4e:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 8004f52:	f8cc 500c 	str.w	r5, [ip, #12]
      hc->do_ping = 0U;
 8004f56:	714b      	strb	r3, [r1, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004f58:	690b      	ldr	r3, [r1, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d14a      	bne.n	8004ff4 <USB_HC_StartXfer+0xcc>
 8004f5e:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8004f62:	2501      	movs	r5, #1
  }
  else
  {
    num_packets = 1U;
  }
  if (hc->ep_is_in != 0U)
 8004f64:	78ce      	ldrb	r6, [r1, #3]
 8004f66:	2e00      	cmp	r6, #0
 8004f68:	d153      	bne.n	8005012 <USB_HC_StartXfer+0xea>
 8004f6a:	690d      	ldr	r5, [r1, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004f6c:	7a8b      	ldrb	r3, [r1, #10]
 8004f6e:	075b      	lsls	r3, r3, #29
 8004f70:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f74:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f78:	f3c5 0e12 	ubfx	lr, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f7c:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f80:	f8cc 3010 	str.w	r3, [ip, #16]

  if (dma != 0U)
 8004f84:	b112      	cbz	r2, 8004f8c <USB_HC_StartXfer+0x64>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f86:	68cb      	ldr	r3, [r1, #12]
 8004f88:	f8cc 3014 	str.w	r3, [ip, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f8c:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8004f90:	f8de 3008 	ldr.w	r3, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f94:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f98:	f8df c13c 	ldr.w	ip, [pc, #316]	; 80050d8 <USB_HC_StartXfer+0x1b0>
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f9c:	f028 5800 	bic.w	r8, r8, #536870912	; 0x20000000
 8004fa0:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004fa4:	43db      	mvns	r3, r3
 8004fa6:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
 8004faa:	075b      	lsls	r3, r3, #29
 8004fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fb0:	ea43 0308 	orr.w	r3, r3, r8
 8004fb4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004fb8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8004fbc:	f8cc 3000 	str.w	r3, [ip]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fc0:	f8dc 3000 	ldr.w	r3, [ip]
 8004fc4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fc8:	f8cc 3000 	str.w	r3, [ip]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004fcc:	f8dc 3000 	ldr.w	r3, [ip]
  if (hc->ep_is_in != 0U)
 8004fd0:	b326      	cbz	r6, 800501c <USB_HC_StartXfer+0xf4>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd6:	f8cc 3000 	str.w	r3, [ip]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fda:	f8dc 3000 	ldr.w	r3, [ip]
 8004fde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fe2:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fe6:	f8dc 3000 	ldr.w	r3, [ip]
 8004fea:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
    }
  }

  return HAL_OK;
}
 8004fee:	2000      	movs	r0, #0
 8004ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004ff4:	890d      	ldrh	r5, [r1, #8]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	442b      	add	r3, r5
 8004ffa:	fbb3 f3f5 	udiv	r3, r3, r5
    if (num_packets > max_hc_pkt_count)
 8004ffe:	b29e      	uxth	r6, r3
 8005000:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8005004:	d823      	bhi.n	800504e <USB_HC_StartXfer+0x126>
 8005006:	4635      	mov	r5, r6
  if (hc->ep_is_in != 0U)
 8005008:	78ce      	ldrb	r6, [r1, #3]
 800500a:	ea4f 4ec3 	mov.w	lr, r3, lsl #19
 800500e:	2e00      	cmp	r6, #0
 8005010:	d0ab      	beq.n	8004f6a <USB_HC_StartXfer+0x42>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005012:	890b      	ldrh	r3, [r1, #8]
 8005014:	fb05 f503 	mul.w	r5, r5, r3
 8005018:	610d      	str	r5, [r1, #16]
 800501a:	e7a7      	b.n	8004f6c <USB_HC_StartXfer+0x44>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800501c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005020:	f8cc 3000 	str.w	r3, [ip]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005024:	f8dc 3000 	ldr.w	r3, [ip]
 8005028:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800502c:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005030:	f8dc 3000 	ldr.w	r3, [ip]
 8005034:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8005038:	2a00      	cmp	r2, #0
 800503a:	d1d8      	bne.n	8004fee <USB_HC_StartXfer+0xc6>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800503c:	2d00      	cmp	r5, #0
 800503e:	d0d6      	beq.n	8004fee <USB_HC_StartXfer+0xc6>
      switch (hc->ep_type)
 8005040:	79cb      	ldrb	r3, [r1, #7]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d822      	bhi.n	800508c <USB_HC_StartXfer+0x164>
 8005046:	e8df f003 	tbb	[pc, r3]
 800504a:	1934      	.short	0x1934
 800504c:	1934      	.short	0x1934
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800504e:	022d      	lsls	r5, r5, #8
 8005050:	610d      	str	r5, [r1, #16]
 8005052:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 8005056:	f44f 7580 	mov.w	r5, #256	; 0x100
 800505a:	e783      	b.n	8004f64 <USB_HC_StartXfer+0x3c>
    if ((dma == 0U) && (hc->do_ping == 1U))
 800505c:	794b      	ldrb	r3, [r1, #5]
 800505e:	2b01      	cmp	r3, #1
 8005060:	f47f af7a 	bne.w	8004f58 <USB_HC_StartXfer+0x30>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005064:	4b1b      	ldr	r3, [pc, #108]	; (80050d4 <USB_HC_StartXfer+0x1ac>)
 8005066:	f8cc 3010 	str.w	r3, [ip, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800506a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800506e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005076:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      return HAL_OK;
 800507a:	e7b8      	b.n	8004fee <USB_HC_StartXfer+0xc6>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800507c:	f8de 2010 	ldr.w	r2, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005080:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005082:	b292      	uxth	r2, r2
 8005084:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8005088:	429a      	cmp	r2, r3
 800508a:	d31e      	bcc.n	80050ca <USB_HC_StartXfer+0x1a2>
    count32b = ((uint32_t)len + 3U) / 4U;
 800508c:	b2ab      	uxth	r3, r5
 800508e:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8005090:	089b      	lsrs	r3, r3, #2
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005092:	68ca      	ldr	r2, [r1, #12]
    for (i = 0U; i < count32b; i++)
 8005094:	d0ab      	beq.n	8004fee <USB_HC_StartXfer+0xc6>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005096:	eb00 3007 	add.w	r0, r0, r7, lsl #12
 800509a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800509e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80050a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80050a6:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d1fa      	bne.n	80050a2 <USB_HC_StartXfer+0x17a>
}
 80050ac:	2000      	movs	r0, #0
 80050ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050b2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80050b4:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80050b6:	b292      	uxth	r2, r2
 80050b8:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80050bc:	429a      	cmp	r2, r3
 80050be:	d2e5      	bcs.n	800508c <USB_HC_StartXfer+0x164>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80050c0:	6983      	ldr	r3, [r0, #24]
 80050c2:	f043 0320 	orr.w	r3, r3, #32
 80050c6:	6183      	str	r3, [r0, #24]
 80050c8:	e7e0      	b.n	800508c <USB_HC_StartXfer+0x164>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80050ca:	6983      	ldr	r3, [r0, #24]
 80050cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050d0:	6183      	str	r3, [r0, #24]
 80050d2:	e7db      	b.n	800508c <USB_HC_StartXfer+0x164>
 80050d4:	80080000 	.word	0x80080000
 80050d8:	200000cc 	.word	0x200000cc

080050dc <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050dc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80050e0:	6940      	ldr	r0, [r0, #20]
}
 80050e2:	b280      	uxth	r0, r0
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop

080050e8 <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050e8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 80050ec:	b410      	push	{r4}
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050ee:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80050f2:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050f6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80050fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050fe:	f501 64a0 	add.w	r4, r1, #1280	; 0x500
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005102:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005106:	d022      	beq.n	800514e <USB_HC_Halt+0x66>
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005108:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 800510c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005110:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005114:	d13d      	bne.n	8005192 <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005116:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800511a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800511e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005126:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800512a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800512e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005132:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8005136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800513a:	e001      	b.n	8005140 <USB_HC_Halt+0x58>
        if (++count > 1000U)
 800513c:	3b01      	subs	r3, #1
 800513e:	d002      	beq.n	8005146 <USB_HC_Halt+0x5e>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	2a00      	cmp	r2, #0
 8005144:	dbfa      	blt.n	800513c <USB_HC_Halt+0x54>
}
 8005146:	2000      	movs	r0, #0
 8005148:	f85d 4b04 	ldr.w	r4, [sp], #4
 800514c:	4770      	bx	lr
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800514e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005150:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005154:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005158:	d11b      	bne.n	8005192 <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800515a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800515e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005162:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800516a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800516e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005172:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005176:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800517a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800517e:	e001      	b.n	8005184 <USB_HC_Halt+0x9c>
        if (++count > 1000U)
 8005180:	3b01      	subs	r3, #1
 8005182:	d0e0      	beq.n	8005146 <USB_HC_Halt+0x5e>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005184:	6822      	ldr	r2, [r4, #0]
 8005186:	2a00      	cmp	r2, #0
 8005188:	dbfa      	blt.n	8005180 <USB_HC_Halt+0x98>
}
 800518a:	2000      	movs	r0, #0
 800518c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005190:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005192:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
}
 8005196:	2000      	movs	r0, #0
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005198:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 800519c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop

080051a4 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051a4:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051a6:	4b22      	ldr	r3, [pc, #136]	; (8005230 <USB_StopHost+0x8c>)
 80051a8:	f44f 6184 	mov.w	r1, #1056	; 0x420
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051ac:	f022 0201 	bic.w	r2, r2, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80051b0:	b410      	push	{r4}
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051b2:	6082      	str	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051b4:	6101      	str	r1, [r0, #16]
 80051b6:	e001      	b.n	80051bc <USB_StopHost+0x18>
    if (++count > 200000U)
 80051b8:	3b01      	subs	r3, #1
 80051ba:	d002      	beq.n	80051c2 <USB_StopHost+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051bc:	6902      	ldr	r2, [r0, #16]
 80051be:	0691      	lsls	r1, r2, #26
 80051c0:	d4fa      	bmi.n	80051b8 <USB_StopHost+0x14>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051c2:	2310      	movs	r3, #16
 80051c4:	6103      	str	r3, [r0, #16]
 80051c6:	4b1a      	ldr	r3, [pc, #104]	; (8005230 <USB_StopHost+0x8c>)
 80051c8:	e001      	b.n	80051ce <USB_StopHost+0x2a>
    if (++count > 200000U)
 80051ca:	3b01      	subs	r3, #1
 80051cc:	d002      	beq.n	80051d4 <USB_StopHost+0x30>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051ce:	6902      	ldr	r2, [r0, #16]
 80051d0:	06d2      	lsls	r2, r2, #27
 80051d2:	d4fa      	bmi.n	80051ca <USB_StopHost+0x26>
 80051d4:	f500 61a0 	add.w	r1, r0, #1280	; 0x500
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80051d8:	460c      	mov	r4, r1
 80051da:	f500 62e0 	add.w	r2, r0, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 80051e8:	f844 3b20 	str.w	r3, [r4], #32
  for (i = 0U; i <= 15U; i++)
 80051ec:	4294      	cmp	r4, r2
 80051ee:	d1f6      	bne.n	80051de <USB_StopHost+0x3a>
  uint32_t count = 0U;
 80051f0:	2300      	movs	r3, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 80051f2:	680a      	ldr	r2, [r1, #0]
 80051f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80051f8:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 80051fc:	600a      	str	r2, [r1, #0]
 80051fe:	e002      	b.n	8005206 <USB_StopHost+0x62>
      if (++count > 1000U)
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005200:	680a      	ldr	r2, [r1, #0]
 8005202:	2a00      	cmp	r2, #0
 8005204:	da03      	bge.n	800520e <USB_StopHost+0x6a>
      if (++count > 1000U)
 8005206:	3301      	adds	r3, #1
 8005208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800520c:	d9f8      	bls.n	8005200 <USB_StopHost+0x5c>
 800520e:	3120      	adds	r1, #32
  for (i = 0U; i <= 15U; i++)
 8005210:	42a1      	cmp	r1, r4
 8005212:	d1ee      	bne.n	80051f2 <USB_StopHost+0x4e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005214:	f04f 33ff 	mov.w	r3, #4294967295
 8005218:	f8c0 3414 	str.w	r3, [r0, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 800521c:	6143      	str	r3, [r0, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800521e:	6883      	ldr	r3, [r0, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8005220:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005224:	f043 0301 	orr.w	r3, r3, #1
 8005228:	6083      	str	r3, [r0, #8]
}
 800522a:	2000      	movs	r0, #0
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	00030d40 	.word	0x00030d40

08005234 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8005234:	2000      	movs	r0, #0
 8005236:	4770      	bx	lr

08005238 <USBH_CDC_ClassRequest>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005238:	f8d0 2378 	ldr.w	r2, [r0, #888]	; 0x378
{
 800523c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800523e:	69d1      	ldr	r1, [r2, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005240:	f242 13a1 	movw	r3, #8609	; 0x21a1
 8005244:	6103      	str	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
 8005246:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800524a:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.wValue.w = 0U;
 800524c:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800524e:	2207      	movs	r2, #7
{
 8005250:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005252:	f000 fe7f 	bl	8005f54 <USBH_CtlReq>
  if(status == USBH_OK)
 8005256:	4605      	mov	r5, r0
 8005258:	b920      	cbnz	r0, 8005264 <USBH_CDC_ClassRequest+0x2c>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800525a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800525e:	4620      	mov	r0, r4
 8005260:	2102      	movs	r1, #2
 8005262:	4798      	blx	r3
}
 8005264:	4628      	mov	r0, r5
 8005266:	bd38      	pop	{r3, r4, r5, pc}

08005268 <USBH_CDC_InterfaceDeInit>:
{
 8005268:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800526a:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 800526e:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8005270:	7821      	ldrb	r1, [r4, #0]
{
 8005272:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8005274:	b979      	cbnz	r1, 8005296 <USBH_CDC_InterfaceDeInit+0x2e>
  if ( CDC_Handle->DataItf.InPipe)
 8005276:	7b21      	ldrb	r1, [r4, #12]
 8005278:	b9c1      	cbnz	r1, 80052ac <USBH_CDC_InterfaceDeInit+0x44>
  if ( CDC_Handle->DataItf.OutPipe)
 800527a:	7b61      	ldrb	r1, [r4, #13]
 800527c:	bb11      	cbnz	r1, 80052c4 <USBH_CDC_InterfaceDeInit+0x5c>
  if(phost->pActiveClass->pData)
 800527e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8005282:	69d8      	ldr	r0, [r3, #28]
 8005284:	b128      	cbz	r0, 8005292 <USBH_CDC_InterfaceDeInit+0x2a>
    USBH_free (phost->pActiveClass->pData);
 8005286:	f001 f8b9 	bl	80063fc <free>
    phost->pActiveClass->pData = 0U;
 800528a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800528e:	2200      	movs	r2, #0
 8005290:	61da      	str	r2, [r3, #28]
}
 8005292:	2000      	movs	r0, #0
 8005294:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005296:	f000 fedf 	bl	8006058 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800529a:	7821      	ldrb	r1, [r4, #0]
 800529c:	4628      	mov	r0, r5
 800529e:	f000 fef9 	bl	8006094 <USBH_FreePipe>
  if ( CDC_Handle->DataItf.InPipe)
 80052a2:	7b21      	ldrb	r1, [r4, #12]
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80052a4:	2300      	movs	r3, #0
 80052a6:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 80052a8:	2900      	cmp	r1, #0
 80052aa:	d0e6      	beq.n	800527a <USBH_CDC_InterfaceDeInit+0x12>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80052ac:	4628      	mov	r0, r5
 80052ae:	f000 fed3 	bl	8006058 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 80052b2:	7b21      	ldrb	r1, [r4, #12]
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 feed 	bl	8006094 <USBH_FreePipe>
  if ( CDC_Handle->DataItf.OutPipe)
 80052ba:	7b61      	ldrb	r1, [r4, #13]
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80052bc:	2300      	movs	r3, #0
 80052be:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d0dc      	beq.n	800527e <USBH_CDC_InterfaceDeInit+0x16>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80052c4:	4628      	mov	r0, r5
 80052c6:	f000 fec7 	bl	8006058 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80052ca:	7b61      	ldrb	r1, [r4, #13]
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 fee1 	bl	8006094 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80052d2:	2300      	movs	r3, #0
 80052d4:	7363      	strb	r3, [r4, #13]
 80052d6:	e7d2      	b.n	800527e <USBH_CDC_InterfaceDeInit+0x16>

080052d8 <USBH_CDC_InterfaceInit>:
{
 80052d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 80052da:	2202      	movs	r2, #2
{
 80052dc:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 80052de:	4611      	mov	r1, r2
 80052e0:	2301      	movs	r3, #1
{
 80052e2:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 80052e4:	f000 f9b2 	bl	800564c <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 80052e8:	28ff      	cmp	r0, #255	; 0xff
 80052ea:	f000 8089 	beq.w	8005400 <USBH_CDC_InterfaceInit+0x128>
    USBH_SelectInterface (phost, interface);
 80052ee:	4601      	mov	r1, r0
 80052f0:	4606      	mov	r6, r0
 80052f2:	4628      	mov	r0, r5
 80052f4:	f000 f9a0 	bl	8005638 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80052f8:	2050      	movs	r0, #80	; 0x50
 80052fa:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 80052fe:	f001 f875 	bl	80063ec <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005302:	231a      	movs	r3, #26
 8005304:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8005308:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800530a:	f896 134a 	ldrb.w	r1, [r6, #842]	; 0x34a
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800530e:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005310:	0608      	lsls	r0, r1, #24
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005312:	bf4a      	itet	mi
 8005314:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8005318:	7861      	ldrbpl	r1, [r4, #1]
 800531a:	8163      	strhmi	r3, [r4, #10]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800531c:	4628      	mov	r0, r5
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800531e:	bf48      	it	mi
 8005320:	7061      	strbmi	r1, [r4, #1]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005322:	f000 fe9f 	bl	8006064 <USBH_AllocPipe>
    USBH_OpenPipe  (phost,
 8005326:	f895 131d 	ldrb.w	r1, [r5, #797]	; 0x31d
 800532a:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 800532e:	7862      	ldrb	r2, [r4, #1]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005330:	4606      	mov	r6, r0
    USBH_OpenPipe  (phost,
 8005332:	8960      	ldrh	r0, [r4, #10]
 8005334:	9002      	str	r0, [sp, #8]
 8005336:	2003      	movs	r0, #3
 8005338:	e9cd 1000 	strd	r1, r0, [sp]
 800533c:	4631      	mov	r1, r6
 800533e:	4628      	mov	r0, r5
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005340:	7026      	strb	r6, [r4, #0]
    USBH_OpenPipe  (phost,
 8005342:	f000 fe79 	bl	8006038 <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005346:	2200      	movs	r2, #0
 8005348:	7821      	ldrb	r1, [r4, #0]
 800534a:	4628      	mov	r0, r5
 800534c:	f001 f806 	bl	800635c <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8005350:	2300      	movs	r3, #0
 8005352:	461a      	mov	r2, r3
 8005354:	210a      	movs	r1, #10
 8005356:	4628      	mov	r0, r5
 8005358:	f000 f978 	bl	800564c <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 800535c:	28ff      	cmp	r0, #255	; 0xff
 800535e:	d04f      	beq.n	8005400 <USBH_CDC_InterfaceInit+0x128>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005360:	231a      	movs	r3, #26
 8005362:	fb03 5300 	mla	r3, r3, r0, r5
 8005366:	f893 234a 	ldrb.w	r2, [r3, #842]	; 0x34a
 800536a:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
 800536e:	0611      	lsls	r1, r2, #24
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005370:	bf4c      	ite	mi
 8005372:	8363      	strhmi	r3, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005374:	8323      	strhpl	r3, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005376:	f04f 031a 	mov.w	r3, #26
 800537a:	fb03 5000 	mla	r0, r3, r0, r5
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800537e:	bf48      	it	mi
 8005380:	73e2      	strbmi	r2, [r4, #15]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005382:	f890 1352 	ldrb.w	r1, [r0, #850]	; 0x352
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005386:	bf58      	it	pl
 8005388:	73a2      	strbpl	r2, [r4, #14]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800538a:	060a      	lsls	r2, r1, #24
 800538c:	f8b0 3354 	ldrh.w	r3, [r0, #852]	; 0x354
 8005390:	d439      	bmi.n	8005406 <USBH_CDC_InterfaceInit+0x12e>
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005392:	73a1      	strb	r1, [r4, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005394:	8323      	strh	r3, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005396:	4628      	mov	r0, r5
 8005398:	f000 fe64 	bl	8006064 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800539c:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800539e:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80053a0:	4628      	mov	r0, r5
 80053a2:	f000 fe5f 	bl	8006064 <USBH_AllocPipe>
      USBH_OpenPipe  (phost,
 80053a6:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 80053aa:	f895 731d 	ldrb.w	r7, [r5, #797]	; 0x31d
 80053ae:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80053b2:	7ba2      	ldrb	r2, [r4, #14]
 80053b4:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80053b6:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 80053b8:	2602      	movs	r6, #2
 80053ba:	e9cd 6c01 	strd	r6, ip, [sp, #4]
 80053be:	9700      	str	r7, [sp, #0]
 80053c0:	4628      	mov	r0, r5
 80053c2:	f000 fe39 	bl	8006038 <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 80053c6:	8b67      	ldrh	r7, [r4, #26]
 80053c8:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 80053cc:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 80053d0:	7be2      	ldrb	r2, [r4, #15]
 80053d2:	7b21      	ldrb	r1, [r4, #12]
 80053d4:	9000      	str	r0, [sp, #0]
 80053d6:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80053da:	4628      	mov	r0, r5
      CDC_Handle->state = CDC_IDLE_STATE;
 80053dc:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 80053de:	f000 fe2b 	bl	8006038 <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80053e2:	4632      	mov	r2, r6
 80053e4:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 80053e6:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 ffb6 	bl	800635c <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80053f0:	4632      	mov	r2, r6
 80053f2:	7b21      	ldrb	r1, [r4, #12]
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 ffb1 	bl	800635c <USBH_LL_SetToggle>
      status = USBH_OK;
 80053fa:	4630      	mov	r0, r6
}
 80053fc:	b005      	add	sp, #20
 80053fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005400:	2002      	movs	r0, #2
}
 8005402:	b005      	add	sp, #20
 8005404:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005406:	73e1      	strb	r1, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005408:	8363      	strh	r3, [r4, #26]
 800540a:	7ba1      	ldrb	r1, [r4, #14]
 800540c:	e7c3      	b.n	8005396 <USBH_CDC_InterfaceInit+0xbe>
 800540e:	bf00      	nop

08005410 <USBH_CDC_TransmitCallback>:
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop

08005414 <USBH_CDC_ReceiveCallback>:
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop

08005418 <USBH_CDC_LineCodingChanged>:
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{

}
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop

0800541c <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800541c:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8005420:	b570      	push	{r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005422:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8005424:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8005428:	b082      	sub	sp, #8
 800542a:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 800542c:	2b04      	cmp	r3, #4
 800542e:	d807      	bhi.n	8005440 <USBH_CDC_Process+0x24>
 8005430:	e8df f003 	tbb	[pc, r3]
 8005434:	4a291509 	.word	0x4a291509
 8005438:	0c          	.byte	0x0c
 8005439:	00          	.byte	0x00
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800543a:	2302      	movs	r3, #2
 800543c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8005440:	2001      	movs	r0, #1
}
 8005442:	b002      	add	sp, #8
 8005444:	bd70      	pop	{r4, r5, r6, pc}
    status = USBH_OK;
 8005446:	2000      	movs	r0, #0
}
 8005448:	b002      	add	sp, #8
 800544a:	bd70      	pop	{r4, r5, r6, pc}
    req_status = USBH_ClrFeature(phost, 0x00U);
 800544c:	2100      	movs	r1, #0
 800544e:	f000 fd67 	bl	8005f20 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8005452:	2800      	cmp	r0, #0
 8005454:	d1f4      	bne.n	8005440 <USBH_CDC_Process+0x24>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005456:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 800545a:	2001      	movs	r0, #1
 800545c:	e7f1      	b.n	8005442 <USBH_CDC_Process+0x26>
  phost->Control.setup.b.wValue.w = 0U;
 800545e:	f242 0221 	movw	r2, #8225	; 0x2021
 8005462:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005466:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.wValue.w = 0U;
 8005468:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800546c:	2207      	movs	r2, #7
 800546e:	f000 fd71 	bl	8005f54 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8005472:	2800      	cmp	r0, #0
 8005474:	d0e1      	beq.n	800543a <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8005476:	2801      	cmp	r0, #1
 8005478:	d0e2      	beq.n	8005440 <USBH_CDC_Process+0x24>
        CDC_Handle->state = CDC_ERROR_STATE;
 800547a:	2304      	movs	r3, #4
  USBH_StatusTypeDef status = USBH_BUSY;
 800547c:	2001      	movs	r0, #1
        CDC_Handle->state = CDC_ERROR_STATE;
 800547e:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8005482:	b002      	add	sp, #8
 8005484:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.wValue.w = 0U;
 8005486:	f242 12a1 	movw	r2, #8609	; 0x21a1
 800548a:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800548e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005492:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8005496:	2207      	movs	r2, #7
 8005498:	f000 fd5c 	bl	8005f54 <USBH_CtlReq>
    if(req_status == USBH_OK)
 800549c:	2800      	cmp	r0, #0
 800549e:	d1ea      	bne.n	8005476 <USBH_CDC_Process+0x5a>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80054a0:	e9d4 2111 	ldrd	r2, r1, [r4, #68]	; 0x44
 80054a4:	684b      	ldr	r3, [r1, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 80054a6:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80054aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054ae:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d1c4      	bne.n	8005440 <USBH_CDC_Process+0x24>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80054b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80054b8:	680b      	ldr	r3, [r1, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d1c0      	bne.n	8005440 <USBH_CDC_Process+0x24>
        USBH_CDC_LineCodingChanged(phost);
 80054be:	4628      	mov	r0, r5
 80054c0:	f7ff ffaa 	bl	8005418 <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 80054c4:	2001      	movs	r0, #1
 80054c6:	e7bc      	b.n	8005442 <USBH_CDC_Process+0x26>
  switch (CDC_Handle->data_tx_state)
 80054c8:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 80054cc:	2801      	cmp	r0, #1
 80054ce:	d02f      	beq.n	8005530 <USBH_CDC_Process+0x114>
 80054d0:	2802      	cmp	r0, #2
 80054d2:	d10e      	bne.n	80054f2 <USBH_CDC_Process+0xd6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80054d4:	7b61      	ldrb	r1, [r4, #13]
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 ff2a 	bl	8006330 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 80054dc:	2801      	cmp	r0, #1
 80054de:	d044      	beq.n	800556a <USBH_CDC_Process+0x14e>
 80054e0:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
      if (URB_Status == USBH_URB_NOTREADY)
 80054e4:	2802      	cmp	r0, #2
 80054e6:	69db      	ldr	r3, [r3, #28]
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80054e8:	bf04      	itt	eq
 80054ea:	2201      	moveq	r2, #1
 80054ec:	f884 204d 	strbeq.w	r2, [r4, #77]	; 0x4d
      if (URB_Status == USBH_URB_NOTREADY)
 80054f0:	461c      	mov	r4, r3
  switch(CDC_Handle->data_rx_state)
 80054f2:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 80054f6:	2b03      	cmp	r3, #3
 80054f8:	d02c      	beq.n	8005554 <USBH_CDC_Process+0x138>
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d1a0      	bne.n	8005440 <USBH_CDC_Process+0x24>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80054fe:	7b21      	ldrb	r1, [r4, #12]
 8005500:	4628      	mov	r0, r5
 8005502:	f000 ff15 	bl	8006330 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8005506:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005508:	4606      	mov	r6, r0
    if(URB_Status == USBH_URB_DONE)
 800550a:	d199      	bne.n	8005440 <USBH_CDC_Process+0x24>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800550c:	7b21      	ldrb	r1, [r4, #12]
 800550e:	4628      	mov	r0, r5
 8005510:	f000 feca 	bl	80062a8 <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005514:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005516:	4298      	cmp	r0, r3
 8005518:	d002      	beq.n	8005520 <USBH_CDC_Process+0x104>
 800551a:	8b62      	ldrh	r2, [r4, #26]
 800551c:	4290      	cmp	r0, r2
 800551e:	d840      	bhi.n	80055a2 <USBH_CDC_Process+0x186>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005520:	2300      	movs	r3, #0
        USBH_CDC_ReceiveCallback(phost);
 8005522:	4628      	mov	r0, r5
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005524:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005528:	f7ff ff74 	bl	8005414 <USBH_CDC_ReceiveCallback>
  USBH_StatusTypeDef status = USBH_BUSY;
 800552c:	2001      	movs	r0, #1
 800552e:	e788      	b.n	8005442 <USBH_CDC_Process+0x26>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005530:	8b22      	ldrh	r2, [r4, #24]
 8005532:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005534:	7b63      	ldrb	r3, [r4, #13]
 8005536:	69e1      	ldr	r1, [r4, #28]
      USBH_BulkSendData (phost,
 8005538:	9000      	str	r0, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800553a:	4296      	cmp	r6, r2
      USBH_BulkSendData (phost,
 800553c:	bf98      	it	ls
 800553e:	b2b2      	uxthls	r2, r6
 8005540:	4628      	mov	r0, r5
 8005542:	f000 fd53 	bl	8005fec <USBH_BulkSendData>
 8005546:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800554a:	2202      	movs	r2, #2
 800554c:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8005550:	69dc      	ldr	r4, [r3, #28]
 8005552:	e7ce      	b.n	80054f2 <USBH_CDC_Process+0xd6>
    USBH_BulkReceiveData (phost,
 8005554:	7b23      	ldrb	r3, [r4, #12]
 8005556:	8b62      	ldrh	r2, [r4, #26]
 8005558:	6a21      	ldr	r1, [r4, #32]
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fd5c 	bl	8006018 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005560:	2304      	movs	r3, #4
 8005562:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  USBH_StatusTypeDef status = USBH_BUSY;
 8005566:	2001      	movs	r0, #1
 8005568:	e76b      	b.n	8005442 <USBH_CDC_Process+0x26>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800556a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800556c:	8b22      	ldrh	r2, [r4, #24]
 800556e:	4293      	cmp	r3, r2
 8005570:	d90b      	bls.n	800558a <USBH_CDC_Process+0x16e>
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005572:	69e1      	ldr	r1, [r4, #28]
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005574:	1a9b      	subs	r3, r3, r2
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005576:	440a      	add	r2, r1
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005578:	6263      	str	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800557a:	61e2      	str	r2, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 800557c:	b13b      	cbz	r3, 800558e <USBH_CDC_Process+0x172>
 800557e:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005582:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 8005586:	69dc      	ldr	r4, [r3, #28]
 8005588:	e7b3      	b.n	80054f2 <USBH_CDC_Process+0xd6>
        CDC_Handle->TxDataLength = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	6263      	str	r3, [r4, #36]	; 0x24
        CDC_Handle->data_tx_state = CDC_IDLE;
 800558e:	2300      	movs	r3, #0
 8005590:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005594:	4628      	mov	r0, r5
 8005596:	f7ff ff3b 	bl	8005410 <USBH_CDC_TransmitCallback>
 800559a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 800559e:	69dc      	ldr	r4, [r3, #28]
 80055a0:	e7a7      	b.n	80054f2 <USBH_CDC_Process+0xd6>
        CDC_Handle->pRxData += length;
 80055a2:	6a22      	ldr	r2, [r4, #32]
        CDC_Handle->RxDataLength -= length ;
 80055a4:	1a1b      	subs	r3, r3, r0
        CDC_Handle->pRxData += length;
 80055a6:	4402      	add	r2, r0
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80055a8:	2103      	movs	r1, #3
        CDC_Handle->RxDataLength -= length ;
 80055aa:	62a3      	str	r3, [r4, #40]	; 0x28
  USBH_StatusTypeDef status = USBH_BUSY;
 80055ac:	4630      	mov	r0, r6
        CDC_Handle->pRxData += length;
 80055ae:	6222      	str	r2, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80055b0:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
 80055b4:	e745      	b.n	8005442 <USBH_CDC_Process+0x26>
 80055b6:	bf00      	nop

080055b8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80055b8:	b370      	cbz	r0, 8005618 <USBH_Init+0x60>
{
 80055ba:	b538      	push	{r3, r4, r5, lr}

  /* Set DRiver ID */
  phost->id = id;

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80055bc:	2300      	movs	r3, #0
  phost->id = id;
 80055be:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 80055c2:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 80055c6:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 80055ca:	461a      	mov	r2, r3
 80055cc:	f500 746e 	add.w	r4, r0, #952	; 0x3b8
 80055d0:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 80055d4:	f843 2f04 	str.w	r2, [r3, #4]!
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80055d8:	42a3      	cmp	r3, r4
 80055da:	d1fb      	bne.n	80055d4 <USBH_Init+0x1c>
 80055dc:	f200 131b 	addw	r3, r0, #283	; 0x11b
 80055e0:	f200 341b 	addw	r4, r0, #795	; 0x31b
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 80055e4:	2200      	movs	r2, #0
 80055e6:	f803 2f01 	strb.w	r2, [r3, #1]!
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80055ea:	429c      	cmp	r4, r3
 80055ec:	d1fb      	bne.n	80055e6 <USBH_Init+0x2e>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80055ee:	2301      	movs	r3, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80055f0:	2540      	movs	r5, #64	; 0x40
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80055f2:	f44f 7480 	mov.w	r4, #256	; 0x100
  phost->gState = HOST_IDLE;
 80055f6:	7002      	strb	r2, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80055f8:	7042      	strb	r2, [r0, #1]
  phost->Timer = 0U;
 80055fa:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  phost->Control.errorcount = 0U;
 80055fe:	7642      	strb	r2, [r0, #25]
  phost->RequestState = CMD_SEND;
 8005600:	7083      	strb	r3, [r0, #2]
  phost->Control.state = CTRL_SETUP;
 8005602:	7603      	strb	r3, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005604:	7185      	strb	r5, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005606:	f8a0 431c 	strh.w	r4, [r0, #796]	; 0x31c
  if(pUsrFunc != NULL)
 800560a:	b109      	cbz	r1, 8005610 <USBH_Init+0x58>
    phost->pUser = pUsrFunc;
 800560c:	f8c0 13c8 	str.w	r1, [r0, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8005610:	f000 fde8 	bl	80061e4 <USBH_LL_Init>
  return USBH_OK;
 8005614:	2000      	movs	r0, #0
}
 8005616:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 8005618:	2002      	movs	r0, #2
}
 800561a:	4770      	bx	lr

0800561c <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 800561c:	b149      	cbz	r1, 8005632 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800561e:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8005622:	b933      	cbnz	r3, 8005632 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005624:	2201      	movs	r2, #1
 8005626:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 800562a:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 800562e:	4618      	mov	r0, r3
 8005630:	4770      	bx	lr
    status = USBH_FAIL;
 8005632:	2302      	movs	r3, #2
}
 8005634:	4618      	mov	r0, r3
 8005636:	4770      	bx	lr

08005638 <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005638:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 800563c:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 800563e:	bf86      	itte	hi
 8005640:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8005644:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005646:	2002      	movls	r0, #2
  }
  return status;
}
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop

0800564c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800564c:	b470      	push	{r4, r5, r6}
 800564e:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005650:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8005654:	428e      	cmp	r6, r1
 8005656:	b2e5      	uxtb	r5, r4
 8005658:	d007      	beq.n	800566a <USBH_FindInterface+0x1e>
 800565a:	29ff      	cmp	r1, #255	; 0xff
 800565c:	d005      	beq.n	800566a <USBH_FindInterface+0x1e>
 800565e:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005660:	b194      	cbz	r4, 8005688 <USBH_FindInterface+0x3c>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8005662:	25ff      	movs	r5, #255	; 0xff
}
 8005664:	4628      	mov	r0, r5
 8005666:	bc70      	pop	{r4, r5, r6}
 8005668:	4770      	bx	lr
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800566a:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 800566e:	4296      	cmp	r6, r2
 8005670:	d001      	beq.n	8005676 <USBH_FindInterface+0x2a>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005672:	2aff      	cmp	r2, #255	; 0xff
 8005674:	d1f3      	bne.n	800565e <USBH_FindInterface+0x12>
 8005676:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800567a:	429e      	cmp	r6, r3
 800567c:	d0f2      	beq.n	8005664 <USBH_FindInterface+0x18>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800567e:	2bff      	cmp	r3, #255	; 0xff
 8005680:	d0f0      	beq.n	8005664 <USBH_FindInterface+0x18>
 8005682:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005684:	2c00      	cmp	r4, #0
 8005686:	d1ec      	bne.n	8005662 <USBH_FindInterface+0x16>
 8005688:	2401      	movs	r4, #1
 800568a:	e7e1      	b.n	8005650 <USBH_FindInterface+0x4>

0800568c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800568c:	b510      	push	{r4, lr}
 800568e:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005690:	f000 fdd2 	bl	8006238 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005694:	4620      	mov	r0, r4
 8005696:	2101      	movs	r1, #1
 8005698:	f000 fe4e 	bl	8006338 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 800569c:	2000      	movs	r0, #0
 800569e:	bd10      	pop	{r4, pc}

080056a0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80056a0:	b570      	push	{r4, r5, r6, lr}
 80056a2:	b086      	sub	sp, #24
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 80056a4:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80056a8:	2202      	movs	r2, #2
{
 80056aa:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80056ac:	f88d 2017 	strb.w	r2, [sp, #23]
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80056b0:	bb4b      	cbnz	r3, 8005706 <USBH_Process+0x66>
 80056b2:	7803      	ldrb	r3, [r0, #0]
 80056b4:	b123      	cbz	r3, 80056c0 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80056b6:	7803      	ldrb	r3, [r0, #0]
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d001      	beq.n	80056c0 <USBH_Process+0x20>
      phost->gState = HOST_DEV_DISCONNECTED;
 80056bc:	2303      	movs	r3, #3
 80056be:	7003      	strb	r3, [r0, #0]
  switch (phost->gState)
 80056c0:	7823      	ldrb	r3, [r4, #0]
 80056c2:	2b0b      	cmp	r3, #11
 80056c4:	d81c      	bhi.n	8005700 <USBH_Process+0x60>
 80056c6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80056ca:	003d      	.short	0x003d
 80056cc:	0052001b 	.word	0x0052001b
 80056d0:	001b0082 	.word	0x001b0082
 80056d4:	00c500ad 	.word	0x00c500ad
 80056d8:	00e200d7 	.word	0x00e200d7
 80056dc:	00f500ed 	.word	0x00f500ed
 80056e0:	004a      	.short	0x004a
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80056e2:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 80056e6:	2900      	cmp	r1, #0
 80056e8:	f040 8178 	bne.w	80059dc <USBH_Process+0x33c>
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80056ec:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
      phost->device.current_interface = 0U;
 80056f0:	2200      	movs	r2, #0
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80056f2:	2b01      	cmp	r3, #1
      phost->device.current_interface = 0U;
 80056f4:	f884 2320 	strb.w	r2, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 80056f8:	f000 80c6 	beq.w	8005888 <USBH_Process+0x1e8>
        phost->gState  = HOST_INPUT;
 80056fc:	2307      	movs	r3, #7
 80056fe:	7023      	strb	r3, [r4, #0]
}
 8005700:	2000      	movs	r0, #0
 8005702:	b006      	add	sp, #24
 8005704:	bd70      	pop	{r4, r5, r6, pc}
  switch (phost->gState)
 8005706:	7802      	ldrb	r2, [r0, #0]
 8005708:	2a0b      	cmp	r2, #11
 800570a:	d8f9      	bhi.n	8005700 <USBH_Process+0x60>
 800570c:	a101      	add	r1, pc, #4	; (adr r1, 8005714 <USBH_Process+0x74>)
 800570e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005745 	.word	0x08005745
 8005718:	080058f1 	.word	0x080058f1
 800571c:	0800576f 	.word	0x0800576f
 8005720:	080057cf 	.word	0x080057cf
 8005724:	08005701 	.word	0x08005701
 8005728:	08005825 	.word	0x08005825
 800572c:	08005855 	.word	0x08005855
 8005730:	08005879 	.word	0x08005879
 8005734:	0800588f 	.word	0x0800588f
 8005738:	080058a5 	.word	0x080058a5
 800573c:	080058b5 	.word	0x080058b5
 8005740:	0800575f 	.word	0x0800575f
    if (phost->device.is_connected)
 8005744:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8005748:	2b00      	cmp	r3, #0
 800574a:	d0d9      	beq.n	8005700 <USBH_Process+0x60>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800574c:	2301      	movs	r3, #1
 800574e:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8005750:	20c8      	movs	r0, #200	; 0xc8
 8005752:	f000 fe15 	bl	8006380 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005756:	4620      	mov	r0, r4
 8005758:	f000 fd98 	bl	800628c <USBH_LL_ResetPort>
 800575c:	e7d0      	b.n	8005700 <USBH_Process+0x60>
    if(phost->pActiveClass != NULL)
 800575e:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8005762:	2b00      	cmp	r3, #0
 8005764:	d0cc      	beq.n	8005700 <USBH_Process+0x60>
      phost->pActiveClass->BgndProcess(phost);
 8005766:	695b      	ldr	r3, [r3, #20]
 8005768:	4620      	mov	r0, r4
 800576a:	4798      	blx	r3
 800576c:	e7c8      	b.n	8005700 <USBH_Process+0x60>
    USBH_Delay(100U);
 800576e:	2064      	movs	r0, #100	; 0x64
 8005770:	f000 fe06 	bl	8006380 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005774:	4620      	mov	r0, r4
 8005776:	f000 fd7b 	bl	8006270 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800577a:	2305      	movs	r3, #5
 800577c:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 800577e:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005782:	2100      	movs	r1, #0
 8005784:	4620      	mov	r0, r4
 8005786:	f000 fc6d 	bl	8006064 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800578a:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800578c:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800578e:	4620      	mov	r0, r4
 8005790:	f000 fc68 	bl	8006064 <USBH_AllocPipe>
 8005794:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 8005796:	79a0      	ldrb	r0, [r4, #6]
 8005798:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800579c:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80057a0:	7121      	strb	r1, [r4, #4]
    USBH_OpenPipe (phost,
 80057a2:	2500      	movs	r5, #0
 80057a4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80057a8:	9200      	str	r2, [sp, #0]
      USBH_OpenPipe (phost,
 80057aa:	2280      	movs	r2, #128	; 0x80
 80057ac:	4620      	mov	r0, r4
 80057ae:	f000 fc43 	bl	8006038 <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80057b2:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 80057b6:	79a6      	ldrb	r6, [r4, #6]
 80057b8:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80057bc:	7961      	ldrb	r1, [r4, #5]
 80057be:	9000      	str	r0, [sp, #0]
 80057c0:	9501      	str	r5, [sp, #4]
 80057c2:	462a      	mov	r2, r5
 80057c4:	9602      	str	r6, [sp, #8]
 80057c6:	4620      	mov	r0, r4
 80057c8:	f000 fc36 	bl	8006038 <USBH_OpenPipe>
 80057cc:	e798      	b.n	8005700 <USBH_Process+0x60>
 80057ce:	f504 735f 	add.w	r3, r4, #892	; 0x37c
 80057d2:	f504 716e 	add.w	r1, r4, #952	; 0x3b8
    phost->Pipes[i] = 0U;
 80057d6:	2200      	movs	r2, #0
 80057d8:	f843 2f04 	str.w	r2, [r3, #4]!
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80057dc:	428b      	cmp	r3, r1
 80057de:	d1fb      	bne.n	80057d8 <USBH_Process+0x138>
 80057e0:	f204 131b 	addw	r3, r4, #283	; 0x11b
 80057e4:	f204 321b 	addw	r2, r4, #795	; 0x31b
    phost->device.Data[i] = 0U;
 80057e8:	2500      	movs	r5, #0
 80057ea:	f803 5f01 	strb.w	r5, [r3, #1]!
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d1fb      	bne.n	80057ea <USBH_Process+0x14a>
    if(phost->pActiveClass != NULL)
 80057f2:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
  phost->gState = HOST_IDLE;
 80057f6:	7025      	strb	r5, [r4, #0]
  phost->RequestState = CMD_SEND;
 80057f8:	2301      	movs	r3, #1
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80057fa:	2040      	movs	r0, #64	; 0x40
  phost->device.address = USBH_ADDRESS_DEFAULT;
 80057fc:	f44f 7180 	mov.w	r1, #256	; 0x100
  phost->EnumState = ENUM_IDLE;
 8005800:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 8005802:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
  phost->Control.errorcount = 0U;
 8005806:	7665      	strb	r5, [r4, #25]
  phost->RequestState = CMD_SEND;
 8005808:	70a3      	strb	r3, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 800580a:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800580c:	71a0      	strb	r0, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800580e:	f8a4 131c 	strh.w	r1, [r4, #796]	; 0x31c
    if(phost->pActiveClass != NULL)
 8005812:	2a00      	cmp	r2, #0
 8005814:	f43f af74 	beq.w	8005700 <USBH_Process+0x60>
      phost->pActiveClass->DeInit(phost);
 8005818:	68d3      	ldr	r3, [r2, #12]
 800581a:	4620      	mov	r0, r4
 800581c:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800581e:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
 8005822:	e76d      	b.n	8005700 <USBH_Process+0x60>
  switch (phost->EnumState)
 8005824:	7863      	ldrb	r3, [r4, #1]
 8005826:	2b07      	cmp	r3, #7
 8005828:	f63f af6a 	bhi.w	8005700 <USBH_Process+0x60>
 800582c:	a201      	add	r2, pc, #4	; (adr r2, 8005834 <USBH_Process+0x194>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	08005943 	.word	0x08005943
 8005838:	0800590b 	.word	0x0800590b
 800583c:	08005983 	.word	0x08005983
 8005840:	0800596f 	.word	0x0800596f
 8005844:	0800592d 	.word	0x0800592d
 8005848:	0800591f 	.word	0x0800591f
 800584c:	080058fd 	.word	0x080058fd
 8005850:	080056e3 	.word	0x080056e3
    if(phost->pActiveClass != NULL)
 8005854:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80b2 	beq.w	80059c2 <USBH_Process+0x322>
      status = phost->pActiveClass->Requests(phost);
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	4620      	mov	r0, r4
 8005862:	4798      	blx	r3
 8005864:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 8005868:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800586c:	2b00      	cmp	r3, #0
 800586e:	f47f af47 	bne.w	8005700 <USBH_Process+0x60>
        phost->gState  = HOST_CLASS;
 8005872:	230b      	movs	r3, #11
 8005874:	7023      	strb	r3, [r4, #0]
 8005876:	e743      	b.n	8005700 <USBH_Process+0x60>
      if(phost->pUser != NULL)
 8005878:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800587c:	2b00      	cmp	r3, #0
 800587e:	f43f af3f 	beq.w	8005700 <USBH_Process+0x60>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005882:	2101      	movs	r1, #1
 8005884:	4620      	mov	r0, r4
 8005886:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005888:	2308      	movs	r3, #8
 800588a:	7023      	strb	r3, [r4, #0]
 800588c:	e738      	b.n	8005700 <USBH_Process+0x60>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800588e:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 8005892:	4620      	mov	r0, r4
 8005894:	f000 fb10 	bl	8005eb8 <USBH_SetCfg>
 8005898:	2800      	cmp	r0, #0
 800589a:	f47f af31 	bne.w	8005700 <USBH_Process+0x60>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800589e:	2309      	movs	r3, #9
 80058a0:	7023      	strb	r3, [r4, #0]
 80058a2:	e72d      	b.n	8005700 <USBH_Process+0x60>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80058a4:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80058a8:	069b      	lsls	r3, r3, #26
 80058aa:	f100 8082 	bmi.w	80059b2 <USBH_Process+0x312>
      phost->gState  = HOST_CHECK_CLASS;
 80058ae:	230a      	movs	r3, #10
 80058b0:	7023      	strb	r3, [r4, #0]
 80058b2:	e725      	b.n	8005700 <USBH_Process+0x60>
    if(phost->ClassNumber == 0U)
 80058b4:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f43f af21 	beq.w	8005700 <USBH_Process+0x60>
      phost->pActiveClass = NULL;
 80058be:	2200      	movs	r2, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80058c0:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
      phost->pActiveClass = NULL;
 80058c4:	f8c4 2378 	str.w	r2, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80058c8:	7919      	ldrb	r1, [r3, #4]
 80058ca:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 80058ce:	4291      	cmp	r1, r2
 80058d0:	d177      	bne.n	80059c2 <USBH_Process+0x322>
          phost->pActiveClass = phost->pClass[idx];
 80058d2:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80058d6:	4620      	mov	r0, r4
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	4798      	blx	r3
 80058dc:	2800      	cmp	r0, #0
 80058de:	d170      	bne.n	80059c2 <USBH_Process+0x322>
          phost->gState  = HOST_CLASS_REQUEST;
 80058e0:	2306      	movs	r3, #6
 80058e2:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80058e4:	4620      	mov	r0, r4
 80058e6:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80058ea:	2103      	movs	r1, #3
 80058ec:	4798      	blx	r3
 80058ee:	e707      	b.n	8005700 <USBH_Process+0x60>
    if (phost->device.PortEnabled == 1U)
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	f47f af05 	bne.w	8005700 <USBH_Process+0x60>
      phost->gState = HOST_DEV_ATTACHED;
 80058f6:	2302      	movs	r3, #2
 80058f8:	7003      	strb	r3, [r0, #0]
 80058fa:	e701      	b.n	8005700 <USBH_Process+0x60>
    if (phost->device.DevDesc.iProduct != 0U)
 80058fc:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8005900:	2900      	cmp	r1, #0
 8005902:	d161      	bne.n	80059c8 <USBH_Process+0x328>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8005904:	2307      	movs	r3, #7
 8005906:	7063      	strb	r3, [r4, #1]
 8005908:	e6fa      	b.n	8005700 <USBH_Process+0x60>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800590a:	2112      	movs	r1, #18
 800590c:	4620      	mov	r0, r4
 800590e:	f000 f9af 	bl	8005c70 <USBH_Get_DevDesc>
 8005912:	2800      	cmp	r0, #0
 8005914:	f47f aef4 	bne.w	8005700 <USBH_Process+0x60>
      phost->EnumState = ENUM_SET_ADDR;
 8005918:	2302      	movs	r3, #2
 800591a:	7063      	strb	r3, [r4, #1]
 800591c:	e6f0      	b.n	8005700 <USBH_Process+0x60>
    if (phost->device.DevDesc.iManufacturer != 0U)
 800591e:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8005922:	2900      	cmp	r1, #0
 8005924:	d164      	bne.n	80059f0 <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8005926:	2306      	movs	r3, #6
 8005928:	7063      	strb	r3, [r4, #1]
 800592a:	e6e9      	b.n	8005700 <USBH_Process+0x60>
    if (USBH_Get_CfgDesc(phost,
 800592c:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8005930:	4620      	mov	r0, r4
 8005932:	f000 f9e9 	bl	8005d08 <USBH_Get_CfgDesc>
 8005936:	2800      	cmp	r0, #0
 8005938:	f47f aee2 	bne.w	8005700 <USBH_Process+0x60>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800593c:	2305      	movs	r3, #5
 800593e:	7063      	strb	r3, [r4, #1]
 8005940:	e6de      	b.n	8005700 <USBH_Process+0x60>
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8005942:	2108      	movs	r1, #8
 8005944:	4620      	mov	r0, r4
 8005946:	f000 f993 	bl	8005c70 <USBH_Get_DevDesc>
 800594a:	4605      	mov	r5, r0
 800594c:	2800      	cmp	r0, #0
 800594e:	f47f aed7 	bne.w	8005700 <USBH_Process+0x60>
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005952:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      USBH_OpenPipe (phost,
 8005956:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 800595a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 800595e:	7921      	ldrb	r1, [r4, #4]
 8005960:	9501      	str	r5, [sp, #4]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005962:	2601      	movs	r6, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8005964:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 8005966:	9202      	str	r2, [sp, #8]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8005968:	7066      	strb	r6, [r4, #1]
      USBH_OpenPipe (phost,
 800596a:	9000      	str	r0, [sp, #0]
 800596c:	e71d      	b.n	80057aa <USBH_Process+0x10a>
    if ( USBH_Get_CfgDesc(phost,
 800596e:	2109      	movs	r1, #9
 8005970:	4620      	mov	r0, r4
 8005972:	f000 f9c9 	bl	8005d08 <USBH_Get_CfgDesc>
 8005976:	2800      	cmp	r0, #0
 8005978:	f47f aec2 	bne.w	8005700 <USBH_Process+0x60>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800597c:	2304      	movs	r3, #4
 800597e:	7063      	strb	r3, [r4, #1]
 8005980:	e6be      	b.n	8005700 <USBH_Process+0x60>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 8005982:	2101      	movs	r1, #1
 8005984:	4620      	mov	r0, r4
 8005986:	f000 fa7d 	bl	8005e84 <USBH_SetAddress>
 800598a:	4605      	mov	r5, r0
 800598c:	2800      	cmp	r0, #0
 800598e:	f47f aeb7 	bne.w	8005700 <USBH_Process+0x60>
      USBH_Delay(2U);
 8005992:	2002      	movs	r0, #2
 8005994:	f000 fcf4 	bl	8006380 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 8005998:	2603      	movs	r6, #3
      USBH_OpenPipe (phost,
 800599a:	79a0      	ldrb	r0, [r4, #6]
 800599c:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80059a0:	7921      	ldrb	r1, [r4, #4]
 80059a2:	9501      	str	r5, [sp, #4]
      phost->device.address = USBH_DEVICE_ADDRESS;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      phost->EnumState = ENUM_GET_CFG_DESC;
 80059aa:	7066      	strb	r6, [r4, #1]
      USBH_OpenPipe (phost,
 80059ac:	9002      	str	r0, [sp, #8]
 80059ae:	9200      	str	r2, [sp, #0]
 80059b0:	e6fb      	b.n	80057aa <USBH_Process+0x10a>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80059b2:	2101      	movs	r1, #1
 80059b4:	4620      	mov	r0, r4
 80059b6:	f000 fa99 	bl	8005eec <USBH_SetFeature>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f47f aea0 	bne.w	8005700 <USBH_Process+0x60>
 80059c0:	e775      	b.n	80058ae <USBH_Process+0x20e>
      phost->gState  = HOST_ABORT_STATE;
 80059c2:	230d      	movs	r3, #13
 80059c4:	7023      	strb	r3, [r4, #0]
 80059c6:	e69b      	b.n	8005700 <USBH_Process+0x60>
      if ( USBH_Get_StringDesc(phost,
 80059c8:	23ff      	movs	r3, #255	; 0xff
 80059ca:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80059ce:	4620      	mov	r0, r4
 80059d0:	f000 fa2e 	bl	8005e30 <USBH_Get_StringDesc>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f47f ae93 	bne.w	8005700 <USBH_Process+0x60>
 80059da:	e793      	b.n	8005904 <USBH_Process+0x264>
      if ( USBH_Get_StringDesc(phost,
 80059dc:	23ff      	movs	r3, #255	; 0xff
 80059de:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80059e2:	4620      	mov	r0, r4
 80059e4:	f000 fa24 	bl	8005e30 <USBH_Get_StringDesc>
 80059e8:	2800      	cmp	r0, #0
 80059ea:	f43f ae7f 	beq.w	80056ec <USBH_Process+0x4c>
 80059ee:	e687      	b.n	8005700 <USBH_Process+0x60>
      if ( USBH_Get_StringDesc(phost,
 80059f0:	23ff      	movs	r3, #255	; 0xff
 80059f2:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80059f6:	4620      	mov	r0, r4
 80059f8:	f000 fa1a 	bl	8005e30 <USBH_Get_StringDesc>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	f47f ae7f 	bne.w	8005700 <USBH_Process+0x60>
 8005a02:	e790      	b.n	8005926 <USBH_Process+0x286>

08005a04 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8005a04:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop

08005a0c <USBH_LL_IncTimer>:
  phost->Timer ++;
 8005a0c:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8005a10:	3201      	adds	r2, #1
 8005a12:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005a16:	7802      	ldrb	r2, [r0, #0]
 8005a18:	2a0b      	cmp	r2, #11
 8005a1a:	d000      	beq.n	8005a1e <USBH_LL_IncTimer+0x12>
}
 8005a1c:	4770      	bx	lr
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8005a1e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d0fa      	beq.n	8005a1c <USBH_LL_IncTimer+0x10>
    phost->pActiveClass->SOFProcess(phost);
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	4718      	bx	r3
 8005a2a:	bf00      	nop

08005a2c <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 8005a32:	4770      	bx	lr

08005a34 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 8005a3a:	4770      	bx	lr

08005a3c <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8005a3c:	7802      	ldrb	r2, [r0, #0]
{
 8005a3e:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8005a40:	b94a      	cbnz	r2, 8005a56 <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 8005a42:	f8d0 23c8 	ldr.w	r2, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 8005a46:	2101      	movs	r1, #1
 8005a48:	f880 131e 	strb.w	r1, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8005a4c:	b10a      	cbz	r2, 8005a52 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8005a4e:	2104      	movs	r1, #4
 8005a50:	4790      	blx	r2
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005a52:	2000      	movs	r0, #0
 8005a54:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 8005a56:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 8005a5a:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8005a5c:	bf04      	itt	eq
 8005a5e:	2202      	moveq	r2, #2
 8005a60:	7002      	strbeq	r2, [r0, #0]
}
 8005a62:	2000      	movs	r0, #0
 8005a64:	bd08      	pop	{r3, pc}
 8005a66:	bf00      	nop

08005a68 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8005a68:	b510      	push	{r4, lr}
 8005a6a:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8005a6c:	f000 fbf2 	bl	8006254 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8005a70:	7921      	ldrb	r1, [r4, #4]
 8005a72:	4620      	mov	r0, r4
 8005a74:	f000 fb0e 	bl	8006094 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8005a78:	7961      	ldrb	r1, [r4, #5]
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f000 fb0a 	bl	8006094 <USBH_FreePipe>

  phost->device.is_connected = 0U;

  if(phost->pUser != NULL)
 8005a80:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
  phost->device.is_connected = 0U;
 8005a84:	2200      	movs	r2, #0
 8005a86:	f884 231e 	strb.w	r2, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 8005a8a:	b113      	cbz	r3, 8005a92 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8005a8c:	2105      	movs	r1, #5
 8005a8e:	4620      	mov	r0, r4
 8005a90:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 fbd0 	bl	8006238 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <USBH_CtlReq.part.0>:
  * @param  req: Setup Request Structure
  * @param  buff: data buffer address to store the response
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
 8005aa0:	b530      	push	{r4, r5, lr}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8005aa2:	7e03      	ldrb	r3, [r0, #24]
 8005aa4:	3b01      	subs	r3, #1
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	4604      	mov	r4, r0
  switch (phost->Control.state)
 8005aaa:	2b0a      	cmp	r3, #10
 8005aac:	d812      	bhi.n	8005ad4 <USBH_CtlReq.part.0+0x34>
 8005aae:	e8df f003 	tbb	[pc, r3]
 8005ab2:	8a81      	.short	0x8a81
 8005ab4:	2e200667 	.word	0x2e200667
 8005ab8:	4c733c14 	.word	0x4c733c14
 8005abc:	57          	.byte	0x57
 8005abd:	00          	.byte	0x00
    phost->Control.state = CTRL_DATA_IN_WAIT;
    break;

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005abe:	7901      	ldrb	r1, [r0, #4]
 8005ac0:	f000 fc36 	bl	8006330 <USBH_LL_GetURBState>

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8005ac4:	2801      	cmp	r0, #1
 8005ac6:	d047      	beq.n	8005b58 <USBH_CtlReq.part.0+0xb8>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8005ac8:	2805      	cmp	r0, #5
 8005aca:	d037      	beq.n	8005b3c <USBH_CtlReq.part.0+0x9c>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 8005acc:	2804      	cmp	r0, #4
 8005ace:	d101      	bne.n	8005ad4 <USBH_CtlReq.part.0+0x34>
        phost->Control.state = CTRL_ERROR;
 8005ad0:	230b      	movs	r3, #11
 8005ad2:	7623      	strb	r3, [r4, #24]
 8005ad4:	2001      	movs	r0, #1
}
 8005ad6:	b003      	add	sp, #12
 8005ad8:	bd30      	pop	{r4, r5, pc}
    USBH_CtlReceiveData (phost,
 8005ada:	2200      	movs	r2, #0
 8005adc:	7903      	ldrb	r3, [r0, #4]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	f000 fa74 	bl	8005fcc <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8005ae4:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8005ae8:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8005aea:	2308      	movs	r3, #8
 8005aec:	7623      	strb	r3, [r4, #24]
 8005aee:	2001      	movs	r0, #1
 8005af0:	e7f1      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
    USBH_CtlSendData (phost,
 8005af2:	2501      	movs	r5, #1
 8005af4:	7943      	ldrb	r3, [r0, #5]
 8005af6:	8982      	ldrh	r2, [r0, #12]
 8005af8:	6881      	ldr	r1, [r0, #8]
 8005afa:	9500      	str	r5, [sp, #0]
 8005afc:	f000 fa4e 	bl	8005f9c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8005b00:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8005b04:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8005b06:	2306      	movs	r3, #6
 8005b08:	4628      	mov	r0, r5
 8005b0a:	7623      	strb	r3, [r4, #24]
 8005b0c:	e7e3      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005b0e:	7941      	ldrb	r1, [r0, #5]
 8005b10:	f000 fc0e 	bl	8006330 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8005b14:	2801      	cmp	r0, #1
 8005b16:	d06a      	beq.n	8005bee <USBH_CtlReq.part.0+0x14e>
    else if  (URB_Status == USBH_URB_STALL)
 8005b18:	2805      	cmp	r0, #5
 8005b1a:	d00f      	beq.n	8005b3c <USBH_CtlReq.part.0+0x9c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005b1c:	2802      	cmp	r0, #2
 8005b1e:	d071      	beq.n	8005c04 <USBH_CtlReq.part.0+0x164>
      if (URB_Status == USBH_URB_ERROR)
 8005b20:	2804      	cmp	r0, #4
 8005b22:	d1d7      	bne.n	8005ad4 <USBH_CtlReq.part.0+0x34>
        phost->Control.state = CTRL_ERROR;
 8005b24:	230b      	movs	r3, #11
 8005b26:	7623      	strb	r3, [r4, #24]
 8005b28:	e026      	b.n	8005b78 <USBH_CtlReq.part.0+0xd8>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8005b2a:	7901      	ldrb	r1, [r0, #4]
 8005b2c:	f000 fc00 	bl	8006330 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8005b30:	2801      	cmp	r0, #1
 8005b32:	d054      	beq.n	8005bde <USBH_CtlReq.part.0+0x13e>
    else if (URB_Status == USBH_URB_ERROR)
 8005b34:	2804      	cmp	r0, #4
 8005b36:	d0cb      	beq.n	8005ad0 <USBH_CtlReq.part.0+0x30>
      if(URB_Status == USBH_URB_STALL)
 8005b38:	2805      	cmp	r0, #5
 8005b3a:	d1cb      	bne.n	8005ad4 <USBH_CtlReq.part.0+0x34>
      phost->RequestState = CMD_SEND;
 8005b3c:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8005b3e:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8005b40:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8005b42:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8005b44:	7623      	strb	r3, [r4, #24]
}
 8005b46:	b003      	add	sp, #12
 8005b48:	bd30      	pop	{r4, r5, pc}
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8005b4a:	7941      	ldrb	r1, [r0, #5]
 8005b4c:	f000 fbf0 	bl	8006330 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8005b50:	2801      	cmp	r0, #1
 8005b52:	d044      	beq.n	8005bde <USBH_CtlReq.part.0+0x13e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8005b54:	2802      	cmp	r0, #2
 8005b56:	d1b9      	bne.n	8005acc <USBH_CtlReq.part.0+0x2c>
          phost->Control.state = CTRL_STATUS_OUT;
 8005b58:	2309      	movs	r3, #9
 8005b5a:	7623      	strb	r3, [r4, #24]
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	e7ba      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8005b60:	7e43      	ldrb	r3, [r0, #25]
 8005b62:	3301      	adds	r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	7643      	strb	r3, [r0, #25]
 8005b6a:	d94f      	bls.n	8005c0c <USBH_CtlReq.part.0+0x16c>
      phost->Control.state = CTRL_SETUP;
      phost->RequestState = CMD_SEND;
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8005b6c:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8005b70:	2106      	movs	r1, #6
 8005b72:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	7663      	strb	r3, [r4, #25]
        phost->RequestState = CMD_SEND;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 8005b7c:	2002      	movs	r0, #2
 8005b7e:	e7aa      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
    phost->Control.timer = (uint16_t)phost->Timer;
 8005b80:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 8005b84:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 8005b86:	8982      	ldrh	r2, [r0, #12]
 8005b88:	7903      	ldrb	r3, [r0, #4]
 8005b8a:	6881      	ldr	r1, [r0, #8]
 8005b8c:	f000 fa1e 	bl	8005fcc <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 8005b90:	2304      	movs	r3, #4
 8005b92:	7623      	strb	r3, [r4, #24]
 8005b94:	2001      	movs	r0, #1
 8005b96:	e79e      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
    USBH_CtlSendData (phost,
 8005b98:	2501      	movs	r5, #1
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	7943      	ldrb	r3, [r0, #5]
 8005b9e:	9500      	str	r5, [sp, #0]
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	f000 f9fb 	bl	8005f9c <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8005ba6:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8005baa:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8005bac:	230a      	movs	r3, #10
 8005bae:	4628      	mov	r0, r5
 8005bb0:	7623      	strb	r3, [r4, #24]
 8005bb2:	e790      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8005bb4:	7942      	ldrb	r2, [r0, #5]
 8005bb6:	f100 0110 	add.w	r1, r0, #16
 8005bba:	f000 f9df 	bl	8005f7c <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	7623      	strb	r3, [r4, #24]
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	e787      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8005bc6:	7941      	ldrb	r1, [r0, #5]
 8005bc8:	f000 fbb2 	bl	8006330 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 8005bcc:	2801      	cmp	r0, #1
 8005bce:	d012      	beq.n	8005bf6 <USBH_CtlReq.part.0+0x156>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8005bd0:	2804      	cmp	r0, #4
 8005bd2:	f43f af7d 	beq.w	8005ad0 <USBH_CtlReq.part.0+0x30>
 8005bd6:	2802      	cmp	r0, #2
 8005bd8:	f47f af7c 	bne.w	8005ad4 <USBH_CtlReq.part.0+0x34>
 8005bdc:	e778      	b.n	8005ad0 <USBH_CtlReq.part.0+0x30>
      phost->Control.state =CTRL_IDLE;
 8005bde:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8005be0:	2301      	movs	r3, #1
 8005be2:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8005be4:	7620      	strb	r0, [r4, #24]
}
 8005be6:	b003      	add	sp, #12
 8005be8:	bd30      	pop	{r4, r5, pc}
        if (direction == USB_D2H)
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	dbb4      	blt.n	8005b58 <USBH_CtlReq.part.0+0xb8>
          phost->Control.state = CTRL_STATUS_IN;
 8005bee:	2307      	movs	r3, #7
 8005bf0:	7623      	strb	r3, [r4, #24]
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	e76f      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
      if (phost->Control.setup.b.wLength.w != 0U)
 8005bf6:	8ae2      	ldrh	r2, [r4, #22]
 8005bf8:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	d0f4      	beq.n	8005bea <USBH_CtlReq.part.0+0x14a>
        if (direction == USB_D2H)
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	db09      	blt.n	8005c18 <USBH_CtlReq.part.0+0x178>
          phost->Control.state = CTRL_DATA_OUT;
 8005c04:	2305      	movs	r3, #5
 8005c06:	7623      	strb	r3, [r4, #24]
 8005c08:	2001      	movs	r0, #1
 8005c0a:	e764      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
      USBH_LL_Stop(phost);
 8005c0c:	f000 fb22 	bl	8006254 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8005c10:	2001      	movs	r0, #1
 8005c12:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8005c14:	70a0      	strb	r0, [r4, #2]
 8005c16:	e75e      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
          phost->Control.state = CTRL_DATA_IN;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	7623      	strb	r3, [r4, #24]
 8005c1c:	e75b      	b.n	8005ad6 <USBH_CtlReq.part.0+0x36>
 8005c1e:	bf00      	nop

08005c20 <USBH_GetDescriptor>:
{
 8005c20:	b470      	push	{r4, r5, r6}
  if(phost->RequestState == CMD_SEND)
 8005c22:	7885      	ldrb	r5, [r0, #2]
{
 8005c24:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  if(phost->RequestState == CMD_SEND)
 8005c28:	2d01      	cmp	r5, #1
 8005c2a:	d004      	beq.n	8005c36 <USBH_GetDescriptor+0x16>
  switch (phost->RequestState)
 8005c2c:	2d02      	cmp	r5, #2
 8005c2e:	d11b      	bne.n	8005c68 <USBH_GetDescriptor+0x48>
}
 8005c30:	bc70      	pop	{r4, r5, r6}
 8005c32:	f7ff bf35 	b.w	8005aa0 <USBH_CtlReq.part.0>
 8005c36:	4604      	mov	r4, r0
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005c38:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005c3c:	f061 017f 	orn	r1, r1, #127	; 0x7f
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8005c40:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8005c44:	8262      	strh	r2, [r4, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8005c46:	7421      	strb	r1, [r4, #16]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8005c48:	bf08      	it	eq
 8005c4a:	f240 4209 	movweq	r2, #1033	; 0x409
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005c4e:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0U;
 8005c52:	bf18      	it	ne
 8005c54:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8005c56:	7461      	strb	r1, [r4, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8005c58:	82a2      	strh	r2, [r4, #20]
    phost->Control.state = CTRL_SETUP;
 8005c5a:	2101      	movs	r1, #1
    phost->RequestState = CMD_WAIT;
 8005c5c:	2202      	movs	r2, #2
    phost->Control.setup.b.wLength.w = length;
 8005c5e:	82e6      	strh	r6, [r4, #22]
    phost->Control.buff = buff;
 8005c60:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 8005c62:	81a6      	strh	r6, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8005c64:	7621      	strb	r1, [r4, #24]
    phost->RequestState = CMD_WAIT;
 8005c66:	70a2      	strb	r2, [r4, #2]
}
 8005c68:	2001      	movs	r0, #1
 8005c6a:	bc70      	pop	{r4, r5, r6}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop

08005c70 <USBH_Get_DevDesc>:
{
 8005c70:	b530      	push	{r4, r5, lr}
 8005c72:	b083      	sub	sp, #12
  if((status = USBH_GetDescriptor(phost,
 8005c74:	460d      	mov	r5, r1
 8005c76:	9100      	str	r1, [sp, #0]
 8005c78:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8005c7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c80:	2100      	movs	r1, #0
{
 8005c82:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 8005c84:	f7ff ffcc 	bl	8005c20 <USBH_GetDescriptor>
 8005c88:	b108      	cbz	r0, 8005c8e <USBH_Get_DevDesc+0x1e>
}
 8005c8a:	b003      	add	sp, #12
 8005c8c:	bd30      	pop	{r4, r5, pc}
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8005c8e:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8005c92:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8005c96:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8005c9a:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8005c9e:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8005ca2:	f884 1323 	strb.w	r1, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8005ca6:	f8a4 2324 	strh.w	r2, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8005caa:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8005cae:	f894 2122 	ldrb.w	r2, [r4, #290]	; 0x122
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8005cb2:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  if (length > 8U)
 8005cb6:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8005cb8:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8005cbc:	f884 1327 	strb.w	r1, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8005cc0:	f884 2328 	strb.w	r2, [r4, #808]	; 0x328
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8005cc4:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 8005cc8:	d9df      	bls.n	8005c8a <USBH_Get_DevDesc+0x1a>
    dev_desc->idVendor           = LE16 (buf +  8);
 8005cca:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    dev_desc->idProduct          = LE16 (buf + 10);
 8005cce:	f8b4 2126 	ldrh.w	r2, [r4, #294]	; 0x126
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8005cd2:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8005cd6:	f894 512a 	ldrb.w	r5, [r4, #298]	; 0x12a
    dev_desc->idVendor           = LE16 (buf +  8);
 8005cda:	f8a4 132a 	strh.w	r1, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8005cde:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8005ce2:	f894 112b 	ldrb.w	r1, [r4, #299]	; 0x12b
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8005ce6:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8005cea:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8005cee:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8005cf2:	f884 5330 	strb.w	r5, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8005cf6:	f884 1331 	strb.w	r1, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8005cfa:	f884 2332 	strb.w	r2, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8005cfe:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8005d02:	b003      	add	sp, #12
 8005d04:	bd30      	pop	{r4, r5, pc}
 8005d06:	bf00      	nop

08005d08 <USBH_Get_CfgDesc>:
{
 8005d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d0c:	b082      	sub	sp, #8
  pData = phost->device.CfgDesc_Raw;
 8005d0e:	f100 041c 	add.w	r4, r0, #28
{
 8005d12:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8005d14:	9100      	str	r1, [sp, #0]
 8005d16:	4623      	mov	r3, r4
 8005d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d1c:	2100      	movs	r1, #0
{
 8005d1e:	4605      	mov	r5, r0
  if((status = USBH_GetDescriptor(phost,
 8005d20:	f7ff ff7e 	bl	8005c20 <USBH_GetDescriptor>
 8005d24:	b110      	cbz	r0, 8005d2c <USBH_Get_CfgDesc+0x24>
}
 8005d26:	b002      	add	sp, #8
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8005d2c:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8005d2e:	7f6a      	ldrb	r2, [r5, #29]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8005d30:	f885 3334 	strb.w	r3, [r5, #820]	; 0x334
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8005d34:	f895 3020 	ldrb.w	r3, [r5, #32]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8005d38:	f885 2335 	strb.w	r2, [r5, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8005d3c:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8005d40:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8005d44:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8005d48:	8be9      	ldrh	r1, [r5, #30]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8005d4a:	f885 2339 	strb.w	r2, [r5, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8005d4e:	f885 333a 	strb.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8005d52:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8005d56:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8005d5a:	f8a5 1336 	strh.w	r1, [r5, #822]	; 0x336
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005d5e:	2e09      	cmp	r6, #9
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8005d60:	f885 233b 	strb.w	r2, [r5, #827]	; 0x33b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8005d64:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8005d68:	d9dd      	bls.n	8005d26 <USBH_Get_CfgDesc+0x1e>
 8005d6a:	462f      	mov	r7, r5
 8005d6c:	4684      	mov	ip, r0
    ptr = USB_LEN_CFG_DESC;
 8005d6e:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8005d70:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005d74:	4291      	cmp	r1, r2
 8005d76:	d9d6      	bls.n	8005d26 <USBH_Get_CfgDesc+0x1e>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005d78:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005d7a:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005d7c:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005d7e:	7866      	ldrb	r6, [r4, #1]
 8005d80:	2e04      	cmp	r6, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005d82:	b29a      	uxth	r2, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8005d84:	d1f6      	bne.n	8005d74 <USBH_Get_CfgDesc+0x6c>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8005d86:	7823      	ldrb	r3, [r4, #0]
 8005d88:	f887 333e 	strb.w	r3, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8005d8c:	7863      	ldrb	r3, [r4, #1]
 8005d8e:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8005d92:	78a3      	ldrb	r3, [r4, #2]
 8005d94:	f887 3340 	strb.w	r3, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8005d98:	78e3      	ldrb	r3, [r4, #3]
 8005d9a:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8005d9e:	f894 9004 	ldrb.w	r9, [r4, #4]
 8005da2:	f887 9342 	strb.w	r9, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8005da6:	7963      	ldrb	r3, [r4, #5]
 8005da8:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8005dac:	79a3      	ldrb	r3, [r4, #6]
 8005dae:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8005db2:	79e3      	ldrb	r3, [r4, #7]
 8005db4:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8005db8:	7a23      	ldrb	r3, [r4, #8]
 8005dba:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
        ep_ix = 0U;
 8005dbe:	2600      	movs	r6, #0
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8005dc0:	fb0e f80c 	mul.w	r8, lr, ip
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8005dc4:	454e      	cmp	r6, r9
 8005dc6:	d22a      	bcs.n	8005e1e <USBH_Get_CfgDesc+0x116>
 8005dc8:	4291      	cmp	r1, r2
 8005dca:	d928      	bls.n	8005e1e <USBH_Get_CfgDesc+0x116>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005dcc:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8005dce:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005dd0:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005dd2:	f894 a001 	ldrb.w	sl, [r4, #1]
 8005dd6:	f1ba 0f05 	cmp.w	sl, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8005dda:	b29a      	uxth	r2, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8005ddc:	d1f2      	bne.n	8005dc4 <USBH_Get_CfgDesc+0xbc>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8005dde:	3601      	adds	r6, #1
 8005de0:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
 8005de4:	442b      	add	r3, r5
 8005de6:	f894 9000 	ldrb.w	r9, [r4]
 8005dea:	f883 9340 	strb.w	r9, [r3, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8005dee:	f894 9001 	ldrb.w	r9, [r4, #1]
 8005df2:	f883 9341 	strb.w	r9, [r3, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8005df6:	f894 9002 	ldrb.w	r9, [r4, #2]
 8005dfa:	f883 9342 	strb.w	r9, [r3, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8005dfe:	f894 9003 	ldrb.w	r9, [r4, #3]
 8005e02:	f883 9343 	strb.w	r9, [r3, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8005e06:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 8005e0a:	f8a3 9344 	strh.w	r9, [r3, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8005e0e:	f894 9006 	ldrb.w	r9, [r4, #6]
 8005e12:	f883 9346 	strb.w	r9, [r3, #838]	; 0x346
 8005e16:	f897 9342 	ldrb.w	r9, [r7, #834]	; 0x342
            ep_ix++;
 8005e1a:	b2f6      	uxtb	r6, r6
 8005e1c:	e7d2      	b.n	8005dc4 <USBH_Get_CfgDesc+0xbc>
 8005e1e:	371a      	adds	r7, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8005e20:	f1bc 0f00 	cmp.w	ip, #0
 8005e24:	f47f af7f 	bne.w	8005d26 <USBH_Get_CfgDesc+0x1e>
 8005e28:	f04f 0c01 	mov.w	ip, #1
 8005e2c:	e7a2      	b.n	8005d74 <USBH_Get_CfgDesc+0x6c>
 8005e2e:	bf00      	nop

08005e30 <USBH_Get_StringDesc>:
{
 8005e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e32:	b083      	sub	sp, #12
                                  phost->device.Data,
 8005e34:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 8005e38:	461f      	mov	r7, r3
 8005e3a:	4614      	mov	r4, r2
  if((status = USBH_GetDescriptor(phost,
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8005e42:	462b      	mov	r3, r5
 8005e44:	2100      	movs	r1, #0
{
 8005e46:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 8005e48:	f7ff feea 	bl	8005c20 <USBH_GetDescriptor>
 8005e4c:	b918      	cbnz	r0, 8005e56 <USBH_Get_StringDesc+0x26>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8005e4e:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	d001      	beq.n	8005e5a <USBH_Get_StringDesc+0x2a>
}
 8005e56:	b003      	add	sp, #12
 8005e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8005e5a:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8005e5e:	3b02      	subs	r3, #2
 8005e60:	429f      	cmp	r7, r3
 8005e62:	bf28      	it	cs
 8005e64:	461f      	movcs	r7, r3
 8005e66:	b2b9      	uxth	r1, r7
    for (idx = 0U; idx < strlength; idx += 2U)
 8005e68:	b147      	cbz	r7, 8005e7c <USBH_Get_StringDesc+0x4c>
 8005e6a:	4603      	mov	r3, r0
      *pdest =  psrc[idx];
 8005e6c:	18ea      	adds	r2, r5, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8005e6e:	3302      	adds	r3, #2
 8005e70:	b29b      	uxth	r3, r3
      *pdest =  psrc[idx];
 8005e72:	7892      	ldrb	r2, [r2, #2]
 8005e74:	f804 2b01 	strb.w	r2, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8005e78:	4299      	cmp	r1, r3
 8005e7a:	d8f7      	bhi.n	8005e6c <USBH_Get_StringDesc+0x3c>
    *pdest = 0U; /* mark end of string */
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	7023      	strb	r3, [r4, #0]
}
 8005e80:	b003      	add	sp, #12
 8005e82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e84 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 8005e84:	7882      	ldrb	r2, [r0, #2]
 8005e86:	2a01      	cmp	r2, #1
 8005e88:	d005      	beq.n	8005e96 <USBH_SetAddress+0x12>
  switch (phost->RequestState)
 8005e8a:	2a02      	cmp	r2, #2
 8005e8c:	d101      	bne.n	8005e92 <USBH_SetAddress+0xe>
 8005e8e:	f7ff be07 	b.w	8005aa0 <USBH_CtlReq.part.0>
}
 8005e92:	2001      	movs	r0, #1
 8005e94:	4770      	bx	lr
{
 8005e96:	b430      	push	{r4, r5}
 8005e98:	4603      	mov	r3, r0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005e9a:	f44f 65a0 	mov.w	r5, #1280	; 0x500
    phost->Control.setup.b.wIndex.w = 0U;
 8005e9e:	2000      	movs	r0, #0
    phost->RequestState = CMD_WAIT;
 8005ea0:	2402      	movs	r4, #2
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8005ea2:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8005ea4:	6158      	str	r0, [r3, #20]
    phost->Control.buff = buff;
 8005ea6:	6098      	str	r0, [r3, #8]
    phost->Control.length = length;
 8005ea8:	8198      	strh	r0, [r3, #12]
    phost->RequestState = CMD_WAIT;
 8005eaa:	709c      	strb	r4, [r3, #2]
}
 8005eac:	2001      	movs	r0, #1
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8005eae:	8259      	strh	r1, [r3, #18]
    phost->Control.state = CTRL_SETUP;
 8005eb0:	761a      	strb	r2, [r3, #24]
}
 8005eb2:	bc30      	pop	{r4, r5}
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop

08005eb8 <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 8005eb8:	7882      	ldrb	r2, [r0, #2]
 8005eba:	2a01      	cmp	r2, #1
 8005ebc:	d005      	beq.n	8005eca <USBH_SetCfg+0x12>
  switch (phost->RequestState)
 8005ebe:	2a02      	cmp	r2, #2
 8005ec0:	d101      	bne.n	8005ec6 <USBH_SetCfg+0xe>
 8005ec2:	f7ff bded 	b.w	8005aa0 <USBH_CtlReq.part.0>
}
 8005ec6:	2001      	movs	r0, #1
 8005ec8:	4770      	bx	lr
{
 8005eca:	b430      	push	{r4, r5}
 8005ecc:	4603      	mov	r3, r0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005ece:	f44f 6510 	mov.w	r5, #2304	; 0x900
    phost->Control.setup.b.wIndex.w = 0U;
 8005ed2:	2000      	movs	r0, #0
    phost->RequestState = CMD_WAIT;
 8005ed4:	2402      	movs	r4, #2
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005ed6:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8005ed8:	6158      	str	r0, [r3, #20]
    phost->Control.buff = buff;
 8005eda:	6098      	str	r0, [r3, #8]
    phost->Control.length = length;
 8005edc:	8198      	strh	r0, [r3, #12]
    phost->RequestState = CMD_WAIT;
 8005ede:	709c      	strb	r4, [r3, #2]
}
 8005ee0:	2001      	movs	r0, #1
    phost->Control.setup.b.wValue.w = cfg_idx;
 8005ee2:	8259      	strh	r1, [r3, #18]
    phost->Control.state = CTRL_SETUP;
 8005ee4:	761a      	strb	r2, [r3, #24]
}
 8005ee6:	bc30      	pop	{r4, r5}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop

08005eec <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8005eec:	7882      	ldrb	r2, [r0, #2]
 8005eee:	2a01      	cmp	r2, #1
 8005ef0:	d005      	beq.n	8005efe <USBH_SetFeature+0x12>
  switch (phost->RequestState)
 8005ef2:	2a02      	cmp	r2, #2
 8005ef4:	d101      	bne.n	8005efa <USBH_SetFeature+0xe>
 8005ef6:	f7ff bdd3 	b.w	8005aa0 <USBH_CtlReq.part.0>
}
 8005efa:	2001      	movs	r0, #1
 8005efc:	4770      	bx	lr
{
 8005efe:	b430      	push	{r4, r5}
 8005f00:	4603      	mov	r3, r0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005f02:	f44f 7540 	mov.w	r5, #768	; 0x300
    phost->Control.setup.b.wIndex.w = 0U;
 8005f06:	2000      	movs	r0, #0
    phost->RequestState = CMD_WAIT;
 8005f08:	2402      	movs	r4, #2
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8005f0a:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8005f0c:	6158      	str	r0, [r3, #20]
    phost->Control.buff = buff;
 8005f0e:	6098      	str	r0, [r3, #8]
    phost->Control.length = length;
 8005f10:	8198      	strh	r0, [r3, #12]
    phost->RequestState = CMD_WAIT;
 8005f12:	709c      	strb	r4, [r3, #2]
}
 8005f14:	2001      	movs	r0, #1
    phost->Control.setup.b.wValue.w = wValue;
 8005f16:	8259      	strh	r1, [r3, #18]
    phost->Control.state = CTRL_SETUP;
 8005f18:	761a      	strb	r2, [r3, #24]
}
 8005f1a:	bc30      	pop	{r4, r5}
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop

08005f20 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8005f20:	7882      	ldrb	r2, [r0, #2]
 8005f22:	2a01      	cmp	r2, #1
 8005f24:	d005      	beq.n	8005f32 <USBH_ClrFeature+0x12>
  switch (phost->RequestState)
 8005f26:	2a02      	cmp	r2, #2
 8005f28:	d101      	bne.n	8005f2e <USBH_ClrFeature+0xe>
 8005f2a:	f7ff bdb9 	b.w	8005aa0 <USBH_CtlReq.part.0>
}
 8005f2e:	2001      	movs	r0, #1
 8005f30:	4770      	bx	lr
{
 8005f32:	b430      	push	{r4, r5}
 8005f34:	4603      	mov	r3, r0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005f36:	f44f 7581 	mov.w	r5, #258	; 0x102
    phost->Control.setup.b.wLength.w = 0U;
 8005f3a:	2000      	movs	r0, #0
    phost->RequestState = CMD_WAIT;
 8005f3c:	2402      	movs	r4, #2
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8005f3e:	611d      	str	r5, [r3, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8005f40:	82d8      	strh	r0, [r3, #22]
    phost->Control.buff = buff;
 8005f42:	6098      	str	r0, [r3, #8]
    phost->Control.length = length;
 8005f44:	8198      	strh	r0, [r3, #12]
    phost->RequestState = CMD_WAIT;
 8005f46:	709c      	strb	r4, [r3, #2]
}
 8005f48:	2001      	movs	r0, #1
    phost->Control.setup.b.wIndex.w = ep_num;
 8005f4a:	8299      	strh	r1, [r3, #20]
    phost->Control.state = CTRL_SETUP;
 8005f4c:	761a      	strb	r2, [r3, #24]
}
 8005f4e:	bc30      	pop	{r4, r5}
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop

08005f54 <USBH_CtlReq>:
{
 8005f54:	b410      	push	{r4}
  switch (phost->RequestState)
 8005f56:	7884      	ldrb	r4, [r0, #2]
 8005f58:	2c01      	cmp	r4, #1
 8005f5a:	d005      	beq.n	8005f68 <USBH_CtlReq+0x14>
 8005f5c:	2c02      	cmp	r4, #2
 8005f5e:	d109      	bne.n	8005f74 <USBH_CtlReq+0x20>
}
 8005f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f64:	f7ff bd9c 	b.w	8005aa0 <USBH_CtlReq.part.0>
 8005f68:	4603      	mov	r3, r0
    phost->RequestState = CMD_WAIT;
 8005f6a:	2002      	movs	r0, #2
    phost->Control.buff = buff;
 8005f6c:	6099      	str	r1, [r3, #8]
    phost->Control.length = length;
 8005f6e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8005f70:	761c      	strb	r4, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8005f72:	7098      	strb	r0, [r3, #2]
}
 8005f74:	2001      	movs	r0, #1
 8005f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8005f7c:	b530      	push	{r4, r5, lr}
 8005f7e:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005f80:	2400      	movs	r4, #0
 8005f82:	2508      	movs	r5, #8
 8005f84:	9101      	str	r1, [sp, #4]
 8005f86:	9403      	str	r4, [sp, #12]
 8005f88:	4611      	mov	r1, r2
 8005f8a:	9400      	str	r4, [sp, #0]
 8005f8c:	4623      	mov	r3, r4
 8005f8e:	4622      	mov	r2, r4
 8005f90:	9502      	str	r5, [sp, #8]
 8005f92:	f000 f9b3 	bl	80062fc <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8005f96:	4620      	mov	r0, r4
 8005f98:	b005      	add	sp, #20
 8005f9a:	bd30      	pop	{r4, r5, pc}

08005f9c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8005f9c:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005f9e:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8005fa2:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005fa4:	2d00      	cmp	r5, #0
{
 8005fa6:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005faa:	9202      	str	r2, [sp, #8]
{
 8005fac:	461d      	mov	r5, r3
    do_ping = 0U;
 8005fae:	bf18      	it	ne
 8005fb0:	2400      	movne	r4, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	9101      	str	r1, [sp, #4]
 8005fb8:	9200      	str	r2, [sp, #0]
 8005fba:	9403      	str	r4, [sp, #12]
 8005fbc:	4629      	mov	r1, r5
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f000 f99c 	bl	80062fc <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8005fc4:	2000      	movs	r0, #0
 8005fc6:	b005      	add	sp, #20
 8005fc8:	bd30      	pop	{r4, r5, pc}
 8005fca:	bf00      	nop

08005fcc <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8005fcc:	b530      	push	{r4, r5, lr}
 8005fce:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005fd0:	2400      	movs	r4, #0
 8005fd2:	2501      	movs	r5, #1
 8005fd4:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8005fd8:	9403      	str	r4, [sp, #12]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	9500      	str	r5, [sp, #0]
 8005fde:	4623      	mov	r3, r4
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	f000 f98b 	bl	80062fc <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	b005      	add	sp, #20
 8005fea:	bd30      	pop	{r4, r5, pc}

08005fec <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8005fec:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005fee:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8005ff2:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8005ff4:	2d00      	cmp	r5, #0
{
 8005ff6:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8005ffa:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8005ffc:	bf18      	it	ne
 8005ffe:	2400      	movne	r4, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8006000:	2201      	movs	r2, #1
 8006002:	9101      	str	r1, [sp, #4]
 8006004:	9200      	str	r2, [sp, #0]
 8006006:	4619      	mov	r1, r3
 8006008:	9403      	str	r4, [sp, #12]
 800600a:	2302      	movs	r3, #2
 800600c:	2200      	movs	r2, #0
 800600e:	f000 f975 	bl	80062fc <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8006012:	2000      	movs	r0, #0
 8006014:	b005      	add	sp, #20
 8006016:	bd30      	pop	{r4, r5, pc}

08006018 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8006018:	b530      	push	{r4, r5, lr}
 800601a:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800601c:	2400      	movs	r4, #0
 800601e:	2501      	movs	r5, #1
 8006020:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8006024:	9403      	str	r4, [sp, #12]
 8006026:	4619      	mov	r1, r3
 8006028:	9500      	str	r5, [sp, #0]
 800602a:	462a      	mov	r2, r5
 800602c:	2302      	movs	r3, #2
 800602e:	f000 f965 	bl	80062fc <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8006032:	4620      	mov	r0, r4
 8006034:	b005      	add	sp, #20
 8006036:	bd30      	pop	{r4, r5, pc}

08006038 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8006038:	b530      	push	{r4, r5, lr}
 800603a:	b085      	sub	sp, #20
 800603c:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8006040:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24

  USBH_LL_OpenPipe(phost,
 8006044:	9400      	str	r4, [sp, #0]
{
 8006046:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  USBH_LL_OpenPipe(phost,
 800604a:	e9cd 5401 	strd	r5, r4, [sp, #4]
 800604e:	f000 f92f 	bl	80062b0 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8006052:	2000      	movs	r0, #0
 8006054:	b005      	add	sp, #20
 8006056:	bd30      	pop	{r4, r5, pc}

08006058 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8006058:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 800605a:	f000 f941 	bl	80062e0 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 800605e:	2000      	movs	r0, #0
 8006060:	bd08      	pop	{r3, pc}
 8006062:	bf00      	nop

08006064 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006064:	b430      	push	{r4, r5}
 8006066:	f500 725f 	add.w	r2, r0, #892	; 0x37c
 800606a:	4605      	mov	r5, r0
 800606c:	2300      	movs	r3, #0
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800606e:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8006072:	0424      	lsls	r4, r4, #16
 8006074:	b2d8      	uxtb	r0, r3
 8006076:	d505      	bpl.n	8006084 <USBH_AllocPipe+0x20>
 8006078:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 800607a:	2b0b      	cmp	r3, #11
 800607c:	d1f7      	bne.n	800606e <USBH_AllocPipe+0xa>
 800607e:	20ff      	movs	r0, #255	; 0xff
}
 8006080:	bc30      	pop	{r4, r5}
 8006082:	4770      	bx	lr
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8006084:	33e0      	adds	r3, #224	; 0xe0
 8006086:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800608a:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
}
 800608e:	bc30      	pop	{r4, r5}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop

08006094 <USBH_FreePipe>:
   if(idx < 11U)
 8006094:	290a      	cmp	r1, #10
 8006096:	d807      	bhi.n	80060a8 <USBH_FreePipe+0x14>
 8006098:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 800609c:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 80060a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80060a4:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
}
 80060a8:	2000      	movs	r0, #0
 80060aa:	4770      	bx	lr

080060ac <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80060ac:	2904      	cmp	r1, #4
 80060ae:	d00b      	beq.n	80060c8 <USBH_UserProcess+0x1c>
 80060b0:	2905      	cmp	r1, #5
 80060b2:	d005      	beq.n	80060c0 <USBH_UserProcess+0x14>
 80060b4:	2902      	cmp	r1, #2
 80060b6:	d000      	beq.n	80060ba <USBH_UserProcess+0xe>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 80060b8:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 80060ba:	4b05      	ldr	r3, [pc, #20]	; (80060d0 <USBH_UserProcess+0x24>)
 80060bc:	7019      	strb	r1, [r3, #0]
  break;
 80060be:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 80060c0:	4b03      	ldr	r3, [pc, #12]	; (80060d0 <USBH_UserProcess+0x24>)
 80060c2:	2203      	movs	r2, #3
 80060c4:	701a      	strb	r2, [r3, #0]
  break;
 80060c6:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 80060c8:	4b01      	ldr	r3, [pc, #4]	; (80060d0 <USBH_UserProcess+0x24>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	701a      	strb	r2, [r3, #0]
}
 80060ce:	4770      	bx	lr
 80060d0:	200000d0 	.word	0x200000d0

080060d4 <MX_USB_HOST_Init>:
{
 80060d4:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80060d6:	2201      	movs	r2, #1
 80060d8:	490c      	ldr	r1, [pc, #48]	; (800610c <MX_USB_HOST_Init+0x38>)
 80060da:	480d      	ldr	r0, [pc, #52]	; (8006110 <MX_USB_HOST_Init+0x3c>)
 80060dc:	f7ff fa6c 	bl	80055b8 <USBH_Init>
 80060e0:	b980      	cbnz	r0, 8006104 <MX_USB_HOST_Init+0x30>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80060e2:	490c      	ldr	r1, [pc, #48]	; (8006114 <MX_USB_HOST_Init+0x40>)
 80060e4:	480a      	ldr	r0, [pc, #40]	; (8006110 <MX_USB_HOST_Init+0x3c>)
 80060e6:	f7ff fa99 	bl	800561c <USBH_RegisterClass>
 80060ea:	b940      	cbnz	r0, 80060fe <MX_USB_HOST_Init+0x2a>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80060ec:	4808      	ldr	r0, [pc, #32]	; (8006110 <MX_USB_HOST_Init+0x3c>)
 80060ee:	f7ff facd 	bl	800568c <USBH_Start>
 80060f2:	b900      	cbnz	r0, 80060f6 <MX_USB_HOST_Init+0x22>
}
 80060f4:	bd08      	pop	{r3, pc}
 80060f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80060fa:	f7fb bb33 	b.w	8001764 <Error_Handler>
    Error_Handler();
 80060fe:	f7fb fb31 	bl	8001764 <Error_Handler>
 8006102:	e7f3      	b.n	80060ec <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8006104:	f7fb fb2e 	bl	8001764 <Error_Handler>
 8006108:	e7eb      	b.n	80060e2 <MX_USB_HOST_Init+0xe>
 800610a:	bf00      	nop
 800610c:	080060ad 	.word	0x080060ad
 8006110:	2000037c 	.word	0x2000037c
 8006114:	20000014 	.word	0x20000014

08006118 <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8006118:	4801      	ldr	r0, [pc, #4]	; (8006120 <MX_USB_HOST_Process+0x8>)
 800611a:	f7ff bac1 	b.w	80056a0 <USBH_Process>
 800611e:	bf00      	nop
 8006120:	2000037c 	.word	0x2000037c

08006124 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006124:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcdHandle->Instance==USB_OTG_FS)
 8006126:	6803      	ldr	r3, [r0, #0]
{
 8006128:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800612a:	2400      	movs	r4, #0
  if(hcdHandle->Instance==USB_OTG_FS)
 800612c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006130:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8006134:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8006138:	9407      	str	r4, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 800613a:	d001      	beq.n	8006140 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800613c:	b009      	add	sp, #36	; 0x24
 800613e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006140:	4d1b      	ldr	r5, [pc, #108]	; (80061b0 <HAL_HCD_MspInit+0x8c>)
 8006142:	9401      	str	r4, [sp, #4]
 8006144:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006146:	481b      	ldr	r0, [pc, #108]	; (80061b4 <HAL_HCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	632b      	str	r3, [r5, #48]	; 0x30
 800614e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006150:	f003 0301 	and.w	r3, r3, #1
 8006154:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006156:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006158:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800615c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800615e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006160:	f7fc faa2 	bl	80026a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006164:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006168:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800616a:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800616c:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800616e:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006170:	4810      	ldr	r0, [pc, #64]	; (80061b4 <HAL_HCD_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006172:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006174:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006176:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800617a:	f7fc fa95 	bl	80026a8 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800617e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8006180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006184:	636b      	str	r3, [r5, #52]	; 0x34
 8006186:	9402      	str	r4, [sp, #8]
 8006188:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800618a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800618e:	646b      	str	r3, [r5, #68]	; 0x44
 8006190:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8006192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006196:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006198:	4622      	mov	r2, r4
 800619a:	4621      	mov	r1, r4
 800619c:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800619e:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80061a0:	f7fc f864 	bl	800226c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80061a4:	2043      	movs	r0, #67	; 0x43
 80061a6:	f7fc f897 	bl	80022d8 <HAL_NVIC_EnableIRQ>
}
 80061aa:	b009      	add	sp, #36	; 0x24
 80061ac:	bd30      	pop	{r4, r5, pc}
 80061ae:	bf00      	nop
 80061b0:	40023800 	.word	0x40023800
 80061b4:	40020000 	.word	0x40020000

080061b8 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 80061b8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80061bc:	f7ff bc26 	b.w	8005a0c <USBH_LL_IncTimer>

080061c0 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80061c0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80061c4:	f7ff bc3a 	b.w	8005a3c <USBH_LL_Connect>

080061c8 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80061c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80061cc:	f7ff bc4c 	b.w	8005a68 <USBH_LL_Disconnect>

080061d0 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop

080061d4 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80061d4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80061d8:	f7ff bc28 	b.w	8005a2c <USBH_LL_PortEnabled>

080061dc <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80061dc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80061e0:	f7ff bc28 	b.w	8005a34 <USBH_LL_PortDisabled>

080061e4 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80061e4:	f890 23c0 	ldrb.w	r2, [r0, #960]	; 0x3c0
 80061e8:	2a01      	cmp	r2, #1
 80061ea:	d001      	beq.n	80061f0 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 80061ec:	2000      	movs	r0, #0
 80061ee:	4770      	bx	lr
  hhcd_USB_OTG_FS.pData = phost;
 80061f0:	4b10      	ldr	r3, [pc, #64]	; (8006234 <USBH_LL_Init+0x50>)
{
 80061f2:	b570      	push	{r4, r5, r6, lr}
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80061f4:	2102      	movs	r1, #2
 80061f6:	4604      	mov	r4, r0
  phost->pData = &hhcd_USB_OTG_FS;
 80061f8:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80061fc:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006200:	2508      	movs	r5, #8
  hhcd_USB_OTG_FS.pData = phost;
 8006202:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006206:	60da      	str	r2, [r3, #12]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006208:	4618      	mov	r0, r3
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800620a:	2200      	movs	r2, #0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800620c:	601e      	str	r6, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800620e:	609d      	str	r5, [r3, #8]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006210:	6199      	str	r1, [r3, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006212:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006214:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006216:	f7fc fb9f 	bl	8002958 <HAL_HCD_Init>
 800621a:	b940      	cbnz	r0, 800622e <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800621c:	4805      	ldr	r0, [pc, #20]	; (8006234 <USBH_LL_Init+0x50>)
 800621e:	f7fd f851 	bl	80032c4 <HAL_HCD_GetCurrentFrame>
 8006222:	4601      	mov	r1, r0
 8006224:	4620      	mov	r0, r4
 8006226:	f7ff fbed 	bl	8005a04 <USBH_LL_SetTimer>
}
 800622a:	2000      	movs	r0, #0
 800622c:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 800622e:	f7fb fa99 	bl	8001764 <Error_Handler>
 8006232:	e7f3      	b.n	800621c <USBH_LL_Init+0x38>
 8006234:	20000748 	.word	0x20000748

08006238 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006238:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800623a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800623e:	f7fd f807 	bl	8003250 <HAL_HCD_Start>
 8006242:	2803      	cmp	r0, #3
 8006244:	bf96      	itet	ls
 8006246:	4b02      	ldrls	r3, [pc, #8]	; (8006250 <USBH_LL_Start+0x18>)
 8006248:	2002      	movhi	r0, #2
 800624a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800624c:	bd08      	pop	{r3, pc}
 800624e:	bf00      	nop
 8006250:	08007ad8 	.word	0x08007ad8

08006254 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006254:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8006256:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 800625a:	f7fd f80f 	bl	800327c <HAL_HCD_Stop>
 800625e:	2803      	cmp	r0, #3
 8006260:	bf96      	itet	ls
 8006262:	4b02      	ldrls	r3, [pc, #8]	; (800626c <USBH_LL_Stop+0x18>)
 8006264:	2002      	movhi	r0, #2
 8006266:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8006268:	bd08      	pop	{r3, pc}
 800626a:	bf00      	nop
 800626c:	08007ad8 	.word	0x08007ad8

08006270 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8006270:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006272:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006276:	f7fd f829 	bl	80032cc <HAL_HCD_GetCurrentSpeed>
 800627a:	2802      	cmp	r0, #2
 800627c:	bf96      	itet	ls
 800627e:	4b02      	ldrls	r3, [pc, #8]	; (8006288 <USBH_LL_GetSpeed+0x18>)
 8006280:	2001      	movhi	r0, #1
 8006282:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8006284:	bd08      	pop	{r3, pc}
 8006286:	bf00      	nop
 8006288:	08007ad4 	.word	0x08007ad4

0800628c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800628c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800628e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006292:	f7fd f805 	bl	80032a0 <HAL_HCD_ResetPort>
 8006296:	2803      	cmp	r0, #3
 8006298:	bf96      	itet	ls
 800629a:	4b02      	ldrls	r3, [pc, #8]	; (80062a4 <USBH_LL_ResetPort+0x18>)
 800629c:	2002      	movhi	r0, #2
 800629e:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80062a0:	bd08      	pop	{r3, pc}
 80062a2:	bf00      	nop
 80062a4:	08007ad8 	.word	0x08007ad8

080062a8 <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80062a8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80062ac:	f7fd b804 	b.w	80032b8 <HAL_HCD_HC_GetXferCount>

080062b0 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80062b0:	b530      	push	{r4, r5, lr}
 80062b2:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80062b4:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
{
 80062b8:	f89d 4020 	ldrb.w	r4, [sp, #32]
 80062bc:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80062c0:	9400      	str	r4, [sp, #0]
{
 80062c2:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80062c6:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80062ca:	f7fc faf5 	bl	80028b8 <HAL_HCD_HC_Init>
 80062ce:	2803      	cmp	r0, #3
 80062d0:	bf9a      	itte	ls
 80062d2:	4b02      	ldrls	r3, [pc, #8]	; (80062dc <USBH_LL_OpenPipe+0x2c>)
 80062d4:	5c18      	ldrbls	r0, [r3, r0]
 80062d6:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80062d8:	b005      	add	sp, #20
 80062da:	bd30      	pop	{r4, r5, pc}
 80062dc:	08007ad8 	.word	0x08007ad8

080062e0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80062e0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80062e2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 80062e6:	f7fc fb25 	bl	8002934 <HAL_HCD_HC_Halt>
 80062ea:	2803      	cmp	r0, #3
 80062ec:	bf96      	itet	ls
 80062ee:	4b02      	ldrls	r3, [pc, #8]	; (80062f8 <USBH_LL_ClosePipe+0x18>)
 80062f0:	2002      	movhi	r0, #2
 80062f2:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80062f4:	bd08      	pop	{r3, pc}
 80062f6:	bf00      	nop
 80062f8:	08007ad8 	.word	0x08007ad8

080062fc <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80062fc:	b530      	push	{r4, r5, lr}
 80062fe:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006300:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
{
 8006304:	f89d 5020 	ldrb.w	r5, [sp, #32]
 8006308:	9c09      	ldr	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800630a:	9500      	str	r5, [sp, #0]
 800630c:	9401      	str	r4, [sp, #4]
{
 800630e:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8006312:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006316:	e9cd 5402 	strd	r5, r4, [sp, #8]
 800631a:	f7fc fb6d 	bl	80029f8 <HAL_HCD_HC_SubmitRequest>
 800631e:	2803      	cmp	r0, #3
 8006320:	bf9a      	itte	ls
 8006322:	4b02      	ldrls	r3, [pc, #8]	; (800632c <USBH_LL_SubmitURB+0x30>)
 8006324:	5c18      	ldrbls	r0, [r3, r0]
 8006326:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8006328:	b005      	add	sp, #20
 800632a:	bd30      	pop	{r4, r5, pc}
 800632c:	08007ad8 	.word	0x08007ad8

08006330 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006330:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8006334:	f7fc bfb8 	b.w	80032a8 <HAL_HCD_HC_GetURBState>

08006338 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006338:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 800633a:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d004      	beq.n	800634c <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006342:	20c8      	movs	r0, #200	; 0xc8
 8006344:	f7fb fd24 	bl	8001d90 <HAL_Delay>
  return USBH_OK;
}
 8006348:	2000      	movs	r0, #0
 800634a:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 800634c:	4608      	mov	r0, r1
 800634e:	f000 f819 	bl	8006384 <MX_DriverVbusFS>
  HAL_Delay(200);
 8006352:	20c8      	movs	r0, #200	; 0xc8
 8006354:	f7fb fd1c 	bl	8001d90 <HAL_Delay>
}
 8006358:	2000      	movs	r0, #0
 800635a:	bd08      	pop	{r3, pc}

0800635c <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800635c:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8006360:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006364:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006368:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800636c:	b91b      	cbnz	r3, 8006376 <USBH_LL_SetToggle+0x1a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800636e:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
  }

  return USBH_OK;
}
 8006372:	2000      	movs	r0, #0
 8006374:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 8006376:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
}
 800637a:	2000      	movs	r0, #0
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop

08006380 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8006380:	f7fb bd06 	b.w	8001d90 <HAL_Delay>

08006384 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006384:	fab0 f280 	clz	r2, r0
 8006388:	0952      	lsrs	r2, r2, #5
 800638a:	2101      	movs	r1, #1
 800638c:	4801      	ldr	r0, [pc, #4]	; (8006394 <MX_DriverVbusFS+0x10>)
 800638e:	f7fc ba8f 	b.w	80028b0 <HAL_GPIO_WritePin>
 8006392:	bf00      	nop
 8006394:	40020800 	.word	0x40020800

08006398 <__errno>:
 8006398:	4b01      	ldr	r3, [pc, #4]	; (80063a0 <__errno+0x8>)
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	20000034 	.word	0x20000034

080063a4 <__libc_init_array>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	4e0d      	ldr	r6, [pc, #52]	; (80063dc <__libc_init_array+0x38>)
 80063a8:	4c0d      	ldr	r4, [pc, #52]	; (80063e0 <__libc_init_array+0x3c>)
 80063aa:	1ba4      	subs	r4, r4, r6
 80063ac:	10a4      	asrs	r4, r4, #2
 80063ae:	2500      	movs	r5, #0
 80063b0:	42a5      	cmp	r5, r4
 80063b2:	d109      	bne.n	80063c8 <__libc_init_array+0x24>
 80063b4:	4e0b      	ldr	r6, [pc, #44]	; (80063e4 <__libc_init_array+0x40>)
 80063b6:	4c0c      	ldr	r4, [pc, #48]	; (80063e8 <__libc_init_array+0x44>)
 80063b8:	f001 fb6c 	bl	8007a94 <_init>
 80063bc:	1ba4      	subs	r4, r4, r6
 80063be:	10a4      	asrs	r4, r4, #2
 80063c0:	2500      	movs	r5, #0
 80063c2:	42a5      	cmp	r5, r4
 80063c4:	d105      	bne.n	80063d2 <__libc_init_array+0x2e>
 80063c6:	bd70      	pop	{r4, r5, r6, pc}
 80063c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063cc:	4798      	blx	r3
 80063ce:	3501      	adds	r5, #1
 80063d0:	e7ee      	b.n	80063b0 <__libc_init_array+0xc>
 80063d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063d6:	4798      	blx	r3
 80063d8:	3501      	adds	r5, #1
 80063da:	e7f2      	b.n	80063c2 <__libc_init_array+0x1e>
 80063dc:	08007b30 	.word	0x08007b30
 80063e0:	08007b30 	.word	0x08007b30
 80063e4:	08007b30 	.word	0x08007b30
 80063e8:	08007b34 	.word	0x08007b34

080063ec <malloc>:
 80063ec:	4b02      	ldr	r3, [pc, #8]	; (80063f8 <malloc+0xc>)
 80063ee:	4601      	mov	r1, r0
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	f000 b859 	b.w	80064a8 <_malloc_r>
 80063f6:	bf00      	nop
 80063f8:	20000034 	.word	0x20000034

080063fc <free>:
 80063fc:	4b02      	ldr	r3, [pc, #8]	; (8006408 <free+0xc>)
 80063fe:	4601      	mov	r1, r0
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	f000 b803 	b.w	800640c <_free_r>
 8006406:	bf00      	nop
 8006408:	20000034 	.word	0x20000034

0800640c <_free_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4605      	mov	r5, r0
 8006410:	2900      	cmp	r1, #0
 8006412:	d045      	beq.n	80064a0 <_free_r+0x94>
 8006414:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006418:	1f0c      	subs	r4, r1, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	bfb8      	it	lt
 800641e:	18e4      	addlt	r4, r4, r3
 8006420:	f000 f8ac 	bl	800657c <__malloc_lock>
 8006424:	4a1f      	ldr	r2, [pc, #124]	; (80064a4 <_free_r+0x98>)
 8006426:	6813      	ldr	r3, [r2, #0]
 8006428:	4610      	mov	r0, r2
 800642a:	b933      	cbnz	r3, 800643a <_free_r+0x2e>
 800642c:	6063      	str	r3, [r4, #4]
 800642e:	6014      	str	r4, [r2, #0]
 8006430:	4628      	mov	r0, r5
 8006432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006436:	f000 b8a2 	b.w	800657e <__malloc_unlock>
 800643a:	42a3      	cmp	r3, r4
 800643c:	d90c      	bls.n	8006458 <_free_r+0x4c>
 800643e:	6821      	ldr	r1, [r4, #0]
 8006440:	1862      	adds	r2, r4, r1
 8006442:	4293      	cmp	r3, r2
 8006444:	bf04      	itt	eq
 8006446:	681a      	ldreq	r2, [r3, #0]
 8006448:	685b      	ldreq	r3, [r3, #4]
 800644a:	6063      	str	r3, [r4, #4]
 800644c:	bf04      	itt	eq
 800644e:	1852      	addeq	r2, r2, r1
 8006450:	6022      	streq	r2, [r4, #0]
 8006452:	6004      	str	r4, [r0, #0]
 8006454:	e7ec      	b.n	8006430 <_free_r+0x24>
 8006456:	4613      	mov	r3, r2
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	b10a      	cbz	r2, 8006460 <_free_r+0x54>
 800645c:	42a2      	cmp	r2, r4
 800645e:	d9fa      	bls.n	8006456 <_free_r+0x4a>
 8006460:	6819      	ldr	r1, [r3, #0]
 8006462:	1858      	adds	r0, r3, r1
 8006464:	42a0      	cmp	r0, r4
 8006466:	d10b      	bne.n	8006480 <_free_r+0x74>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	4401      	add	r1, r0
 800646c:	1858      	adds	r0, r3, r1
 800646e:	4282      	cmp	r2, r0
 8006470:	6019      	str	r1, [r3, #0]
 8006472:	d1dd      	bne.n	8006430 <_free_r+0x24>
 8006474:	6810      	ldr	r0, [r2, #0]
 8006476:	6852      	ldr	r2, [r2, #4]
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	4401      	add	r1, r0
 800647c:	6019      	str	r1, [r3, #0]
 800647e:	e7d7      	b.n	8006430 <_free_r+0x24>
 8006480:	d902      	bls.n	8006488 <_free_r+0x7c>
 8006482:	230c      	movs	r3, #12
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	e7d3      	b.n	8006430 <_free_r+0x24>
 8006488:	6820      	ldr	r0, [r4, #0]
 800648a:	1821      	adds	r1, r4, r0
 800648c:	428a      	cmp	r2, r1
 800648e:	bf04      	itt	eq
 8006490:	6811      	ldreq	r1, [r2, #0]
 8006492:	6852      	ldreq	r2, [r2, #4]
 8006494:	6062      	str	r2, [r4, #4]
 8006496:	bf04      	itt	eq
 8006498:	1809      	addeq	r1, r1, r0
 800649a:	6021      	streq	r1, [r4, #0]
 800649c:	605c      	str	r4, [r3, #4]
 800649e:	e7c7      	b.n	8006430 <_free_r+0x24>
 80064a0:	bd38      	pop	{r3, r4, r5, pc}
 80064a2:	bf00      	nop
 80064a4:	200000d4 	.word	0x200000d4

080064a8 <_malloc_r>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	1ccd      	adds	r5, r1, #3
 80064ac:	f025 0503 	bic.w	r5, r5, #3
 80064b0:	3508      	adds	r5, #8
 80064b2:	2d0c      	cmp	r5, #12
 80064b4:	bf38      	it	cc
 80064b6:	250c      	movcc	r5, #12
 80064b8:	2d00      	cmp	r5, #0
 80064ba:	4606      	mov	r6, r0
 80064bc:	db01      	blt.n	80064c2 <_malloc_r+0x1a>
 80064be:	42a9      	cmp	r1, r5
 80064c0:	d903      	bls.n	80064ca <_malloc_r+0x22>
 80064c2:	230c      	movs	r3, #12
 80064c4:	6033      	str	r3, [r6, #0]
 80064c6:	2000      	movs	r0, #0
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	f000 f857 	bl	800657c <__malloc_lock>
 80064ce:	4a21      	ldr	r2, [pc, #132]	; (8006554 <_malloc_r+0xac>)
 80064d0:	6814      	ldr	r4, [r2, #0]
 80064d2:	4621      	mov	r1, r4
 80064d4:	b991      	cbnz	r1, 80064fc <_malloc_r+0x54>
 80064d6:	4c20      	ldr	r4, [pc, #128]	; (8006558 <_malloc_r+0xb0>)
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	b91b      	cbnz	r3, 80064e4 <_malloc_r+0x3c>
 80064dc:	4630      	mov	r0, r6
 80064de:	f000 f83d 	bl	800655c <_sbrk_r>
 80064e2:	6020      	str	r0, [r4, #0]
 80064e4:	4629      	mov	r1, r5
 80064e6:	4630      	mov	r0, r6
 80064e8:	f000 f838 	bl	800655c <_sbrk_r>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d124      	bne.n	800653a <_malloc_r+0x92>
 80064f0:	230c      	movs	r3, #12
 80064f2:	6033      	str	r3, [r6, #0]
 80064f4:	4630      	mov	r0, r6
 80064f6:	f000 f842 	bl	800657e <__malloc_unlock>
 80064fa:	e7e4      	b.n	80064c6 <_malloc_r+0x1e>
 80064fc:	680b      	ldr	r3, [r1, #0]
 80064fe:	1b5b      	subs	r3, r3, r5
 8006500:	d418      	bmi.n	8006534 <_malloc_r+0x8c>
 8006502:	2b0b      	cmp	r3, #11
 8006504:	d90f      	bls.n	8006526 <_malloc_r+0x7e>
 8006506:	600b      	str	r3, [r1, #0]
 8006508:	50cd      	str	r5, [r1, r3]
 800650a:	18cc      	adds	r4, r1, r3
 800650c:	4630      	mov	r0, r6
 800650e:	f000 f836 	bl	800657e <__malloc_unlock>
 8006512:	f104 000b 	add.w	r0, r4, #11
 8006516:	1d23      	adds	r3, r4, #4
 8006518:	f020 0007 	bic.w	r0, r0, #7
 800651c:	1ac3      	subs	r3, r0, r3
 800651e:	d0d3      	beq.n	80064c8 <_malloc_r+0x20>
 8006520:	425a      	negs	r2, r3
 8006522:	50e2      	str	r2, [r4, r3]
 8006524:	e7d0      	b.n	80064c8 <_malloc_r+0x20>
 8006526:	428c      	cmp	r4, r1
 8006528:	684b      	ldr	r3, [r1, #4]
 800652a:	bf16      	itet	ne
 800652c:	6063      	strne	r3, [r4, #4]
 800652e:	6013      	streq	r3, [r2, #0]
 8006530:	460c      	movne	r4, r1
 8006532:	e7eb      	b.n	800650c <_malloc_r+0x64>
 8006534:	460c      	mov	r4, r1
 8006536:	6849      	ldr	r1, [r1, #4]
 8006538:	e7cc      	b.n	80064d4 <_malloc_r+0x2c>
 800653a:	1cc4      	adds	r4, r0, #3
 800653c:	f024 0403 	bic.w	r4, r4, #3
 8006540:	42a0      	cmp	r0, r4
 8006542:	d005      	beq.n	8006550 <_malloc_r+0xa8>
 8006544:	1a21      	subs	r1, r4, r0
 8006546:	4630      	mov	r0, r6
 8006548:	f000 f808 	bl	800655c <_sbrk_r>
 800654c:	3001      	adds	r0, #1
 800654e:	d0cf      	beq.n	80064f0 <_malloc_r+0x48>
 8006550:	6025      	str	r5, [r4, #0]
 8006552:	e7db      	b.n	800650c <_malloc_r+0x64>
 8006554:	200000d4 	.word	0x200000d4
 8006558:	200000d8 	.word	0x200000d8

0800655c <_sbrk_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4c06      	ldr	r4, [pc, #24]	; (8006578 <_sbrk_r+0x1c>)
 8006560:	2300      	movs	r3, #0
 8006562:	4605      	mov	r5, r0
 8006564:	4608      	mov	r0, r1
 8006566:	6023      	str	r3, [r4, #0]
 8006568:	f7fb faf0 	bl	8001b4c <_sbrk>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_sbrk_r+0x1a>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	b103      	cbz	r3, 8006576 <_sbrk_r+0x1a>
 8006574:	602b      	str	r3, [r5, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20000a0c 	.word	0x20000a0c

0800657c <__malloc_lock>:
 800657c:	4770      	bx	lr

0800657e <__malloc_unlock>:
 800657e:	4770      	bx	lr

08006580 <log>:
 8006580:	b570      	push	{r4, r5, r6, lr}
 8006582:	ed2d 8b02 	vpush	{d8}
 8006586:	b08a      	sub	sp, #40	; 0x28
 8006588:	ec55 4b10 	vmov	r4, r5, d0
 800658c:	f000 f9e8 	bl	8006960 <__ieee754_log>
 8006590:	4b36      	ldr	r3, [pc, #216]	; (800666c <log+0xec>)
 8006592:	eeb0 8a40 	vmov.f32	s16, s0
 8006596:	eef0 8a60 	vmov.f32	s17, s1
 800659a:	f993 6000 	ldrsb.w	r6, [r3]
 800659e:	1c73      	adds	r3, r6, #1
 80065a0:	d05b      	beq.n	800665a <log+0xda>
 80065a2:	4622      	mov	r2, r4
 80065a4:	462b      	mov	r3, r5
 80065a6:	4620      	mov	r0, r4
 80065a8:	4629      	mov	r1, r5
 80065aa:	f7fa fa63 	bl	8000a74 <__aeabi_dcmpun>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d153      	bne.n	800665a <log+0xda>
 80065b2:	2200      	movs	r2, #0
 80065b4:	2300      	movs	r3, #0
 80065b6:	4620      	mov	r0, r4
 80065b8:	4629      	mov	r1, r5
 80065ba:	f7fa fa51 	bl	8000a60 <__aeabi_dcmpgt>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d14b      	bne.n	800665a <log+0xda>
 80065c2:	4b2b      	ldr	r3, [pc, #172]	; (8006670 <log+0xf0>)
 80065c4:	9301      	str	r3, [sp, #4]
 80065c6:	9008      	str	r0, [sp, #32]
 80065c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80065cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80065d0:	b9a6      	cbnz	r6, 80065fc <log+0x7c>
 80065d2:	4b28      	ldr	r3, [pc, #160]	; (8006674 <log+0xf4>)
 80065d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80065d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065dc:	4620      	mov	r0, r4
 80065de:	2200      	movs	r2, #0
 80065e0:	2300      	movs	r3, #0
 80065e2:	4629      	mov	r1, r5
 80065e4:	f7fa fa14 	bl	8000a10 <__aeabi_dcmpeq>
 80065e8:	bb40      	cbnz	r0, 800663c <log+0xbc>
 80065ea:	2301      	movs	r3, #1
 80065ec:	2e02      	cmp	r6, #2
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	d119      	bne.n	8006626 <log+0xa6>
 80065f2:	f7ff fed1 	bl	8006398 <__errno>
 80065f6:	2321      	movs	r3, #33	; 0x21
 80065f8:	6003      	str	r3, [r0, #0]
 80065fa:	e019      	b.n	8006630 <log+0xb0>
 80065fc:	4b1e      	ldr	r3, [pc, #120]	; (8006678 <log+0xf8>)
 80065fe:	2200      	movs	r2, #0
 8006600:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006604:	4620      	mov	r0, r4
 8006606:	2200      	movs	r2, #0
 8006608:	2300      	movs	r3, #0
 800660a:	4629      	mov	r1, r5
 800660c:	f7fa fa00 	bl	8000a10 <__aeabi_dcmpeq>
 8006610:	2800      	cmp	r0, #0
 8006612:	d0ea      	beq.n	80065ea <log+0x6a>
 8006614:	2302      	movs	r3, #2
 8006616:	429e      	cmp	r6, r3
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	d111      	bne.n	8006640 <log+0xc0>
 800661c:	f7ff febc 	bl	8006398 <__errno>
 8006620:	2322      	movs	r3, #34	; 0x22
 8006622:	6003      	str	r3, [r0, #0]
 8006624:	e011      	b.n	800664a <log+0xca>
 8006626:	4668      	mov	r0, sp
 8006628:	f001 f91d 	bl	8007866 <matherr>
 800662c:	2800      	cmp	r0, #0
 800662e:	d0e0      	beq.n	80065f2 <log+0x72>
 8006630:	4812      	ldr	r0, [pc, #72]	; (800667c <log+0xfc>)
 8006632:	f001 f91d 	bl	8007870 <nan>
 8006636:	ed8d 0b06 	vstr	d0, [sp, #24]
 800663a:	e006      	b.n	800664a <log+0xca>
 800663c:	2302      	movs	r3, #2
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	4668      	mov	r0, sp
 8006642:	f001 f910 	bl	8007866 <matherr>
 8006646:	2800      	cmp	r0, #0
 8006648:	d0e8      	beq.n	800661c <log+0x9c>
 800664a:	9b08      	ldr	r3, [sp, #32]
 800664c:	b11b      	cbz	r3, 8006656 <log+0xd6>
 800664e:	f7ff fea3 	bl	8006398 <__errno>
 8006652:	9b08      	ldr	r3, [sp, #32]
 8006654:	6003      	str	r3, [r0, #0]
 8006656:	ed9d 8b06 	vldr	d8, [sp, #24]
 800665a:	eeb0 0a48 	vmov.f32	s0, s16
 800665e:	eef0 0a68 	vmov.f32	s1, s17
 8006662:	b00a      	add	sp, #40	; 0x28
 8006664:	ecbd 8b02 	vpop	{d8}
 8006668:	bd70      	pop	{r4, r5, r6, pc}
 800666a:	bf00      	nop
 800666c:	20000098 	.word	0x20000098
 8006670:	08007adc 	.word	0x08007adc
 8006674:	c7efffff 	.word	0xc7efffff
 8006678:	fff00000 	.word	0xfff00000
 800667c:	08007adf 	.word	0x08007adf

08006680 <pow>:
 8006680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006684:	ed2d 8b04 	vpush	{d8-d9}
 8006688:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800695c <pow+0x2dc>
 800668c:	b08d      	sub	sp, #52	; 0x34
 800668e:	ec57 6b10 	vmov	r6, r7, d0
 8006692:	ec55 4b11 	vmov	r4, r5, d1
 8006696:	f000 fb17 	bl	8006cc8 <__ieee754_pow>
 800669a:	f999 3000 	ldrsb.w	r3, [r9]
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	3301      	adds	r3, #1
 80066a2:	eeb0 8a40 	vmov.f32	s16, s0
 80066a6:	eef0 8a60 	vmov.f32	s17, s1
 80066aa:	46c8      	mov	r8, r9
 80066ac:	d05f      	beq.n	800676e <pow+0xee>
 80066ae:	4622      	mov	r2, r4
 80066b0:	462b      	mov	r3, r5
 80066b2:	4620      	mov	r0, r4
 80066b4:	4629      	mov	r1, r5
 80066b6:	f7fa f9dd 	bl	8000a74 <__aeabi_dcmpun>
 80066ba:	4683      	mov	fp, r0
 80066bc:	2800      	cmp	r0, #0
 80066be:	d156      	bne.n	800676e <pow+0xee>
 80066c0:	4632      	mov	r2, r6
 80066c2:	463b      	mov	r3, r7
 80066c4:	4630      	mov	r0, r6
 80066c6:	4639      	mov	r1, r7
 80066c8:	f7fa f9d4 	bl	8000a74 <__aeabi_dcmpun>
 80066cc:	9001      	str	r0, [sp, #4]
 80066ce:	b1e8      	cbz	r0, 800670c <pow+0x8c>
 80066d0:	2200      	movs	r2, #0
 80066d2:	2300      	movs	r3, #0
 80066d4:	4620      	mov	r0, r4
 80066d6:	4629      	mov	r1, r5
 80066d8:	f7fa f99a 	bl	8000a10 <__aeabi_dcmpeq>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d046      	beq.n	800676e <pow+0xee>
 80066e0:	2301      	movs	r3, #1
 80066e2:	9302      	str	r3, [sp, #8]
 80066e4:	4b96      	ldr	r3, [pc, #600]	; (8006940 <pow+0x2c0>)
 80066e6:	9303      	str	r3, [sp, #12]
 80066e8:	4b96      	ldr	r3, [pc, #600]	; (8006944 <pow+0x2c4>)
 80066ea:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80066ee:	2200      	movs	r2, #0
 80066f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80066f4:	9b00      	ldr	r3, [sp, #0]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80066fc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006700:	d033      	beq.n	800676a <pow+0xea>
 8006702:	a802      	add	r0, sp, #8
 8006704:	f001 f8af 	bl	8007866 <matherr>
 8006708:	bb48      	cbnz	r0, 800675e <pow+0xde>
 800670a:	e05d      	b.n	80067c8 <pow+0x148>
 800670c:	f04f 0a00 	mov.w	sl, #0
 8006710:	f04f 0b00 	mov.w	fp, #0
 8006714:	4652      	mov	r2, sl
 8006716:	465b      	mov	r3, fp
 8006718:	4630      	mov	r0, r6
 800671a:	4639      	mov	r1, r7
 800671c:	f7fa f978 	bl	8000a10 <__aeabi_dcmpeq>
 8006720:	ec4b ab19 	vmov	d9, sl, fp
 8006724:	2800      	cmp	r0, #0
 8006726:	d054      	beq.n	80067d2 <pow+0x152>
 8006728:	4652      	mov	r2, sl
 800672a:	465b      	mov	r3, fp
 800672c:	4620      	mov	r0, r4
 800672e:	4629      	mov	r1, r5
 8006730:	f7fa f96e 	bl	8000a10 <__aeabi_dcmpeq>
 8006734:	4680      	mov	r8, r0
 8006736:	b318      	cbz	r0, 8006780 <pow+0x100>
 8006738:	2301      	movs	r3, #1
 800673a:	9302      	str	r3, [sp, #8]
 800673c:	4b80      	ldr	r3, [pc, #512]	; (8006940 <pow+0x2c0>)
 800673e:	9303      	str	r3, [sp, #12]
 8006740:	9b01      	ldr	r3, [sp, #4]
 8006742:	930a      	str	r3, [sp, #40]	; 0x28
 8006744:	9b00      	ldr	r3, [sp, #0]
 8006746:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800674a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800674e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d0d5      	beq.n	8006702 <pow+0x82>
 8006756:	4b7b      	ldr	r3, [pc, #492]	; (8006944 <pow+0x2c4>)
 8006758:	2200      	movs	r2, #0
 800675a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800675e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006760:	b11b      	cbz	r3, 800676a <pow+0xea>
 8006762:	f7ff fe19 	bl	8006398 <__errno>
 8006766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006768:	6003      	str	r3, [r0, #0]
 800676a:	ed9d 8b08 	vldr	d8, [sp, #32]
 800676e:	eeb0 0a48 	vmov.f32	s0, s16
 8006772:	eef0 0a68 	vmov.f32	s1, s17
 8006776:	b00d      	add	sp, #52	; 0x34
 8006778:	ecbd 8b04 	vpop	{d8-d9}
 800677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006780:	ec45 4b10 	vmov	d0, r4, r5
 8006784:	f001 f867 	bl	8007856 <finite>
 8006788:	2800      	cmp	r0, #0
 800678a:	d0f0      	beq.n	800676e <pow+0xee>
 800678c:	4652      	mov	r2, sl
 800678e:	465b      	mov	r3, fp
 8006790:	4620      	mov	r0, r4
 8006792:	4629      	mov	r1, r5
 8006794:	f7fa f946 	bl	8000a24 <__aeabi_dcmplt>
 8006798:	2800      	cmp	r0, #0
 800679a:	d0e8      	beq.n	800676e <pow+0xee>
 800679c:	2301      	movs	r3, #1
 800679e:	9302      	str	r3, [sp, #8]
 80067a0:	4b67      	ldr	r3, [pc, #412]	; (8006940 <pow+0x2c0>)
 80067a2:	9303      	str	r3, [sp, #12]
 80067a4:	f999 3000 	ldrsb.w	r3, [r9]
 80067a8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80067ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80067b0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80067b4:	b913      	cbnz	r3, 80067bc <pow+0x13c>
 80067b6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80067ba:	e7a2      	b.n	8006702 <pow+0x82>
 80067bc:	4962      	ldr	r1, [pc, #392]	; (8006948 <pow+0x2c8>)
 80067be:	2000      	movs	r0, #0
 80067c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d19c      	bne.n	8006702 <pow+0x82>
 80067c8:	f7ff fde6 	bl	8006398 <__errno>
 80067cc:	2321      	movs	r3, #33	; 0x21
 80067ce:	6003      	str	r3, [r0, #0]
 80067d0:	e7c5      	b.n	800675e <pow+0xde>
 80067d2:	eeb0 0a48 	vmov.f32	s0, s16
 80067d6:	eef0 0a68 	vmov.f32	s1, s17
 80067da:	f001 f83c 	bl	8007856 <finite>
 80067de:	9000      	str	r0, [sp, #0]
 80067e0:	2800      	cmp	r0, #0
 80067e2:	f040 8081 	bne.w	80068e8 <pow+0x268>
 80067e6:	ec47 6b10 	vmov	d0, r6, r7
 80067ea:	f001 f834 	bl	8007856 <finite>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d07a      	beq.n	80068e8 <pow+0x268>
 80067f2:	ec45 4b10 	vmov	d0, r4, r5
 80067f6:	f001 f82e 	bl	8007856 <finite>
 80067fa:	2800      	cmp	r0, #0
 80067fc:	d074      	beq.n	80068e8 <pow+0x268>
 80067fe:	ec53 2b18 	vmov	r2, r3, d8
 8006802:	ee18 0a10 	vmov	r0, s16
 8006806:	4619      	mov	r1, r3
 8006808:	f7fa f934 	bl	8000a74 <__aeabi_dcmpun>
 800680c:	f999 9000 	ldrsb.w	r9, [r9]
 8006810:	4b4b      	ldr	r3, [pc, #300]	; (8006940 <pow+0x2c0>)
 8006812:	b1b0      	cbz	r0, 8006842 <pow+0x1c2>
 8006814:	2201      	movs	r2, #1
 8006816:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800681a:	9b00      	ldr	r3, [sp, #0]
 800681c:	930a      	str	r3, [sp, #40]	; 0x28
 800681e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006822:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006826:	f1b9 0f00 	cmp.w	r9, #0
 800682a:	d0c4      	beq.n	80067b6 <pow+0x136>
 800682c:	4652      	mov	r2, sl
 800682e:	465b      	mov	r3, fp
 8006830:	4650      	mov	r0, sl
 8006832:	4659      	mov	r1, fp
 8006834:	f7f9 ffae 	bl	8000794 <__aeabi_ddiv>
 8006838:	f1b9 0f02 	cmp.w	r9, #2
 800683c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006840:	e7c1      	b.n	80067c6 <pow+0x146>
 8006842:	2203      	movs	r2, #3
 8006844:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006848:	900a      	str	r0, [sp, #40]	; 0x28
 800684a:	4629      	mov	r1, r5
 800684c:	4620      	mov	r0, r4
 800684e:	2200      	movs	r2, #0
 8006850:	4b3e      	ldr	r3, [pc, #248]	; (800694c <pow+0x2cc>)
 8006852:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8006856:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800685a:	f7f9 fe71 	bl	8000540 <__aeabi_dmul>
 800685e:	4604      	mov	r4, r0
 8006860:	460d      	mov	r5, r1
 8006862:	f1b9 0f00 	cmp.w	r9, #0
 8006866:	d124      	bne.n	80068b2 <pow+0x232>
 8006868:	4b39      	ldr	r3, [pc, #228]	; (8006950 <pow+0x2d0>)
 800686a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800686e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006872:	4630      	mov	r0, r6
 8006874:	4652      	mov	r2, sl
 8006876:	465b      	mov	r3, fp
 8006878:	4639      	mov	r1, r7
 800687a:	f7fa f8d3 	bl	8000a24 <__aeabi_dcmplt>
 800687e:	2800      	cmp	r0, #0
 8006880:	d056      	beq.n	8006930 <pow+0x2b0>
 8006882:	ec45 4b10 	vmov	d0, r4, r5
 8006886:	f000 fffb 	bl	8007880 <rint>
 800688a:	4622      	mov	r2, r4
 800688c:	462b      	mov	r3, r5
 800688e:	ec51 0b10 	vmov	r0, r1, d0
 8006892:	f7fa f8bd 	bl	8000a10 <__aeabi_dcmpeq>
 8006896:	b920      	cbnz	r0, 80068a2 <pow+0x222>
 8006898:	4b2e      	ldr	r3, [pc, #184]	; (8006954 <pow+0x2d4>)
 800689a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800689e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068a2:	f998 3000 	ldrsb.w	r3, [r8]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d142      	bne.n	8006930 <pow+0x2b0>
 80068aa:	f7ff fd75 	bl	8006398 <__errno>
 80068ae:	2322      	movs	r3, #34	; 0x22
 80068b0:	e78d      	b.n	80067ce <pow+0x14e>
 80068b2:	4b29      	ldr	r3, [pc, #164]	; (8006958 <pow+0x2d8>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80068ba:	4630      	mov	r0, r6
 80068bc:	4652      	mov	r2, sl
 80068be:	465b      	mov	r3, fp
 80068c0:	4639      	mov	r1, r7
 80068c2:	f7fa f8af 	bl	8000a24 <__aeabi_dcmplt>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d0eb      	beq.n	80068a2 <pow+0x222>
 80068ca:	ec45 4b10 	vmov	d0, r4, r5
 80068ce:	f000 ffd7 	bl	8007880 <rint>
 80068d2:	4622      	mov	r2, r4
 80068d4:	462b      	mov	r3, r5
 80068d6:	ec51 0b10 	vmov	r0, r1, d0
 80068da:	f7fa f899 	bl	8000a10 <__aeabi_dcmpeq>
 80068de:	2800      	cmp	r0, #0
 80068e0:	d1df      	bne.n	80068a2 <pow+0x222>
 80068e2:	2200      	movs	r2, #0
 80068e4:	4b18      	ldr	r3, [pc, #96]	; (8006948 <pow+0x2c8>)
 80068e6:	e7da      	b.n	800689e <pow+0x21e>
 80068e8:	2200      	movs	r2, #0
 80068ea:	2300      	movs	r3, #0
 80068ec:	ec51 0b18 	vmov	r0, r1, d8
 80068f0:	f7fa f88e 	bl	8000a10 <__aeabi_dcmpeq>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	f43f af3a 	beq.w	800676e <pow+0xee>
 80068fa:	ec47 6b10 	vmov	d0, r6, r7
 80068fe:	f000 ffaa 	bl	8007856 <finite>
 8006902:	2800      	cmp	r0, #0
 8006904:	f43f af33 	beq.w	800676e <pow+0xee>
 8006908:	ec45 4b10 	vmov	d0, r4, r5
 800690c:	f000 ffa3 	bl	8007856 <finite>
 8006910:	2800      	cmp	r0, #0
 8006912:	f43f af2c 	beq.w	800676e <pow+0xee>
 8006916:	2304      	movs	r3, #4
 8006918:	9302      	str	r3, [sp, #8]
 800691a:	4b09      	ldr	r3, [pc, #36]	; (8006940 <pow+0x2c0>)
 800691c:	9303      	str	r3, [sp, #12]
 800691e:	2300      	movs	r3, #0
 8006920:	930a      	str	r3, [sp, #40]	; 0x28
 8006922:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006926:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800692a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800692e:	e7b8      	b.n	80068a2 <pow+0x222>
 8006930:	a802      	add	r0, sp, #8
 8006932:	f000 ff98 	bl	8007866 <matherr>
 8006936:	2800      	cmp	r0, #0
 8006938:	f47f af11 	bne.w	800675e <pow+0xde>
 800693c:	e7b5      	b.n	80068aa <pow+0x22a>
 800693e:	bf00      	nop
 8006940:	08007ae0 	.word	0x08007ae0
 8006944:	3ff00000 	.word	0x3ff00000
 8006948:	fff00000 	.word	0xfff00000
 800694c:	3fe00000 	.word	0x3fe00000
 8006950:	47efffff 	.word	0x47efffff
 8006954:	c7efffff 	.word	0xc7efffff
 8006958:	7ff00000 	.word	0x7ff00000
 800695c:	20000098 	.word	0x20000098

08006960 <__ieee754_log>:
 8006960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006964:	ec51 0b10 	vmov	r0, r1, d0
 8006968:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800696c:	b087      	sub	sp, #28
 800696e:	460d      	mov	r5, r1
 8006970:	da27      	bge.n	80069c2 <__ieee754_log+0x62>
 8006972:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006976:	4303      	orrs	r3, r0
 8006978:	ee10 2a10 	vmov	r2, s0
 800697c:	d10a      	bne.n	8006994 <__ieee754_log+0x34>
 800697e:	49cc      	ldr	r1, [pc, #816]	; (8006cb0 <__ieee754_log+0x350>)
 8006980:	2200      	movs	r2, #0
 8006982:	2300      	movs	r3, #0
 8006984:	2000      	movs	r0, #0
 8006986:	f7f9 ff05 	bl	8000794 <__aeabi_ddiv>
 800698a:	ec41 0b10 	vmov	d0, r0, r1
 800698e:	b007      	add	sp, #28
 8006990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006994:	2900      	cmp	r1, #0
 8006996:	da05      	bge.n	80069a4 <__ieee754_log+0x44>
 8006998:	460b      	mov	r3, r1
 800699a:	f7f9 fc19 	bl	80001d0 <__aeabi_dsub>
 800699e:	2200      	movs	r2, #0
 80069a0:	2300      	movs	r3, #0
 80069a2:	e7f0      	b.n	8006986 <__ieee754_log+0x26>
 80069a4:	4bc3      	ldr	r3, [pc, #780]	; (8006cb4 <__ieee754_log+0x354>)
 80069a6:	2200      	movs	r2, #0
 80069a8:	f7f9 fdca 	bl	8000540 <__aeabi_dmul>
 80069ac:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80069b0:	460d      	mov	r5, r1
 80069b2:	4ac1      	ldr	r2, [pc, #772]	; (8006cb8 <__ieee754_log+0x358>)
 80069b4:	4295      	cmp	r5, r2
 80069b6:	dd06      	ble.n	80069c6 <__ieee754_log+0x66>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	f7f9 fc0a 	bl	80001d4 <__adddf3>
 80069c0:	e7e3      	b.n	800698a <__ieee754_log+0x2a>
 80069c2:	2300      	movs	r3, #0
 80069c4:	e7f5      	b.n	80069b2 <__ieee754_log+0x52>
 80069c6:	152c      	asrs	r4, r5, #20
 80069c8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80069cc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80069d0:	441c      	add	r4, r3
 80069d2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80069d6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80069da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069de:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80069e2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80069e6:	ea42 0105 	orr.w	r1, r2, r5
 80069ea:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80069ee:	2200      	movs	r2, #0
 80069f0:	4bb2      	ldr	r3, [pc, #712]	; (8006cbc <__ieee754_log+0x35c>)
 80069f2:	f7f9 fbed 	bl	80001d0 <__aeabi_dsub>
 80069f6:	1cab      	adds	r3, r5, #2
 80069f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	4682      	mov	sl, r0
 8006a00:	468b      	mov	fp, r1
 8006a02:	f04f 0200 	mov.w	r2, #0
 8006a06:	dc53      	bgt.n	8006ab0 <__ieee754_log+0x150>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f7fa f801 	bl	8000a10 <__aeabi_dcmpeq>
 8006a0e:	b1d0      	cbz	r0, 8006a46 <__ieee754_log+0xe6>
 8006a10:	2c00      	cmp	r4, #0
 8006a12:	f000 8120 	beq.w	8006c56 <__ieee754_log+0x2f6>
 8006a16:	4620      	mov	r0, r4
 8006a18:	f7f9 fd28 	bl	800046c <__aeabi_i2d>
 8006a1c:	a390      	add	r3, pc, #576	; (adr r3, 8006c60 <__ieee754_log+0x300>)
 8006a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a22:	4606      	mov	r6, r0
 8006a24:	460f      	mov	r7, r1
 8006a26:	f7f9 fd8b 	bl	8000540 <__aeabi_dmul>
 8006a2a:	a38f      	add	r3, pc, #572	; (adr r3, 8006c68 <__ieee754_log+0x308>)
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	4604      	mov	r4, r0
 8006a32:	460d      	mov	r5, r1
 8006a34:	4630      	mov	r0, r6
 8006a36:	4639      	mov	r1, r7
 8006a38:	f7f9 fd82 	bl	8000540 <__aeabi_dmul>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	e7ba      	b.n	80069bc <__ieee754_log+0x5c>
 8006a46:	a38a      	add	r3, pc, #552	; (adr r3, 8006c70 <__ieee754_log+0x310>)
 8006a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	4659      	mov	r1, fp
 8006a50:	f7f9 fd76 	bl	8000540 <__aeabi_dmul>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	2000      	movs	r0, #0
 8006a5a:	4999      	ldr	r1, [pc, #612]	; (8006cc0 <__ieee754_log+0x360>)
 8006a5c:	f7f9 fbb8 	bl	80001d0 <__aeabi_dsub>
 8006a60:	4652      	mov	r2, sl
 8006a62:	4606      	mov	r6, r0
 8006a64:	460f      	mov	r7, r1
 8006a66:	465b      	mov	r3, fp
 8006a68:	4650      	mov	r0, sl
 8006a6a:	4659      	mov	r1, fp
 8006a6c:	f7f9 fd68 	bl	8000540 <__aeabi_dmul>
 8006a70:	4602      	mov	r2, r0
 8006a72:	460b      	mov	r3, r1
 8006a74:	4630      	mov	r0, r6
 8006a76:	4639      	mov	r1, r7
 8006a78:	f7f9 fd62 	bl	8000540 <__aeabi_dmul>
 8006a7c:	4606      	mov	r6, r0
 8006a7e:	460f      	mov	r7, r1
 8006a80:	b914      	cbnz	r4, 8006a88 <__ieee754_log+0x128>
 8006a82:	4632      	mov	r2, r6
 8006a84:	463b      	mov	r3, r7
 8006a86:	e0a0      	b.n	8006bca <__ieee754_log+0x26a>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f7f9 fcef 	bl	800046c <__aeabi_i2d>
 8006a8e:	a374      	add	r3, pc, #464	; (adr r3, 8006c60 <__ieee754_log+0x300>)
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	4680      	mov	r8, r0
 8006a96:	4689      	mov	r9, r1
 8006a98:	f7f9 fd52 	bl	8000540 <__aeabi_dmul>
 8006a9c:	a372      	add	r3, pc, #456	; (adr r3, 8006c68 <__ieee754_log+0x308>)
 8006a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	4640      	mov	r0, r8
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	f7f9 fd49 	bl	8000540 <__aeabi_dmul>
 8006aae:	e0a5      	b.n	8006bfc <__ieee754_log+0x29c>
 8006ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ab4:	f7f9 fb8e 	bl	80001d4 <__adddf3>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4650      	mov	r0, sl
 8006abe:	4659      	mov	r1, fp
 8006ac0:	f7f9 fe68 	bl	8000794 <__aeabi_ddiv>
 8006ac4:	e9cd 0100 	strd	r0, r1, [sp]
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f7f9 fccf 	bl	800046c <__aeabi_i2d>
 8006ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad6:	4610      	mov	r0, r2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f7f9 fd31 	bl	8000540 <__aeabi_dmul>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ae6:	f7f9 fd2b 	bl	8000540 <__aeabi_dmul>
 8006aea:	a363      	add	r3, pc, #396	; (adr r3, 8006c78 <__ieee754_log+0x318>)
 8006aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af0:	4680      	mov	r8, r0
 8006af2:	4689      	mov	r9, r1
 8006af4:	f7f9 fd24 	bl	8000540 <__aeabi_dmul>
 8006af8:	a361      	add	r3, pc, #388	; (adr r3, 8006c80 <__ieee754_log+0x320>)
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	f7f9 fb69 	bl	80001d4 <__adddf3>
 8006b02:	4642      	mov	r2, r8
 8006b04:	464b      	mov	r3, r9
 8006b06:	f7f9 fd1b 	bl	8000540 <__aeabi_dmul>
 8006b0a:	a35f      	add	r3, pc, #380	; (adr r3, 8006c88 <__ieee754_log+0x328>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fb60 	bl	80001d4 <__adddf3>
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	f7f9 fd12 	bl	8000540 <__aeabi_dmul>
 8006b1c:	a35c      	add	r3, pc, #368	; (adr r3, 8006c90 <__ieee754_log+0x330>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	f7f9 fb57 	bl	80001d4 <__adddf3>
 8006b26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b2a:	f7f9 fd09 	bl	8000540 <__aeabi_dmul>
 8006b2e:	a35a      	add	r3, pc, #360	; (adr r3, 8006c98 <__ieee754_log+0x338>)
 8006b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f7f9 fd00 	bl	8000540 <__aeabi_dmul>
 8006b40:	a357      	add	r3, pc, #348	; (adr r3, 8006ca0 <__ieee754_log+0x340>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fb45 	bl	80001d4 <__adddf3>
 8006b4a:	4642      	mov	r2, r8
 8006b4c:	464b      	mov	r3, r9
 8006b4e:	f7f9 fcf7 	bl	8000540 <__aeabi_dmul>
 8006b52:	a355      	add	r3, pc, #340	; (adr r3, 8006ca8 <__ieee754_log+0x348>)
 8006b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b58:	f7f9 fb3c 	bl	80001d4 <__adddf3>
 8006b5c:	4642      	mov	r2, r8
 8006b5e:	464b      	mov	r3, r9
 8006b60:	f7f9 fcee 	bl	8000540 <__aeabi_dmul>
 8006b64:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006b70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b74:	f7f9 fb2e 	bl	80001d4 <__adddf3>
 8006b78:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8006b7c:	3551      	adds	r5, #81	; 0x51
 8006b7e:	4335      	orrs	r5, r6
 8006b80:	2d00      	cmp	r5, #0
 8006b82:	4680      	mov	r8, r0
 8006b84:	4689      	mov	r9, r1
 8006b86:	dd48      	ble.n	8006c1a <__ieee754_log+0x2ba>
 8006b88:	2200      	movs	r2, #0
 8006b8a:	4b4d      	ldr	r3, [pc, #308]	; (8006cc0 <__ieee754_log+0x360>)
 8006b8c:	4650      	mov	r0, sl
 8006b8e:	4659      	mov	r1, fp
 8006b90:	f7f9 fcd6 	bl	8000540 <__aeabi_dmul>
 8006b94:	4652      	mov	r2, sl
 8006b96:	465b      	mov	r3, fp
 8006b98:	f7f9 fcd2 	bl	8000540 <__aeabi_dmul>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	4606      	mov	r6, r0
 8006ba2:	460f      	mov	r7, r1
 8006ba4:	4640      	mov	r0, r8
 8006ba6:	4649      	mov	r1, r9
 8006ba8:	f7f9 fb14 	bl	80001d4 <__adddf3>
 8006bac:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006bb0:	f7f9 fcc6 	bl	8000540 <__aeabi_dmul>
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	4689      	mov	r9, r1
 8006bb8:	b964      	cbnz	r4, 8006bd4 <__ieee754_log+0x274>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	4630      	mov	r0, r6
 8006bc0:	4639      	mov	r1, r7
 8006bc2:	f7f9 fb05 	bl	80001d0 <__aeabi_dsub>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	460b      	mov	r3, r1
 8006bca:	4650      	mov	r0, sl
 8006bcc:	4659      	mov	r1, fp
 8006bce:	f7f9 faff 	bl	80001d0 <__aeabi_dsub>
 8006bd2:	e6da      	b.n	800698a <__ieee754_log+0x2a>
 8006bd4:	a322      	add	r3, pc, #136	; (adr r3, 8006c60 <__ieee754_log+0x300>)
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bde:	f7f9 fcaf 	bl	8000540 <__aeabi_dmul>
 8006be2:	a321      	add	r3, pc, #132	; (adr r3, 8006c68 <__ieee754_log+0x308>)
 8006be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be8:	4604      	mov	r4, r0
 8006bea:	460d      	mov	r5, r1
 8006bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bf0:	f7f9 fca6 	bl	8000540 <__aeabi_dmul>
 8006bf4:	4642      	mov	r2, r8
 8006bf6:	464b      	mov	r3, r9
 8006bf8:	f7f9 faec 	bl	80001d4 <__adddf3>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	460b      	mov	r3, r1
 8006c00:	4630      	mov	r0, r6
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 fae4 	bl	80001d0 <__aeabi_dsub>
 8006c08:	4652      	mov	r2, sl
 8006c0a:	465b      	mov	r3, fp
 8006c0c:	f7f9 fae0 	bl	80001d0 <__aeabi_dsub>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4620      	mov	r0, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	e7d9      	b.n	8006bce <__ieee754_log+0x26e>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	4650      	mov	r0, sl
 8006c20:	4659      	mov	r1, fp
 8006c22:	f7f9 fad5 	bl	80001d0 <__aeabi_dsub>
 8006c26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c2a:	f7f9 fc89 	bl	8000540 <__aeabi_dmul>
 8006c2e:	4606      	mov	r6, r0
 8006c30:	460f      	mov	r7, r1
 8006c32:	2c00      	cmp	r4, #0
 8006c34:	f43f af25 	beq.w	8006a82 <__ieee754_log+0x122>
 8006c38:	a309      	add	r3, pc, #36	; (adr r3, 8006c60 <__ieee754_log+0x300>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c42:	f7f9 fc7d 	bl	8000540 <__aeabi_dmul>
 8006c46:	a308      	add	r3, pc, #32	; (adr r3, 8006c68 <__ieee754_log+0x308>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	4604      	mov	r4, r0
 8006c4e:	460d      	mov	r5, r1
 8006c50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c54:	e729      	b.n	8006aaa <__ieee754_log+0x14a>
 8006c56:	2000      	movs	r0, #0
 8006c58:	2100      	movs	r1, #0
 8006c5a:	e696      	b.n	800698a <__ieee754_log+0x2a>
 8006c5c:	f3af 8000 	nop.w
 8006c60:	fee00000 	.word	0xfee00000
 8006c64:	3fe62e42 	.word	0x3fe62e42
 8006c68:	35793c76 	.word	0x35793c76
 8006c6c:	3dea39ef 	.word	0x3dea39ef
 8006c70:	55555555 	.word	0x55555555
 8006c74:	3fd55555 	.word	0x3fd55555
 8006c78:	df3e5244 	.word	0xdf3e5244
 8006c7c:	3fc2f112 	.word	0x3fc2f112
 8006c80:	96cb03de 	.word	0x96cb03de
 8006c84:	3fc74664 	.word	0x3fc74664
 8006c88:	94229359 	.word	0x94229359
 8006c8c:	3fd24924 	.word	0x3fd24924
 8006c90:	55555593 	.word	0x55555593
 8006c94:	3fe55555 	.word	0x3fe55555
 8006c98:	d078c69f 	.word	0xd078c69f
 8006c9c:	3fc39a09 	.word	0x3fc39a09
 8006ca0:	1d8e78af 	.word	0x1d8e78af
 8006ca4:	3fcc71c5 	.word	0x3fcc71c5
 8006ca8:	9997fa04 	.word	0x9997fa04
 8006cac:	3fd99999 	.word	0x3fd99999
 8006cb0:	c3500000 	.word	0xc3500000
 8006cb4:	43500000 	.word	0x43500000
 8006cb8:	7fefffff 	.word	0x7fefffff
 8006cbc:	3ff00000 	.word	0x3ff00000
 8006cc0:	3fe00000 	.word	0x3fe00000
 8006cc4:	00000000 	.word	0x00000000

08006cc8 <__ieee754_pow>:
 8006cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ccc:	b091      	sub	sp, #68	; 0x44
 8006cce:	ed8d 1b00 	vstr	d1, [sp]
 8006cd2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8006cd6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8006cda:	ea58 0302 	orrs.w	r3, r8, r2
 8006cde:	ec57 6b10 	vmov	r6, r7, d0
 8006ce2:	f000 84be 	beq.w	8007662 <__ieee754_pow+0x99a>
 8006ce6:	4b7a      	ldr	r3, [pc, #488]	; (8006ed0 <__ieee754_pow+0x208>)
 8006ce8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8006cec:	429c      	cmp	r4, r3
 8006cee:	463d      	mov	r5, r7
 8006cf0:	ee10 aa10 	vmov	sl, s0
 8006cf4:	dc09      	bgt.n	8006d0a <__ieee754_pow+0x42>
 8006cf6:	d103      	bne.n	8006d00 <__ieee754_pow+0x38>
 8006cf8:	b93e      	cbnz	r6, 8006d0a <__ieee754_pow+0x42>
 8006cfa:	45a0      	cmp	r8, r4
 8006cfc:	dc0d      	bgt.n	8006d1a <__ieee754_pow+0x52>
 8006cfe:	e001      	b.n	8006d04 <__ieee754_pow+0x3c>
 8006d00:	4598      	cmp	r8, r3
 8006d02:	dc02      	bgt.n	8006d0a <__ieee754_pow+0x42>
 8006d04:	4598      	cmp	r8, r3
 8006d06:	d10e      	bne.n	8006d26 <__ieee754_pow+0x5e>
 8006d08:	b16a      	cbz	r2, 8006d26 <__ieee754_pow+0x5e>
 8006d0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d12:	ea54 030a 	orrs.w	r3, r4, sl
 8006d16:	f000 84a4 	beq.w	8007662 <__ieee754_pow+0x99a>
 8006d1a:	486e      	ldr	r0, [pc, #440]	; (8006ed4 <__ieee754_pow+0x20c>)
 8006d1c:	b011      	add	sp, #68	; 0x44
 8006d1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d22:	f000 bda5 	b.w	8007870 <nan>
 8006d26:	2d00      	cmp	r5, #0
 8006d28:	da53      	bge.n	8006dd2 <__ieee754_pow+0x10a>
 8006d2a:	4b6b      	ldr	r3, [pc, #428]	; (8006ed8 <__ieee754_pow+0x210>)
 8006d2c:	4598      	cmp	r8, r3
 8006d2e:	dc4d      	bgt.n	8006dcc <__ieee754_pow+0x104>
 8006d30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006d34:	4598      	cmp	r8, r3
 8006d36:	dd4c      	ble.n	8006dd2 <__ieee754_pow+0x10a>
 8006d38:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d3c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006d40:	2b14      	cmp	r3, #20
 8006d42:	dd26      	ble.n	8006d92 <__ieee754_pow+0xca>
 8006d44:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006d48:	fa22 f103 	lsr.w	r1, r2, r3
 8006d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d13e      	bne.n	8006dd2 <__ieee754_pow+0x10a>
 8006d54:	f001 0101 	and.w	r1, r1, #1
 8006d58:	f1c1 0b02 	rsb	fp, r1, #2
 8006d5c:	2a00      	cmp	r2, #0
 8006d5e:	d15b      	bne.n	8006e18 <__ieee754_pow+0x150>
 8006d60:	4b5b      	ldr	r3, [pc, #364]	; (8006ed0 <__ieee754_pow+0x208>)
 8006d62:	4598      	cmp	r8, r3
 8006d64:	d124      	bne.n	8006db0 <__ieee754_pow+0xe8>
 8006d66:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006d6a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006d6e:	ea53 030a 	orrs.w	r3, r3, sl
 8006d72:	f000 8476 	beq.w	8007662 <__ieee754_pow+0x99a>
 8006d76:	4b59      	ldr	r3, [pc, #356]	; (8006edc <__ieee754_pow+0x214>)
 8006d78:	429c      	cmp	r4, r3
 8006d7a:	dd2d      	ble.n	8006dd8 <__ieee754_pow+0x110>
 8006d7c:	f1b9 0f00 	cmp.w	r9, #0
 8006d80:	f280 8473 	bge.w	800766a <__ieee754_pow+0x9a2>
 8006d84:	2000      	movs	r0, #0
 8006d86:	2100      	movs	r1, #0
 8006d88:	ec41 0b10 	vmov	d0, r0, r1
 8006d8c:	b011      	add	sp, #68	; 0x44
 8006d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	d13e      	bne.n	8006e14 <__ieee754_pow+0x14c>
 8006d96:	f1c3 0314 	rsb	r3, r3, #20
 8006d9a:	fa48 f103 	asr.w	r1, r8, r3
 8006d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006da2:	4543      	cmp	r3, r8
 8006da4:	f040 8469 	bne.w	800767a <__ieee754_pow+0x9b2>
 8006da8:	f001 0101 	and.w	r1, r1, #1
 8006dac:	f1c1 0b02 	rsb	fp, r1, #2
 8006db0:	4b4b      	ldr	r3, [pc, #300]	; (8006ee0 <__ieee754_pow+0x218>)
 8006db2:	4598      	cmp	r8, r3
 8006db4:	d118      	bne.n	8006de8 <__ieee754_pow+0x120>
 8006db6:	f1b9 0f00 	cmp.w	r9, #0
 8006dba:	f280 845a 	bge.w	8007672 <__ieee754_pow+0x9aa>
 8006dbe:	4948      	ldr	r1, [pc, #288]	; (8006ee0 <__ieee754_pow+0x218>)
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	f7f9 fce5 	bl	8000794 <__aeabi_ddiv>
 8006dca:	e7dd      	b.n	8006d88 <__ieee754_pow+0xc0>
 8006dcc:	f04f 0b02 	mov.w	fp, #2
 8006dd0:	e7c4      	b.n	8006d5c <__ieee754_pow+0x94>
 8006dd2:	f04f 0b00 	mov.w	fp, #0
 8006dd6:	e7c1      	b.n	8006d5c <__ieee754_pow+0x94>
 8006dd8:	f1b9 0f00 	cmp.w	r9, #0
 8006ddc:	dad2      	bge.n	8006d84 <__ieee754_pow+0xbc>
 8006dde:	e9dd 0300 	ldrd	r0, r3, [sp]
 8006de2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006de6:	e7cf      	b.n	8006d88 <__ieee754_pow+0xc0>
 8006de8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006dec:	d106      	bne.n	8006dfc <__ieee754_pow+0x134>
 8006dee:	4632      	mov	r2, r6
 8006df0:	463b      	mov	r3, r7
 8006df2:	4610      	mov	r0, r2
 8006df4:	4619      	mov	r1, r3
 8006df6:	f7f9 fba3 	bl	8000540 <__aeabi_dmul>
 8006dfa:	e7c5      	b.n	8006d88 <__ieee754_pow+0xc0>
 8006dfc:	4b39      	ldr	r3, [pc, #228]	; (8006ee4 <__ieee754_pow+0x21c>)
 8006dfe:	4599      	cmp	r9, r3
 8006e00:	d10a      	bne.n	8006e18 <__ieee754_pow+0x150>
 8006e02:	2d00      	cmp	r5, #0
 8006e04:	db08      	blt.n	8006e18 <__ieee754_pow+0x150>
 8006e06:	ec47 6b10 	vmov	d0, r6, r7
 8006e0a:	b011      	add	sp, #68	; 0x44
 8006e0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e10:	f000 bc68 	b.w	80076e4 <__ieee754_sqrt>
 8006e14:	f04f 0b00 	mov.w	fp, #0
 8006e18:	ec47 6b10 	vmov	d0, r6, r7
 8006e1c:	f000 fd12 	bl	8007844 <fabs>
 8006e20:	ec51 0b10 	vmov	r0, r1, d0
 8006e24:	f1ba 0f00 	cmp.w	sl, #0
 8006e28:	d127      	bne.n	8006e7a <__ieee754_pow+0x1b2>
 8006e2a:	b124      	cbz	r4, 8006e36 <__ieee754_pow+0x16e>
 8006e2c:	4b2c      	ldr	r3, [pc, #176]	; (8006ee0 <__ieee754_pow+0x218>)
 8006e2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d121      	bne.n	8006e7a <__ieee754_pow+0x1b2>
 8006e36:	f1b9 0f00 	cmp.w	r9, #0
 8006e3a:	da05      	bge.n	8006e48 <__ieee754_pow+0x180>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	2000      	movs	r0, #0
 8006e42:	4927      	ldr	r1, [pc, #156]	; (8006ee0 <__ieee754_pow+0x218>)
 8006e44:	f7f9 fca6 	bl	8000794 <__aeabi_ddiv>
 8006e48:	2d00      	cmp	r5, #0
 8006e4a:	da9d      	bge.n	8006d88 <__ieee754_pow+0xc0>
 8006e4c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006e50:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006e54:	ea54 030b 	orrs.w	r3, r4, fp
 8006e58:	d108      	bne.n	8006e6c <__ieee754_pow+0x1a4>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4610      	mov	r0, r2
 8006e60:	4619      	mov	r1, r3
 8006e62:	f7f9 f9b5 	bl	80001d0 <__aeabi_dsub>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	e7ac      	b.n	8006dc6 <__ieee754_pow+0xfe>
 8006e6c:	f1bb 0f01 	cmp.w	fp, #1
 8006e70:	d18a      	bne.n	8006d88 <__ieee754_pow+0xc0>
 8006e72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e76:	4619      	mov	r1, r3
 8006e78:	e786      	b.n	8006d88 <__ieee754_pow+0xc0>
 8006e7a:	0fed      	lsrs	r5, r5, #31
 8006e7c:	1e6b      	subs	r3, r5, #1
 8006e7e:	930d      	str	r3, [sp, #52]	; 0x34
 8006e80:	ea5b 0303 	orrs.w	r3, fp, r3
 8006e84:	d102      	bne.n	8006e8c <__ieee754_pow+0x1c4>
 8006e86:	4632      	mov	r2, r6
 8006e88:	463b      	mov	r3, r7
 8006e8a:	e7e8      	b.n	8006e5e <__ieee754_pow+0x196>
 8006e8c:	4b16      	ldr	r3, [pc, #88]	; (8006ee8 <__ieee754_pow+0x220>)
 8006e8e:	4598      	cmp	r8, r3
 8006e90:	f340 80fe 	ble.w	8007090 <__ieee754_pow+0x3c8>
 8006e94:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006e98:	4598      	cmp	r8, r3
 8006e9a:	dd0a      	ble.n	8006eb2 <__ieee754_pow+0x1ea>
 8006e9c:	4b0f      	ldr	r3, [pc, #60]	; (8006edc <__ieee754_pow+0x214>)
 8006e9e:	429c      	cmp	r4, r3
 8006ea0:	dc0d      	bgt.n	8006ebe <__ieee754_pow+0x1f6>
 8006ea2:	f1b9 0f00 	cmp.w	r9, #0
 8006ea6:	f6bf af6d 	bge.w	8006d84 <__ieee754_pow+0xbc>
 8006eaa:	a307      	add	r3, pc, #28	; (adr r3, 8006ec8 <__ieee754_pow+0x200>)
 8006eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb0:	e79f      	b.n	8006df2 <__ieee754_pow+0x12a>
 8006eb2:	4b0e      	ldr	r3, [pc, #56]	; (8006eec <__ieee754_pow+0x224>)
 8006eb4:	429c      	cmp	r4, r3
 8006eb6:	ddf4      	ble.n	8006ea2 <__ieee754_pow+0x1da>
 8006eb8:	4b09      	ldr	r3, [pc, #36]	; (8006ee0 <__ieee754_pow+0x218>)
 8006eba:	429c      	cmp	r4, r3
 8006ebc:	dd18      	ble.n	8006ef0 <__ieee754_pow+0x228>
 8006ebe:	f1b9 0f00 	cmp.w	r9, #0
 8006ec2:	dcf2      	bgt.n	8006eaa <__ieee754_pow+0x1e2>
 8006ec4:	e75e      	b.n	8006d84 <__ieee754_pow+0xbc>
 8006ec6:	bf00      	nop
 8006ec8:	8800759c 	.word	0x8800759c
 8006ecc:	7e37e43c 	.word	0x7e37e43c
 8006ed0:	7ff00000 	.word	0x7ff00000
 8006ed4:	08007adf 	.word	0x08007adf
 8006ed8:	433fffff 	.word	0x433fffff
 8006edc:	3fefffff 	.word	0x3fefffff
 8006ee0:	3ff00000 	.word	0x3ff00000
 8006ee4:	3fe00000 	.word	0x3fe00000
 8006ee8:	41e00000 	.word	0x41e00000
 8006eec:	3feffffe 	.word	0x3feffffe
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4b63      	ldr	r3, [pc, #396]	; (8007080 <__ieee754_pow+0x3b8>)
 8006ef4:	f7f9 f96c 	bl	80001d0 <__aeabi_dsub>
 8006ef8:	a355      	add	r3, pc, #340	; (adr r3, 8007050 <__ieee754_pow+0x388>)
 8006efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efe:	4604      	mov	r4, r0
 8006f00:	460d      	mov	r5, r1
 8006f02:	f7f9 fb1d 	bl	8000540 <__aeabi_dmul>
 8006f06:	a354      	add	r3, pc, #336	; (adr r3, 8007058 <__ieee754_pow+0x390>)
 8006f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	460f      	mov	r7, r1
 8006f10:	4620      	mov	r0, r4
 8006f12:	4629      	mov	r1, r5
 8006f14:	f7f9 fb14 	bl	8000540 <__aeabi_dmul>
 8006f18:	2200      	movs	r2, #0
 8006f1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f1e:	4b59      	ldr	r3, [pc, #356]	; (8007084 <__ieee754_pow+0x3bc>)
 8006f20:	4620      	mov	r0, r4
 8006f22:	4629      	mov	r1, r5
 8006f24:	f7f9 fb0c 	bl	8000540 <__aeabi_dmul>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	a14c      	add	r1, pc, #304	; (adr r1, 8007060 <__ieee754_pow+0x398>)
 8006f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f32:	f7f9 f94d 	bl	80001d0 <__aeabi_dsub>
 8006f36:	4622      	mov	r2, r4
 8006f38:	462b      	mov	r3, r5
 8006f3a:	f7f9 fb01 	bl	8000540 <__aeabi_dmul>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	2000      	movs	r0, #0
 8006f44:	4950      	ldr	r1, [pc, #320]	; (8007088 <__ieee754_pow+0x3c0>)
 8006f46:	f7f9 f943 	bl	80001d0 <__aeabi_dsub>
 8006f4a:	4622      	mov	r2, r4
 8006f4c:	462b      	mov	r3, r5
 8006f4e:	4680      	mov	r8, r0
 8006f50:	4689      	mov	r9, r1
 8006f52:	4620      	mov	r0, r4
 8006f54:	4629      	mov	r1, r5
 8006f56:	f7f9 faf3 	bl	8000540 <__aeabi_dmul>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	460b      	mov	r3, r1
 8006f5e:	4640      	mov	r0, r8
 8006f60:	4649      	mov	r1, r9
 8006f62:	f7f9 faed 	bl	8000540 <__aeabi_dmul>
 8006f66:	a340      	add	r3, pc, #256	; (adr r3, 8007068 <__ieee754_pow+0x3a0>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f7f9 fae8 	bl	8000540 <__aeabi_dmul>
 8006f70:	4602      	mov	r2, r0
 8006f72:	460b      	mov	r3, r1
 8006f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f78:	f7f9 f92a 	bl	80001d0 <__aeabi_dsub>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4604      	mov	r4, r0
 8006f82:	460d      	mov	r5, r1
 8006f84:	4630      	mov	r0, r6
 8006f86:	4639      	mov	r1, r7
 8006f88:	f7f9 f924 	bl	80001d4 <__adddf3>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f92:	4632      	mov	r2, r6
 8006f94:	463b      	mov	r3, r7
 8006f96:	f7f9 f91b 	bl	80001d0 <__aeabi_dsub>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	f7f9 f915 	bl	80001d0 <__aeabi_dsub>
 8006fa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fa8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006fac:	4313      	orrs	r3, r2
 8006fae:	4606      	mov	r6, r0
 8006fb0:	460f      	mov	r7, r1
 8006fb2:	f040 81eb 	bne.w	800738c <__ieee754_pow+0x6c4>
 8006fb6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007070 <__ieee754_pow+0x3a8>
 8006fba:	e9dd 4500 	ldrd	r4, r5, [sp]
 8006fbe:	2400      	movs	r4, #0
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	462b      	mov	r3, r5
 8006fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006fc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006fcc:	f7f9 f900 	bl	80001d0 <__aeabi_dsub>
 8006fd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fd4:	f7f9 fab4 	bl	8000540 <__aeabi_dmul>
 8006fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006fdc:	4680      	mov	r8, r0
 8006fde:	4689      	mov	r9, r1
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	f7f9 faac 	bl	8000540 <__aeabi_dmul>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	460b      	mov	r3, r1
 8006fec:	4640      	mov	r0, r8
 8006fee:	4649      	mov	r1, r9
 8006ff0:	f7f9 f8f0 	bl	80001d4 <__adddf3>
 8006ff4:	4622      	mov	r2, r4
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	4689      	mov	r9, r1
 8006ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007000:	f7f9 fa9e 	bl	8000540 <__aeabi_dmul>
 8007004:	460b      	mov	r3, r1
 8007006:	4604      	mov	r4, r0
 8007008:	460d      	mov	r5, r1
 800700a:	4602      	mov	r2, r0
 800700c:	4649      	mov	r1, r9
 800700e:	4640      	mov	r0, r8
 8007010:	e9cd 4500 	strd	r4, r5, [sp]
 8007014:	f7f9 f8de 	bl	80001d4 <__adddf3>
 8007018:	4b1c      	ldr	r3, [pc, #112]	; (800708c <__ieee754_pow+0x3c4>)
 800701a:	4299      	cmp	r1, r3
 800701c:	4606      	mov	r6, r0
 800701e:	460f      	mov	r7, r1
 8007020:	468b      	mov	fp, r1
 8007022:	f340 82f7 	ble.w	8007614 <__ieee754_pow+0x94c>
 8007026:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800702a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800702e:	4303      	orrs	r3, r0
 8007030:	f000 81ea 	beq.w	8007408 <__ieee754_pow+0x740>
 8007034:	a310      	add	r3, pc, #64	; (adr r3, 8007078 <__ieee754_pow+0x3b0>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800703e:	f7f9 fa7f 	bl	8000540 <__aeabi_dmul>
 8007042:	a30d      	add	r3, pc, #52	; (adr r3, 8007078 <__ieee754_pow+0x3b0>)
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	e6d5      	b.n	8006df6 <__ieee754_pow+0x12e>
 800704a:	bf00      	nop
 800704c:	f3af 8000 	nop.w
 8007050:	60000000 	.word	0x60000000
 8007054:	3ff71547 	.word	0x3ff71547
 8007058:	f85ddf44 	.word	0xf85ddf44
 800705c:	3e54ae0b 	.word	0x3e54ae0b
 8007060:	55555555 	.word	0x55555555
 8007064:	3fd55555 	.word	0x3fd55555
 8007068:	652b82fe 	.word	0x652b82fe
 800706c:	3ff71547 	.word	0x3ff71547
 8007070:	00000000 	.word	0x00000000
 8007074:	bff00000 	.word	0xbff00000
 8007078:	8800759c 	.word	0x8800759c
 800707c:	7e37e43c 	.word	0x7e37e43c
 8007080:	3ff00000 	.word	0x3ff00000
 8007084:	3fd00000 	.word	0x3fd00000
 8007088:	3fe00000 	.word	0x3fe00000
 800708c:	408fffff 	.word	0x408fffff
 8007090:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007094:	f04f 0200 	mov.w	r2, #0
 8007098:	da05      	bge.n	80070a6 <__ieee754_pow+0x3de>
 800709a:	4bd3      	ldr	r3, [pc, #844]	; (80073e8 <__ieee754_pow+0x720>)
 800709c:	f7f9 fa50 	bl	8000540 <__aeabi_dmul>
 80070a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80070a4:	460c      	mov	r4, r1
 80070a6:	1523      	asrs	r3, r4, #20
 80070a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80070ac:	4413      	add	r3, r2
 80070ae:	9309      	str	r3, [sp, #36]	; 0x24
 80070b0:	4bce      	ldr	r3, [pc, #824]	; (80073ec <__ieee754_pow+0x724>)
 80070b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80070b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80070ba:	429c      	cmp	r4, r3
 80070bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80070c0:	dd08      	ble.n	80070d4 <__ieee754_pow+0x40c>
 80070c2:	4bcb      	ldr	r3, [pc, #812]	; (80073f0 <__ieee754_pow+0x728>)
 80070c4:	429c      	cmp	r4, r3
 80070c6:	f340 815e 	ble.w	8007386 <__ieee754_pow+0x6be>
 80070ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070cc:	3301      	adds	r3, #1
 80070ce:	9309      	str	r3, [sp, #36]	; 0x24
 80070d0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80070d4:	f04f 0a00 	mov.w	sl, #0
 80070d8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80070dc:	930c      	str	r3, [sp, #48]	; 0x30
 80070de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80070e0:	4bc4      	ldr	r3, [pc, #784]	; (80073f4 <__ieee754_pow+0x72c>)
 80070e2:	4413      	add	r3, r2
 80070e4:	ed93 7b00 	vldr	d7, [r3]
 80070e8:	4629      	mov	r1, r5
 80070ea:	ec53 2b17 	vmov	r2, r3, d7
 80070ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80070f2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80070f6:	f7f9 f86b 	bl	80001d0 <__aeabi_dsub>
 80070fa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80070fe:	4606      	mov	r6, r0
 8007100:	460f      	mov	r7, r1
 8007102:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007106:	f7f9 f865 	bl	80001d4 <__adddf3>
 800710a:	4602      	mov	r2, r0
 800710c:	460b      	mov	r3, r1
 800710e:	2000      	movs	r0, #0
 8007110:	49b9      	ldr	r1, [pc, #740]	; (80073f8 <__ieee754_pow+0x730>)
 8007112:	f7f9 fb3f 	bl	8000794 <__aeabi_ddiv>
 8007116:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4630      	mov	r0, r6
 8007120:	4639      	mov	r1, r7
 8007122:	f7f9 fa0d 	bl	8000540 <__aeabi_dmul>
 8007126:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800712a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800712e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007132:	2300      	movs	r3, #0
 8007134:	9302      	str	r3, [sp, #8]
 8007136:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800713a:	106d      	asrs	r5, r5, #1
 800713c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007140:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007144:	2200      	movs	r2, #0
 8007146:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800714a:	4640      	mov	r0, r8
 800714c:	4649      	mov	r1, r9
 800714e:	4614      	mov	r4, r2
 8007150:	461d      	mov	r5, r3
 8007152:	f7f9 f9f5 	bl	8000540 <__aeabi_dmul>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4630      	mov	r0, r6
 800715c:	4639      	mov	r1, r7
 800715e:	f7f9 f837 	bl	80001d0 <__aeabi_dsub>
 8007162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	4620      	mov	r0, r4
 800716c:	4629      	mov	r1, r5
 800716e:	f7f9 f82f 	bl	80001d0 <__aeabi_dsub>
 8007172:	4602      	mov	r2, r0
 8007174:	460b      	mov	r3, r1
 8007176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800717a:	f7f9 f829 	bl	80001d0 <__aeabi_dsub>
 800717e:	4642      	mov	r2, r8
 8007180:	464b      	mov	r3, r9
 8007182:	f7f9 f9dd 	bl	8000540 <__aeabi_dmul>
 8007186:	4602      	mov	r2, r0
 8007188:	460b      	mov	r3, r1
 800718a:	4630      	mov	r0, r6
 800718c:	4639      	mov	r1, r7
 800718e:	f7f9 f81f 	bl	80001d0 <__aeabi_dsub>
 8007192:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007196:	f7f9 f9d3 	bl	8000540 <__aeabi_dmul>
 800719a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800719e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80071a2:	4610      	mov	r0, r2
 80071a4:	4619      	mov	r1, r3
 80071a6:	f7f9 f9cb 	bl	8000540 <__aeabi_dmul>
 80071aa:	a37b      	add	r3, pc, #492	; (adr r3, 8007398 <__ieee754_pow+0x6d0>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	4604      	mov	r4, r0
 80071b2:	460d      	mov	r5, r1
 80071b4:	f7f9 f9c4 	bl	8000540 <__aeabi_dmul>
 80071b8:	a379      	add	r3, pc, #484	; (adr r3, 80073a0 <__ieee754_pow+0x6d8>)
 80071ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071be:	f7f9 f809 	bl	80001d4 <__adddf3>
 80071c2:	4622      	mov	r2, r4
 80071c4:	462b      	mov	r3, r5
 80071c6:	f7f9 f9bb 	bl	8000540 <__aeabi_dmul>
 80071ca:	a377      	add	r3, pc, #476	; (adr r3, 80073a8 <__ieee754_pow+0x6e0>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	f7f9 f800 	bl	80001d4 <__adddf3>
 80071d4:	4622      	mov	r2, r4
 80071d6:	462b      	mov	r3, r5
 80071d8:	f7f9 f9b2 	bl	8000540 <__aeabi_dmul>
 80071dc:	a374      	add	r3, pc, #464	; (adr r3, 80073b0 <__ieee754_pow+0x6e8>)
 80071de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e2:	f7f8 fff7 	bl	80001d4 <__adddf3>
 80071e6:	4622      	mov	r2, r4
 80071e8:	462b      	mov	r3, r5
 80071ea:	f7f9 f9a9 	bl	8000540 <__aeabi_dmul>
 80071ee:	a372      	add	r3, pc, #456	; (adr r3, 80073b8 <__ieee754_pow+0x6f0>)
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f7f8 ffee 	bl	80001d4 <__adddf3>
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	f7f9 f9a0 	bl	8000540 <__aeabi_dmul>
 8007200:	a36f      	add	r3, pc, #444	; (adr r3, 80073c0 <__ieee754_pow+0x6f8>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	f7f8 ffe5 	bl	80001d4 <__adddf3>
 800720a:	4622      	mov	r2, r4
 800720c:	4606      	mov	r6, r0
 800720e:	460f      	mov	r7, r1
 8007210:	462b      	mov	r3, r5
 8007212:	4620      	mov	r0, r4
 8007214:	4629      	mov	r1, r5
 8007216:	f7f9 f993 	bl	8000540 <__aeabi_dmul>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	f7f9 f98d 	bl	8000540 <__aeabi_dmul>
 8007226:	4642      	mov	r2, r8
 8007228:	4604      	mov	r4, r0
 800722a:	460d      	mov	r5, r1
 800722c:	464b      	mov	r3, r9
 800722e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007232:	f7f8 ffcf 	bl	80001d4 <__adddf3>
 8007236:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800723a:	f7f9 f981 	bl	8000540 <__aeabi_dmul>
 800723e:	4622      	mov	r2, r4
 8007240:	462b      	mov	r3, r5
 8007242:	f7f8 ffc7 	bl	80001d4 <__adddf3>
 8007246:	4642      	mov	r2, r8
 8007248:	4606      	mov	r6, r0
 800724a:	460f      	mov	r7, r1
 800724c:	464b      	mov	r3, r9
 800724e:	4640      	mov	r0, r8
 8007250:	4649      	mov	r1, r9
 8007252:	f7f9 f975 	bl	8000540 <__aeabi_dmul>
 8007256:	2200      	movs	r2, #0
 8007258:	4b68      	ldr	r3, [pc, #416]	; (80073fc <__ieee754_pow+0x734>)
 800725a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800725e:	f7f8 ffb9 	bl	80001d4 <__adddf3>
 8007262:	4632      	mov	r2, r6
 8007264:	463b      	mov	r3, r7
 8007266:	f7f8 ffb5 	bl	80001d4 <__adddf3>
 800726a:	9802      	ldr	r0, [sp, #8]
 800726c:	460d      	mov	r5, r1
 800726e:	4604      	mov	r4, r0
 8007270:	4602      	mov	r2, r0
 8007272:	460b      	mov	r3, r1
 8007274:	4640      	mov	r0, r8
 8007276:	4649      	mov	r1, r9
 8007278:	f7f9 f962 	bl	8000540 <__aeabi_dmul>
 800727c:	2200      	movs	r2, #0
 800727e:	4680      	mov	r8, r0
 8007280:	4689      	mov	r9, r1
 8007282:	4b5e      	ldr	r3, [pc, #376]	; (80073fc <__ieee754_pow+0x734>)
 8007284:	4620      	mov	r0, r4
 8007286:	4629      	mov	r1, r5
 8007288:	f7f8 ffa2 	bl	80001d0 <__aeabi_dsub>
 800728c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007290:	f7f8 ff9e 	bl	80001d0 <__aeabi_dsub>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	4630      	mov	r0, r6
 800729a:	4639      	mov	r1, r7
 800729c:	f7f8 ff98 	bl	80001d0 <__aeabi_dsub>
 80072a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072a4:	f7f9 f94c 	bl	8000540 <__aeabi_dmul>
 80072a8:	4622      	mov	r2, r4
 80072aa:	4606      	mov	r6, r0
 80072ac:	460f      	mov	r7, r1
 80072ae:	462b      	mov	r3, r5
 80072b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072b4:	f7f9 f944 	bl	8000540 <__aeabi_dmul>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4630      	mov	r0, r6
 80072be:	4639      	mov	r1, r7
 80072c0:	f7f8 ff88 	bl	80001d4 <__adddf3>
 80072c4:	4606      	mov	r6, r0
 80072c6:	460f      	mov	r7, r1
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4640      	mov	r0, r8
 80072ce:	4649      	mov	r1, r9
 80072d0:	f7f8 ff80 	bl	80001d4 <__adddf3>
 80072d4:	9802      	ldr	r0, [sp, #8]
 80072d6:	a33c      	add	r3, pc, #240	; (adr r3, 80073c8 <__ieee754_pow+0x700>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	4604      	mov	r4, r0
 80072de:	460d      	mov	r5, r1
 80072e0:	f7f9 f92e 	bl	8000540 <__aeabi_dmul>
 80072e4:	4642      	mov	r2, r8
 80072e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80072ea:	464b      	mov	r3, r9
 80072ec:	4620      	mov	r0, r4
 80072ee:	4629      	mov	r1, r5
 80072f0:	f7f8 ff6e 	bl	80001d0 <__aeabi_dsub>
 80072f4:	4602      	mov	r2, r0
 80072f6:	460b      	mov	r3, r1
 80072f8:	4630      	mov	r0, r6
 80072fa:	4639      	mov	r1, r7
 80072fc:	f7f8 ff68 	bl	80001d0 <__aeabi_dsub>
 8007300:	a333      	add	r3, pc, #204	; (adr r3, 80073d0 <__ieee754_pow+0x708>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	f7f9 f91b 	bl	8000540 <__aeabi_dmul>
 800730a:	a333      	add	r3, pc, #204	; (adr r3, 80073d8 <__ieee754_pow+0x710>)
 800730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007310:	4606      	mov	r6, r0
 8007312:	460f      	mov	r7, r1
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	f7f9 f912 	bl	8000540 <__aeabi_dmul>
 800731c:	4602      	mov	r2, r0
 800731e:	460b      	mov	r3, r1
 8007320:	4630      	mov	r0, r6
 8007322:	4639      	mov	r1, r7
 8007324:	f7f8 ff56 	bl	80001d4 <__adddf3>
 8007328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800732a:	4b35      	ldr	r3, [pc, #212]	; (8007400 <__ieee754_pow+0x738>)
 800732c:	4413      	add	r3, r2
 800732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007332:	f7f8 ff4f 	bl	80001d4 <__adddf3>
 8007336:	4604      	mov	r4, r0
 8007338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800733a:	460d      	mov	r5, r1
 800733c:	f7f9 f896 	bl	800046c <__aeabi_i2d>
 8007340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007342:	4b30      	ldr	r3, [pc, #192]	; (8007404 <__ieee754_pow+0x73c>)
 8007344:	4413      	add	r3, r2
 8007346:	e9d3 8900 	ldrd	r8, r9, [r3]
 800734a:	4606      	mov	r6, r0
 800734c:	460f      	mov	r7, r1
 800734e:	4622      	mov	r2, r4
 8007350:	462b      	mov	r3, r5
 8007352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007356:	f7f8 ff3d 	bl	80001d4 <__adddf3>
 800735a:	4642      	mov	r2, r8
 800735c:	464b      	mov	r3, r9
 800735e:	f7f8 ff39 	bl	80001d4 <__adddf3>
 8007362:	4632      	mov	r2, r6
 8007364:	463b      	mov	r3, r7
 8007366:	f7f8 ff35 	bl	80001d4 <__adddf3>
 800736a:	9802      	ldr	r0, [sp, #8]
 800736c:	4632      	mov	r2, r6
 800736e:	463b      	mov	r3, r7
 8007370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007374:	f7f8 ff2c 	bl	80001d0 <__aeabi_dsub>
 8007378:	4642      	mov	r2, r8
 800737a:	464b      	mov	r3, r9
 800737c:	f7f8 ff28 	bl	80001d0 <__aeabi_dsub>
 8007380:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007384:	e607      	b.n	8006f96 <__ieee754_pow+0x2ce>
 8007386:	f04f 0a01 	mov.w	sl, #1
 800738a:	e6a5      	b.n	80070d8 <__ieee754_pow+0x410>
 800738c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80073e0 <__ieee754_pow+0x718>
 8007390:	e613      	b.n	8006fba <__ieee754_pow+0x2f2>
 8007392:	bf00      	nop
 8007394:	f3af 8000 	nop.w
 8007398:	4a454eef 	.word	0x4a454eef
 800739c:	3fca7e28 	.word	0x3fca7e28
 80073a0:	93c9db65 	.word	0x93c9db65
 80073a4:	3fcd864a 	.word	0x3fcd864a
 80073a8:	a91d4101 	.word	0xa91d4101
 80073ac:	3fd17460 	.word	0x3fd17460
 80073b0:	518f264d 	.word	0x518f264d
 80073b4:	3fd55555 	.word	0x3fd55555
 80073b8:	db6fabff 	.word	0xdb6fabff
 80073bc:	3fdb6db6 	.word	0x3fdb6db6
 80073c0:	33333303 	.word	0x33333303
 80073c4:	3fe33333 	.word	0x3fe33333
 80073c8:	e0000000 	.word	0xe0000000
 80073cc:	3feec709 	.word	0x3feec709
 80073d0:	dc3a03fd 	.word	0xdc3a03fd
 80073d4:	3feec709 	.word	0x3feec709
 80073d8:	145b01f5 	.word	0x145b01f5
 80073dc:	be3e2fe0 	.word	0xbe3e2fe0
 80073e0:	00000000 	.word	0x00000000
 80073e4:	3ff00000 	.word	0x3ff00000
 80073e8:	43400000 	.word	0x43400000
 80073ec:	0003988e 	.word	0x0003988e
 80073f0:	000bb679 	.word	0x000bb679
 80073f4:	08007ae8 	.word	0x08007ae8
 80073f8:	3ff00000 	.word	0x3ff00000
 80073fc:	40080000 	.word	0x40080000
 8007400:	08007b08 	.word	0x08007b08
 8007404:	08007af8 	.word	0x08007af8
 8007408:	a3b4      	add	r3, pc, #720	; (adr r3, 80076dc <__ieee754_pow+0xa14>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	4640      	mov	r0, r8
 8007410:	4649      	mov	r1, r9
 8007412:	f7f8 fedf 	bl	80001d4 <__adddf3>
 8007416:	4622      	mov	r2, r4
 8007418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800741c:	462b      	mov	r3, r5
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	f7f8 fed5 	bl	80001d0 <__aeabi_dsub>
 8007426:	4602      	mov	r2, r0
 8007428:	460b      	mov	r3, r1
 800742a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800742e:	f7f9 fb17 	bl	8000a60 <__aeabi_dcmpgt>
 8007432:	2800      	cmp	r0, #0
 8007434:	f47f adfe 	bne.w	8007034 <__ieee754_pow+0x36c>
 8007438:	4aa3      	ldr	r2, [pc, #652]	; (80076c8 <__ieee754_pow+0xa00>)
 800743a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800743e:	4293      	cmp	r3, r2
 8007440:	f340 810a 	ble.w	8007658 <__ieee754_pow+0x990>
 8007444:	151b      	asrs	r3, r3, #20
 8007446:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800744a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800744e:	fa4a f303 	asr.w	r3, sl, r3
 8007452:	445b      	add	r3, fp
 8007454:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007458:	4e9c      	ldr	r6, [pc, #624]	; (80076cc <__ieee754_pow+0xa04>)
 800745a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800745e:	4116      	asrs	r6, r2
 8007460:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007464:	2000      	movs	r0, #0
 8007466:	ea23 0106 	bic.w	r1, r3, r6
 800746a:	f1c2 0214 	rsb	r2, r2, #20
 800746e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007472:	fa4a fa02 	asr.w	sl, sl, r2
 8007476:	f1bb 0f00 	cmp.w	fp, #0
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4620      	mov	r0, r4
 8007480:	4629      	mov	r1, r5
 8007482:	bfb8      	it	lt
 8007484:	f1ca 0a00 	rsblt	sl, sl, #0
 8007488:	f7f8 fea2 	bl	80001d0 <__aeabi_dsub>
 800748c:	e9cd 0100 	strd	r0, r1, [sp]
 8007490:	4642      	mov	r2, r8
 8007492:	464b      	mov	r3, r9
 8007494:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007498:	f7f8 fe9c 	bl	80001d4 <__adddf3>
 800749c:	2000      	movs	r0, #0
 800749e:	a378      	add	r3, pc, #480	; (adr r3, 8007680 <__ieee754_pow+0x9b8>)
 80074a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a4:	4604      	mov	r4, r0
 80074a6:	460d      	mov	r5, r1
 80074a8:	f7f9 f84a 	bl	8000540 <__aeabi_dmul>
 80074ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074b0:	4606      	mov	r6, r0
 80074b2:	460f      	mov	r7, r1
 80074b4:	4620      	mov	r0, r4
 80074b6:	4629      	mov	r1, r5
 80074b8:	f7f8 fe8a 	bl	80001d0 <__aeabi_dsub>
 80074bc:	4602      	mov	r2, r0
 80074be:	460b      	mov	r3, r1
 80074c0:	4640      	mov	r0, r8
 80074c2:	4649      	mov	r1, r9
 80074c4:	f7f8 fe84 	bl	80001d0 <__aeabi_dsub>
 80074c8:	a36f      	add	r3, pc, #444	; (adr r3, 8007688 <__ieee754_pow+0x9c0>)
 80074ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ce:	f7f9 f837 	bl	8000540 <__aeabi_dmul>
 80074d2:	a36f      	add	r3, pc, #444	; (adr r3, 8007690 <__ieee754_pow+0x9c8>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	4680      	mov	r8, r0
 80074da:	4689      	mov	r9, r1
 80074dc:	4620      	mov	r0, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	f7f9 f82e 	bl	8000540 <__aeabi_dmul>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4640      	mov	r0, r8
 80074ea:	4649      	mov	r1, r9
 80074ec:	f7f8 fe72 	bl	80001d4 <__adddf3>
 80074f0:	4604      	mov	r4, r0
 80074f2:	460d      	mov	r5, r1
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	4630      	mov	r0, r6
 80074fa:	4639      	mov	r1, r7
 80074fc:	f7f8 fe6a 	bl	80001d4 <__adddf3>
 8007500:	4632      	mov	r2, r6
 8007502:	463b      	mov	r3, r7
 8007504:	4680      	mov	r8, r0
 8007506:	4689      	mov	r9, r1
 8007508:	f7f8 fe62 	bl	80001d0 <__aeabi_dsub>
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	4620      	mov	r0, r4
 8007512:	4629      	mov	r1, r5
 8007514:	f7f8 fe5c 	bl	80001d0 <__aeabi_dsub>
 8007518:	4642      	mov	r2, r8
 800751a:	4606      	mov	r6, r0
 800751c:	460f      	mov	r7, r1
 800751e:	464b      	mov	r3, r9
 8007520:	4640      	mov	r0, r8
 8007522:	4649      	mov	r1, r9
 8007524:	f7f9 f80c 	bl	8000540 <__aeabi_dmul>
 8007528:	a35b      	add	r3, pc, #364	; (adr r3, 8007698 <__ieee754_pow+0x9d0>)
 800752a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800752e:	4604      	mov	r4, r0
 8007530:	460d      	mov	r5, r1
 8007532:	f7f9 f805 	bl	8000540 <__aeabi_dmul>
 8007536:	a35a      	add	r3, pc, #360	; (adr r3, 80076a0 <__ieee754_pow+0x9d8>)
 8007538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753c:	f7f8 fe48 	bl	80001d0 <__aeabi_dsub>
 8007540:	4622      	mov	r2, r4
 8007542:	462b      	mov	r3, r5
 8007544:	f7f8 fffc 	bl	8000540 <__aeabi_dmul>
 8007548:	a357      	add	r3, pc, #348	; (adr r3, 80076a8 <__ieee754_pow+0x9e0>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f8 fe41 	bl	80001d4 <__adddf3>
 8007552:	4622      	mov	r2, r4
 8007554:	462b      	mov	r3, r5
 8007556:	f7f8 fff3 	bl	8000540 <__aeabi_dmul>
 800755a:	a355      	add	r3, pc, #340	; (adr r3, 80076b0 <__ieee754_pow+0x9e8>)
 800755c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007560:	f7f8 fe36 	bl	80001d0 <__aeabi_dsub>
 8007564:	4622      	mov	r2, r4
 8007566:	462b      	mov	r3, r5
 8007568:	f7f8 ffea 	bl	8000540 <__aeabi_dmul>
 800756c:	a352      	add	r3, pc, #328	; (adr r3, 80076b8 <__ieee754_pow+0x9f0>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f8 fe2f 	bl	80001d4 <__adddf3>
 8007576:	4622      	mov	r2, r4
 8007578:	462b      	mov	r3, r5
 800757a:	f7f8 ffe1 	bl	8000540 <__aeabi_dmul>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f8 fe23 	bl	80001d0 <__aeabi_dsub>
 800758a:	4604      	mov	r4, r0
 800758c:	460d      	mov	r5, r1
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	4640      	mov	r0, r8
 8007594:	4649      	mov	r1, r9
 8007596:	f7f8 ffd3 	bl	8000540 <__aeabi_dmul>
 800759a:	2200      	movs	r2, #0
 800759c:	e9cd 0100 	strd	r0, r1, [sp]
 80075a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80075a4:	4620      	mov	r0, r4
 80075a6:	4629      	mov	r1, r5
 80075a8:	f7f8 fe12 	bl	80001d0 <__aeabi_dsub>
 80075ac:	4602      	mov	r2, r0
 80075ae:	460b      	mov	r3, r1
 80075b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075b4:	f7f9 f8ee 	bl	8000794 <__aeabi_ddiv>
 80075b8:	4632      	mov	r2, r6
 80075ba:	4604      	mov	r4, r0
 80075bc:	460d      	mov	r5, r1
 80075be:	463b      	mov	r3, r7
 80075c0:	4640      	mov	r0, r8
 80075c2:	4649      	mov	r1, r9
 80075c4:	f7f8 ffbc 	bl	8000540 <__aeabi_dmul>
 80075c8:	4632      	mov	r2, r6
 80075ca:	463b      	mov	r3, r7
 80075cc:	f7f8 fe02 	bl	80001d4 <__adddf3>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4620      	mov	r0, r4
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7f8 fdfa 	bl	80001d0 <__aeabi_dsub>
 80075dc:	4642      	mov	r2, r8
 80075de:	464b      	mov	r3, r9
 80075e0:	f7f8 fdf6 	bl	80001d0 <__aeabi_dsub>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	2000      	movs	r0, #0
 80075ea:	4939      	ldr	r1, [pc, #228]	; (80076d0 <__ieee754_pow+0xa08>)
 80075ec:	f7f8 fdf0 	bl	80001d0 <__aeabi_dsub>
 80075f0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80075f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80075f8:	4602      	mov	r2, r0
 80075fa:	460b      	mov	r3, r1
 80075fc:	da2f      	bge.n	800765e <__ieee754_pow+0x996>
 80075fe:	4650      	mov	r0, sl
 8007600:	ec43 2b10 	vmov	d0, r2, r3
 8007604:	f000 f9c0 	bl	8007988 <scalbn>
 8007608:	ec51 0b10 	vmov	r0, r1, d0
 800760c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007610:	f7ff bbf1 	b.w	8006df6 <__ieee754_pow+0x12e>
 8007614:	4b2f      	ldr	r3, [pc, #188]	; (80076d4 <__ieee754_pow+0xa0c>)
 8007616:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800761a:	429e      	cmp	r6, r3
 800761c:	f77f af0c 	ble.w	8007438 <__ieee754_pow+0x770>
 8007620:	4b2d      	ldr	r3, [pc, #180]	; (80076d8 <__ieee754_pow+0xa10>)
 8007622:	440b      	add	r3, r1
 8007624:	4303      	orrs	r3, r0
 8007626:	d00b      	beq.n	8007640 <__ieee754_pow+0x978>
 8007628:	a325      	add	r3, pc, #148	; (adr r3, 80076c0 <__ieee754_pow+0x9f8>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007632:	f7f8 ff85 	bl	8000540 <__aeabi_dmul>
 8007636:	a322      	add	r3, pc, #136	; (adr r3, 80076c0 <__ieee754_pow+0x9f8>)
 8007638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763c:	f7ff bbdb 	b.w	8006df6 <__ieee754_pow+0x12e>
 8007640:	4622      	mov	r2, r4
 8007642:	462b      	mov	r3, r5
 8007644:	f7f8 fdc4 	bl	80001d0 <__aeabi_dsub>
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	f7f9 f9fe 	bl	8000a4c <__aeabi_dcmpge>
 8007650:	2800      	cmp	r0, #0
 8007652:	f43f aef1 	beq.w	8007438 <__ieee754_pow+0x770>
 8007656:	e7e7      	b.n	8007628 <__ieee754_pow+0x960>
 8007658:	f04f 0a00 	mov.w	sl, #0
 800765c:	e718      	b.n	8007490 <__ieee754_pow+0x7c8>
 800765e:	4621      	mov	r1, r4
 8007660:	e7d4      	b.n	800760c <__ieee754_pow+0x944>
 8007662:	2000      	movs	r0, #0
 8007664:	491a      	ldr	r1, [pc, #104]	; (80076d0 <__ieee754_pow+0xa08>)
 8007666:	f7ff bb8f 	b.w	8006d88 <__ieee754_pow+0xc0>
 800766a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800766e:	f7ff bb8b 	b.w	8006d88 <__ieee754_pow+0xc0>
 8007672:	4630      	mov	r0, r6
 8007674:	4639      	mov	r1, r7
 8007676:	f7ff bb87 	b.w	8006d88 <__ieee754_pow+0xc0>
 800767a:	4693      	mov	fp, r2
 800767c:	f7ff bb98 	b.w	8006db0 <__ieee754_pow+0xe8>
 8007680:	00000000 	.word	0x00000000
 8007684:	3fe62e43 	.word	0x3fe62e43
 8007688:	fefa39ef 	.word	0xfefa39ef
 800768c:	3fe62e42 	.word	0x3fe62e42
 8007690:	0ca86c39 	.word	0x0ca86c39
 8007694:	be205c61 	.word	0xbe205c61
 8007698:	72bea4d0 	.word	0x72bea4d0
 800769c:	3e663769 	.word	0x3e663769
 80076a0:	c5d26bf1 	.word	0xc5d26bf1
 80076a4:	3ebbbd41 	.word	0x3ebbbd41
 80076a8:	af25de2c 	.word	0xaf25de2c
 80076ac:	3f11566a 	.word	0x3f11566a
 80076b0:	16bebd93 	.word	0x16bebd93
 80076b4:	3f66c16c 	.word	0x3f66c16c
 80076b8:	5555553e 	.word	0x5555553e
 80076bc:	3fc55555 	.word	0x3fc55555
 80076c0:	c2f8f359 	.word	0xc2f8f359
 80076c4:	01a56e1f 	.word	0x01a56e1f
 80076c8:	3fe00000 	.word	0x3fe00000
 80076cc:	000fffff 	.word	0x000fffff
 80076d0:	3ff00000 	.word	0x3ff00000
 80076d4:	4090cbff 	.word	0x4090cbff
 80076d8:	3f6f3400 	.word	0x3f6f3400
 80076dc:	652b82fe 	.word	0x652b82fe
 80076e0:	3c971547 	.word	0x3c971547

080076e4 <__ieee754_sqrt>:
 80076e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076e8:	4955      	ldr	r1, [pc, #340]	; (8007840 <__ieee754_sqrt+0x15c>)
 80076ea:	ec55 4b10 	vmov	r4, r5, d0
 80076ee:	43a9      	bics	r1, r5
 80076f0:	462b      	mov	r3, r5
 80076f2:	462a      	mov	r2, r5
 80076f4:	d112      	bne.n	800771c <__ieee754_sqrt+0x38>
 80076f6:	ee10 2a10 	vmov	r2, s0
 80076fa:	ee10 0a10 	vmov	r0, s0
 80076fe:	4629      	mov	r1, r5
 8007700:	f7f8 ff1e 	bl	8000540 <__aeabi_dmul>
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	4620      	mov	r0, r4
 800770a:	4629      	mov	r1, r5
 800770c:	f7f8 fd62 	bl	80001d4 <__adddf3>
 8007710:	4604      	mov	r4, r0
 8007712:	460d      	mov	r5, r1
 8007714:	ec45 4b10 	vmov	d0, r4, r5
 8007718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771c:	2d00      	cmp	r5, #0
 800771e:	ee10 0a10 	vmov	r0, s0
 8007722:	4621      	mov	r1, r4
 8007724:	dc0f      	bgt.n	8007746 <__ieee754_sqrt+0x62>
 8007726:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800772a:	4330      	orrs	r0, r6
 800772c:	d0f2      	beq.n	8007714 <__ieee754_sqrt+0x30>
 800772e:	b155      	cbz	r5, 8007746 <__ieee754_sqrt+0x62>
 8007730:	ee10 2a10 	vmov	r2, s0
 8007734:	4620      	mov	r0, r4
 8007736:	4629      	mov	r1, r5
 8007738:	f7f8 fd4a 	bl	80001d0 <__aeabi_dsub>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	f7f9 f828 	bl	8000794 <__aeabi_ddiv>
 8007744:	e7e4      	b.n	8007710 <__ieee754_sqrt+0x2c>
 8007746:	151b      	asrs	r3, r3, #20
 8007748:	d073      	beq.n	8007832 <__ieee754_sqrt+0x14e>
 800774a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800774e:	07dd      	lsls	r5, r3, #31
 8007750:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007754:	bf48      	it	mi
 8007756:	0fc8      	lsrmi	r0, r1, #31
 8007758:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800775c:	bf44      	itt	mi
 800775e:	0049      	lslmi	r1, r1, #1
 8007760:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007764:	2500      	movs	r5, #0
 8007766:	1058      	asrs	r0, r3, #1
 8007768:	0fcb      	lsrs	r3, r1, #31
 800776a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800776e:	0049      	lsls	r1, r1, #1
 8007770:	2316      	movs	r3, #22
 8007772:	462c      	mov	r4, r5
 8007774:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8007778:	19a7      	adds	r7, r4, r6
 800777a:	4297      	cmp	r7, r2
 800777c:	bfde      	ittt	le
 800777e:	19bc      	addle	r4, r7, r6
 8007780:	1bd2      	suble	r2, r2, r7
 8007782:	19ad      	addle	r5, r5, r6
 8007784:	0fcf      	lsrs	r7, r1, #31
 8007786:	3b01      	subs	r3, #1
 8007788:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800778c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007790:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007794:	d1f0      	bne.n	8007778 <__ieee754_sqrt+0x94>
 8007796:	f04f 0c20 	mov.w	ip, #32
 800779a:	469e      	mov	lr, r3
 800779c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80077a0:	42a2      	cmp	r2, r4
 80077a2:	eb06 070e 	add.w	r7, r6, lr
 80077a6:	dc02      	bgt.n	80077ae <__ieee754_sqrt+0xca>
 80077a8:	d112      	bne.n	80077d0 <__ieee754_sqrt+0xec>
 80077aa:	428f      	cmp	r7, r1
 80077ac:	d810      	bhi.n	80077d0 <__ieee754_sqrt+0xec>
 80077ae:	2f00      	cmp	r7, #0
 80077b0:	eb07 0e06 	add.w	lr, r7, r6
 80077b4:	da42      	bge.n	800783c <__ieee754_sqrt+0x158>
 80077b6:	f1be 0f00 	cmp.w	lr, #0
 80077ba:	db3f      	blt.n	800783c <__ieee754_sqrt+0x158>
 80077bc:	f104 0801 	add.w	r8, r4, #1
 80077c0:	1b12      	subs	r2, r2, r4
 80077c2:	428f      	cmp	r7, r1
 80077c4:	bf88      	it	hi
 80077c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80077ca:	1bc9      	subs	r1, r1, r7
 80077cc:	4433      	add	r3, r6
 80077ce:	4644      	mov	r4, r8
 80077d0:	0052      	lsls	r2, r2, #1
 80077d2:	f1bc 0c01 	subs.w	ip, ip, #1
 80077d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80077da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80077de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80077e2:	d1dd      	bne.n	80077a0 <__ieee754_sqrt+0xbc>
 80077e4:	430a      	orrs	r2, r1
 80077e6:	d006      	beq.n	80077f6 <__ieee754_sqrt+0x112>
 80077e8:	1c5c      	adds	r4, r3, #1
 80077ea:	bf13      	iteet	ne
 80077ec:	3301      	addne	r3, #1
 80077ee:	3501      	addeq	r5, #1
 80077f0:	4663      	moveq	r3, ip
 80077f2:	f023 0301 	bicne.w	r3, r3, #1
 80077f6:	106a      	asrs	r2, r5, #1
 80077f8:	085b      	lsrs	r3, r3, #1
 80077fa:	07e9      	lsls	r1, r5, #31
 80077fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8007800:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8007804:	bf48      	it	mi
 8007806:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800780a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800780e:	461c      	mov	r4, r3
 8007810:	e780      	b.n	8007714 <__ieee754_sqrt+0x30>
 8007812:	0aca      	lsrs	r2, r1, #11
 8007814:	3815      	subs	r0, #21
 8007816:	0549      	lsls	r1, r1, #21
 8007818:	2a00      	cmp	r2, #0
 800781a:	d0fa      	beq.n	8007812 <__ieee754_sqrt+0x12e>
 800781c:	02d6      	lsls	r6, r2, #11
 800781e:	d50a      	bpl.n	8007836 <__ieee754_sqrt+0x152>
 8007820:	f1c3 0420 	rsb	r4, r3, #32
 8007824:	fa21 f404 	lsr.w	r4, r1, r4
 8007828:	1e5d      	subs	r5, r3, #1
 800782a:	4099      	lsls	r1, r3
 800782c:	4322      	orrs	r2, r4
 800782e:	1b43      	subs	r3, r0, r5
 8007830:	e78b      	b.n	800774a <__ieee754_sqrt+0x66>
 8007832:	4618      	mov	r0, r3
 8007834:	e7f0      	b.n	8007818 <__ieee754_sqrt+0x134>
 8007836:	0052      	lsls	r2, r2, #1
 8007838:	3301      	adds	r3, #1
 800783a:	e7ef      	b.n	800781c <__ieee754_sqrt+0x138>
 800783c:	46a0      	mov	r8, r4
 800783e:	e7bf      	b.n	80077c0 <__ieee754_sqrt+0xdc>
 8007840:	7ff00000 	.word	0x7ff00000

08007844 <fabs>:
 8007844:	ec51 0b10 	vmov	r0, r1, d0
 8007848:	ee10 2a10 	vmov	r2, s0
 800784c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007850:	ec43 2b10 	vmov	d0, r2, r3
 8007854:	4770      	bx	lr

08007856 <finite>:
 8007856:	ee10 3a90 	vmov	r3, s1
 800785a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800785e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007862:	0fc0      	lsrs	r0, r0, #31
 8007864:	4770      	bx	lr

08007866 <matherr>:
 8007866:	2000      	movs	r0, #0
 8007868:	4770      	bx	lr
 800786a:	0000      	movs	r0, r0
 800786c:	0000      	movs	r0, r0
	...

08007870 <nan>:
 8007870:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007878 <nan+0x8>
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	00000000 	.word	0x00000000
 800787c:	7ff80000 	.word	0x7ff80000

08007880 <rint>:
 8007880:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007882:	ec51 0b10 	vmov	r0, r1, d0
 8007886:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800788a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800788e:	2e13      	cmp	r6, #19
 8007890:	460b      	mov	r3, r1
 8007892:	ee10 4a10 	vmov	r4, s0
 8007896:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800789a:	dc56      	bgt.n	800794a <rint+0xca>
 800789c:	2e00      	cmp	r6, #0
 800789e:	da2b      	bge.n	80078f8 <rint+0x78>
 80078a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80078a4:	4302      	orrs	r2, r0
 80078a6:	d023      	beq.n	80078f0 <rint+0x70>
 80078a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80078ac:	4302      	orrs	r2, r0
 80078ae:	4254      	negs	r4, r2
 80078b0:	4314      	orrs	r4, r2
 80078b2:	0c4b      	lsrs	r3, r1, #17
 80078b4:	0b24      	lsrs	r4, r4, #12
 80078b6:	045b      	lsls	r3, r3, #17
 80078b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80078bc:	ea44 0103 	orr.w	r1, r4, r3
 80078c0:	460b      	mov	r3, r1
 80078c2:	492f      	ldr	r1, [pc, #188]	; (8007980 <rint+0x100>)
 80078c4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80078c8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80078cc:	4602      	mov	r2, r0
 80078ce:	4639      	mov	r1, r7
 80078d0:	4630      	mov	r0, r6
 80078d2:	f7f8 fc7f 	bl	80001d4 <__adddf3>
 80078d6:	e9cd 0100 	strd	r0, r1, [sp]
 80078da:	463b      	mov	r3, r7
 80078dc:	4632      	mov	r2, r6
 80078de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078e2:	f7f8 fc75 	bl	80001d0 <__aeabi_dsub>
 80078e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80078ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80078ee:	4639      	mov	r1, r7
 80078f0:	ec41 0b10 	vmov	d0, r0, r1
 80078f4:	b003      	add	sp, #12
 80078f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f8:	4a22      	ldr	r2, [pc, #136]	; (8007984 <rint+0x104>)
 80078fa:	4132      	asrs	r2, r6
 80078fc:	ea01 0702 	and.w	r7, r1, r2
 8007900:	4307      	orrs	r7, r0
 8007902:	d0f5      	beq.n	80078f0 <rint+0x70>
 8007904:	0852      	lsrs	r2, r2, #1
 8007906:	4011      	ands	r1, r2
 8007908:	430c      	orrs	r4, r1
 800790a:	d00b      	beq.n	8007924 <rint+0xa4>
 800790c:	ea23 0202 	bic.w	r2, r3, r2
 8007910:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007914:	2e13      	cmp	r6, #19
 8007916:	fa43 f306 	asr.w	r3, r3, r6
 800791a:	bf0c      	ite	eq
 800791c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007920:	2400      	movne	r4, #0
 8007922:	4313      	orrs	r3, r2
 8007924:	4916      	ldr	r1, [pc, #88]	; (8007980 <rint+0x100>)
 8007926:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800792a:	4622      	mov	r2, r4
 800792c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007930:	4620      	mov	r0, r4
 8007932:	4629      	mov	r1, r5
 8007934:	f7f8 fc4e 	bl	80001d4 <__adddf3>
 8007938:	e9cd 0100 	strd	r0, r1, [sp]
 800793c:	4622      	mov	r2, r4
 800793e:	462b      	mov	r3, r5
 8007940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007944:	f7f8 fc44 	bl	80001d0 <__aeabi_dsub>
 8007948:	e7d2      	b.n	80078f0 <rint+0x70>
 800794a:	2e33      	cmp	r6, #51	; 0x33
 800794c:	dd07      	ble.n	800795e <rint+0xde>
 800794e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007952:	d1cd      	bne.n	80078f0 <rint+0x70>
 8007954:	ee10 2a10 	vmov	r2, s0
 8007958:	f7f8 fc3c 	bl	80001d4 <__adddf3>
 800795c:	e7c8      	b.n	80078f0 <rint+0x70>
 800795e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8007962:	f04f 32ff 	mov.w	r2, #4294967295
 8007966:	40f2      	lsrs	r2, r6
 8007968:	4210      	tst	r0, r2
 800796a:	d0c1      	beq.n	80078f0 <rint+0x70>
 800796c:	0852      	lsrs	r2, r2, #1
 800796e:	4210      	tst	r0, r2
 8007970:	bf1f      	itttt	ne
 8007972:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007976:	ea20 0202 	bicne.w	r2, r0, r2
 800797a:	4134      	asrne	r4, r6
 800797c:	4314      	orrne	r4, r2
 800797e:	e7d1      	b.n	8007924 <rint+0xa4>
 8007980:	08007b18 	.word	0x08007b18
 8007984:	000fffff 	.word	0x000fffff

08007988 <scalbn>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	ec55 4b10 	vmov	r4, r5, d0
 800798e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007992:	4606      	mov	r6, r0
 8007994:	462b      	mov	r3, r5
 8007996:	b9aa      	cbnz	r2, 80079c4 <scalbn+0x3c>
 8007998:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800799c:	4323      	orrs	r3, r4
 800799e:	d03b      	beq.n	8007a18 <scalbn+0x90>
 80079a0:	4b31      	ldr	r3, [pc, #196]	; (8007a68 <scalbn+0xe0>)
 80079a2:	4629      	mov	r1, r5
 80079a4:	2200      	movs	r2, #0
 80079a6:	ee10 0a10 	vmov	r0, s0
 80079aa:	f7f8 fdc9 	bl	8000540 <__aeabi_dmul>
 80079ae:	4b2f      	ldr	r3, [pc, #188]	; (8007a6c <scalbn+0xe4>)
 80079b0:	429e      	cmp	r6, r3
 80079b2:	4604      	mov	r4, r0
 80079b4:	460d      	mov	r5, r1
 80079b6:	da12      	bge.n	80079de <scalbn+0x56>
 80079b8:	a327      	add	r3, pc, #156	; (adr r3, 8007a58 <scalbn+0xd0>)
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f7f8 fdbf 	bl	8000540 <__aeabi_dmul>
 80079c2:	e009      	b.n	80079d8 <scalbn+0x50>
 80079c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80079c8:	428a      	cmp	r2, r1
 80079ca:	d10c      	bne.n	80079e6 <scalbn+0x5e>
 80079cc:	ee10 2a10 	vmov	r2, s0
 80079d0:	4620      	mov	r0, r4
 80079d2:	4629      	mov	r1, r5
 80079d4:	f7f8 fbfe 	bl	80001d4 <__adddf3>
 80079d8:	4604      	mov	r4, r0
 80079da:	460d      	mov	r5, r1
 80079dc:	e01c      	b.n	8007a18 <scalbn+0x90>
 80079de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80079e2:	460b      	mov	r3, r1
 80079e4:	3a36      	subs	r2, #54	; 0x36
 80079e6:	4432      	add	r2, r6
 80079e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80079ec:	428a      	cmp	r2, r1
 80079ee:	dd0b      	ble.n	8007a08 <scalbn+0x80>
 80079f0:	ec45 4b11 	vmov	d1, r4, r5
 80079f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8007a60 <scalbn+0xd8>
 80079f8:	f000 f83c 	bl	8007a74 <copysign>
 80079fc:	a318      	add	r3, pc, #96	; (adr r3, 8007a60 <scalbn+0xd8>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	ec51 0b10 	vmov	r0, r1, d0
 8007a06:	e7da      	b.n	80079be <scalbn+0x36>
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	dd08      	ble.n	8007a1e <scalbn+0x96>
 8007a0c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a10:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a14:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a18:	ec45 4b10 	vmov	d0, r4, r5
 8007a1c:	bd70      	pop	{r4, r5, r6, pc}
 8007a1e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a22:	da0d      	bge.n	8007a40 <scalbn+0xb8>
 8007a24:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007a28:	429e      	cmp	r6, r3
 8007a2a:	ec45 4b11 	vmov	d1, r4, r5
 8007a2e:	dce1      	bgt.n	80079f4 <scalbn+0x6c>
 8007a30:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8007a58 <scalbn+0xd0>
 8007a34:	f000 f81e 	bl	8007a74 <copysign>
 8007a38:	a307      	add	r3, pc, #28	; (adr r3, 8007a58 <scalbn+0xd0>)
 8007a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3e:	e7e0      	b.n	8007a02 <scalbn+0x7a>
 8007a40:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a44:	3236      	adds	r2, #54	; 0x36
 8007a46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a4e:	4620      	mov	r0, r4
 8007a50:	4629      	mov	r1, r5
 8007a52:	2200      	movs	r2, #0
 8007a54:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <scalbn+0xe8>)
 8007a56:	e7b2      	b.n	80079be <scalbn+0x36>
 8007a58:	c2f8f359 	.word	0xc2f8f359
 8007a5c:	01a56e1f 	.word	0x01a56e1f
 8007a60:	8800759c 	.word	0x8800759c
 8007a64:	7e37e43c 	.word	0x7e37e43c
 8007a68:	43500000 	.word	0x43500000
 8007a6c:	ffff3cb0 	.word	0xffff3cb0
 8007a70:	3c900000 	.word	0x3c900000

08007a74 <copysign>:
 8007a74:	ec51 0b10 	vmov	r0, r1, d0
 8007a78:	ee11 0a90 	vmov	r0, s3
 8007a7c:	ee10 2a10 	vmov	r2, s0
 8007a80:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007a84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007a88:	ea41 0300 	orr.w	r3, r1, r0
 8007a8c:	ec43 2b10 	vmov	d0, r2, r3
 8007a90:	4770      	bx	lr
	...

08007a94 <_init>:
 8007a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a96:	bf00      	nop
 8007a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a9a:	bc08      	pop	{r3}
 8007a9c:	469e      	mov	lr, r3
 8007a9e:	4770      	bx	lr

08007aa0 <_fini>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	bf00      	nop
 8007aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aa6:	bc08      	pop	{r3}
 8007aa8:	469e      	mov	lr, r3
 8007aaa:	4770      	bx	lr
