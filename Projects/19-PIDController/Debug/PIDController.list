
PIDController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080050bc  080050bc  000150bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050e8  080050e8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050f0  080050f0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050f0  080050f0  000150f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050f4  080050f4  000150f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080050f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008e4  20000090  08005188  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000974  08005188  00020974  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026561  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000051b5  00000000  00000000  00046621  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001438  00000000  00000000  0004b7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000022c8  00000000  00000000  0004cc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025a12  00000000  00000000  0004eed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000173e0  00000000  00000000  000748ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d91fc  00000000  00000000  0008bcca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164ec6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046b8  00000000  00000000  00164f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00015bd8  00000000  00000000  001695fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050a4 	.word	0x080050a4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	080050a4 	.word	0x080050a4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004c8:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ca:	2400      	movs	r4, #0
{
 80004cc:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ce:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 80004d2:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d6:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80004da:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004de:	e9cd 4404 	strd	r4, r4, [sp, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004e2:	4a22      	ldr	r2, [pc, #136]	; (800056c <SystemClock_Config+0xa4>)
 80004e4:	9401      	str	r4, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e6:	9407      	str	r4, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80004e8:	9403      	str	r4, [sp, #12]
 80004ea:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ec:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80004f4:	6411      	str	r1, [r2, #64]	; 0x40
 80004f6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80004f8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004fc:	9201      	str	r2, [sp, #4]
 80004fe:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	9402      	str	r4, [sp, #8]
 8000502:	681a      	ldr	r2, [r3, #0]
 8000504:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000510:	9302      	str	r3, [sp, #8]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000512:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000514:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000518:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800051c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000520:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000522:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000524:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000526:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000528:	f44f 72a8 	mov.w	r2, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800052c:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	9902      	ldr	r1, [sp, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000532:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000534:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000536:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000538:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800053a:	f002 f8b3 	bl	80026a4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053e:	210f      	movs	r1, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000540:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	e9cd 1507 	strd	r1, r5, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800054c:	a807      	add	r0, sp, #28
 800054e:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000550:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000556:	f002 fab9 	bl	8002acc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800055a:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800055c:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800055e:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000560:	e9cd 3504 	strd	r3, r5, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000564:	f002 fb70 	bl	8002c48 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8000568:	b018      	add	sp, #96	; 0x60
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	40023800 	.word	0x40023800
 8000570:	40007000 	.word	0x40007000

08000574 <main>:
{
 8000574:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	2400      	movs	r4, #0
{
 800057a:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 800057c:	f000 fbd0 	bl	8000d20 <HAL_Init>
  SystemClock_Config();
 8000580:	f7ff ffa2 	bl	80004c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8000588:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800058c:	4dab      	ldr	r5, [pc, #684]	; (800083c <main+0x2c8>)
 800058e:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000590:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000594:	48aa      	ldr	r0, [pc, #680]	; (8000840 <main+0x2cc>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000596:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 8000888 <main+0x314>
  hadc1.Instance = ADC1;
 800059a:	4eaa      	ldr	r6, [pc, #680]	; (8000844 <main+0x2d0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059c:	f043 0310 	orr.w	r3, r3, #16
 80005a0:	632b      	str	r3, [r5, #48]	; 0x30
 80005a2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005a4:	f003 0310 	and.w	r3, r3, #16
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ac:	9402      	str	r4, [sp, #8]
 80005ae:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005b0:	f043 0304 	orr.w	r3, r3, #4
 80005b4:	632b      	str	r3, [r5, #48]	; 0x30
 80005b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	9302      	str	r3, [sp, #8]
 80005be:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c0:	9403      	str	r4, [sp, #12]
 80005c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c8:	632b      	str	r3, [r5, #48]	; 0x30
 80005ca:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d0:	9303      	str	r3, [sp, #12]
 80005d2:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d4:	9404      	str	r4, [sp, #16]
 80005d6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	632b      	str	r3, [r5, #48]	; 0x30
 80005de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	9304      	str	r3, [sp, #16]
 80005e6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e8:	9405      	str	r4, [sp, #20]
 80005ea:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005ec:	f043 0302 	orr.w	r3, r3, #2
 80005f0:	632b      	str	r3, [r5, #48]	; 0x30
 80005f2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005f4:	f003 0302 	and.w	r3, r3, #2
 80005f8:	9305      	str	r3, [sp, #20]
 80005fa:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005fc:	9406      	str	r4, [sp, #24]
 80005fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000600:	f043 0308 	orr.w	r3, r3, #8
 8000604:	632b      	str	r3, [r5, #48]	; 0x30
 8000606:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800060e:	4622      	mov	r2, r4
 8000610:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000612:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000614:	f001 f812 	bl	800163c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	4611      	mov	r1, r2
 800061c:	488a      	ldr	r0, [pc, #552]	; (8000848 <main+0x2d4>)
 800061e:	f001 f80d 	bl	800163c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000622:	4622      	mov	r2, r4
 8000624:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000628:	4888      	ldr	r0, [pc, #544]	; (800084c <main+0x2d8>)
 800062a:	f001 f807 	bl	800163c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062e:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000632:	f04f 0b08 	mov.w	fp, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000636:	a909      	add	r1, sp, #36	; 0x24
 8000638:	4881      	ldr	r0, [pc, #516]	; (8000840 <main+0x2cc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	e9cd b809 	strd	fp, r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000642:	f000 fef7 	bl	8001434 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000646:	a909      	add	r1, sp, #36	; 0x24
 8000648:	487f      	ldr	r0, [pc, #508]	; (8000848 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064a:	2702      	movs	r7, #2
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800064c:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000650:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000654:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000658:	f000 feec 	bl	8001434 <HAL_GPIO_Init>
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800065c:	a909      	add	r1, sp, #36	; 0x24
 800065e:	487a      	ldr	r0, [pc, #488]	; (8000848 <main+0x2d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000660:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000662:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800066a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800066e:	f000 fee1 	bl	8001434 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000672:	a909      	add	r1, sp, #36	; 0x24
 8000674:	4876      	ldr	r0, [pc, #472]	; (8000850 <main+0x2dc>)
  GPIO_InitStruct.Pin = B1_Pin;
 8000676:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067a:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800067e:	f000 fed9 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000682:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000684:	a909      	add	r1, sp, #36	; 0x24
 8000686:	4873      	ldr	r0, [pc, #460]	; (8000854 <main+0x2e0>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000688:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f000 fed1 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000692:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000696:	a909      	add	r1, sp, #36	; 0x24
 8000698:	486e      	ldr	r0, [pc, #440]	; (8000854 <main+0x2e0>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800069a:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	e9cd 740a 	strd	r7, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006a0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f000 fec5 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80006aa:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ae:	a909      	add	r1, sp, #36	; 0x24
 80006b0:	4866      	ldr	r0, [pc, #408]	; (800084c <main+0x2d8>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80006b2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	e9cd 840a 	strd	r8, r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006ba:	f000 febb 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006be:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006c0:	a909      	add	r1, sp, #36	; 0x24
 80006c2:	4862      	ldr	r0, [pc, #392]	; (800084c <main+0x2d8>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006c4:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006ca:	f000 feb3 	bl	8001434 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006ce:	a909      	add	r1, sp, #36	; 0x24
 80006d0:	485b      	ldr	r0, [pc, #364]	; (8000840 <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d4:	e9cd 7909 	strd	r7, r9, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f000 feac 	bl	8001434 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 80006dc:	4b5e      	ldr	r3, [pc, #376]	; (8000858 <main+0x2e4>)
  hi2c1.Init.ClockSpeed = 100000;
 80006de:	495f      	ldr	r1, [pc, #380]	; (800085c <main+0x2e8>)
  hi2c1.Instance = I2C1;
 80006e0:	4f5f      	ldr	r7, [pc, #380]	; (8000860 <main+0x2ec>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e2:	609c      	str	r4, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4618      	mov	r0, r3
  hi2c1.Init.ClockSpeed = 100000;
 80006ea:	e9c3 7100 	strd	r7, r1, [r3]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress1 = 0;
 80006f0:	60dc      	str	r4, [r3, #12]
  hi2c1.Init.OwnAddress2 = 0;
 80006f2:	e9c3 4405 	strd	r4, r4, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006f6:	e9c3 4407 	strd	r4, r4, [r3, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006fa:	f001 fcb1 	bl	8002060 <HAL_I2C_Init>
  hi2s3.Instance = SPI3;
 80006fe:	4b59      	ldr	r3, [pc, #356]	; (8000864 <main+0x2f0>)
 8000700:	4959      	ldr	r1, [pc, #356]	; (8000868 <main+0x2f4>)
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000702:	4a5a      	ldr	r2, [pc, #360]	; (800086c <main+0x2f8>)
  hi2s3.Instance = SPI3;
 8000704:	6019      	str	r1, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000706:	f44f 7700 	mov.w	r7, #512	; 0x200
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800070a:	4618      	mov	r0, r3
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800070c:	615a      	str	r2, [r3, #20]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800070e:	605f      	str	r7, [r3, #4]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000710:	611f      	str	r7, [r3, #16]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000712:	609c      	str	r4, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000714:	60dc      	str	r4, [r3, #12]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000716:	e9c3 4406 	strd	r4, r4, [r3, #24]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800071a:	621c      	str	r4, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800071c:	f001 fd60 	bl	80021e0 <HAL_I2S_Init>
  hspi1.Instance = SPI1;
 8000720:	4b53      	ldr	r3, [pc, #332]	; (8000870 <main+0x2fc>)
 8000722:	f8df c168 	ldr.w	ip, [pc, #360]	; 800088c <main+0x318>
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	619f      	str	r7, [r3, #24]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000728:	f44f 7182 	mov.w	r1, #260	; 0x104
  hspi1.Init.CRCPolynomial = 10;
 800072c:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800072e:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000730:	e9c3 c100 	strd	ip, r1, [r3]
  hspi1.Init.CRCPolynomial = 10;
 8000734:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000736:	e9c3 4402 	strd	r4, r4, [r3, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073a:	e9c3 4404 	strd	r4, r4, [r3, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800073e:	e9c3 4407 	strd	r4, r4, [r3, #28]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000742:	e9c3 4409 	strd	r4, r4, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000746:	f002 fb4f 	bl	8002de8 <HAL_SPI_Init>
  MX_USB_HOST_Init();
 800074a:	f004 fa55 	bl	8004bf8 <MX_USB_HOST_Init>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800074e:	9400      	str	r4, [sp, #0]
 8000750:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  htim3.Instance = TIM3;
 8000752:	4f48      	ldr	r7, [pc, #288]	; (8000874 <main+0x300>)
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000754:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000758:	632b      	str	r3, [r5, #48]	; 0x30
 800075a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800075c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000760:	4622      	mov	r2, r4
 8000762:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000764:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000766:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000768:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800076a:	f000 fc83 	bl	8001074 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800076e:	2038      	movs	r0, #56	; 0x38
 8000770:	f000 fcb6 	bl	80010e0 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8000774:	4940      	ldr	r1, [pc, #256]	; (8000878 <main+0x304>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000776:	4b41      	ldr	r3, [pc, #260]	; (800087c <main+0x308>)
 8000778:	62b3      	str	r3, [r6, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800077a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077e:	4630      	mov	r0, r6
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000780:	e9c6 1200 	strd	r1, r2, [r6]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000784:	60b4      	str	r4, [r6, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000786:	6134      	str	r4, [r6, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000788:	7634      	strb	r4, [r6, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800078a:	f886 4020 	strb.w	r4, [r6, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078e:	62f4      	str	r4, [r6, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000790:	60f4      	str	r4, [r6, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000792:	f8c6 801c 	str.w	r8, [r6, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000796:	f886 4030 	strb.w	r4, [r6, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800079a:	f8c6 8014 	str.w	r8, [r6, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079e:	9409      	str	r4, [sp, #36]	; 0x24
 80007a0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80007a4:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007a6:	f000 faf9 	bl	8000d9c <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007aa:	4630      	mov	r0, r6
 80007ac:	a909      	add	r1, sp, #36	; 0x24
  htim3.Instance = TIM3;
 80007ae:	f5a5 350d 	sub.w	r5, r5, #144384	; 0x23400
  sConfig.Rank = 1;
 80007b2:	e9cd 8809 	strd	r8, r8, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b6:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	f000 fba2 	bl	8000f00 <HAL_ADC_ConfigChannel>
  htim3.Init.Period = 999;
 80007bc:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c0:	2380      	movs	r3, #128	; 0x80
  htim3.Init.Prescaler = 141;
 80007c2:	218d      	movs	r1, #141	; 0x8d
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007c4:	4638      	mov	r0, r7
  htim3.Init.Prescaler = 141;
 80007c6:	e9c7 5100 	strd	r5, r1, [r7]
  htim3.Init.Period = 999;
 80007ca:	60fa      	str	r2, [r7, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007cc:	61bb      	str	r3, [r7, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	9407      	str	r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007d0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80007d4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80007d8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80007dc:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007de:	9408      	str	r4, [sp, #32]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	60bc      	str	r4, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	613c      	str	r4, [r7, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007e4:	f002 fc3c 	bl	8003060 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e8:	a907      	add	r1, sp, #28
 80007ea:	4638      	mov	r0, r7
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2560      	movs	r5, #96	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ee:	e9cd 4407 	strd	r4, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007f2:	f002 fcff 	bl	80031f4 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.Pulse = 499;
 80007f6:	f240 13f3 	movw	r3, #499	; 0x1f3
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fa:	a909      	add	r1, sp, #36	; 0x24
 80007fc:	4622      	mov	r2, r4
 80007fe:	4638      	mov	r0, r7
  sConfigOC.Pulse = 499;
 8000800:	e9cd 5309 	strd	r5, r3, [sp, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000806:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000808:	f002 fc78 	bl	80030fc <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800080c:	4638      	mov	r0, r7
 800080e:	f000 f97f 	bl	8000b10 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8000812:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <main+0x30c>)
 8000814:	4e1b      	ldr	r6, [pc, #108]	; (8000884 <main+0x310>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	609c      	str	r4, [r3, #8]
  huart2.Init.BaudRate = 115200;
 8000818:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	210c      	movs	r1, #12
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 800081e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000822:	4618      	mov	r0, r3
  huart2.Init.Parity = UART_PARITY_NONE;
 8000824:	e9c3 4403 	strd	r4, r4, [r3, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000828:	619c      	str	r4, [r3, #24]
  huart2.Init.BaudRate = 115200;
 800082a:	e9c3 6500 	strd	r6, r5, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800082e:	6159      	str	r1, [r3, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8000830:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000832:	f002 fd9d 	bl	8003370 <HAL_UART_Init>
    MX_USB_HOST_Process();
 8000836:	f004 fa01 	bl	8004c3c <MX_USB_HOST_Process>
 800083a:	e7fc      	b.n	8000836 <main+0x2c2>
 800083c:	40023800 	.word	0x40023800
 8000840:	40021000 	.word	0x40021000
 8000844:	20000154 	.word	0x20000154
 8000848:	40020800 	.word	0x40020800
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400
 8000858:	200000c0 	.word	0x200000c0
 800085c:	000186a0 	.word	0x000186a0
 8000860:	40005400 	.word	0x40005400
 8000864:	20000294 	.word	0x20000294
 8000868:	40003c00 	.word	0x40003c00
 800086c:	00017700 	.word	0x00017700
 8000870:	200001fc 	.word	0x200001fc
 8000874:	20000114 	.word	0x20000114
 8000878:	40012000 	.word	0x40012000
 800087c:	0f000001 	.word	0x0f000001
 8000880:	20000254 	.word	0x20000254
 8000884:	40004400 	.word	0x40004400
 8000888:	10120000 	.word	0x10120000
 800088c:	40013000 	.word	0x40013000

08000890 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000894:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <HAL_MspInit+0x34>)
 8000898:	2100      	movs	r1, #0
 800089a:	9100      	str	r1, [sp, #0]
 800089c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800089e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80008a2:	645a      	str	r2, [r3, #68]	; 0x44
 80008a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80008aa:	9200      	str	r2, [sp, #0]
 80008ac:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	9101      	str	r1, [sp, #4]
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008b6:	641a      	str	r2, [r3, #64]	; 0x40
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	9301      	str	r3, [sp, #4]
 80008c0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	b002      	add	sp, #8
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008cc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80008ce:	6802      	ldr	r2, [r0, #0]
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <HAL_ADC_MspInit+0x94>)
{
 80008d2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d4:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80008d6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80008dc:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80008e0:	9407      	str	r4, [sp, #28]
  if(hadc->Instance==ADC1)
 80008e2:	d001      	beq.n	80008e8 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008e4:	b008      	add	sp, #32
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008e8:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80008ec:	9401      	str	r4, [sp, #4]
 80008ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_adc1.Instance = DMA2_Stream0;
 80008f0:	4d1c      	ldr	r5, [pc, #112]	; (8000964 <HAL_ADC_MspInit+0x98>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80008f6:	645a      	str	r2, [r3, #68]	; 0x44
 80008f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80008fe:	9201      	str	r2, [sp, #4]
 8000900:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	9402      	str	r4, [sp, #8]
 8000904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000906:	f042 0201 	orr.w	r2, r2, #1
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000914:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000916:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000918:	9303      	str	r3, [sp, #12]
 800091a:	4606      	mov	r6, r0
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091e:	4812      	ldr	r0, [pc, #72]	; (8000968 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000920:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000922:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000924:	f000 fd86 	bl	8001434 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000928:	4810      	ldr	r0, [pc, #64]	; (800096c <HAL_ADC_MspInit+0xa0>)
 800092a:	6028      	str	r0, [r5, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800092c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000930:	f44f 6200 	mov.w	r2, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000938:	4628      	mov	r0, r5
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800093a:	606c      	str	r4, [r5, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800093c:	e9c5 4402 	strd	r4, r4, [r5, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000940:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000944:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000946:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800094a:	61ab      	str	r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800094c:	f000 fbf0 	bl	8001130 <HAL_DMA_Init>
 8000950:	b918      	cbnz	r0, 800095a <HAL_ADC_MspInit+0x8e>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000952:	63b5      	str	r5, [r6, #56]	; 0x38
 8000954:	63ae      	str	r6, [r5, #56]	; 0x38
}
 8000956:	b008      	add	sp, #32
 8000958:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800095a:	f7ff ff99 	bl	8000890 <Error_Handler>
 800095e:	e7f8      	b.n	8000952 <HAL_ADC_MspInit+0x86>
 8000960:	40012000 	.word	0x40012000
 8000964:	2000019c 	.word	0x2000019c
 8000968:	40020000 	.word	0x40020000
 800096c:	40026410 	.word	0x40026410

08000970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000970:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8000972:	6802      	ldr	r2, [r0, #0]
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <HAL_I2C_MspInit+0x64>)
{
 8000976:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 800097a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000980:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000984:	9407      	str	r4, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000986:	d001      	beq.n	800098c <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000988:	b008      	add	sp, #32
 800098a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	4d12      	ldr	r5, [pc, #72]	; (80009d8 <HAL_I2C_MspInit+0x68>)
 800098e:	9401      	str	r4, [sp, #4]
 8000990:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	4812      	ldr	r0, [pc, #72]	; (80009dc <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	632b      	str	r3, [r5, #48]	; 0x30
 800099a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800099c:	f003 0302 	and.w	r3, r3, #2
 80009a0:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009a2:	f44f 7210 	mov.w	r2, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a6:	2312      	movs	r3, #18
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009a8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009aa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ac:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ae:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009b2:	9307      	str	r3, [sp, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b6:	9205      	str	r2, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f000 fd3c 	bl	8001434 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009bc:	9402      	str	r4, [sp, #8]
 80009be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80009c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c4:	642b      	str	r3, [r5, #64]	; 0x40
 80009c6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80009c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009cc:	9302      	str	r3, [sp, #8]
 80009ce:	9b02      	ldr	r3, [sp, #8]
}
 80009d0:	b008      	add	sp, #32
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	40005400 	.word	0x40005400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020400 	.word	0x40020400

080009e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80009e0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2s->Instance==SPI3)
 80009e2:	6802      	ldr	r2, [r0, #0]
 80009e4:	4b21      	ldr	r3, [pc, #132]	; (8000a6c <HAL_I2S_MspInit+0x8c>)
{
 80009e6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	2400      	movs	r4, #0
  if(hi2s->Instance==SPI3)
 80009ea:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80009f0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80009f4:	9407      	str	r4, [sp, #28]
  if(hi2s->Instance==SPI3)
 80009f6:	d001      	beq.n	80009fc <HAL_I2S_MspInit+0x1c>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80009f8:	b008      	add	sp, #32
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009fc:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8000a00:	9400      	str	r4, [sp, #0]
 8000a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a04:	481a      	ldr	r0, [pc, #104]	; (8000a70 <HAL_I2S_MspInit+0x90>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a0e:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000a12:	9200      	str	r2, [sp, #0]
 8000a14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a16:	9401      	str	r4, [sp, #4]
 8000a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1a:	f042 0201 	orr.w	r2, r2, #1
 8000a1e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a22:	f002 0201 	and.w	r2, r2, #1
 8000a26:	9201      	str	r2, [sp, #4]
 8000a28:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2a:	9402      	str	r4, [sp, #8]
 8000a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a2e:	f042 0204 	orr.w	r2, r2, #4
 8000a32:	631a      	str	r2, [r3, #48]	; 0x30
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a3e:	2310      	movs	r3, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a40:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a42:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a44:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a46:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f000 fcf2 	bl	8001434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a50:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a54:	a903      	add	r1, sp, #12
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <HAL_I2S_MspInit+0x94>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a5a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a60:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a62:	f000 fce7 	bl	8001434 <HAL_GPIO_Init>
}
 8000a66:	b008      	add	sp, #32
 8000a68:	bd70      	pop	{r4, r5, r6, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40003c00 	.word	0x40003c00
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020800 	.word	0x40020800

08000a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a78:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 8000a7a:	6801      	ldr	r1, [r0, #0]
 8000a7c:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <HAL_SPI_MspInit+0x60>)
{
 8000a7e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 8000a82:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000a88:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8000a8c:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 8000a8e:	d001      	beq.n	8000a94 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a90:	b009      	add	sp, #36	; 0x24
 8000a92:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a94:	f502 3284 	add.w	r2, r2, #67584	; 0x10800
 8000a98:	9301      	str	r3, [sp, #4]
 8000a9a:	6c51      	ldr	r1, [r2, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	480f      	ldr	r0, [pc, #60]	; (8000adc <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a9e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8000aa2:	6451      	str	r1, [r2, #68]	; 0x44
 8000aa4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8000aa6:	f401 5180 	and.w	r1, r1, #4096	; 0x1000
 8000aaa:	9101      	str	r1, [sp, #4]
 8000aac:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	9302      	str	r3, [sp, #8]
 8000ab0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ac2:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ac6:	24e0      	movs	r4, #224	; 0xe0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	9d02      	ldr	r5, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aca:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	e9cd 4203 	strd	r4, r2, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	f000 fcb0 	bl	8001434 <HAL_GPIO_Init>
}
 8000ad4:	b009      	add	sp, #36	; 0x24
 8000ad6:	bd30      	pop	{r4, r5, pc}
 8000ad8:	40013000 	.word	0x40013000
 8000adc:	40020000 	.word	0x40020000

08000ae0 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8000ae0:	6802      	ldr	r2, [r0, #0]
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_TIM_PWM_MspInit+0x2c>)
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d000      	beq.n	8000aea <HAL_TIM_PWM_MspInit+0xa>
 8000ae8:	4770      	bx	lr
{
 8000aea:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000aec:	f503 330d 	add.w	r3, r3, #144384	; 0x23400
 8000af0:	2200      	movs	r2, #0
 8000af2:	9201      	str	r2, [sp, #4]
 8000af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000af6:	f042 0202 	orr.w	r2, r2, #2
 8000afa:	641a      	str	r2, [r3, #64]	; 0x40
 8000afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	9301      	str	r3, [sp, #4]
 8000b04:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b06:	b002      	add	sp, #8
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40000400 	.word	0x40000400

08000b10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b10:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8000b12:	6801      	ldr	r1, [r0, #0]
 8000b14:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_TIM_MspPostInit+0x4c>)
{
 8000b16:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8000b1a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8000b20:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000b24:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM3)
 8000b26:	d001      	beq.n	8000b2c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b28:	b006      	add	sp, #24
 8000b2a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2c:	f502 320d 	add.w	r2, r2, #144384	; 0x23400
 8000b30:	9300      	str	r3, [sp, #0]
 8000b32:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b34:	480a      	ldr	r0, [pc, #40]	; (8000b60 <HAL_TIM_MspPostInit+0x50>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000b3e:	f003 0304 	and.w	r3, r3, #4
 8000b42:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b44:	2240      	movs	r2, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b48:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	9c00      	ldr	r4, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b4c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	e9cd 2301 	strd	r2, r3, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b52:	f000 fc6f 	bl	8001434 <HAL_GPIO_Init>
}
 8000b56:	b006      	add	sp, #24
 8000b58:	bd10      	pop	{r4, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40000400 	.word	0x40000400
 8000b60:	40020800 	.word	0x40020800

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8000b66:	6802      	ldr	r2, [r0, #0]
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_UART_MspInit+0x78>)
{
 8000b6a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8000b6e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8000b74:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8000b78:	9407      	str	r4, [sp, #28]
  if(huart->Instance==USART2)
 8000b7a:	d001      	beq.n	8000b80 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b7c:	b008      	add	sp, #32
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b80:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000b84:	9401      	str	r4, [sp, #4]
 8000b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b8e:	641a      	str	r2, [r3, #64]	; 0x40
 8000b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b92:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000b96:	9201      	str	r2, [sp, #4]
 8000b98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9a:	9402      	str	r4, [sp, #8]
 8000b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9e:	f042 0201 	orr.w	r2, r2, #1
 8000ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bac:	220c      	movs	r2, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bb2:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb6:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb8:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bba:	2501      	movs	r5, #1
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bbc:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbe:	e9cd 5205 	strd	r5, r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	9e02      	ldr	r6, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc4:	f000 fc36 	bl	8001434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bc8:	4622      	mov	r2, r4
 8000bca:	4621      	mov	r1, r4
 8000bcc:	2026      	movs	r0, #38	; 0x26
 8000bce:	f000 fa51 	bl	8001074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bd2:	2026      	movs	r0, #38	; 0x26
 8000bd4:	f000 fa84 	bl	80010e0 <HAL_NVIC_EnableIRQ>
}
 8000bd8:	b008      	add	sp, #32
 8000bda:	bd70      	pop	{r4, r5, r6, pc}
 8000bdc:	40004400 	.word	0x40004400
 8000be0:	40020000 	.word	0x40020000

08000be4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	e7fe      	b.n	8000be8 <HardFault_Handler>
 8000bea:	bf00      	nop

08000bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler>
 8000bee:	bf00      	nop

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	e7fe      	b.n	8000bf0 <BusFault_Handler>
 8000bf2:	bf00      	nop

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler>
 8000bf6:	bf00      	nop

08000bf8 <SVC_Handler>:
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <DebugMon_Handler>:
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <PendSV_Handler>:
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop

08000c04 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 b8a6 	b.w	8000d54 <HAL_IncTick>

08000c08 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c08:	4801      	ldr	r0, [pc, #4]	; (8000c10 <USART2_IRQHandler+0x8>)
 8000c0a:	f002 bc1d 	b.w	8003448 <HAL_UART_IRQHandler>
 8000c0e:	bf00      	nop
 8000c10:	20000254 	.word	0x20000254

08000c14 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c14:	4801      	ldr	r0, [pc, #4]	; (8000c1c <DMA2_Stream0_IRQHandler+0x8>)
 8000c16:	f000 bb37 	b.w	8001288 <HAL_DMA_IRQHandler>
 8000c1a:	bf00      	nop
 8000c1c:	2000019c 	.word	0x2000019c

08000c20 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c20:	4801      	ldr	r0, [pc, #4]	; (8000c28 <OTG_FS_IRQHandler+0x8>)
 8000c22:	f000 be1d 	b.w	8001860 <HAL_HCD_IRQHandler>
 8000c26:	bf00      	nop
 8000c28:	200006ac 	.word	0x200006ac

08000c2c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c2c:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <_sbrk+0x34>)
{
 8000c2e:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	b133      	cbz	r3, 8000c42 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8000c34:	4418      	add	r0, r3
 8000c36:	4669      	mov	r1, sp
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	d808      	bhi.n	8000c4e <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8000c3c:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x38>)
 8000c44:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8000c46:	4418      	add	r0, r3
 8000c48:	4669      	mov	r1, sp
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	d9f6      	bls.n	8000c3c <_sbrk+0x10>
		errno = ENOMEM;
 8000c4e:	f004 f935 	bl	8004ebc <__errno>
 8000c52:	230c      	movs	r3, #12
 8000c54:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	bd08      	pop	{r3, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000ac 	.word	0x200000ac
 8000c64:	20000978 	.word	0x20000978

08000c68 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <SystemInit+0x18>)
 8000c6a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c6e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c72:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000c76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c7a:	6099      	str	r1, [r3, #8]
#endif
}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c8a:	e003      	b.n	8000c94 <LoopCopyDataInit>

08000c8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c92:	3104      	adds	r1, #4

08000c94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c94:	480b      	ldr	r0, [pc, #44]	; (8000cc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c9c:	d3f6      	bcc.n	8000c8c <CopyDataInit>
  ldr  r2, =_sbss
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ca0:	e002      	b.n	8000ca8 <LoopFillZerobss>

08000ca2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ca2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ca4:	f842 3b04 	str.w	r3, [r2], #4

08000ca8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000caa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cac:	d3f9      	bcc.n	8000ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cae:	f7ff ffdb 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cb2:	f004 f909 	bl	8004ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cb6:	f7ff fc5d 	bl	8000574 <main>
  bx  lr    
 8000cba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000cc0:	080050f8 	.word	0x080050f8
  ldr  r0, =_sdata
 8000cc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cc8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000ccc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000cd0:	20000974 	.word	0x20000974

08000cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cd4:	e7fe      	b.n	8000cd4 <ADC_IRQHandler>
	...

08000cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_InitTick+0x3c>)
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_InitTick+0x40>)
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
{
 8000ce2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce8:	fbb0 f0f2 	udiv	r0, r0, r2
 8000cec:	fbb3 f0f0 	udiv	r0, r3, r0
 8000cf0:	f000 fa04 	bl	80010fc <HAL_SYSTICK_Config>
 8000cf4:	b908      	cbnz	r0, 8000cfa <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf6:	2d0f      	cmp	r5, #15
 8000cf8:	d901      	bls.n	8000cfe <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000cfa:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000cfc:	bd38      	pop	{r3, r4, r5, pc}
 8000cfe:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d00:	4602      	mov	r2, r0
 8000d02:	4629      	mov	r1, r5
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f000 f9b4 	bl	8001074 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <HAL_InitTick+0x44>)
 8000d0e:	4620      	mov	r0, r4
 8000d10:	601d      	str	r5, [r3, #0]
}
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
 8000d14:	20000004 	.word	0x20000004
 8000d18:	20000000 	.word	0x20000000
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_Init>:
{
 8000d20:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <HAL_Init+0x30>)
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d2a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d32:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d3a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f987 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff ffc8 	bl	8000cd8 <HAL_InitTick>
  HAL_MspInit();
 8000d48:	f7ff fda4 	bl	8000894 <HAL_MspInit>
}
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	bd08      	pop	{r3, pc}
 8000d50:	40023c00 	.word	0x40023c00

08000d54 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <HAL_IncTick+0x10>)
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <HAL_IncTick+0x14>)
 8000d58:	6811      	ldr	r1, [r2, #0]
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	440b      	add	r3, r1
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	200002dc 	.word	0x200002dc
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d6c:	4b01      	ldr	r3, [pc, #4]	; (8000d74 <HAL_GetTick+0x8>)
 8000d6e:	6818      	ldr	r0, [r3, #0]
}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	200002dc 	.word	0x200002dc

08000d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000d7c:	f7ff fff6 	bl	8000d6c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d80:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000d82:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8000d84:	d002      	beq.n	8000d8c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d86:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <HAL_Delay+0x20>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d8c:	f7ff ffee 	bl	8000d6c <HAL_GetTick>
 8000d90:	1b40      	subs	r0, r0, r5
 8000d92:	42a0      	cmp	r0, r4
 8000d94:	d3fa      	bcc.n	8000d8c <HAL_Delay+0x14>
  {
  }
}
 8000d96:	bd38      	pop	{r3, r4, r5, pc}
 8000d98:	20000004 	.word	0x20000004

08000d9c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	f000 8091 	beq.w	8000ec4 <HAL_ADC_Init+0x128>
{
 8000da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000da4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000da6:	4604      	mov	r4, r0
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	f000 8081 	beq.w	8000eb0 <HAL_ADC_Init+0x114>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000db0:	06db      	lsls	r3, r3, #27
 8000db2:	d504      	bpl.n	8000dbe <HAL_ADC_Init+0x22>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000db4:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8000db6:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000db8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8000dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dc0:	494d      	ldr	r1, [pc, #308]	; (8000ef8 <HAL_ADC_Init+0x15c>)
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dc2:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000dc4:	4d4d      	ldr	r5, [pc, #308]	; (8000efc <HAL_ADC_Init+0x160>)
    ADC_STATE_CLR_SET(hadc->State,
 8000dc6:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8000dca:	f022 0202 	bic.w	r2, r2, #2
 8000dce:	f042 0202 	orr.w	r2, r2, #2
 8000dd2:	6422      	str	r2, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000dd4:	684a      	ldr	r2, [r1, #4]
 8000dd6:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000dda:	604a      	str	r2, [r1, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ddc:	684a      	ldr	r2, [r1, #4]
 8000dde:	6860      	ldr	r0, [r4, #4]
 8000de0:	4302      	orrs	r2, r0
 8000de2:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000de4:	6858      	ldr	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000de6:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000de8:	68a7      	ldr	r7, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000dea:	68e6      	ldr	r6, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000dec:	f420 7080 	bic.w	r0, r0, #256	; 0x100
 8000df0:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000df2:	685a      	ldr	r2, [r3, #4]
 8000df4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000df8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000dfa:	6858      	ldr	r0, [r3, #4]
 8000dfc:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8000e00:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e02:	6859      	ldr	r1, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000e06:	4339      	orrs	r1, r7
 8000e08:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000e0a:	6899      	ldr	r1, [r3, #8]
 8000e0c:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8000e10:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e12:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e14:	42a8      	cmp	r0, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000e16:	ea42 0206 	orr.w	r2, r2, r6
 8000e1a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e1c:	d054      	beq.n	8000ec8 <HAL_ADC_Init+0x12c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e1e:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e20:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000e22:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8000e26:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	4310      	orrs	r0, r2
 8000e2c:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000e2e:	6899      	ldr	r1, [r3, #8]
 8000e30:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8000e34:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	432a      	orrs	r2, r5
 8000e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e3c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e3e:	7e25      	ldrb	r5, [r4, #24]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e40:	f894 0020 	ldrb.w	r0, [r4, #32]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000e44:	f021 0102 	bic.w	r1, r1, #2
 8000e48:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
 8000e50:	609a      	str	r2, [r3, #8]
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000e52:	685a      	ldr	r2, [r3, #4]
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d140      	bne.n	8000eda <HAL_ADC_Init+0x13e>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e5c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e60:	69e5      	ldr	r5, [r4, #28]
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e62:	f894 7030 	ldrb.w	r7, [r4, #48]	; 0x30
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e66:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000e68:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000e6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000e6e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000e70:	3d01      	subs	r5, #1
 8000e72:	ea40 5005 	orr.w	r0, r0, r5, lsl #20
 8000e76:	62d8      	str	r0, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000e78:	6898      	ldr	r0, [r3, #8]
 8000e7a:	f420 7000 	bic.w	r0, r0, #512	; 0x200
 8000e7e:	6098      	str	r0, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000e80:	6899      	ldr	r1, [r3, #8]
 8000e82:	ea41 2147 	orr.w	r1, r1, r7, lsl #9
 8000e86:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000e88:	6899      	ldr	r1, [r3, #8]
 8000e8a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8000e8e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e90:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e92:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000e94:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8000e98:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000e9a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000e9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e9e:	f023 0303 	bic.w	r3, r3, #3
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8000eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8000eb0:	f7ff fd0c 	bl	80008cc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb4:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8000eb8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ebc:	06db      	lsls	r3, r3, #27
 8000ebe:	f53f af79 	bmi.w	8000db4 <HAL_ADC_Init+0x18>
 8000ec2:	e77c      	b.n	8000dbe <HAL_ADC_Init+0x22>
    return HAL_ERROR;
 8000ec4:	2001      	movs	r0, #1
}
 8000ec6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000ece:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000ed0:	689a      	ldr	r2, [r3, #8]
 8000ed2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	e7b0      	b.n	8000e3c <HAL_ADC_Init+0xa0>
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000ede:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000ee0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000ee2:	685a      	ldr	r2, [r3, #4]
 8000ee4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000ee8:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	3901      	subs	r1, #1
 8000eee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	e7b3      	b.n	8000e5e <HAL_ADC_Init+0xc2>
 8000ef6:	bf00      	nop
 8000ef8:	40012300 	.word	0x40012300
 8000efc:	0f000001 	.word	0x0f000001

08000f00 <HAL_ADC_ConfigChannel>:
{
 8000f00:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hadc);
 8000f02:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8000f06:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8000f08:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8000f0a:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8000f0c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8000f0e:	f000 8095 	beq.w	800103c <HAL_ADC_ConfigChannel+0x13c>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f12:	680d      	ldr	r5, [r1, #0]
 8000f14:	688a      	ldr	r2, [r1, #8]
 8000f16:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8000f18:	2401      	movs	r4, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f1a:	2d09      	cmp	r5, #9
 8000f1c:	b2af      	uxth	r7, r5
  __HAL_LOCK(hadc);
 8000f1e:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f22:	d829      	bhi.n	8000f78 <HAL_ADC_ConfigChannel+0x78>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000f24:	691c      	ldr	r4, [r3, #16]
 8000f26:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8000f2a:	f04f 0c07 	mov.w	ip, #7
 8000f2e:	fa0c fc06 	lsl.w	ip, ip, r6
 8000f32:	ea24 040c 	bic.w	r4, r4, ip
 8000f36:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000f38:	691c      	ldr	r4, [r3, #16]
 8000f3a:	fa02 f606 	lsl.w	r6, r2, r6
 8000f3e:	4326      	orrs	r6, r4
 8000f40:	611e      	str	r6, [r3, #16]
  if (sConfig->Rank < 7U)
 8000f42:	684e      	ldr	r6, [r1, #4]
 8000f44:	2e06      	cmp	r6, #6
 8000f46:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8000f4a:	d82a      	bhi.n	8000fa2 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000f4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f4e:	3a05      	subs	r2, #5
 8000f50:	241f      	movs	r4, #31
 8000f52:	4094      	lsls	r4, r2
 8000f54:	ea21 0104 	bic.w	r1, r1, r4
 8000f58:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000f5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f5c:	fa07 f202 	lsl.w	r2, r7, r2
 8000f60:	430a      	orrs	r2, r1
 8000f62:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f64:	4a37      	ldr	r2, [pc, #220]	; (8001044 <HAL_ADC_ConfigChannel+0x144>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d02d      	beq.n	8000fc6 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_UNLOCK(hadc);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8000f70:	4618      	mov	r0, r3
}
 8000f72:	b002      	add	sp, #8
 8000f74:	bcf0      	pop	{r4, r5, r6, r7}
 8000f76:	4770      	bx	lr
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f78:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8000f7c:	68dc      	ldr	r4, [r3, #12]
 8000f7e:	3e1e      	subs	r6, #30
 8000f80:	f04f 0c07 	mov.w	ip, #7
 8000f84:	fa0c fc06 	lsl.w	ip, ip, r6
 8000f88:	ea24 040c 	bic.w	r4, r4, ip
 8000f8c:	60dc      	str	r4, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f8e:	68dc      	ldr	r4, [r3, #12]
 8000f90:	fa02 f606 	lsl.w	r6, r2, r6
 8000f94:	4326      	orrs	r6, r4
 8000f96:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7U)
 8000f98:	684e      	ldr	r6, [r1, #4]
 8000f9a:	2e06      	cmp	r6, #6
 8000f9c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8000fa0:	d9d4      	bls.n	8000f4c <HAL_ADC_ConfigChannel+0x4c>
  else if (sConfig->Rank < 13U)
 8000fa2:	2e0c      	cmp	r6, #12
 8000fa4:	d835      	bhi.n	8001012 <HAL_ADC_ConfigChannel+0x112>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000fa6:	f1a2 0423 	sub.w	r4, r2, #35	; 0x23
 8000faa:	211f      	movs	r1, #31
 8000fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fae:	40a1      	lsls	r1, r4
 8000fb0:	ea22 0201 	bic.w	r2, r2, r1
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fb8:	fa07 f204 	lsl.w	r2, r7, r4
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fc0:	4a20      	ldr	r2, [pc, #128]	; (8001044 <HAL_ADC_ConfigChannel+0x144>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d1d1      	bne.n	8000f6a <HAL_ADC_ConfigChannel+0x6a>
 8000fc6:	2d12      	cmp	r5, #18
 8000fc8:	d031      	beq.n	800102e <HAL_ADC_ConfigChannel+0x12e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000fca:	f1a5 0310 	sub.w	r3, r5, #16
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d8cb      	bhi.n	8000f6a <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000fd2:	4a1d      	ldr	r2, [pc, #116]	; (8001048 <HAL_ADC_ConfigChannel+0x148>)
 8000fd4:	6853      	ldr	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fd6:	2d10      	cmp	r5, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fdc:	6053      	str	r3, [r2, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000fde:	d1c4      	bne.n	8000f6a <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_ADC_ConfigChannel+0x14c>)
 8000fe2:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 8000fe6:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f202 3283 	addw	r2, r2, #899	; 0x383
 8000ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff4:	0c9b      	lsrs	r3, r3, #18
 8000ff6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000ffe:	9b01      	ldr	r3, [sp, #4]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d0b2      	beq.n	8000f6a <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8001004:	9b01      	ldr	r3, [sp, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800100a:	9b01      	ldr	r3, [sp, #4]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f9      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x104>
 8001010:	e7ab      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x6a>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001012:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8001016:	241f      	movs	r4, #31
 8001018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800101a:	408c      	lsls	r4, r1
 800101c:	ea22 0204 	bic.w	r2, r2, r4
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001022:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001024:	fa07 f201 	lsl.w	r2, r7, r1
 8001028:	4322      	orrs	r2, r4
 800102a:	62da      	str	r2, [r3, #44]	; 0x2c
 800102c:	e79a      	b.n	8000f64 <HAL_ADC_ConfigChannel+0x64>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800102e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8001032:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001036:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 800103a:	e796      	b.n	8000f6a <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 800103c:	2002      	movs	r0, #2
}
 800103e:	b002      	add	sp, #8
 8001040:	bcf0      	pop	{r4, r5, r6, r7}
 8001042:	4770      	bx	lr
 8001044:	40012000 	.word	0x40012000
 8001048:	40012300 	.word	0x40012300
 800104c:	20000000 	.word	0x20000000

08001050 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001052:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001054:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8001058:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800105a:	0200      	lsls	r0, r0, #8
 800105c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001060:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001068:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800106a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_NVIC_SetPriority+0x64>)
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107e:	f1c3 0507 	rsb	r5, r3, #7
 8001082:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001084:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	bf28      	it	cs
 800108a:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108c:	2c06      	cmp	r4, #6
 800108e:	d919      	bls.n	80010c4 <HAL_NVIC_SetPriority+0x50>
 8001090:	3b03      	subs	r3, #3
 8001092:	f04f 34ff 	mov.w	r4, #4294967295
 8001096:	409c      	lsls	r4, r3
 8001098:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	40aa      	lsls	r2, r5
 80010a2:	ea21 0102 	bic.w	r1, r1, r2
 80010a6:	fa01 f203 	lsl.w	r2, r1, r3
 80010aa:	4322      	orrs	r2, r4
 80010ac:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80010ae:	2800      	cmp	r0, #0
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	db0a      	blt.n	80010ca <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80010b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80010bc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010c0:	bc30      	pop	{r4, r5}
 80010c2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010c4:	2400      	movs	r4, #0
 80010c6:	4623      	mov	r3, r4
 80010c8:	e7e8      	b.n	800109c <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_NVIC_SetPriority+0x68>)
 80010cc:	f000 000f 	and.w	r0, r0, #15
 80010d0:	4403      	add	r3, r0
 80010d2:	761a      	strb	r2, [r3, #24]
 80010d4:	bc30      	pop	{r4, r5}
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00
 80010dc:	e000ecfc 	.word	0xe000ecfc

080010e0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80010e0:	2800      	cmp	r0, #0
 80010e2:	db07      	blt.n	80010f4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e4:	f000 011f 	and.w	r1, r0, #31
 80010e8:	2301      	movs	r3, #1
 80010ea:	0940      	lsrs	r0, r0, #5
 80010ec:	4a02      	ldr	r2, [pc, #8]	; (80010f8 <HAL_NVIC_EnableIRQ+0x18>)
 80010ee:	408b      	lsls	r3, r1
 80010f0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000e100 	.word	0xe000e100

080010fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	3801      	subs	r0, #1
 80010fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001102:	d20e      	bcs.n	8001122 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001104:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	4c08      	ldr	r4, [pc, #32]	; (800112c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110c:	20f0      	movs	r0, #240	; 0xf0
 800110e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001112:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001114:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001116:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800111a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800111c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001120:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2001      	movs	r0, #1
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e010 	.word	0xe000e010
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001132:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001134:	f7ff fe1a 	bl	8000d6c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001138:	2c00      	cmp	r4, #0
 800113a:	d054      	beq.n	80011e6 <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800113c:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800113e:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001140:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001144:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8001146:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8001148:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 800114c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8001150:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 8001152:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001154:	e005      	b.n	8001162 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001156:	f7ff fe09 	bl	8000d6c <HAL_GetTick>
 800115a:	1b40      	subs	r0, r0, r5
 800115c:	2805      	cmp	r0, #5
 800115e:	d83b      	bhi.n	80011d8 <HAL_DMA_Init+0xa8>
 8001160:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	07d1      	lsls	r1, r2, #31
 8001166:	d4f6      	bmi.n	8001156 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001168:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800116c:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001170:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001172:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 8001174:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001176:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001178:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800117c:	430a      	orrs	r2, r1
 800117e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001180:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001182:	4835      	ldr	r0, [pc, #212]	; (8001258 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001184:	4332      	orrs	r2, r6
 8001186:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8001188:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800118a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800118c:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800118e:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001190:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001194:	d029      	beq.n	80011ea <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001196:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001198:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800119a:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800119e:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	482e      	ldr	r0, [pc, #184]	; (800125c <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80011a4:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80011a6:	3a10      	subs	r2, #16
 80011a8:	fba0 1202 	umull	r1, r2, r0, r2
 80011ac:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80011ae:	492c      	ldr	r1, [pc, #176]	; (8001260 <HAL_DMA_Init+0x130>)
 80011b0:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80011b4:	5c89      	ldrb	r1, [r1, r2]
 80011b6:	65e1      	str	r1, [r4, #92]	; 0x5c
 80011b8:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 80011bc:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80011be:	bf88      	it	hi
 80011c0:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011c2:	223f      	movs	r2, #63	; 0x3f
 80011c4:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 80011c6:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011c8:	2100      	movs	r1, #0
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80011ca:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80011cc:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011ce:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d0:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80011d2:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80011d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011da:	2220      	movs	r2, #32
 80011dc:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80011de:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80011e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80011e6:	2001      	movs	r0, #1
}
 80011e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011ea:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 80011ee:	4301      	orrs	r1, r0
 80011f0:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 80011f2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 80011f4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80011f6:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80011f8:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011fc:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001200:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001202:	2800      	cmp	r0, #0
 8001204:	d0cc      	beq.n	80011a0 <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001206:	b17e      	cbz	r6, 8001228 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001208:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 800120c:	d016      	beq.n	800123c <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800120e:	2d02      	cmp	r5, #2
 8001210:	d903      	bls.n	800121a <HAL_DMA_Init+0xea>
 8001212:	2d03      	cmp	r5, #3
 8001214:	d1c4      	bne.n	80011a0 <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001216:	01c2      	lsls	r2, r0, #7
 8001218:	d5c2      	bpl.n	80011a0 <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 800121a:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800121c:	2240      	movs	r2, #64	; 0x40
 800121e:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8001220:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 8001222:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001228:	2d01      	cmp	r5, #1
 800122a:	d003      	beq.n	8001234 <HAL_DMA_Init+0x104>
 800122c:	d3f3      	bcc.n	8001216 <HAL_DMA_Init+0xe6>
 800122e:	2d02      	cmp	r5, #2
 8001230:	d1b6      	bne.n	80011a0 <HAL_DMA_Init+0x70>
 8001232:	e7f0      	b.n	8001216 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001234:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001238:	d1b2      	bne.n	80011a0 <HAL_DMA_Init+0x70>
 800123a:	e7ee      	b.n	800121a <HAL_DMA_Init+0xea>
    switch (tmp)
 800123c:	2d03      	cmp	r5, #3
 800123e:	d8af      	bhi.n	80011a0 <HAL_DMA_Init+0x70>
 8001240:	a201      	add	r2, pc, #4	; (adr r2, 8001248 <HAL_DMA_Init+0x118>)
 8001242:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8001246:	bf00      	nop
 8001248:	0800121b 	.word	0x0800121b
 800124c:	08001217 	.word	0x08001217
 8001250:	0800121b 	.word	0x0800121b
 8001254:	08001235 	.word	0x08001235
 8001258:	f010803f 	.word	0xf010803f
 800125c:	aaaaaaab 	.word	0xaaaaaaab
 8001260:	080050d4 	.word	0x080050d4

08001264 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001264:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001268:	2b02      	cmp	r3, #2
 800126a:	d003      	beq.n	8001274 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001270:	2001      	movs	r0, #1
 8001272:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001274:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001276:	2305      	movs	r3, #5
 8001278:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800127c:	6813      	ldr	r3, [r2, #0]
 800127e:	f023 0301 	bic.w	r3, r3, #1
 8001282:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001284:	2000      	movs	r0, #0
}
 8001286:	4770      	bx	lr

08001288 <HAL_DMA_IRQHandler>:
{
 8001288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800128a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800128c:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800128e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8001290:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001292:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001294:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001296:	4965      	ldr	r1, [pc, #404]	; (800142c <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001298:	2208      	movs	r2, #8
 800129a:	409a      	lsls	r2, r3
 800129c:	422a      	tst	r2, r5
{
 800129e:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 80012a0:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80012a2:	d003      	beq.n	80012ac <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012a4:	6801      	ldr	r1, [r0, #0]
 80012a6:	6808      	ldr	r0, [r1, #0]
 80012a8:	0740      	lsls	r0, r0, #29
 80012aa:	d459      	bmi.n	8001360 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ac:	2201      	movs	r2, #1
 80012ae:	409a      	lsls	r2, r3
 80012b0:	422a      	tst	r2, r5
 80012b2:	d003      	beq.n	80012bc <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012b4:	6821      	ldr	r1, [r4, #0]
 80012b6:	6949      	ldr	r1, [r1, #20]
 80012b8:	0608      	lsls	r0, r1, #24
 80012ba:	d474      	bmi.n	80013a6 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012bc:	2204      	movs	r2, #4
 80012be:	409a      	lsls	r2, r3
 80012c0:	422a      	tst	r2, r5
 80012c2:	d003      	beq.n	80012cc <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012c4:	6821      	ldr	r1, [r4, #0]
 80012c6:	6809      	ldr	r1, [r1, #0]
 80012c8:	0789      	lsls	r1, r1, #30
 80012ca:	d466      	bmi.n	800139a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012cc:	2210      	movs	r2, #16
 80012ce:	409a      	lsls	r2, r3
 80012d0:	422a      	tst	r2, r5
 80012d2:	d003      	beq.n	80012dc <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012d4:	6821      	ldr	r1, [r4, #0]
 80012d6:	6808      	ldr	r0, [r1, #0]
 80012d8:	0700      	lsls	r0, r0, #28
 80012da:	d44b      	bmi.n	8001374 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80012dc:	2220      	movs	r2, #32
 80012de:	409a      	lsls	r2, r3
 80012e0:	422a      	tst	r2, r5
 80012e2:	d014      	beq.n	800130e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80012e4:	6821      	ldr	r1, [r4, #0]
 80012e6:	6808      	ldr	r0, [r1, #0]
 80012e8:	06c0      	lsls	r0, r0, #27
 80012ea:	d510      	bpl.n	800130e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80012ec:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80012ee:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80012f2:	2a05      	cmp	r2, #5
 80012f4:	d063      	beq.n	80013be <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012f6:	680b      	ldr	r3, [r1, #0]
 80012f8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012fc:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012fe:	d07e      	beq.n	80013fe <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001300:	0319      	lsls	r1, r3, #12
 8001302:	f140 8089 	bpl.w	8001418 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001306:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001308:	b10b      	cbz	r3, 800130e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800130a:	4620      	mov	r0, r4
 800130c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800130e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001310:	b323      	cbz	r3, 800135c <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001312:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001314:	07da      	lsls	r2, r3, #31
 8001316:	d51a      	bpl.n	800134e <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001318:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800131a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800131c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001320:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001322:	4943      	ldr	r1, [pc, #268]	; (8001430 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 8001324:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001328:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800132c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800132e:	0ab6      	lsrs	r6, r6, #10
 8001330:	e002      	b.n	8001338 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001332:	6813      	ldr	r3, [r2, #0]
 8001334:	07db      	lsls	r3, r3, #31
 8001336:	d504      	bpl.n	8001342 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001338:	9b01      	ldr	r3, [sp, #4]
 800133a:	3301      	adds	r3, #1
 800133c:	42b3      	cmp	r3, r6
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	d9f7      	bls.n	8001332 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8001342:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001344:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001346:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800134a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800134e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001350:	b123      	cbz	r3, 800135c <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001352:	4620      	mov	r0, r4
}
 8001354:	b003      	add	sp, #12
 8001356:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800135a:	4718      	bx	r3
}
 800135c:	b003      	add	sp, #12
 800135e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001360:	6808      	ldr	r0, [r1, #0]
 8001362:	f020 0004 	bic.w	r0, r0, #4
 8001366:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001368:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800136a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800136c:	f042 0201 	orr.w	r2, r2, #1
 8001370:	6562      	str	r2, [r4, #84]	; 0x54
 8001372:	e79b      	b.n	80012ac <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001374:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001376:	680a      	ldr	r2, [r1, #0]
 8001378:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800137c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800137e:	d118      	bne.n	80013b2 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001380:	05d2      	lsls	r2, r2, #23
 8001382:	d403      	bmi.n	800138c <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001384:	680a      	ldr	r2, [r1, #0]
 8001386:	f022 0208 	bic.w	r2, r2, #8
 800138a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800138c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800138e:	2a00      	cmp	r2, #0
 8001390:	d0a4      	beq.n	80012dc <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001392:	4620      	mov	r0, r4
 8001394:	4790      	blx	r2
 8001396:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001398:	e7a0      	b.n	80012dc <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800139a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800139c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800139e:	f042 0204 	orr.w	r2, r2, #4
 80013a2:	6562      	str	r2, [r4, #84]	; 0x54
 80013a4:	e792      	b.n	80012cc <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013a6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80013aa:	f042 0202 	orr.w	r2, r2, #2
 80013ae:	6562      	str	r2, [r4, #84]	; 0x54
 80013b0:	e784      	b.n	80012bc <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013b2:	0311      	lsls	r1, r2, #12
 80013b4:	d5ea      	bpl.n	800138c <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013b6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d1ea      	bne.n	8001392 <HAL_DMA_IRQHandler+0x10a>
 80013bc:	e78e      	b.n	80012dc <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013be:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013c0:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013c2:	f022 0216 	bic.w	r2, r2, #22
 80013c6:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013c8:	694a      	ldr	r2, [r1, #20]
 80013ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013ce:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013d0:	b338      	cbz	r0, 8001422 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013d2:	680a      	ldr	r2, [r1, #0]
 80013d4:	f022 0208 	bic.w	r2, r2, #8
 80013d8:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013da:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 80013dc:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 80013e2:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 80013e4:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e6:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80013e8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80013ec:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80013f0:	2900      	cmp	r1, #0
 80013f2:	d0b3      	beq.n	800135c <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80013f4:	4620      	mov	r0, r4
}
 80013f6:	b003      	add	sp, #12
 80013f8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80013fc:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013fe:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001402:	d180      	bne.n	8001306 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001404:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001406:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001408:	f022 0210 	bic.w	r2, r2, #16
 800140c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800140e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001412:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001416:	e776      	b.n	8001306 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001418:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800141a:	2b00      	cmp	r3, #0
 800141c:	f47f af75 	bne.w	800130a <HAL_DMA_IRQHandler+0x82>
 8001420:	e775      	b.n	800130e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001422:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001424:	2a00      	cmp	r2, #0
 8001426:	d1d4      	bne.n	80013d2 <HAL_DMA_IRQHandler+0x14a>
 8001428:	e7d7      	b.n	80013da <HAL_DMA_IRQHandler+0x152>
 800142a:	bf00      	nop
 800142c:	20000000 	.word	0x20000000
 8001430:	1b4e81b5 	.word	0x1b4e81b5

08001434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001438:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800143c:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8001634 <HAL_GPIO_Init+0x200>
{
 8001440:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	2400      	movs	r4, #0
 8001444:	e003      	b.n	800144e <HAL_GPIO_Init+0x1a>
 8001446:	3401      	adds	r4, #1
 8001448:	2c10      	cmp	r4, #16
 800144a:	f000 808c 	beq.w	8001566 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 800144e:	2301      	movs	r3, #1
 8001450:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001452:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8001456:	4293      	cmp	r3, r2
 8001458:	d1f5      	bne.n	8001446 <HAL_GPIO_Init+0x12>
 800145a:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800145e:	f026 0910 	bic.w	r9, r6, #16
 8001462:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8001466:	2303      	movs	r3, #3
 8001468:	f109 37ff 	add.w	r7, r9, #4294967295
 800146c:	fa03 f30c 	lsl.w	r3, r3, ip
 8001470:	2f01      	cmp	r7, #1
 8001472:	ea6f 0303 	mvn.w	r3, r3
 8001476:	fa05 f50c 	lsl.w	r5, r5, ip
 800147a:	d977      	bls.n	800156c <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 800147c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147e:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001480:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001482:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8001484:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001486:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800148a:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800148c:	fa05 f30c 	lsl.w	r3, r5, ip
 8001490:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8001492:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001494:	00f3      	lsls	r3, r6, #3
 8001496:	d5d6      	bpl.n	8001446 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	4d5f      	ldr	r5, [pc, #380]	; (8001618 <HAL_GPIO_Init+0x1e4>)
 800149a:	2300      	movs	r3, #0
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80014a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014a4:	646b      	str	r3, [r5, #68]	; 0x44
 80014a6:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 80014a8:	f024 0303 	bic.w	r3, r4, #3
 80014ac:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 80014b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80014b4:	9501      	str	r5, [sp, #4]
 80014b6:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ba:	f004 0503 	and.w	r5, r4, #3
 80014be:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c2:	4d56      	ldr	r5, [pc, #344]	; (800161c <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c4:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014c6:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ca:	270f      	movs	r7, #15
 80014cc:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d0:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d2:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d6:	d01f      	beq.n	8001518 <HAL_GPIO_Init+0xe4>
 80014d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80014dc:	42a8      	cmp	r0, r5
 80014de:	d076      	beq.n	80015ce <HAL_GPIO_Init+0x19a>
 80014e0:	4d4f      	ldr	r5, [pc, #316]	; (8001620 <HAL_GPIO_Init+0x1ec>)
 80014e2:	42a8      	cmp	r0, r5
 80014e4:	d079      	beq.n	80015da <HAL_GPIO_Init+0x1a6>
 80014e6:	4d4f      	ldr	r5, [pc, #316]	; (8001624 <HAL_GPIO_Init+0x1f0>)
 80014e8:	42a8      	cmp	r0, r5
 80014ea:	d07c      	beq.n	80015e6 <HAL_GPIO_Init+0x1b2>
 80014ec:	4d4e      	ldr	r5, [pc, #312]	; (8001628 <HAL_GPIO_Init+0x1f4>)
 80014ee:	42a8      	cmp	r0, r5
 80014f0:	d07f      	beq.n	80015f2 <HAL_GPIO_Init+0x1be>
 80014f2:	4d4e      	ldr	r5, [pc, #312]	; (800162c <HAL_GPIO_Init+0x1f8>)
 80014f4:	42a8      	cmp	r0, r5
 80014f6:	f000 8082 	beq.w	80015fe <HAL_GPIO_Init+0x1ca>
 80014fa:	4d4d      	ldr	r5, [pc, #308]	; (8001630 <HAL_GPIO_Init+0x1fc>)
 80014fc:	42a8      	cmp	r0, r5
 80014fe:	f000 8084 	beq.w	800160a <HAL_GPIO_Init+0x1d6>
 8001502:	f8df c134 	ldr.w	ip, [pc, #308]	; 8001638 <HAL_GPIO_Init+0x204>
 8001506:	4560      	cmp	r0, ip
 8001508:	bf0c      	ite	eq
 800150a:	f04f 0c07 	moveq.w	ip, #7
 800150e:	f04f 0c08 	movne.w	ip, #8
 8001512:	fa0c f509 	lsl.w	r5, ip, r9
 8001516:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001518:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 800151a:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 800151e:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001520:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8001522:	bf54      	ite	pl
 8001524:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8001526:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8001528:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800152c:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001530:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8001532:	bf54      	ite	pl
 8001534:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8001536:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8001538:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153c:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001540:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8001542:	bf54      	ite	pl
 8001544:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8001546:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8001548:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 800154c:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001550:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001552:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8001556:	bf54      	ite	pl
 8001558:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 800155a:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155c:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 800155e:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	f47f af74 	bne.w	800144e <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8001566:	b003      	add	sp, #12
 8001568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 800156c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800156e:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001572:	68cf      	ldr	r7, [r1, #12]
 8001574:	fa07 f70c 	lsl.w	r7, r7, ip
 8001578:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 800157c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800157e:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001582:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001586:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800158a:	40a7      	lsls	r7, r4
 800158c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8001590:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001592:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001594:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001596:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001598:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 800159c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159e:	f47f af71 	bne.w	8001484 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 80015a2:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 80015a6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015aa:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 80015ae:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015b2:	00bf      	lsls	r7, r7, #2
 80015b4:	f04f 0b0f 	mov.w	fp, #15
 80015b8:	fa0b fb07 	lsl.w	fp, fp, r7
 80015bc:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c0:	690d      	ldr	r5, [r1, #16]
 80015c2:	40bd      	lsls	r5, r7
 80015c4:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 80015c8:	f8c9 5020 	str.w	r5, [r9, #32]
 80015cc:	e75a      	b.n	8001484 <HAL_GPIO_Init+0x50>
 80015ce:	f04f 0c01 	mov.w	ip, #1
 80015d2:	fa0c f509 	lsl.w	r5, ip, r9
 80015d6:	432f      	orrs	r7, r5
 80015d8:	e79e      	b.n	8001518 <HAL_GPIO_Init+0xe4>
 80015da:	f04f 0c02 	mov.w	ip, #2
 80015de:	fa0c f509 	lsl.w	r5, ip, r9
 80015e2:	432f      	orrs	r7, r5
 80015e4:	e798      	b.n	8001518 <HAL_GPIO_Init+0xe4>
 80015e6:	f04f 0c03 	mov.w	ip, #3
 80015ea:	fa0c f509 	lsl.w	r5, ip, r9
 80015ee:	432f      	orrs	r7, r5
 80015f0:	e792      	b.n	8001518 <HAL_GPIO_Init+0xe4>
 80015f2:	f04f 0c04 	mov.w	ip, #4
 80015f6:	fa0c f509 	lsl.w	r5, ip, r9
 80015fa:	432f      	orrs	r7, r5
 80015fc:	e78c      	b.n	8001518 <HAL_GPIO_Init+0xe4>
 80015fe:	f04f 0c05 	mov.w	ip, #5
 8001602:	fa0c f509 	lsl.w	r5, ip, r9
 8001606:	432f      	orrs	r7, r5
 8001608:	e786      	b.n	8001518 <HAL_GPIO_Init+0xe4>
 800160a:	f04f 0c06 	mov.w	ip, #6
 800160e:	fa0c f509 	lsl.w	r5, ip, r9
 8001612:	432f      	orrs	r7, r5
 8001614:	e780      	b.n	8001518 <HAL_GPIO_Init+0xe4>
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40020000 	.word	0x40020000
 8001620:	40020800 	.word	0x40020800
 8001624:	40020c00 	.word	0x40020c00
 8001628:	40021000 	.word	0x40021000
 800162c:	40021400 	.word	0x40021400
 8001630:	40021800 	.word	0x40021800
 8001634:	40013c00 	.word	0x40013c00
 8001638:	40021c00 	.word	0x40021c00

0800163c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800163c:	b902      	cbnz	r2, 8001640 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800163e:	0409      	lsls	r1, r1, #16
 8001640:	6181      	str	r1, [r0, #24]
  }
}
 8001642:	4770      	bx	lr

08001644 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001648:	f890 42b8 	ldrb.w	r4, [r0, #696]	; 0x2b8
{
 800164c:	b084      	sub	sp, #16
  __HAL_LOCK(hhcd);
 800164e:	2c01      	cmp	r4, #1
{
 8001650:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8001654:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8001658:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 800165c:	d02b      	beq.n	80016b6 <HAL_HCD_HC_Init+0x72>
 800165e:	4605      	mov	r5, r0
  hhcd->hc[ch_num].do_ping = 0U;
 8001660:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8001664:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8001668:	f04f 0800 	mov.w	r8, #0
  __HAL_LOCK(hhcd);
 800166c:	2001      	movs	r0, #1
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800166e:	f012 0f80 	tst.w	r2, #128	; 0x80
  __HAL_LOCK(hhcd);
 8001672:	f885 02b8 	strb.w	r0, [r5, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001676:	f002 067f 	and.w	r6, r2, #127	; 0x7f
    hhcd->hc[ch_num].ep_is_in = 1U;
 800167a:	bf08      	it	eq
 800167c:	4640      	moveq	r0, r8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800167e:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001682:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8001686:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800168a:	f884 e03f 	strb.w	lr, [r4, #63]	; 0x3f
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 800168e:	f884 c03c 	strb.w	ip, [r4, #60]	; 0x3c
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001692:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].do_ping = 0U;
 8001696:	f884 803d 	strb.w	r8, [r4, #61]	; 0x3d

  status =  USB_HC_Init(hhcd->Instance,
 800169a:	6828      	ldr	r0, [r5, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800169c:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40
  status =  USB_HC_Init(hhcd->Instance,
 80016a0:	e9cd e901 	strd	lr, r9, [sp, #4]
 80016a4:	f8cd c000 	str.w	ip, [sp]
 80016a8:	f002 f930 	bl	800390c <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80016ac:	f885 82b8 	strb.w	r8, [r5, #696]	; 0x2b8

  return status;
}
 80016b0:	b004      	add	sp, #16
 80016b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 80016b6:	2002      	movs	r0, #2
}
 80016b8:	b004      	add	sp, #16
 80016ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016be:	bf00      	nop

080016c0 <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 80016c0:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d00b      	beq.n	80016e0 <HAL_HCD_HC_Halt+0x20>
{
 80016c8:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 80016ca:	2301      	movs	r3, #1
 80016cc:	4604      	mov	r4, r0
 80016ce:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016d2:	6800      	ldr	r0, [r0, #0]
 80016d4:	f002 fa9a 	bl	8003c0c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80016d8:	2000      	movs	r0, #0
 80016da:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
}
 80016de:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80016e0:	2002      	movs	r0, #2
}
 80016e2:	4770      	bx	lr

080016e4 <HAL_HCD_Init>:
  if (hhcd == NULL)
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d04a      	beq.n	800177e <HAL_HCD_Init+0x9a>
{
 80016e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016ec:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 80016f0:	6804      	ldr	r4, [r0, #0]
{
 80016f2:	b08a      	sub	sp, #40	; 0x28
 80016f4:	4607      	mov	r7, r0
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d039      	beq.n	8001772 <HAL_HCD_Init+0x8e>
 80016fe:	4620      	mov	r0, r4
  hhcd->State = HAL_HCD_STATE_BUSY;
 8001700:	2303      	movs	r3, #3
 8001702:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001706:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001708:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800170a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hhcd->Init.dma_enable = 0U;
 800170e:	bf08      	it	eq
 8001710:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8001712:	f001 ffc7 	bl	80036a4 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001716:	f854 6b10 	ldr.w	r6, [r4], #16
 800171a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171c:	466d      	mov	r5, sp
 800171e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001722:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001724:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001728:	e885 0003 	stmia.w	r5, {r0, r1}
 800172c:	f107 0804 	add.w	r8, r7, #4
 8001730:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001734:	4630      	mov	r0, r6
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001736:	463e      	mov	r6, r7
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001738:	f001 ff68 	bl	800360c <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800173c:	2101      	movs	r1, #1
 800173e:	6838      	ldr	r0, [r7, #0]
 8001740:	f001 ffb8 	bl	80036b4 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001744:	f856 cb10 	ldr.w	ip, [r6], #16
 8001748:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800174a:	466d      	mov	r5, sp
 800174c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001750:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001752:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001756:	e885 0003 	stmia.w	r5, {r0, r1}
 800175a:	4660      	mov	r0, ip
 800175c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001760:	f002 f83c 	bl	80037dc <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001764:	2301      	movs	r3, #1
  return HAL_OK;
 8001766:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8001768:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 800176c:	b00a      	add	sp, #40	; 0x28
 800176e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8001772:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8001776:	f003 fa67 	bl	8004c48 <HAL_HCD_MspInit>
 800177a:	6838      	ldr	r0, [r7, #0]
 800177c:	e7c0      	b.n	8001700 <HAL_HCD_Init+0x1c>
    return HAL_ERROR;
 800177e:	2001      	movs	r0, #1
}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop

08001784 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001784:	b5f0      	push	{r4, r5, r6, r7, lr}
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8001786:	008c      	lsls	r4, r1, #2
 8001788:	1865      	adds	r5, r4, r1
 800178a:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
{
 800178e:	f89d c014 	ldrb.w	ip, [sp, #20]
 8001792:	9f06      	ldr	r7, [sp, #24]
 8001794:	f8bd 601c 	ldrh.w	r6, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001798:	f885 203b 	strb.w	r2, [r5, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 800179c:	f885 303f 	strb.w	r3, [r5, #63]	; 0x3f

  if (token == 0U)
 80017a0:	f1bc 0f00 	cmp.w	ip, #0
 80017a4:	d120      	bne.n	80017e8 <HAL_HCD_HC_SubmitRequest+0x64>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017a6:	f04f 0c03 	mov.w	ip, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017aa:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017ac:	f885 c042 	strb.w	ip, [r5, #66]	; 0x42
  switch (ep_type)
 80017b0:	d024      	beq.n	80017fc <HAL_HCD_HC_SubmitRequest+0x78>
 80017b2:	4563      	cmp	r3, ip
 80017b4:	d022      	beq.n	80017fc <HAL_HCD_HC_SubmitRequest+0x78>
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d02b      	beq.n	8001812 <HAL_HCD_HC_SubmitRequest+0x8e>

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80017ba:	1863      	adds	r3, r4, r1
 80017bc:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017c0:	2228      	movs	r2, #40	; 0x28
  hhcd->hc[ch_num].ch_num = ch_num;
 80017c2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017c6:	2400      	movs	r4, #0
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017c8:	fb02 0101 	mla	r1, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
 80017cc:	e9c3 7611 	strd	r7, r6, [r3, #68]	; 0x44
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017d0:	7c02      	ldrb	r2, [r0, #16]
 80017d2:	6800      	ldr	r0, [r0, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80017d4:	f883 405c 	strb.w	r4, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 80017d8:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 80017da:	f883 405d 	strb.w	r4, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017de:	3138      	adds	r1, #56	; 0x38
}
 80017e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017e4:	f002 b932 	b.w	8003a4c <USB_HC_StartXfer>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e8:	f04f 0e02 	mov.w	lr, #2
 80017ec:	f885 e042 	strb.w	lr, [r5, #66]	; 0x42
  switch (ep_type)
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d8e2      	bhi.n	80017ba <HAL_HCD_HC_SubmitRequest+0x36>
 80017f4:	e8df f003 	tbb	[pc, r3]
 80017f8:	02020d1c 	.word	0x02020d1c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017fc:	1863      	adds	r3, r4, r1
 80017fe:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
      if (direction == 0U)
 8001802:	b96a      	cbnz	r2, 8001820 <HAL_HCD_HC_SubmitRequest+0x9c>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001804:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8001808:	b13d      	cbz	r5, 800181a <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180a:	2202      	movs	r2, #2
 800180c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001810:	e7d3      	b.n	80017ba <HAL_HCD_HC_SubmitRequest+0x36>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001812:	1863      	adds	r3, r4, r1
 8001814:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8001818:	2200      	movs	r2, #0
 800181a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 800181e:	e7cc      	b.n	80017ba <HAL_HCD_HC_SubmitRequest+0x36>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001820:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8001824:	2a00      	cmp	r2, #0
 8001826:	d0f8      	beq.n	800181a <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001828:	2202      	movs	r2, #2
 800182a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800182e:	e7c4      	b.n	80017ba <HAL_HCD_HC_SubmitRequest+0x36>
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001830:	f1bc 0f01 	cmp.w	ip, #1
 8001834:	d1c1      	bne.n	80017ba <HAL_HCD_HC_SubmitRequest+0x36>
 8001836:	2a00      	cmp	r2, #0
 8001838:	d1bf      	bne.n	80017ba <HAL_HCD_HC_SubmitRequest+0x36>
          hhcd->hc[ch_num].toggle_out = 1U;
 800183a:	1863      	adds	r3, r4, r1
 800183c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (length == 0U)
 8001840:	b946      	cbnz	r6, 8001854 <HAL_HCD_HC_SubmitRequest+0xd0>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001842:	f883 c051 	strb.w	ip, [r3, #81]	; 0x51
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001846:	1863      	adds	r3, r4, r1
 8001848:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 800184c:	2202      	movs	r2, #2
 800184e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001852:	e7b2      	b.n	80017ba <HAL_HCD_HC_SubmitRequest+0x36>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001854:	f893 5051 	ldrb.w	r5, [r3, #81]	; 0x51
 8001858:	2d00      	cmp	r5, #0
 800185a:	d0de      	beq.n	800181a <HAL_HCD_HC_SubmitRequest+0x96>
 800185c:	e7f3      	b.n	8001846 <HAL_HCD_HC_SubmitRequest+0xc2>
 800185e:	bf00      	nop

08001860 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001864:	6805      	ldr	r5, [r0, #0]
{
 8001866:	b085      	sub	sp, #20
 8001868:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800186a:	4628      	mov	r0, r5
 800186c:	f001 ff50 	bl	8003710 <USB_GetMode>
 8001870:	2801      	cmp	r0, #1
 8001872:	d002      	beq.n	800187a <HAL_HCD_IRQHandler+0x1a>
      HCD_RXQLVL_IRQHandler(hhcd);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
    }
  }
}
 8001874:	b005      	add	sp, #20
 8001876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800187a:	6820      	ldr	r0, [r4, #0]
 800187c:	f001 ff44 	bl	8003708 <USB_ReadInterrupts>
 8001880:	2800      	cmp	r0, #0
 8001882:	d0f7      	beq.n	8001874 <HAL_HCD_IRQHandler+0x14>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001884:	6820      	ldr	r0, [r4, #0]
 8001886:	f001 ff3f 	bl	8003708 <USB_ReadInterrupts>
 800188a:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800188e:	6820      	ldr	r0, [r4, #0]
 8001890:	bf1c      	itt	ne
 8001892:	f44f 1300 	movne.w	r3, #2097152	; 0x200000
 8001896:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001898:	f001 ff36 	bl	8003708 <USB_ReadInterrupts>
 800189c:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80018a0:	6820      	ldr	r0, [r4, #0]
 80018a2:	bf1c      	itt	ne
 80018a4:	f44f 1380 	movne.w	r3, #1048576	; 0x100000
 80018a8:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80018aa:	f001 ff2d 	bl	8003708 <USB_ReadInterrupts>
 80018ae:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018b2:	6820      	ldr	r0, [r4, #0]
 80018b4:	bf1c      	itt	ne
 80018b6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80018ba:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018bc:	f001 ff24 	bl	8003708 <USB_ReadInterrupts>
 80018c0:	f010 0f02 	tst.w	r0, #2
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018c4:	6820      	ldr	r0, [r4, #0]
 80018c6:	bf1c      	itt	ne
 80018c8:	2302      	movne	r3, #2
 80018ca:	6143      	strne	r3, [r0, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018cc:	f001 ff1c 	bl	8003708 <USB_ReadInterrupts>
 80018d0:	0083      	lsls	r3, r0, #2
 80018d2:	f100 8113 	bmi.w	8001afc <HAL_HCD_IRQHandler+0x29c>
 80018d6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80018d8:	f001 ff16 	bl	8003708 <USB_ReadInterrupts>
 80018dc:	01c7      	lsls	r7, r0, #7
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018de:	6826      	ldr	r6, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80018e0:	f100 80ce 	bmi.w	8001a80 <HAL_HCD_IRQHandler+0x220>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80018e4:	4630      	mov	r0, r6
 80018e6:	f001 ff0f 	bl	8003708 <USB_ReadInterrupts>
 80018ea:	0701      	lsls	r1, r0, #28
 80018ec:	f100 811c 	bmi.w	8001b28 <HAL_HCD_IRQHandler+0x2c8>
 80018f0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80018f2:	f001 ff09 	bl	8003708 <USB_ReadInterrupts>
 80018f6:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80018fa:	6820      	ldr	r0, [r4, #0]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80018fc:	d13e      	bne.n	800197c <HAL_HCD_IRQHandler+0x11c>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80018fe:	f001 ff03 	bl	8003708 <USB_ReadInterrupts>
 8001902:	06c3      	lsls	r3, r0, #27
 8001904:	d5b6      	bpl.n	8001874 <HAL_HCD_IRQHandler+0x14>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001906:	6825      	ldr	r5, [r4, #0]
 8001908:	69ab      	ldr	r3, [r5, #24]
 800190a:	f023 0310 	bic.w	r3, r3, #16
 800190e:	61ab      	str	r3, [r5, #24]
  temp = hhcd->Instance->GRXSTSP;
 8001910:	6a2e      	ldr	r6, [r5, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001912:	f3c6 4243 	ubfx	r2, r6, #17, #4
  switch (pktsts)
 8001916:	2a02      	cmp	r2, #2
 8001918:	d12b      	bne.n	8001972 <HAL_HCD_IRQHandler+0x112>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800191a:	f3c6 180a 	ubfx	r8, r6, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800191e:	f1b8 0f00 	cmp.w	r8, #0
 8001922:	d026      	beq.n	8001972 <HAL_HCD_IRQHandler+0x112>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001924:	f006 060f 	and.w	r6, r6, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001928:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 800192c:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 8001930:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001932:	b1f1      	cbz	r1, 8001972 <HAL_HCD_IRQHandler+0x112>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8001934:	4642      	mov	r2, r8
 8001936:	4628      	mov	r0, r5
 8001938:	f001 fed4 	bl	80036e4 <USB_ReadPacket>
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800193c:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8001940:	0173      	lsls	r3, r6, #5
 8001942:	18e9      	adds	r1, r5, r3
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001944:	6c78      	ldr	r0, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001946:	690e      	ldr	r6, [r1, #16]
 8001948:	4abe      	ldr	r2, [pc, #760]	; (8001c44 <HAL_HCD_IRQHandler+0x3e4>)
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800194a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800194c:	4440      	add	r0, r8
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800194e:	4441      	add	r1, r8
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001950:	4032      	ands	r2, r6
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001952:	6478      	str	r0, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001954:	64f9      	str	r1, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001956:	b15a      	cbz	r2, 8001970 <HAL_HCD_IRQHandler+0x110>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001958:	58ea      	ldr	r2, [r5, r3]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800195a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800195e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001962:	50ea      	str	r2, [r5, r3]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8001964:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001968:	f083 0301 	eor.w	r3, r3, #1
 800196c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001970:	6825      	ldr	r5, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001972:	69ab      	ldr	r3, [r5, #24]
 8001974:	f043 0310 	orr.w	r3, r3, #16
 8001978:	61ab      	str	r3, [r5, #24]
 800197a:	e77b      	b.n	8001874 <HAL_HCD_IRQHandler+0x14>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800197c:	f002 f940 	bl	8003c00 <USB_HC_ReadInterrupt>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001980:	68a1      	ldr	r1, [r4, #8]
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001982:	4680      	mov	r8, r0
 8001984:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001986:	2900      	cmp	r1, #0
 8001988:	f000 80ca 	beq.w	8001b20 <HAL_HCD_IRQHandler+0x2c0>
 800198c:	f505 65a0 	add.w	r5, r5, #1280	; 0x500
 8001990:	2600      	movs	r6, #0
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001992:	f04f 0902 	mov.w	r9, #2
 8001996:	e03a      	b.n	8001a0e <HAL_HCD_IRQHandler+0x1ae>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001998:	075b      	lsls	r3, r3, #29
 800199a:	f140 80cc 	bpl.w	8001b36 <HAL_HCD_IRQHandler+0x2d6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800199e:	2304      	movs	r3, #4
 80019a0:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	60fb      	str	r3, [r7, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	059b      	lsls	r3, r3, #22
 80019ae:	f100 8100 	bmi.w	8001bb2 <HAL_HCD_IRQHandler+0x352>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	07d8      	lsls	r0, r3, #31
 80019b6:	f140 80cc 	bpl.w	8001b52 <HAL_HCD_IRQHandler+0x2f2>
    if (hhcd->Init.dma_enable != 0U)
 80019ba:	6923      	ldr	r3, [r4, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f040 819a 	bne.w	8001cf6 <HAL_HCD_IRQHandler+0x496>
 80019c2:	ea4f 038a 	mov.w	r3, sl, lsl #2
    hhcd->hc[ch_num].state = HC_XFRC;
 80019c6:	eb03 010a 	add.w	r1, r3, sl
 80019ca:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019ce:	2000      	movs	r0, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 80019d0:	f04f 0c01 	mov.w	ip, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019d4:	6588      	str	r0, [r1, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XFRC;
 80019d6:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80019da:	f8c7 c008 	str.w	ip, [r7, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80019de:	f891 003f 	ldrb.w	r0, [r1, #63]	; 0x3f
 80019e2:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 80019e6:	f000 814d 	beq.w	8001c84 <HAL_HCD_IRQHandler+0x424>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80019ea:	2803      	cmp	r0, #3
 80019ec:	f000 8237 	beq.w	8001e5e <HAL_HCD_IRQHandler+0x5fe>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80019f0:	4453      	add	r3, sl
 80019f2:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 80019f6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80019fa:	f082 0201 	eor.w	r2, r2, #1
 80019fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001a02:	6820      	ldr	r0, [r4, #0]
 8001a04:	68a1      	ldr	r1, [r4, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001a06:	3601      	adds	r6, #1
 8001a08:	42b1      	cmp	r1, r6
 8001a0a:	f240 8089 	bls.w	8001b20 <HAL_HCD_IRQHandler+0x2c0>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001a0e:	f006 030f 	and.w	r3, r6, #15
 8001a12:	fa28 f303 	lsr.w	r3, r8, r3
 8001a16:	07da      	lsls	r2, r3, #31
 8001a18:	d5f5      	bpl.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
 8001a1a:	0173      	lsls	r3, r6, #5
 8001a1c:	fa5f fa86 	uxtb.w	sl, r6
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a20:	595b      	ldr	r3, [r3, r5]
 8001a22:	ea4f 1b4a 	mov.w	fp, sl, lsl #5
 8001a26:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 8001a2a:	eb02 070b 	add.w	r7, r2, fp
 8001a2e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a32:	68bb      	ldr	r3, [r7, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001a34:	d1b0      	bne.n	8001998 <HAL_HCD_IRQHandler+0x138>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001a36:	f013 0304 	ands.w	r3, r3, #4
 8001a3a:	f040 8083 	bne.w	8001b44 <HAL_HCD_IRQHandler+0x2e4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001a3e:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001a42:	f01c 0c20 	ands.w	ip, ip, #32
 8001a46:	f000 80c2 	beq.w	8001bce <HAL_HCD_IRQHandler+0x36e>
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001a4a:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001a4e:	f04f 0c20 	mov.w	ip, #32
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001a52:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001a56:	f8c7 c008 	str.w	ip, [r7, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001a5a:	f892 c03d 	ldrb.w	ip, [r2, #61]	; 0x3d
 8001a5e:	f1bc 0f01 	cmp.w	ip, #1
 8001a62:	d1d0      	bne.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].do_ping = 0U;
 8001a64:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a68:	68fb      	ldr	r3, [r7, #12]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001a6a:	f882 905c 	strb.w	r9, [r2, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a72:	4651      	mov	r1, sl
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a74:	60fb      	str	r3, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a76:	f002 f8c9 	bl	8003c0c <USB_HC_Halt>
 8001a7a:	6820      	ldr	r0, [r4, #0]
 8001a7c:	68a1      	ldr	r1, [r4, #8]
 8001a7e:	e7c2      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8001a80:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001a84:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 8001a86:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001a8a:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001a8c:	9b03      	ldr	r3, [sp, #12]
 8001a8e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a92:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001a94:	9b02      	ldr	r3, [sp, #8]
 8001a96:	0798      	lsls	r0, r3, #30
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001a98:	4637      	mov	r7, r6
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8001a9a:	d507      	bpl.n	8001aac <HAL_HCD_IRQHandler+0x24c>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8001a9c:	9b02      	ldr	r3, [sp, #8]
 8001a9e:	07d9      	lsls	r1, r3, #31
 8001aa0:	f100 8137 	bmi.w	8001d12 <HAL_HCD_IRQHandler+0x4b2>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8001aa4:	9b03      	ldr	r3, [sp, #12]
 8001aa6:	f043 0302 	orr.w	r3, r3, #2
 8001aaa:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8001aac:	9b02      	ldr	r3, [sp, #8]
 8001aae:	071a      	lsls	r2, r3, #28
 8001ab0:	d518      	bpl.n	8001ae4 <HAL_HCD_IRQHandler+0x284>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8001ab2:	9b03      	ldr	r3, [sp, #12]
 8001ab4:	f043 0308 	orr.w	r3, r3, #8
 8001ab8:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8001aba:	9b02      	ldr	r3, [sp, #8]
 8001abc:	075b      	lsls	r3, r3, #29
 8001abe:	f140 8130 	bpl.w	8001d22 <HAL_HCD_IRQHandler+0x4c2>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8001ac2:	69a1      	ldr	r1, [r4, #24]
 8001ac4:	2902      	cmp	r1, #2
 8001ac6:	f000 813e 	beq.w	8001d46 <HAL_HCD_IRQHandler+0x4e6>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8001aca:	68e3      	ldr	r3, [r4, #12]
 8001acc:	2b01      	cmp	r3, #1
        {
          USBx_HOST->HFIR = 60000U;
 8001ace:	bf04      	itt	eq
 8001ad0:	f64e 2360 	movweq	r3, #60000	; 0xea60
 8001ad4:	f8c6 3404 	streq.w	r3, [r6, #1028]	; 0x404
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8001ad8:	4620      	mov	r0, r4
 8001ada:	f003 f90d 	bl	8004cf8 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8001ade:	4620      	mov	r0, r4
 8001ae0:	f003 f900 	bl	8004ce4 <HAL_HCD_Connect_Callback>
 8001ae4:	6826      	ldr	r6, [r4, #0]
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001ae6:	9b02      	ldr	r3, [sp, #8]
 8001ae8:	0698      	lsls	r0, r3, #26
 8001aea:	d503      	bpl.n	8001af4 <HAL_HCD_IRQHandler+0x294>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8001aec:	9b03      	ldr	r3, [sp, #12]
 8001aee:	f043 0320 	orr.w	r3, r3, #32
 8001af2:	9303      	str	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001af4:	9b03      	ldr	r3, [sp, #12]
 8001af6:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
 8001afa:	e6f3      	b.n	80018e4 <HAL_HCD_IRQHandler+0x84>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001afc:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001b00:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001b04:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
      HAL_HCD_Disconnect_Callback(hhcd);
 8001b08:	4620      	mov	r0, r4
 8001b0a:	f003 f8ef 	bl	8004cec <HAL_HCD_Disconnect_Callback>
      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b0e:	2101      	movs	r1, #1
 8001b10:	6820      	ldr	r0, [r4, #0]
 8001b12:	f001 fe01 	bl	8003718 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b16:	6820      	ldr	r0, [r4, #0]
 8001b18:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001b1c:	6143      	str	r3, [r0, #20]
 8001b1e:	e6db      	b.n	80018d8 <HAL_HCD_IRQHandler+0x78>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b24:	6143      	str	r3, [r0, #20]
 8001b26:	e6ea      	b.n	80018fe <HAL_HCD_IRQHandler+0x9e>
      HAL_HCD_SOF_Callback(hhcd);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f003 f8d7 	bl	8004cdc <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b2e:	6820      	ldr	r0, [r4, #0]
 8001b30:	2308      	movs	r3, #8
 8001b32:	6143      	str	r3, [r0, #20]
 8001b34:	e6dd      	b.n	80018f2 <HAL_HCD_IRQHandler+0x92>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	0699      	lsls	r1, r3, #26
 8001b3a:	f140 8085 	bpl.w	8001c48 <HAL_HCD_IRQHandler+0x3e8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b3e:	2320      	movs	r3, #32
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	e732      	b.n	80019aa <HAL_HCD_IRQHandler+0x14a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b44:	2304      	movs	r3, #4
 8001b46:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f043 0302 	orr.w	r3, r3, #2
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	e759      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	0799      	lsls	r1, r3, #30
 8001b56:	f140 80a2 	bpl.w	8001c9e <HAL_HCD_IRQHandler+0x43e>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b5a:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8001b5e:	eb03 000a 	add.w	r0, r3, sl
 8001b62:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001b66:	f8d7 c00c 	ldr.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b6a:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001b6e:	f02c 0c02 	bic.w	ip, ip, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b72:	2901      	cmp	r1, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001b74:	f8c7 c00c 	str.w	ip, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001b78:	f000 80e2 	beq.w	8001d40 <HAL_HCD_IRQHandler+0x4e0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001b7c:	2905      	cmp	r1, #5
 8001b7e:	f000 80df 	beq.w	8001d40 <HAL_HCD_IRQHandler+0x4e0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001b82:	2906      	cmp	r1, #6
 8001b84:	f000 8135 	beq.w	8001df2 <HAL_HCD_IRQHandler+0x592>
 8001b88:	2908      	cmp	r1, #8
 8001b8a:	f000 8132 	beq.w	8001df2 <HAL_HCD_IRQHandler+0x592>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001b8e:	2903      	cmp	r1, #3
 8001b90:	f000 81c0 	beq.w	8001f14 <HAL_HCD_IRQHandler+0x6b4>
 8001b94:	2328      	movs	r3, #40	; 0x28
 8001b96:	fb03 430a 	mla	r3, r3, sl, r4
 8001b9a:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001b9e:	f8c7 9008 	str.w	r9, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ba2:	460a      	mov	r2, r1
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	4651      	mov	r1, sl
 8001ba8:	f003 f8a4 	bl	8004cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001bac:	6820      	ldr	r0, [r4, #0]
 8001bae:	68a1      	ldr	r1, [r4, #8]
 8001bb0:	e729      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bb4:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bb6:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bba:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001bbc:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bbe:	f002 f825 	bl	8003c0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001bc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	6820      	ldr	r0, [r4, #0]
 8001bca:	68a1      	ldr	r1, [r4, #8]
 8001bcc:	e71b      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	065b      	lsls	r3, r3, #25
 8001bd2:	f100 80db 	bmi.w	8001d8c <HAL_HCD_IRQHandler+0x52c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8001bdc:	f040 80ef 	bne.w	8001dbe <HAL_HCD_IRQHandler+0x55e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001be0:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001be4:	f01c 0f01 	tst.w	ip, #1
 8001be8:	f040 8125 	bne.w	8001e36 <HAL_HCD_IRQHandler+0x5d6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f013 0308 	ands.w	r3, r3, #8
 8001bf2:	f040 816c 	bne.w	8001ece <HAL_HCD_IRQHandler+0x66e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001bf6:	f8d7 c008 	ldr.w	ip, [r7, #8]
 8001bfa:	f01c 0f10 	tst.w	ip, #16
 8001bfe:	f000 813e 	beq.w	8001e7e <HAL_HCD_IRQHandler+0x61e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c02:	eb0a 028a 	add.w	r2, sl, sl, lsl #2
 8001c06:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
    hhcd->hc[ch_num].state = HC_NAK;
 8001c0a:	2103      	movs	r1, #3
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001c0e:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 8001c12:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001c16:	b943      	cbnz	r3, 8001c2a <HAL_HCD_IRQHandler+0x3ca>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001c18:	2328      	movs	r3, #40	; 0x28
 8001c1a:	fb03 430a 	mla	r3, r3, sl, r4
 8001c1e:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001c22:	b912      	cbnz	r2, 8001c2a <HAL_HCD_IRQHandler+0x3ca>
        hhcd->hc[ch_num].do_ping = 1U;
 8001c24:	2201      	movs	r2, #1
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c30:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c32:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c34:	f001 ffea 	bl	8003c0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c38:	2310      	movs	r3, #16
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	68a1      	ldr	r1, [r4, #8]
 8001c40:	e6e1      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
 8001c42:	bf00      	nop
 8001c44:	1ff80000 	.word	0x1ff80000
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	071b      	lsls	r3, r3, #28
 8001c4c:	f100 8086 	bmi.w	8001d5c <HAL_HCD_IRQHandler+0x4fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	0559      	lsls	r1, r3, #21
 8001c54:	f57f aea9 	bpl.w	80019aa <HAL_HCD_IRQHandler+0x14a>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	9201      	str	r2, [sp, #4]
 8001c5c:	f043 0302 	orr.w	r3, r3, #2
 8001c60:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c62:	4651      	mov	r1, sl
 8001c64:	f001 ffd2 	bl	8003c0c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c68:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c6c:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c6e:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c72:	60b9      	str	r1, [r7, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c74:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c7a:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c7e:	9a01      	ldr	r2, [sp, #4]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	e692      	b.n	80019aa <HAL_HCD_IRQHandler+0x14a>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c84:	68fa      	ldr	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c86:	6820      	ldr	r0, [r4, #0]
 8001c88:	9301      	str	r3, [sp, #4]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c8a:	f042 0202 	orr.w	r2, r2, #2
 8001c8e:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c90:	4651      	mov	r1, sl
 8001c92:	f001 ffbb 	bl	8003c0c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c96:	2210      	movs	r2, #16
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	9b01      	ldr	r3, [sp, #4]
 8001c9c:	e6a8      	b.n	80019f0 <HAL_HCD_IRQHandler+0x190>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	6820      	ldr	r0, [r4, #0]
 8001ca2:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8001ca6:	f040 808c 	bne.w	8001dc2 <HAL_HCD_IRQHandler+0x562>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	06d2      	lsls	r2, r2, #27
 8001cae:	f57f af7e 	bpl.w	8001bae <HAL_HCD_IRQHandler+0x34e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001cb2:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 8001cb6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8001cba:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 8001cbe:	2a03      	cmp	r2, #3
 8001cc0:	f000 811b 	beq.w	8001efa <HAL_HCD_IRQHandler+0x69a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001cc4:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8001cc8:	d111      	bne.n	8001cee <HAL_HCD_IRQHandler+0x48e>
      if (hhcd->Init.dma_enable == 0U)
 8001cca:	6923      	ldr	r3, [r4, #16]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001ccc:	658a      	str	r2, [r1, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8001cce:	b973      	cbnz	r3, 8001cee <HAL_HCD_IRQHandler+0x48e>
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
        hhcd->hc[ch_num].state = HC_NAK;
 8001cd2:	2228      	movs	r2, #40	; 0x28
 8001cd4:	fb02 420a 	mla	r2, r2, sl, r4
 8001cd8:	f04f 0c03 	mov.w	ip, #3
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
        hhcd->hc[ch_num].state = HC_NAK;
 8001ce0:	f882 c05d 	strb.w	ip, [r2, #93]	; 0x5d
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce4:	4651      	mov	r1, sl
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ce6:	60fb      	str	r3, [r7, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ce8:	f001 ff90 	bl	8003c0c <USB_HC_Halt>
 8001cec:	6820      	ldr	r0, [r4, #0]
 8001cee:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	e687      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001cf6:	ea4f 038a 	mov.w	r3, sl, lsl #2
 8001cfa:	eb03 010a 	add.w	r1, r3, sl
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001cfe:	6938      	ldr	r0, [r7, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001d00:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001d04:	f3c0 0c12 	ubfx	ip, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001d08:	6c88      	ldr	r0, [r1, #72]	; 0x48
 8001d0a:	eba0 000c 	sub.w	r0, r0, ip
 8001d0e:	64c8      	str	r0, [r1, #76]	; 0x4c
 8001d10:	e659      	b.n	80019c6 <HAL_HCD_IRQHandler+0x166>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001d12:	69b3      	ldr	r3, [r6, #24]
 8001d14:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001d18:	61b3      	str	r3, [r6, #24]
      HAL_HCD_Connect_Callback(hhcd);
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	f002 ffe2 	bl	8004ce4 <HAL_HCD_Connect_Callback>
 8001d20:	e6c0      	b.n	8001aa4 <HAL_HCD_IRQHandler+0x244>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8001d22:	4620      	mov	r0, r4
 8001d24:	f002 ffec 	bl	8004d00 <HAL_HCD_PortDisabled_Callback>
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001d28:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8001d2c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001d30:	f8c6 3440 	str.w	r3, [r6, #1088]	; 0x440
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8001d34:	6826      	ldr	r6, [r4, #0]
 8001d36:	69b3      	ldr	r3, [r6, #24]
 8001d38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d3c:	61b3      	str	r3, [r6, #24]
 8001d3e:	e6d2      	b.n	8001ae6 <HAL_HCD_IRQHandler+0x286>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001d40:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
 8001d44:	e72b      	b.n	8001b9e <HAL_HCD_IRQHandler+0x33e>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001d46:	9b02      	ldr	r3, [sp, #8]
 8001d48:	6820      	ldr	r0, [r4, #0]
 8001d4a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001d4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001d52:	bf18      	it	ne
 8001d54:	2101      	movne	r1, #1
 8001d56:	f001 fcdf 	bl	8003718 <USB_InitFSLSPClkSel>
 8001d5a:	e6bd      	b.n	8001ad8 <HAL_HCD_IRQHandler+0x278>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	9201      	str	r2, [sp, #4]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d60:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
 8001d64:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d6e:	f04f 0c05 	mov.w	ip, #5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d72:	f04f 0e10 	mov.w	lr, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d76:	2308      	movs	r3, #8
    hhcd->hc[ch_num].state = HC_STALL;
 8001d78:	f881 c05d 	strb.w	ip, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d7c:	f8c7 e008 	str.w	lr, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d80:	4651      	mov	r1, sl
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d82:	60bb      	str	r3, [r7, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d84:	f001 ff42 	bl	8003c0c <USB_HC_Halt>
 8001d88:	9a01      	ldr	r2, [sp, #4]
 8001d8a:	e60e      	b.n	80019aa <HAL_HCD_IRQHandler+0x14a>
    hhcd->hc[ch_num].state = HC_NYET;
 8001d8c:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8001d90:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    hhcd->hc[ch_num].do_ping = 1U;
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d9a:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d9c:	f8c3 c058 	str.w	ip, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001da0:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].state = HC_NYET;
 8001da4:	f04f 0c04 	mov.w	ip, #4
 8001da8:	f883 c05d 	strb.w	ip, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dac:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dae:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001db0:	f001 ff2c 	bl	8003c0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001db4:	2340      	movs	r3, #64	; 0x40
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	6820      	ldr	r0, [r4, #0]
 8001dba:	68a1      	ldr	r1, [r4, #8]
 8001dbc:	e623      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	e6f9      	b.n	8001bb6 <HAL_HCD_IRQHandler+0x356>
    hhcd->hc[ch_num].ErrCnt++;
 8001dc2:	eb0a 038a 	add.w	r3, sl, sl, lsl #2
 8001dc6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dca:	68f9      	ldr	r1, [r7, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8001dcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dce:	f041 0c02 	orr.w	ip, r1, #2
    hhcd->hc[ch_num].ErrCnt++;
 8001dd2:	3201      	adds	r2, #1
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001dd4:	f04f 0e06 	mov.w	lr, #6
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dd8:	f8c7 c00c 	str.w	ip, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ddc:	4651      	mov	r1, sl
    hhcd->hc[ch_num].ErrCnt++;
 8001dde:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001de0:	f883 e05d 	strb.w	lr, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001de4:	f001 ff12 	bl	8003c0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001de8:	2380      	movs	r3, #128	; 0x80
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	6820      	ldr	r0, [r4, #0]
 8001dee:	68a1      	ldr	r1, [r4, #8]
 8001df0:	e609      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].ErrCnt++;
 8001df2:	eb03 000a 	add.w	r0, r3, sl
 8001df6:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8001dfa:	6d81      	ldr	r1, [r0, #88]	; 0x58
 8001dfc:	3101      	adds	r1, #1
 8001dfe:	6581      	str	r1, [r0, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001e00:	2903      	cmp	r1, #3
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e02:	f04f 0128 	mov.w	r1, #40	; 0x28
 8001e06:	fb01 410a 	mla	r1, r1, sl, r4
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001e0a:	d973      	bls.n	8001ef4 <HAL_HCD_IRQHandler+0x694>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e0c:	f04f 0c00 	mov.w	ip, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e10:	2004      	movs	r0, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e12:	f8c1 c058 	str.w	ip, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001e16:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001e1a:	f852 000b 	ldr.w	r0, [r2, fp]
 8001e1e:	4453      	add	r3, sl
 8001e20:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001e24:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001e28:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8001e2c:	f893 105c 	ldrb.w	r1, [r3, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001e30:	f842 000b 	str.w	r0, [r2, fp]
 8001e34:	e6b3      	b.n	8001b9e <HAL_HCD_IRQHandler+0x33e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e36:	68fa      	ldr	r2, [r7, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e38:	eb0a 0b8a 	add.w	fp, sl, sl, lsl #2
 8001e3c:	eb04 0bcb 	add.w	fp, r4, fp, lsl #3
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e40:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e44:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e48:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e4a:	60fa      	str	r2, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e4c:	f001 fede 	bl	8003c0c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001e50:	2301      	movs	r3, #1
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	6820      	ldr	r0, [r4, #0]
 8001e56:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001e58:	f88b 305d 	strb.w	r3, [fp, #93]	; 0x5d
 8001e5c:	e5d3      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001e5e:	f852 000b 	ldr.w	r0, [r2, fp]
 8001e62:	9301      	str	r3, [sp, #4]
 8001e64:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8001e68:	f842 000b 	str.w	r0, [r2, fp]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e6c:	f881 c05c 	strb.w	ip, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e70:	4662      	mov	r2, ip
 8001e72:	4651      	mov	r1, sl
 8001e74:	4620      	mov	r0, r4
 8001e76:	f002 ff3d 	bl	8004cf4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001e7a:	9b01      	ldr	r3, [sp, #4]
 8001e7c:	e5b8      	b.n	80019f0 <HAL_HCD_IRQHandler+0x190>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	061b      	lsls	r3, r3, #24
 8001e82:	d456      	bmi.n	8001f32 <HAL_HCD_IRQHandler+0x6d2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	055b      	lsls	r3, r3, #21
 8001e88:	d465      	bmi.n	8001f56 <HAL_HCD_IRQHandler+0x6f6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	079b      	lsls	r3, r3, #30
 8001e8e:	f57f adba 	bpl.w	8001a06 <HAL_HCD_IRQHandler+0x1a6>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e92:	2128      	movs	r1, #40	; 0x28
 8001e94:	fb01 410a 	mla	r1, r1, sl, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001e98:	68f8      	ldr	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e9a:	f891 305d 	ldrb.w	r3, [r1, #93]	; 0x5d
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001e9e:	f020 0002 	bic.w	r0, r0, #2
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ea2:	2b01      	cmp	r3, #1
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001ea4:	60f8      	str	r0, [r7, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001ea6:	d06e      	beq.n	8001f86 <HAL_HCD_IRQHandler+0x726>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d069      	beq.n	8001f80 <HAL_HCD_IRQHandler+0x720>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d067      	beq.n	8001f80 <HAL_HCD_IRQHandler+0x720>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	f000 808c 	beq.w	8001fce <HAL_HCD_IRQHandler+0x76e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001eb6:	2b06      	cmp	r3, #6
 8001eb8:	d073      	beq.n	8001fa2 <HAL_HCD_IRQHandler+0x742>
 8001eba:	2b08      	cmp	r3, #8
 8001ebc:	d071      	beq.n	8001fa2 <HAL_HCD_IRQHandler+0x742>
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ebe:	2328      	movs	r3, #40	; 0x28
 8001ec0:	fb03 430a 	mla	r3, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001ec4:	f8c7 9008 	str.w	r9, [r7, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001ec8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001ecc:	e66a      	b.n	8001ba4 <HAL_HCD_IRQHandler+0x344>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001ece:	2308      	movs	r3, #8
 8001ed0:	60bb      	str	r3, [r7, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ed8:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eda:	60fb      	str	r3, [r7, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001edc:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ee0:	f001 fe94 	bl	8003c0c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001ee4:	eb04 03ca 	add.w	r3, r4, sl, lsl #3
 8001ee8:	2205      	movs	r2, #5
 8001eea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	68a1      	ldr	r1, [r4, #8]
 8001ef2:	e588      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001ef4:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
 8001ef8:	e78f      	b.n	8001e1a <HAL_HCD_IRQHandler+0x5ba>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001efa:	68fa      	ldr	r2, [r7, #12]
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001efc:	2128      	movs	r1, #40	; 0x28
 8001efe:	fb01 410a 	mla	r1, r1, sl, r4
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f02:	f042 0202 	orr.w	r2, r2, #2
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001f06:	658b      	str	r3, [r1, #88]	; 0x58
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f08:	4651      	mov	r1, sl
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f0a:	60fa      	str	r2, [r7, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f0c:	f001 fe7e 	bl	8003c0c <USB_HC_Halt>
 8001f10:	6820      	ldr	r0, [r4, #0]
 8001f12:	e6ec      	b.n	8001cee <HAL_HCD_IRQHandler+0x48e>
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f14:	f852 300b 	ldr.w	r3, [r2, fp]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f18:	2128      	movs	r1, #40	; 0x28
 8001f1a:	fb01 410a 	mla	r1, r1, sl, r4
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001f1e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001f22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f26:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001f2a:	f842 300b 	str.w	r3, [r2, fp]
 8001f2e:	2102      	movs	r1, #2
 8001f30:	e635      	b.n	8001b9e <HAL_HCD_IRQHandler+0x33e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f38:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f3a:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f3c:	f001 fe66 	bl	8003c0c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f40:	2328      	movs	r3, #40	; 0x28
 8001f42:	fb03 4a0a 	mla	sl, r3, sl, r4
 8001f46:	2206      	movs	r2, #6
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f48:	2380      	movs	r3, #128	; 0x80
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f4a:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
 8001f4e:	6820      	ldr	r0, [r4, #0]
 8001f50:	68a1      	ldr	r1, [r4, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	e557      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f043 0302 	orr.w	r3, r3, #2
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f5c:	4651      	mov	r1, sl
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f5e:	60fb      	str	r3, [r7, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f60:	f001 fe54 	bl	8003c0c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f64:	2328      	movs	r3, #40	; 0x28
 8001f66:	fb03 4a0a 	mla	sl, r3, sl, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f6a:	2110      	movs	r1, #16
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f70:	2308      	movs	r3, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f76:	60ba      	str	r2, [r7, #8]
 8001f78:	68a1      	ldr	r1, [r4, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f7a:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
 8001f7e:	e542      	b.n	8001a06 <HAL_HCD_IRQHandler+0x1a6>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001f80:	f881 905c 	strb.w	r9, [r1, #92]	; 0x5c
 8001f84:	e79b      	b.n	8001ebe <HAL_HCD_IRQHandler+0x65e>
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001f86:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001f8a:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001f8e:	1e93      	subs	r3, r2, #2
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d894      	bhi.n	8001ebe <HAL_HCD_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8001f94:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
 8001f98:	f083 0301 	eor.w	r3, r3, #1
 8001f9c:	f881 3051 	strb.w	r3, [r1, #81]	; 0x51
 8001fa0:	e78d      	b.n	8001ebe <HAL_HCD_IRQHandler+0x65e>
      hhcd->hc[ch_num].ErrCnt++;
 8001fa2:	2328      	movs	r3, #40	; 0x28
 8001fa4:	fb03 430a 	mla	r3, r3, sl, r4
 8001fa8:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8001faa:	3101      	adds	r1, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001fac:	2903      	cmp	r1, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001fae:	6599      	str	r1, [r3, #88]	; 0x58
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001fb0:	d910      	bls.n	8001fd4 <HAL_HCD_IRQHandler+0x774>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001fb2:	2000      	movs	r0, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fb4:	2104      	movs	r1, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001fb6:	6598      	str	r0, [r3, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001fb8:	f883 105c 	strb.w	r1, [r3, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001fbc:	f852 300b 	ldr.w	r3, [r2, fp]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fc8:	f842 300b 	str.w	r3, [r2, fp]
 8001fcc:	e777      	b.n	8001ebe <HAL_HCD_IRQHandler+0x65e>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001fce:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
 8001fd2:	e774      	b.n	8001ebe <HAL_HCD_IRQHandler+0x65e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001fd4:	f883 905c 	strb.w	r9, [r3, #92]	; 0x5c
 8001fd8:	e7f0      	b.n	8001fbc <HAL_HCD_IRQHandler+0x75c>
 8001fda:	bf00      	nop

08001fdc <HAL_HCD_Start>:
{
 8001fdc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 8001fde:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d00e      	beq.n	8002004 <HAL_HCD_Start+0x28>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	2501      	movs	r5, #1
 8001fea:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001fee:	6800      	ldr	r0, [r0, #0]
 8001ff0:	f001 fb50 	bl	8003694 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ff4:	4629      	mov	r1, r5
 8001ff6:	6820      	ldr	r0, [r4, #0]
 8001ff8:	f001 fbcc 	bl	8003794 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8002002:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 8002004:	2002      	movs	r0, #2
}
 8002006:	bd38      	pop	{r3, r4, r5, pc}

08002008 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002008:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 800200c:	2b01      	cmp	r3, #1
 800200e:	d00b      	beq.n	8002028 <HAL_HCD_Stop+0x20>
{
 8002010:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8002012:	2301      	movs	r3, #1
 8002014:	4604      	mov	r4, r0
 8002016:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800201a:	6800      	ldr	r0, [r0, #0]
 800201c:	f001 fe54 	bl	8003cc8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002020:	2000      	movs	r0, #0
 8002022:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
}
 8002026:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002028:	2002      	movs	r0, #2
}
 800202a:	4770      	bx	lr

0800202c <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 800202c:	6800      	ldr	r0, [r0, #0]
 800202e:	f001 bb91 	b.w	8003754 <USB_ResetPort>
 8002032:	bf00      	nop

08002034 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002034:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002038:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800203c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop

08002044 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002044:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002048:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 800204c:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 800204e:	4770      	bx	lr

08002050 <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002050:	6800      	ldr	r0, [r0, #0]
 8002052:	f001 bc55 	b.w	8003900 <USB_GetCurrentFrame>
 8002056:	bf00      	nop

08002058 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8002058:	6800      	ldr	r0, [r0, #0]
 800205a:	f001 bc45 	b.w	80038e8 <USB_GetHostSpeed>
 800205e:	bf00      	nop

08002060 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002060:	2800      	cmp	r0, #0
 8002062:	f000 809f 	beq.w	80021a4 <HAL_I2C_Init+0x144>
{
 8002066:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002068:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800206c:	4604      	mov	r4, r0
 800206e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 808f 	beq.w	8002196 <HAL_I2C_Init+0x136>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002078:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800207a:	2224      	movs	r2, #36	; 0x24
 800207c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800208e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002098:	f000 fdb6 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800209c:	6861      	ldr	r1, [r4, #4]
 800209e:	4b4b      	ldr	r3, [pc, #300]	; (80021cc <HAL_I2C_Init+0x16c>)
 80020a0:	4299      	cmp	r1, r3
 80020a2:	d84b      	bhi.n	800213c <HAL_I2C_Init+0xdc>
 80020a4:	4b4a      	ldr	r3, [pc, #296]	; (80021d0 <HAL_I2C_Init+0x170>)
 80020a6:	4298      	cmp	r0, r3
 80020a8:	d97a      	bls.n	80021a0 <HAL_I2C_Init+0x140>
  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020aa:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80020ac:	4b49      	ldr	r3, [pc, #292]	; (80021d4 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ae:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80020b0:	fba3 6300 	umull	r6, r3, r3, r0
 80020b4:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020b6:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80020ba:	431d      	orrs	r5, r3
 80020bc:	6055      	str	r5, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020be:	6a15      	ldr	r5, [r2, #32]
 80020c0:	3301      	adds	r3, #1
 80020c2:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80020c6:	432b      	orrs	r3, r5
 80020c8:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ca:	69d5      	ldr	r5, [r2, #28]
 80020cc:	0049      	lsls	r1, r1, #1
 80020ce:	1e43      	subs	r3, r0, #1
 80020d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d4:	3301      	adds	r3, #1
 80020d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020da:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 80020de:	2b04      	cmp	r3, #4
 80020e0:	bf38      	it	cc
 80020e2:	2304      	movcc	r3, #4
 80020e4:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 80020e8:	432b      	orrs	r3, r5
 80020ea:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020ec:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 80020f0:	6810      	ldr	r0, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020f2:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020f4:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80020f8:	432b      	orrs	r3, r5
 80020fa:	4303      	orrs	r3, r0
 80020fc:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020fe:	6890      	ldr	r0, [r2, #8]
 8002100:	68e5      	ldr	r5, [r4, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002102:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002104:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 8002108:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800210c:	4329      	orrs	r1, r5
 800210e:	4301      	orrs	r1, r0
 8002110:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002112:	68d1      	ldr	r1, [r2, #12]
 8002114:	69a0      	ldr	r0, [r4, #24]
 8002116:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800211a:	4303      	orrs	r3, r0
 800211c:	430b      	orrs	r3, r1
 800211e:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002120:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002122:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002124:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002128:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 800212a:	6011      	str	r1, [r2, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 800212c:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212e:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002130:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002134:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002136:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800213a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800213c:	4b26      	ldr	r3, [pc, #152]	; (80021d8 <HAL_I2C_Init+0x178>)
 800213e:	4298      	cmp	r0, r3
 8002140:	d92e      	bls.n	80021a0 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002142:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002146:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002148:	4f24      	ldr	r7, [pc, #144]	; (80021dc <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 800214a:	fba3 5300 	umull	r5, r3, r3, r0
 800214e:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002150:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8002154:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002156:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800215a:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800215c:	fb03 f305 	mul.w	r3, r3, r5
 8002160:	fba7 5303 	umull	r5, r3, r7, r3
 8002164:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002166:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002168:	099b      	lsrs	r3, r3, #6
 800216a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800216e:	3301      	adds	r3, #1
 8002170:	432b      	orrs	r3, r5
 8002172:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002174:	69d5      	ldr	r5, [r2, #28]
 8002176:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800217a:	3801      	subs	r0, #1
 800217c:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8002180:	b996      	cbnz	r6, 80021a8 <HAL_I2C_Init+0x148>
 8002182:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8002186:	fbb0 f0f1 	udiv	r0, r0, r1
 800218a:	3001      	adds	r0, #1
 800218c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8002190:	b9c0      	cbnz	r0, 80021c4 <HAL_I2C_Init+0x164>
 8002192:	2301      	movs	r3, #1
 8002194:	e7a8      	b.n	80020e8 <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 8002196:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800219a:	f7fe fbe9 	bl	8000970 <HAL_I2C_MspInit>
 800219e:	e76b      	b.n	8002078 <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 80021a0:	2001      	movs	r0, #1
}
 80021a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80021a4:	2001      	movs	r0, #1
}
 80021a6:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80021ac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80021b0:	fbb0 f0f1 	udiv	r0, r0, r1
 80021b4:	3001      	adds	r0, #1
 80021b6:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80021ba:	2800      	cmp	r0, #0
 80021bc:	d0e9      	beq.n	8002192 <HAL_I2C_Init+0x132>
 80021be:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 80021c2:	e791      	b.n	80020e8 <HAL_I2C_Init+0x88>
 80021c4:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 80021c8:	e78e      	b.n	80020e8 <HAL_I2C_Init+0x88>
 80021ca:	bf00      	nop
 80021cc:	000186a0 	.word	0x000186a0
 80021d0:	001e847f 	.word	0x001e847f
 80021d4:	431bde83 	.word	0x431bde83
 80021d8:	003d08ff 	.word	0x003d08ff
 80021dc:	10624dd3 	.word	0x10624dd3

080021e0 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80021e0:	2800      	cmp	r0, #0
 80021e2:	f000 8085 	beq.w	80022f0 <HAL_I2S_Init+0x110>
{
 80021e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80021e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80021ec:	4604      	mov	r4, r0
 80021ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d075      	beq.n	80022e2 <HAL_I2S_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80021f6:	2202      	movs	r2, #2

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80021f8:	6821      	ldr	r1, [r4, #0]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80021fa:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80021fe:	69c8      	ldr	r0, [r1, #28]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002200:	6963      	ldr	r3, [r4, #20]
 8002202:	68e5      	ldr	r5, [r4, #12]
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002204:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 8002208:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800220c:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800220e:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8002210:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002212:	d027      	beq.n	8002264 <HAL_I2S_Init+0x84>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002214:	68a3      	ldr	r3, [r4, #8]
      packetlength = 32U;
 8002216:	2d00      	cmp	r5, #0
 8002218:	bf0c      	ite	eq
 800221a:	2510      	moveq	r5, #16
 800221c:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800221e:	2001      	movs	r0, #1
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002220:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8002222:	bf98      	it	ls
 8002224:	006d      	lslls	r5, r5, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002226:	f000 fdaf 	bl	8002d88 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800222a:	6922      	ldr	r2, [r4, #16]
 800222c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002230:	d060      	beq.n	80022f4 <HAL_I2S_Init+0x114>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002232:	fbb0 f0f5 	udiv	r0, r0, r5
 8002236:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800223a:	0043      	lsls	r3, r0, #1
 800223c:	6960      	ldr	r0, [r4, #20]
 800223e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002242:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002244:	4935      	ldr	r1, [pc, #212]	; (800231c <HAL_I2S_Init+0x13c>)
 8002246:	fba1 1303 	umull	r1, r3, r1, r3
 800224a:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800224c:	0859      	lsrs	r1, r3, #1
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800224e:	1e88      	subs	r0, r1, #2
 8002250:	28fd      	cmp	r0, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002252:	f003 0301 	and.w	r3, r3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002256:	d95a      	bls.n	800230e <HAL_I2S_Init+0x12e>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002258:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800225a:	f043 0310 	orr.w	r3, r3, #16
 800225e:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8002260:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8002262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002264:	6922      	ldr	r2, [r4, #16]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002266:	69a7      	ldr	r7, [r4, #24]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002268:	f8d4 e020 	ldr.w	lr, [r4, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800226c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8002330 <HAL_I2S_Init+0x150>
 8002270:	e9d4 6001 	ldrd	r6, r0, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002274:	4313      	orrs	r3, r2
 8002276:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002278:	ea46 0300 	orr.w	r3, r6, r0
 800227c:	69ca      	ldr	r2, [r1, #28]
 800227e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002282:	433b      	orrs	r3, r7
 8002284:	432b      	orrs	r3, r5
 8002286:	ea02 020c 	and.w	r2, r2, ip
 800228a:	4313      	orrs	r3, r2
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800228c:	f1be 0f01 	cmp.w	lr, #1
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002290:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002292:	d120      	bne.n	80022d6 <HAL_I2S_Init+0xf6>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <HAL_I2S_Init+0x140>)
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <HAL_I2S_Init+0x144>)
 8002298:	4291      	cmp	r1, r2
 800229a:	bf0c      	ite	eq
 800229c:	4619      	moveq	r1, r3
 800229e:	f04f 2140 	movne.w	r1, #1073758208	; 0x40004000
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80022a2:	4b21      	ldr	r3, [pc, #132]	; (8002328 <HAL_I2S_Init+0x148>)
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022a4:	69ca      	ldr	r2, [r1, #28]
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80022a6:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022a8:	ea02 020c 	and.w	r2, r2, ip
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80022ac:	f04f 0c02 	mov.w	ip, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022b0:	61ca      	str	r2, [r1, #28]
 80022b2:	ea40 0307 	orr.w	r3, r0, r7
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80022b6:	f8c1 c020 	str.w	ip, [r1, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80022ba:	69ca      	ldr	r2, [r1, #28]
 80022bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022c0:	432b      	orrs	r3, r5
 80022c2:	4313      	orrs	r3, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80022c4:	f436 7000 	bics.w	r0, r6, #512	; 0x200
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	bf14      	ite	ne
 80022cc:	2200      	movne	r2, #0
 80022ce:	f44f 7280 	moveq.w	r2, #256	; 0x100
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61cb      	str	r3, [r1, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022d6:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80022d8:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022da:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80022dc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80022e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80022e2:	4b12      	ldr	r3, [pc, #72]	; (800232c <HAL_I2S_Init+0x14c>)
    hi2s->Lock = HAL_UNLOCKED;
 80022e4:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80022e8:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 80022ea:	f7fe fb79 	bl	80009e0 <HAL_I2S_MspInit>
 80022ee:	e782      	b.n	80021f6 <HAL_I2S_Init+0x16>
    return HAL_ERROR;
 80022f0:	2001      	movs	r0, #1
}
 80022f2:	4770      	bx	lr
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80022f4:	68e3      	ldr	r3, [r4, #12]
 80022f6:	6961      	ldr	r1, [r4, #20]
 80022f8:	b173      	cbz	r3, 8002318 <HAL_I2S_Init+0x138>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022fa:	00ad      	lsls	r5, r5, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022fc:	fbb0 f0f5 	udiv	r0, r0, r5
 8002300:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002304:	0043      	lsls	r3, r0, #1
 8002306:	fbb3 f3f1 	udiv	r3, r3, r1
 800230a:	3305      	adds	r3, #5
 800230c:	e79a      	b.n	8002244 <HAL_I2S_Init+0x64>
 800230e:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002312:	68e5      	ldr	r5, [r4, #12]
 8002314:	6821      	ldr	r1, [r4, #0]
 8002316:	e7a6      	b.n	8002266 <HAL_I2S_Init+0x86>
 8002318:	00ed      	lsls	r5, r5, #3
 800231a:	e7ef      	b.n	80022fc <HAL_I2S_Init+0x11c>
 800231c:	cccccccd 	.word	0xcccccccd
 8002320:	40003800 	.word	0x40003800
 8002324:	40003400 	.word	0x40003400
 8002328:	0800244d 	.word	0x0800244d
 800232c:	08002341 	.word	0x08002341
 8002330:	fffff040 	.word	0xfffff040

08002334 <HAL_I2S_TxCpltCallback>:
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop

08002338 <HAL_I2S_RxCpltCallback>:
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop

0800233c <HAL_I2S_ErrorCallback>:
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop

08002340 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002340:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002342:	6803      	ldr	r3, [r0, #0]
{
 8002344:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800234a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800234e:	2a04      	cmp	r2, #4
{
 8002350:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002352:	d034      	beq.n	80023be <I2S_IRQHandler+0x7e>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002354:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002358:	2b03      	cmp	r3, #3
 800235a:	d001      	beq.n	8002360 <I2S_IRQHandler+0x20>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800235c:	b004      	add	sp, #16
 800235e:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002360:	9b01      	ldr	r3, [sp, #4]
 8002362:	079b      	lsls	r3, r3, #30
 8002364:	d510      	bpl.n	8002388 <I2S_IRQHandler+0x48>
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	0610      	lsls	r0, r2, #24
 800236c:	d50c      	bpl.n	8002388 <I2S_IRQHandler+0x48>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800236e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002370:	f831 2b02 	ldrh.w	r2, [r1], #2
 8002374:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002376:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 8002378:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 800237a:	3a01      	subs	r2, #1
 800237c:	b292      	uxth	r2, r2
 800237e:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002380:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002382:	b292      	uxth	r2, r2
 8002384:	2a00      	cmp	r2, #0
 8002386:	d049      	beq.n	800241c <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002388:	9b01      	ldr	r3, [sp, #4]
 800238a:	0719      	lsls	r1, r3, #28
 800238c:	d5e6      	bpl.n	800235c <I2S_IRQHandler+0x1c>
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	0692      	lsls	r2, r2, #26
 8002394:	d5e2      	bpl.n	800235c <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002396:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002398:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800239a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800239e:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80023a0:	9103      	str	r1, [sp, #12]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80023a6:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80023a8:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80023aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80023ae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff ffc0 	bl	800233c <HAL_I2S_ErrorCallback>
}
 80023bc:	e7ce      	b.n	800235c <I2S_IRQHandler+0x1c>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80023be:	9a01      	ldr	r2, [sp, #4]
 80023c0:	07d1      	lsls	r1, r2, #31
 80023c2:	d50e      	bpl.n	80023e2 <I2S_IRQHandler+0xa2>
 80023c4:	685a      	ldr	r2, [r3, #4]
 80023c6:	0652      	lsls	r2, r2, #25
 80023c8:	d50b      	bpl.n	80023e2 <I2S_IRQHandler+0xa2>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80023ca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 80023d2:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 80023d4:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 80023d6:	3a01      	subs	r2, #1
 80023d8:	b292      	uxth	r2, r2
 80023da:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 80023dc:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80023de:	b292      	uxth	r2, r2
 80023e0:	b33a      	cbz	r2, 8002432 <I2S_IRQHandler+0xf2>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80023e2:	9b01      	ldr	r3, [sp, #4]
 80023e4:	0659      	lsls	r1, r3, #25
 80023e6:	d5b5      	bpl.n	8002354 <I2S_IRQHandler+0x14>
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	0692      	lsls	r2, r2, #26
 80023ee:	d5b1      	bpl.n	8002354 <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023f0:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80023f2:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023f8:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80023fa:	9102      	str	r1, [sp, #8]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	9202      	str	r2, [sp, #8]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002404:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002406:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002408:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800240c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800240e:	f043 0302 	orr.w	r3, r3, #2
 8002412:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002414:	4620      	mov	r0, r4
 8002416:	f7ff ff91 	bl	800233c <HAL_I2S_ErrorCallback>
 800241a:	e79b      	b.n	8002354 <I2S_IRQHandler+0x14>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800241c:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800241e:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002420:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002424:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8002426:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8002428:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800242c:	f7ff ff82 	bl	8002334 <HAL_I2S_TxCpltCallback>
 8002430:	e7aa      	b.n	8002388 <I2S_IRQHandler+0x48>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002432:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002434:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002436:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800243a:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800243c:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002440:	f7ff ff7a 	bl	8002338 <HAL_I2S_RxCpltCallback>
 8002444:	e7cd      	b.n	80023e2 <I2S_IRQHandler+0xa2>
 8002446:	bf00      	nop

08002448 <HAL_I2SEx_TxRxCpltCallback>:
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop

0800244c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800244c:	b530      	push	{r4, r5, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800244e:	4a93      	ldr	r2, [pc, #588]	; (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002450:	6805      	ldr	r5, [r0, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002452:	4b93      	ldr	r3, [pc, #588]	; (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002454:	68a9      	ldr	r1, [r5, #8]
{
 8002456:	b087      	sub	sp, #28
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002458:	4295      	cmp	r5, r2
 800245a:	bf18      	it	ne
 800245c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002460:	9100      	str	r1, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002466:	6869      	ldr	r1, [r5, #4]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002468:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800246a:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	9103      	str	r1, [sp, #12]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002470:	f432 7200 	bics.w	r2, r2, #512	; 0x200
{
 8002474:	4604      	mov	r4, r0
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002476:	d075      	beq.n	8002564 <HAL_I2SEx_FullDuplex_IRQHandler+0x118>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002478:	9a01      	ldr	r2, [sp, #4]
 800247a:	0791      	lsls	r1, r2, #30
 800247c:	d51a      	bpl.n	80024b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
 800247e:	9a03      	ldr	r2, [sp, #12]
 8002480:	0612      	lsls	r2, r2, #24
 8002482:	d517      	bpl.n	80024b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002484:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002486:	1c91      	adds	r1, r2, #2
 8002488:	8812      	ldrh	r2, [r2, #0]
 800248a:	6241      	str	r1, [r0, #36]	; 0x24
 800248c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800248e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002490:	3a01      	subs	r2, #1
 8002492:	b292      	uxth	r2, r2
 8002494:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002496:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002498:	b292      	uxth	r2, r2
 800249a:	b95a      	cbnz	r2, 80024b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024a2:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80024a4:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	b923      	cbnz	r3, 80024b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x68>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024aa:	2301      	movs	r3, #1
 80024ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024b0:	f7ff ffca 	bl	8002448 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80024b4:	9b00      	ldr	r3, [sp, #0]
 80024b6:	07db      	lsls	r3, r3, #31
 80024b8:	d51c      	bpl.n	80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
 80024ba:	9b02      	ldr	r3, [sp, #8]
 80024bc:	065d      	lsls	r5, r3, #25
 80024be:	d519      	bpl.n	80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80024c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024c2:	6822      	ldr	r2, [r4, #0]
 80024c4:	1c98      	adds	r0, r3, #2
 80024c6:	68d1      	ldr	r1, [r2, #12]
 80024c8:	62e0      	str	r0, [r4, #44]	; 0x2c
 80024ca:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80024cc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80024ce:	3b01      	subs	r3, #1
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80024d4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	b963      	cbnz	r3, 80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024da:	6853      	ldr	r3, [r2, #4]
 80024dc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80024e0:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80024e2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	b92b      	cbnz	r3, 80024f4 <HAL_I2SEx_FullDuplex_IRQHandler+0xa8>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80024e8:	2301      	movs	r3, #1
 80024ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80024ee:	4620      	mov	r0, r4
 80024f0:	f7ff ffaa 	bl	8002448 <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024f4:	9b00      	ldr	r3, [sp, #0]
 80024f6:	0658      	lsls	r0, r3, #25
 80024f8:	d51b      	bpl.n	8002532 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
 80024fa:	9b02      	ldr	r3, [sp, #8]
 80024fc:	0699      	lsls	r1, r3, #26
 80024fe:	d518      	bpl.n	8002532 <HAL_I2SEx_FullDuplex_IRQHandler+0xe6>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002500:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002502:	4866      	ldr	r0, [pc, #408]	; (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002504:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002506:	4b66      	ldr	r3, [pc, #408]	; (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002508:	f021 0160 	bic.w	r1, r1, #96	; 0x60
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800250c:	4282      	cmp	r2, r0
 800250e:	bf18      	it	ne
 8002510:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002514:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002516:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002518:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800251a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800251e:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002520:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002524:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002526:	f043 0302 	orr.w	r3, r3, #2
 800252a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800252c:	4620      	mov	r0, r4
 800252e:	f7ff ff05 	bl	800233c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002532:	9b01      	ldr	r3, [sp, #4]
 8002534:	071a      	lsls	r2, r3, #28
 8002536:	d56e      	bpl.n	8002616 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 8002538:	9b03      	ldr	r3, [sp, #12]
 800253a:	069b      	lsls	r3, r3, #26
 800253c:	d56b      	bpl.n	8002616 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800253e:	6822      	ldr	r2, [r4, #0]
 8002540:	4956      	ldr	r1, [pc, #344]	; (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8002542:	4b57      	ldr	r3, [pc, #348]	; (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002544:	428a      	cmp	r2, r1
 8002546:	bf18      	it	ne
 8002548:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 800254c:	2001      	movs	r0, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8002554:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002556:	6853      	ldr	r3, [r2, #4]
 8002558:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800255c:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800255e:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
 8002562:	e04e      	b.n	8002602 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002564:	9b00      	ldr	r3, [sp, #0]
 8002566:	079a      	lsls	r2, r3, #30
 8002568:	d502      	bpl.n	8002570 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 800256a:	9b02      	ldr	r3, [sp, #8]
 800256c:	061b      	lsls	r3, r3, #24
 800256e:	d477      	bmi.n	8002660 <HAL_I2SEx_FullDuplex_IRQHandler+0x214>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002570:	9b01      	ldr	r3, [sp, #4]
 8002572:	07d8      	lsls	r0, r3, #31
 8002574:	d502      	bpl.n	800257c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 8002576:	9b03      	ldr	r3, [sp, #12]
 8002578:	0659      	lsls	r1, r3, #25
 800257a:	d44e      	bmi.n	800261a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ce>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800257c:	9b01      	ldr	r3, [sp, #4]
 800257e:	065a      	lsls	r2, r3, #25
 8002580:	d522      	bpl.n	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
 8002582:	9b03      	ldr	r3, [sp, #12]
 8002584:	069b      	lsls	r3, r3, #26
 8002586:	d51f      	bpl.n	80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x17c>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002588:	6823      	ldr	r3, [r4, #0]
 800258a:	4944      	ldr	r1, [pc, #272]	; (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800258c:	4a44      	ldr	r2, [pc, #272]	; (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 800258e:	428b      	cmp	r3, r1
 8002590:	bf18      	it	ne
 8002592:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002596:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002598:	6851      	ldr	r1, [r2, #4]
 800259a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800259e:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80025a6:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025a8:	9004      	str	r0, [sp, #16]
 80025aa:	68da      	ldr	r2, [r3, #12]
 80025ac:	9204      	str	r2, [sp, #16]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80025b2:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80025b4:	9a04      	ldr	r2, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 80025b6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80025bc:	f043 0302 	orr.w	r3, r3, #2
 80025c0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80025c2:	4620      	mov	r0, r4
 80025c4:	f7ff feba 	bl	800233c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025c8:	9b00      	ldr	r3, [sp, #0]
 80025ca:	071d      	lsls	r5, r3, #28
 80025cc:	d523      	bpl.n	8002616 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 80025ce:	9b02      	ldr	r3, [sp, #8]
 80025d0:	0698      	lsls	r0, r3, #26
 80025d2:	d520      	bpl.n	8002616 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025d4:	6823      	ldr	r3, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025d6:	4831      	ldr	r0, [pc, #196]	; (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025d8:	6859      	ldr	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025da:	4a31      	ldr	r2, [pc, #196]	; (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025dc:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025e0:	4283      	cmp	r3, r0
 80025e2:	bf18      	it	ne
 80025e4:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80025e8:	6059      	str	r1, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025ea:	6851      	ldr	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80025ec:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025ee:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80025f2:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80025f4:	9005      	str	r0, [sp, #20]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80025fa:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80025fc:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 80025fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002602:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002604:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800260c:	b007      	add	sp, #28
 800260e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      HAL_I2S_ErrorCallback(hi2s);
 8002612:	f7ff be93 	b.w	800233c <HAL_I2S_ErrorCallback>
}
 8002616:	b007      	add	sp, #28
 8002618:	bd30      	pop	{r4, r5, pc}
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800261a:	6820      	ldr	r0, [r4, #0]
 800261c:	491f      	ldr	r1, [pc, #124]	; (800269c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 800261e:	4a20      	ldr	r2, [pc, #128]	; (80026a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8002620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002622:	4288      	cmp	r0, r1
 8002624:	bf18      	it	ne
 8002626:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 800262a:	1c98      	adds	r0, r3, #2
 800262c:	68d1      	ldr	r1, [r2, #12]
 800262e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8002630:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 8002632:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8002634:	3b01      	subs	r3, #1
 8002636:	b29b      	uxth	r3, r3
 8002638:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800263a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800263c:	b29b      	uxth	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d19c      	bne.n	800257c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002642:	6853      	ldr	r3, [r2, #4]
 8002644:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8002648:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 800264a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d194      	bne.n	800257c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002652:	2301      	movs	r3, #1
 8002654:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002658:	4620      	mov	r0, r4
 800265a:	f7ff fef5 	bl	8002448 <HAL_I2SEx_TxRxCpltCallback>
 800265e:	e78d      	b.n	800257c <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002660:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002662:	1c9a      	adds	r2, r3, #2
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	6242      	str	r2, [r0, #36]	; 0x24
 8002668:	60eb      	str	r3, [r5, #12]
  hi2s->TxXferCount--;
 800266a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800266c:	3b01      	subs	r3, #1
 800266e:	b29b      	uxth	r3, r3
 8002670:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002672:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	f47f af7a 	bne.w	8002570 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800267c:	686b      	ldr	r3, [r5, #4]
 800267e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002682:	606b      	str	r3, [r5, #4]
    if (hi2s->RxXferCount == 0U)
 8002684:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002686:	b29b      	uxth	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	f47f af71 	bne.w	8002570 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
      hi2s->State = HAL_I2S_STATE_READY;
 800268e:	2301      	movs	r3, #1
 8002690:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002694:	f7ff fed8 	bl	8002448 <HAL_I2SEx_TxRxCpltCallback>
 8002698:	e76a      	b.n	8002570 <HAL_I2SEx_FullDuplex_IRQHandler+0x124>
 800269a:	bf00      	nop
 800269c:	40003800 	.word	0x40003800
 80026a0:	40003400 	.word	0x40003400

080026a4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026a4:	2800      	cmp	r0, #0
 80026a6:	f000 8132 	beq.w	800290e <HAL_RCC_OscConfig+0x26a>
{
 80026aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ae:	6803      	ldr	r3, [r0, #0]
 80026b0:	07dd      	lsls	r5, r3, #31
{
 80026b2:	b082      	sub	sp, #8
 80026b4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b6:	d52f      	bpl.n	8002718 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026b8:	49ac      	ldr	r1, [pc, #688]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 80026ba:	688a      	ldr	r2, [r1, #8]
 80026bc:	f002 020c 	and.w	r2, r2, #12
 80026c0:	2a04      	cmp	r2, #4
 80026c2:	f000 80ea 	beq.w	800289a <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c6:	688a      	ldr	r2, [r1, #8]
 80026c8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026cc:	2a08      	cmp	r2, #8
 80026ce:	f000 80e0 	beq.w	8002892 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026d2:	6863      	ldr	r3, [r4, #4]
 80026d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d8:	f000 80e9 	beq.w	80028ae <HAL_RCC_OscConfig+0x20a>
 80026dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e0:	f000 8178 	beq.w	80029d4 <HAL_RCC_OscConfig+0x330>
 80026e4:	4da1      	ldr	r5, [pc, #644]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 80026e6:	682a      	ldr	r2, [r5, #0]
 80026e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026ec:	602a      	str	r2, [r5, #0]
 80026ee:	682a      	ldr	r2, [r5, #0]
 80026f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026f4:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f040 80de 	bne.w	80028b8 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fb36 	bl	8000d6c <HAL_GetTick>
 8002700:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002702:	e005      	b.n	8002710 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002704:	f7fe fb32 	bl	8000d6c <HAL_GetTick>
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	2864      	cmp	r0, #100	; 0x64
 800270c:	f200 80f2 	bhi.w	80028f4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002710:	682b      	ldr	r3, [r5, #0]
 8002712:	039b      	lsls	r3, r3, #14
 8002714:	d4f6      	bmi.n	8002704 <HAL_RCC_OscConfig+0x60>
 8002716:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002718:	079f      	lsls	r7, r3, #30
 800271a:	d475      	bmi.n	8002808 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800271c:	071a      	lsls	r2, r3, #28
 800271e:	d515      	bpl.n	800274c <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002720:	6963      	ldr	r3, [r4, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 80a5 	beq.w	8002872 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002728:	4b91      	ldr	r3, [pc, #580]	; (8002970 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272a:	4d90      	ldr	r5, [pc, #576]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 800272c:	2201      	movs	r2, #1
 800272e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002730:	f7fe fb1c 	bl	8000d6c <HAL_GetTick>
 8002734:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	e005      	b.n	8002744 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002738:	f7fe fb18 	bl	8000d6c <HAL_GetTick>
 800273c:	1b80      	subs	r0, r0, r6
 800273e:	2802      	cmp	r0, #2
 8002740:	f200 80d8 	bhi.w	80028f4 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002744:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002746:	079b      	lsls	r3, r3, #30
 8002748:	d5f6      	bpl.n	8002738 <HAL_RCC_OscConfig+0x94>
 800274a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	0758      	lsls	r0, r3, #29
 800274e:	d53b      	bpl.n	80027c8 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002750:	4a86      	ldr	r2, [pc, #536]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 8002752:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002754:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8002758:	f040 80db 	bne.w	8002912 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	6413      	str	r3, [r2, #64]	; 0x40
 8002766:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002770:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	4d80      	ldr	r5, [pc, #512]	; (8002974 <HAL_RCC_OscConfig+0x2d0>)
 8002774:	682a      	ldr	r2, [r5, #0]
 8002776:	05d1      	lsls	r1, r2, #23
 8002778:	f140 80ac 	bpl.w	80028d4 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	68a3      	ldr	r3, [r4, #8]
 800277e:	2b01      	cmp	r3, #1
 8002780:	f000 80c9 	beq.w	8002916 <HAL_RCC_OscConfig+0x272>
 8002784:	2b05      	cmp	r3, #5
 8002786:	f000 812f 	beq.w	80029e8 <HAL_RCC_OscConfig+0x344>
 800278a:	4d78      	ldr	r5, [pc, #480]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 800278c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800278e:	f022 0201 	bic.w	r2, r2, #1
 8002792:	672a      	str	r2, [r5, #112]	; 0x70
 8002794:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002796:	f022 0204 	bic.w	r2, r2, #4
 800279a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800279c:	2b00      	cmp	r3, #0
 800279e:	f040 80bf 	bne.w	8002920 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a2:	f7fe fae3 	bl	8000d6c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80027aa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ac:	e006      	b.n	80027bc <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fadd 	bl	8000d6c <HAL_GetTick>
 80027b2:	eba0 0008 	sub.w	r0, r0, r8
 80027b6:	42b8      	cmp	r0, r7
 80027b8:	f200 809c 	bhi.w	80028f4 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027be:	0798      	lsls	r0, r3, #30
 80027c0:	d4f5      	bmi.n	80027ae <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c2:	2e00      	cmp	r6, #0
 80027c4:	f040 80dc 	bne.w	8002980 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027c8:	69a0      	ldr	r0, [r4, #24]
 80027ca:	b1c8      	cbz	r0, 8002800 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027cc:	4d67      	ldr	r5, [pc, #412]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 80027ce:	68aa      	ldr	r2, [r5, #8]
 80027d0:	f002 020c 	and.w	r2, r2, #12
 80027d4:	2a08      	cmp	r2, #8
 80027d6:	f000 80d9 	beq.w	800298c <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4a67      	ldr	r2, [pc, #412]	; (8002978 <HAL_RCC_OscConfig+0x2d4>)
 80027dc:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027de:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80027e0:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027e2:	f000 810b 	beq.w	80029fc <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fac1 	bl	8000d6c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80027ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ee:	e004      	b.n	80027fa <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fabc 	bl	8000d6c <HAL_GetTick>
 80027f4:	1b40      	subs	r0, r0, r5
 80027f6:	2802      	cmp	r0, #2
 80027f8:	d87c      	bhi.n	80028f4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	6823      	ldr	r3, [r4, #0]
 80027fc:	019b      	lsls	r3, r3, #6
 80027fe:	d4f7      	bmi.n	80027f0 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002800:	2000      	movs	r0, #0
}
 8002802:	b002      	add	sp, #8
 8002804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 800280a:	6891      	ldr	r1, [r2, #8]
 800280c:	f011 0f0c 	tst.w	r1, #12
 8002810:	d024      	beq.n	800285c <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002812:	6891      	ldr	r1, [r2, #8]
 8002814:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002818:	2908      	cmp	r1, #8
 800281a:	d01c      	beq.n	8002856 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800281c:	68e3      	ldr	r3, [r4, #12]
 800281e:	2b00      	cmp	r3, #0
 8002820:	f000 8092 	beq.w	8002948 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8002824:	4b55      	ldr	r3, [pc, #340]	; (800297c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002826:	4d51      	ldr	r5, [pc, #324]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8002828:	2201      	movs	r2, #1
 800282a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800282c:	f7fe fa9e 	bl	8000d6c <HAL_GetTick>
 8002830:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002832:	e004      	b.n	800283e <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002834:	f7fe fa9a 	bl	8000d6c <HAL_GetTick>
 8002838:	1b80      	subs	r0, r0, r6
 800283a:	2802      	cmp	r0, #2
 800283c:	d85a      	bhi.n	80028f4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283e:	682b      	ldr	r3, [r5, #0]
 8002840:	0798      	lsls	r0, r3, #30
 8002842:	d5f7      	bpl.n	8002834 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	682b      	ldr	r3, [r5, #0]
 8002846:	6922      	ldr	r2, [r4, #16]
 8002848:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800284c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002850:	602b      	str	r3, [r5, #0]
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	e762      	b.n	800271c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002856:	6852      	ldr	r2, [r2, #4]
 8002858:	0256      	lsls	r6, r2, #9
 800285a:	d4df      	bmi.n	800281c <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285c:	4a43      	ldr	r2, [pc, #268]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 800285e:	6812      	ldr	r2, [r2, #0]
 8002860:	0795      	lsls	r5, r2, #30
 8002862:	d54b      	bpl.n	80028fc <HAL_RCC_OscConfig+0x258>
 8002864:	68e2      	ldr	r2, [r4, #12]
 8002866:	2a01      	cmp	r2, #1
 8002868:	d048      	beq.n	80028fc <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 800286a:	2001      	movs	r0, #1
}
 800286c:	b002      	add	sp, #8
 800286e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002872:	4a3f      	ldr	r2, [pc, #252]	; (8002970 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	4d3d      	ldr	r5, [pc, #244]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8002876:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002878:	f7fe fa78 	bl	8000d6c <HAL_GetTick>
 800287c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287e:	e004      	b.n	800288a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002880:	f7fe fa74 	bl	8000d6c <HAL_GetTick>
 8002884:	1b80      	subs	r0, r0, r6
 8002886:	2802      	cmp	r0, #2
 8002888:	d834      	bhi.n	80028f4 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800288c:	079f      	lsls	r7, r3, #30
 800288e:	d4f7      	bmi.n	8002880 <HAL_RCC_OscConfig+0x1dc>
 8002890:	e75b      	b.n	800274a <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	684a      	ldr	r2, [r1, #4]
 8002894:	0250      	lsls	r0, r2, #9
 8002896:	f57f af1c 	bpl.w	80026d2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800289a:	4a34      	ldr	r2, [pc, #208]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	0391      	lsls	r1, r2, #14
 80028a0:	f57f af3a 	bpl.w	8002718 <HAL_RCC_OscConfig+0x74>
 80028a4:	6862      	ldr	r2, [r4, #4]
 80028a6:	2a00      	cmp	r2, #0
 80028a8:	f47f af36 	bne.w	8002718 <HAL_RCC_OscConfig+0x74>
 80028ac:	e7dd      	b.n	800286a <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ae:	4a2f      	ldr	r2, [pc, #188]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 80028b0:	6813      	ldr	r3, [r2, #0]
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80028b8:	f7fe fa58 	bl	8000d6c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028bc:	4d2b      	ldr	r5, [pc, #172]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 80028be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028c0:	e004      	b.n	80028cc <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c2:	f7fe fa53 	bl	8000d6c <HAL_GetTick>
 80028c6:	1b80      	subs	r0, r0, r6
 80028c8:	2864      	cmp	r0, #100	; 0x64
 80028ca:	d813      	bhi.n	80028f4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	039a      	lsls	r2, r3, #14
 80028d0:	d5f7      	bpl.n	80028c2 <HAL_RCC_OscConfig+0x21e>
 80028d2:	e720      	b.n	8002716 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028d4:	682a      	ldr	r2, [r5, #0]
 80028d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028da:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 80028dc:	f7fe fa46 	bl	8000d6c <HAL_GetTick>
 80028e0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	682b      	ldr	r3, [r5, #0]
 80028e4:	05da      	lsls	r2, r3, #23
 80028e6:	f53f af49 	bmi.w	800277c <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ea:	f7fe fa3f 	bl	8000d6c <HAL_GetTick>
 80028ee:	1bc0      	subs	r0, r0, r7
 80028f0:	2802      	cmp	r0, #2
 80028f2:	d9f6      	bls.n	80028e2 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 80028f4:	2003      	movs	r0, #3
}
 80028f6:	b002      	add	sp, #8
 80028f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028fc:	491b      	ldr	r1, [pc, #108]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 80028fe:	6920      	ldr	r0, [r4, #16]
 8002900:	680a      	ldr	r2, [r1, #0]
 8002902:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002906:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800290a:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290c:	e706      	b.n	800271c <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 800290e:	2001      	movs	r0, #1
}
 8002910:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8002912:	2600      	movs	r6, #0
 8002914:	e72d      	b.n	8002772 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
 8002918:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002920:	f7fe fa24 	bl	8000d6c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	4d11      	ldr	r5, [pc, #68]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8002926:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800292c:	e005      	b.n	800293a <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292e:	f7fe fa1d 	bl	8000d6c <HAL_GetTick>
 8002932:	eba0 0008 	sub.w	r0, r0, r8
 8002936:	42b8      	cmp	r0, r7
 8002938:	d8dc      	bhi.n	80028f4 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800293c:	079b      	lsls	r3, r3, #30
 800293e:	d5f6      	bpl.n	800292e <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8002940:	2e00      	cmp	r6, #0
 8002942:	f43f af41 	beq.w	80027c8 <HAL_RCC_OscConfig+0x124>
 8002946:	e01b      	b.n	8002980 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8002948:	4a0c      	ldr	r2, [pc, #48]	; (800297c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294a:	4d08      	ldr	r5, [pc, #32]	; (800296c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 800294c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800294e:	f7fe fa0d 	bl	8000d6c <HAL_GetTick>
 8002952:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002954:	e004      	b.n	8002960 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe fa09 	bl	8000d6c <HAL_GetTick>
 800295a:	1b80      	subs	r0, r0, r6
 800295c:	2802      	cmp	r0, #2
 800295e:	d8c9      	bhi.n	80028f4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002960:	682b      	ldr	r3, [r5, #0]
 8002962:	0799      	lsls	r1, r3, #30
 8002964:	d4f7      	bmi.n	8002956 <HAL_RCC_OscConfig+0x2b2>
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	e6d8      	b.n	800271c <HAL_RCC_OscConfig+0x78>
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800
 8002970:	42470e80 	.word	0x42470e80
 8002974:	40007000 	.word	0x40007000
 8002978:	42470060 	.word	0x42470060
 800297c:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8002980:	4a35      	ldr	r2, [pc, #212]	; (8002a58 <HAL_RCC_OscConfig+0x3b4>)
 8002982:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	e71d      	b.n	80027c8 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800298c:	2801      	cmp	r0, #1
 800298e:	f43f af6d 	beq.w	800286c <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->CFGR;
 8002992:	68ab      	ldr	r3, [r5, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002994:	69e2      	ldr	r2, [r4, #28]
 8002996:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 800299a:	4291      	cmp	r1, r2
 800299c:	f47f af65 	bne.w	800286a <HAL_RCC_OscConfig+0x1c6>
 80029a0:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a2:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	4291      	cmp	r1, r2
 80029a8:	f47f af5f 	bne.w	800286a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029ac:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029b2:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b4:	428a      	cmp	r2, r1
 80029b6:	f47f af58 	bne.w	800286a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029bc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80029c0:	4291      	cmp	r1, r2
 80029c2:	f47f af52 	bne.w	800286a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80029c6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80029c8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 80029cc:	1a18      	subs	r0, r3, r0
 80029ce:	bf18      	it	ne
 80029d0:	2001      	movne	r0, #1
 80029d2:	e74b      	b.n	800286c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029d4:	4b20      	ldr	r3, [pc, #128]	; (8002a58 <HAL_RCC_OscConfig+0x3b4>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	e767      	b.n	80028b8 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_RCC_OscConfig+0x3b4>)
 80029ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029ec:	f042 0204 	orr.w	r2, r2, #4
 80029f0:	671a      	str	r2, [r3, #112]	; 0x70
 80029f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	671a      	str	r2, [r3, #112]	; 0x70
 80029fa:	e791      	b.n	8002920 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 80029fc:	f7fe f9b6 	bl	8000d6c <HAL_GetTick>
 8002a00:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a02:	e005      	b.n	8002a10 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe f9b2 	bl	8000d6c <HAL_GetTick>
 8002a08:	1b80      	subs	r0, r0, r6
 8002a0a:	2802      	cmp	r0, #2
 8002a0c:	f63f af72 	bhi.w	80028f4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	0199      	lsls	r1, r3, #6
 8002a14:	d4f6      	bmi.n	8002a04 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a16:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8002a1a:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8002a1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a20:	4c0d      	ldr	r4, [pc, #52]	; (8002a58 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a22:	4333      	orrs	r3, r6
 8002a24:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002a28:	0852      	lsrs	r2, r2, #1
 8002a2a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002a2e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002a30:	490a      	ldr	r1, [pc, #40]	; (8002a5c <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002a36:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a38:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a3a:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8002a3c:	f7fe f996 	bl	8000d6c <HAL_GetTick>
 8002a40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	e005      	b.n	8002a50 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe f992 	bl	8000d6c <HAL_GetTick>
 8002a48:	1b40      	subs	r0, r0, r5
 8002a4a:	2802      	cmp	r0, #2
 8002a4c:	f63f af52 	bhi.w	80028f4 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a50:	6823      	ldr	r3, [r4, #0]
 8002a52:	019a      	lsls	r2, r3, #6
 8002a54:	d5f6      	bpl.n	8002a44 <HAL_RCC_OscConfig+0x3a0>
 8002a56:	e6d3      	b.n	8002800 <HAL_RCC_OscConfig+0x15c>
 8002a58:	40023800 	.word	0x40023800
 8002a5c:	42470060 	.word	0x42470060

08002a60 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a60:	4917      	ldr	r1, [pc, #92]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8002a62:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a64:	688b      	ldr	r3, [r1, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d01b      	beq.n	8002aa6 <HAL_RCC_GetSysClockFreq+0x46>
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d117      	bne.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a72:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a74:	684b      	ldr	r3, [r1, #4]
 8002a76:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a7a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a7e:	d114      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a80:	6849      	ldr	r1, [r1, #4]
 8002a82:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x64>)
 8002a84:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002a88:	fba1 0100 	umull	r0, r1, r1, r0
 8002a8c:	f7fd fb9c 	bl	80001c8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x60>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002a98:	3301      	adds	r3, #1
 8002a9a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002a9c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002aa0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002aa2:	4808      	ldr	r0, [pc, #32]	; (8002ac4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002aa4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8002aa6:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8002aa8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aaa:	684b      	ldr	r3, [r1, #4]
 8002aac:	4806      	ldr	r0, [pc, #24]	; (8002ac8 <HAL_RCC_GetSysClockFreq+0x68>)
 8002aae:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002ab2:	fba3 0100 	umull	r0, r1, r3, r0
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	f7fd fb86 	bl	80001c8 <__aeabi_uldivmod>
 8002abc:	e7e8      	b.n	8002a90 <HAL_RCC_GetSysClockFreq+0x30>
 8002abe:	bf00      	nop
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	00f42400 	.word	0x00f42400
 8002ac8:	007a1200 	.word	0x007a1200

08002acc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002acc:	b160      	cbz	r0, 8002ae8 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ace:	4a49      	ldr	r2, [pc, #292]	; (8002bf4 <HAL_RCC_ClockConfig+0x128>)
 8002ad0:	6813      	ldr	r3, [r2, #0]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	428b      	cmp	r3, r1
 8002ad8:	d208      	bcs.n	8002aec <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	b2cb      	uxtb	r3, r1
 8002adc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ade:	6813      	ldr	r3, [r2, #0]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	428b      	cmp	r3, r1
 8002ae6:	d001      	beq.n	8002aec <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
}
 8002aea:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aec:	6803      	ldr	r3, [r0, #0]
{
 8002aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af2:	079d      	lsls	r5, r3, #30
 8002af4:	d514      	bpl.n	8002b20 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af6:	075c      	lsls	r4, r3, #29
 8002af8:	d504      	bpl.n	8002b04 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002afa:	4c3f      	ldr	r4, [pc, #252]	; (8002bf8 <HAL_RCC_ClockConfig+0x12c>)
 8002afc:	68a2      	ldr	r2, [r4, #8]
 8002afe:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8002b02:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b04:	071a      	lsls	r2, r3, #28
 8002b06:	d504      	bpl.n	8002b12 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b08:	4c3b      	ldr	r4, [pc, #236]	; (8002bf8 <HAL_RCC_ClockConfig+0x12c>)
 8002b0a:	68a2      	ldr	r2, [r4, #8]
 8002b0c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8002b10:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b12:	4c39      	ldr	r4, [pc, #228]	; (8002bf8 <HAL_RCC_ClockConfig+0x12c>)
 8002b14:	6885      	ldr	r5, [r0, #8]
 8002b16:	68a2      	ldr	r2, [r4, #8]
 8002b18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002b1c:	432a      	orrs	r2, r5
 8002b1e:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b20:	07df      	lsls	r7, r3, #31
 8002b22:	4604      	mov	r4, r0
 8002b24:	460d      	mov	r5, r1
 8002b26:	d522      	bpl.n	8002b6e <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b28:	6842      	ldr	r2, [r0, #4]
 8002b2a:	2a01      	cmp	r2, #1
 8002b2c:	d057      	beq.n	8002bde <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b2e:	1e93      	subs	r3, r2, #2
 8002b30:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCC_ClockConfig+0x12c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	d959      	bls.n	8002bec <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b38:	0799      	lsls	r1, r3, #30
 8002b3a:	d525      	bpl.n	8002b88 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3c:	4e2e      	ldr	r6, [pc, #184]	; (8002bf8 <HAL_RCC_ClockConfig+0x12c>)
 8002b3e:	68b3      	ldr	r3, [r6, #8]
 8002b40:	f023 0303 	bic.w	r3, r3, #3
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002b48:	f7fe f910 	bl	8000d6c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b4c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002b50:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e005      	b.n	8002b60 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe f90a 	bl	8000d6c <HAL_GetTick>
 8002b58:	eba0 0008 	sub.w	r0, r0, r8
 8002b5c:	42b8      	cmp	r0, r7
 8002b5e:	d843      	bhi.n	8002be8 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b60:	68b3      	ldr	r3, [r6, #8]
 8002b62:	6862      	ldr	r2, [r4, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b6c:	d1f2      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6e:	4a21      	ldr	r2, [pc, #132]	; (8002bf4 <HAL_RCC_ClockConfig+0x128>)
 8002b70:	6813      	ldr	r3, [r2, #0]
 8002b72:	f003 030f 	and.w	r3, r3, #15
 8002b76:	42ab      	cmp	r3, r5
 8002b78:	d909      	bls.n	8002b8e <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	b2eb      	uxtb	r3, r5
 8002b7c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	6813      	ldr	r3, [r2, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	42ab      	cmp	r3, r5
 8002b86:	d002      	beq.n	8002b8e <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8002b88:	2001      	movs	r0, #1
}
 8002b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	075a      	lsls	r2, r3, #29
 8002b92:	d506      	bpl.n	8002ba2 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b94:	4918      	ldr	r1, [pc, #96]	; (8002bf8 <HAL_RCC_ClockConfig+0x12c>)
 8002b96:	68e0      	ldr	r0, [r4, #12]
 8002b98:	688a      	ldr	r2, [r1, #8]
 8002b9a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002b9e:	4302      	orrs	r2, r0
 8002ba0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba2:	071b      	lsls	r3, r3, #28
 8002ba4:	d412      	bmi.n	8002bcc <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ba6:	f7ff ff5b 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002baa:	4b13      	ldr	r3, [pc, #76]	; (8002bf8 <HAL_RCC_ClockConfig+0x12c>)
 8002bac:	4c13      	ldr	r4, [pc, #76]	; (8002bfc <HAL_RCC_ClockConfig+0x130>)
 8002bae:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 8002bb0:	4913      	ldr	r1, [pc, #76]	; (8002c00 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bb2:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <HAL_RCC_ClockConfig+0x138>)
 8002bb4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bb8:	5ce3      	ldrb	r3, [r4, r3]
 8002bba:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 8002bbe:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc0:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 8002bc2:	f7fe f889 	bl	8000cd8 <HAL_InitTick>
  return HAL_OK;
 8002bc6:	2000      	movs	r0, #0
}
 8002bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_RCC_ClockConfig+0x12c>)
 8002bce:	6921      	ldr	r1, [r4, #16]
 8002bd0:	6893      	ldr	r3, [r2, #8]
 8002bd2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002bd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002bda:	6093      	str	r3, [r2, #8]
 8002bdc:	e7e3      	b.n	8002ba6 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b06      	ldr	r3, [pc, #24]	; (8002bf8 <HAL_RCC_ClockConfig+0x12c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	039e      	lsls	r6, r3, #14
 8002be4:	d4aa      	bmi.n	8002b3c <HAL_RCC_ClockConfig+0x70>
 8002be6:	e7cf      	b.n	8002b88 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8002be8:	2003      	movs	r0, #3
 8002bea:	e7ed      	b.n	8002bc8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	0198      	lsls	r0, r3, #6
 8002bee:	d4a5      	bmi.n	8002b3c <HAL_RCC_ClockConfig+0x70>
 8002bf0:	e7ca      	b.n	8002b88 <HAL_RCC_ClockConfig+0xbc>
 8002bf2:	bf00      	nop
 8002bf4:	40023c00 	.word	0x40023c00
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	080050bc 	.word	0x080050bc
 8002c00:	20000008 	.word	0x20000008
 8002c04:	20000000 	.word	0x20000000

08002c08 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8002c0a:	4a05      	ldr	r2, [pc, #20]	; (8002c20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002c0e:	4905      	ldr	r1, [pc, #20]	; (8002c24 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c10:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002c14:	6808      	ldr	r0, [r1, #0]
 8002c16:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c18:	40d8      	lsrs	r0, r3
 8002c1a:	4770      	bx	lr
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	080050cc 	.word	0x080050cc
 8002c24:	20000000 	.word	0x20000000

08002c28 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c28:	4b04      	ldr	r3, [pc, #16]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x14>)
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002c2e:	4905      	ldr	r1, [pc, #20]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c30:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002c34:	6808      	ldr	r0, [r1, #0]
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
}
 8002c38:	40d8      	lsrs	r0, r3
 8002c3a:	4770      	bx	lr
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	080050cc 	.word	0x080050cc
 8002c44:	20000000 	.word	0x20000000

08002c48 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4a:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c4c:	6800      	ldr	r0, [r0, #0]
 8002c4e:	f010 0f05 	tst.w	r0, #5
{
 8002c52:	b083      	sub	sp, #12
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c54:	d15c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c56:	f010 0002 	ands.w	r0, r0, #2
 8002c5a:	d101      	bne.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x18>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8002c5c:	b003      	add	sp, #12
 8002c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	4b45      	ldr	r3, [pc, #276]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    PWR->CR |= PWR_CR_DBP;
 8002c62:	4c46      	ldr	r4, [pc, #280]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c64:	2200      	movs	r2, #0
 8002c66:	9201      	str	r2, [sp, #4]
 8002c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c6a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c6e:	641a      	str	r2, [r3, #64]	; 0x40
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	9301      	str	r3, [sp, #4]
 8002c78:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002c82:	f7fe f873 	bl	8000d6c <HAL_GetTick>
 8002c86:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c88:	e004      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002c8a:	f7fe f86f 	bl	8000d6c <HAL_GetTick>
 8002c8e:	1b80      	subs	r0, r0, r6
 8002c90:	2802      	cmp	r0, #2
 8002c92:	d83a      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	05d9      	lsls	r1, r3, #23
 8002c98:	d5f7      	bpl.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x42>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c9a:	4937      	ldr	r1, [pc, #220]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c9c:	68eb      	ldr	r3, [r5, #12]
 8002c9e:	6f0a      	ldr	r2, [r1, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ca0:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8002ca4:	f403 7040 	and.w	r0, r3, #768	; 0x300
 8002ca8:	d010      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x84>
 8002caa:	4282      	cmp	r2, r0
 8002cac:	d00e      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x84>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cae:	6f0b      	ldr	r3, [r1, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cb0:	4a33      	ldr	r2, [pc, #204]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x138>)
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cb6:	2401      	movs	r4, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb8:	2000      	movs	r0, #0
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cba:	6014      	str	r4, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cbc:	6010      	str	r0, [r2, #0]
      RCC->BDCR = tmpreg1;
 8002cbe:	670b      	str	r3, [r1, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cc0:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002cc2:	07da      	lsls	r2, r3, #31
 8002cc4:	d413      	bmi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8002cc6:	68eb      	ldr	r3, [r5, #12]
 8002cc8:	f403 7040 	and.w	r0, r3, #768	; 0x300
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ccc:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8002cd0:	d047      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x11a>
 8002cd2:	4929      	ldr	r1, [pc, #164]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd4:	688a      	ldr	r2, [r1, #8]
 8002cd6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002cda:	608a      	str	r2, [r1, #8]
 8002cdc:	4a26      	ldr	r2, [pc, #152]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cde:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8002ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce4:	430b      	orrs	r3, r1
  return HAL_OK;
 8002ce6:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
}
 8002cea:	b003      	add	sp, #12
 8002cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	460c      	mov	r4, r1
        tickstart = HAL_GetTick();
 8002cf0:	f7fe f83c 	bl	8000d6c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002cf8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfa:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8002cfc:	079b      	lsls	r3, r3, #30
 8002cfe:	d4e2      	bmi.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d00:	f7fe f834 	bl	8000d6c <HAL_GetTick>
 8002d04:	1bc0      	subs	r0, r0, r7
 8002d06:	42b0      	cmp	r0, r6
 8002d08:	d9f7      	bls.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xb2>
        return HAL_TIMEOUT;
 8002d0a:	2003      	movs	r0, #3
}
 8002d0c:	b003      	add	sp, #12
 8002d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d12:	4c19      	ldr	r4, [pc, #100]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002d18:	f7fe f828 	bl	8000d6c <HAL_GetTick>
 8002d1c:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d1e:	e004      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xe2>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d20:	f7fe f824 	bl	8000d6c <HAL_GetTick>
 8002d24:	1b80      	subs	r0, r0, r6
 8002d26:	2802      	cmp	r0, #2
 8002d28:	d8ef      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	011f      	lsls	r7, r3, #4
 8002d2e:	d4f7      	bmi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d30:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    __HAL_RCC_PLLI2S_ENABLE();
 8002d34:	4a13      	ldr	r2, [pc, #76]	; (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d36:	4e10      	ldr	r6, [pc, #64]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d38:	071b      	lsls	r3, r3, #28
 8002d3a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 8002d3e:	2101      	movs	r1, #1
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d40:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002d44:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8002d46:	f7fe f811 	bl	8000d6c <HAL_GetTick>
 8002d4a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d4c:	e004      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x110>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d4e:	f7fe f80d 	bl	8000d6c <HAL_GetTick>
 8002d52:	1b00      	subs	r0, r0, r4
 8002d54:	2802      	cmp	r0, #2
 8002d56:	d8d8      	bhi.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d58:	6833      	ldr	r3, [r6, #0]
 8002d5a:	0118      	lsls	r0, r3, #4
 8002d5c:	d5f7      	bpl.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d5e:	6828      	ldr	r0, [r5, #0]
 8002d60:	e779      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xe>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d64:	6882      	ldr	r2, [r0, #8]
 8002d66:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002d6a:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002d6e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002d72:	430a      	orrs	r2, r1
 8002d74:	6082      	str	r2, [r0, #8]
 8002d76:	e7b1      	b.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x94>
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42470e40 	.word	0x42470e40
 8002d84:	42470068 	.word	0x42470068

08002d88 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002d88:	2801      	cmp	r0, #1
 8002d8a:	d109      	bne.n	8002da0 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002d8e:	6893      	ldr	r3, [r2, #8]
      switch (srcclk)
 8002d90:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8002d94:	d006      	beq.n	8002da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c>
 8002d96:	2b01      	cmp	r3, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002d98:	4810      	ldr	r0, [pc, #64]	; (8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
 8002d9a:	bf18      	it	ne
 8002d9c:	2000      	movne	r0, #0
 8002d9e:	4770      	bx	lr
 8002da0:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002da2:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002da4:	6853      	ldr	r3, [r2, #4]
 8002da6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002daa:	6853      	ldr	r3, [r2, #4]
 8002dac:	bf14      	ite	ne
 8002dae:	480c      	ldrne	r0, [pc, #48]	; (8002de0 <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002db0:	480c      	ldreq	r0, [pc, #48]	; (8002de4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>)
 8002db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db6:	fbb0 f0f3 	udiv	r0, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002dbc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002dc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002dc4:	f3c2 1288 	ubfx	r2, r2, #6, #9
 8002dc8:	fb00 f002 	mul.w	r0, r0, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002dcc:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002dd0:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	00bb8000 	.word	0x00bb8000
 8002de0:	007a1200 	.word	0x007a1200
 8002de4:	00f42400 	.word	0x00f42400

08002de8 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d03b      	beq.n	8002e64 <HAL_SPI_Init+0x7c>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dec:	f890 2051 	ldrb.w	r2, [r0, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002df0:	2300      	movs	r3, #0
{
 8002df2:	b570      	push	{r4, r5, r6, lr}
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002df4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8002df8:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dfa:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002dfc:	b362      	cbz	r2, 8002e58 <HAL_SPI_Init+0x70>
 8002dfe:	4618      	mov	r0, r3
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e00:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8002e04:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8002e08:	432b      	orrs	r3, r5
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	6962      	ldr	r2, [r4, #20]
 8002e0e:	69e5      	ldr	r5, [r4, #28]
 8002e10:	6a26      	ldr	r6, [r4, #32]
 8002e12:	430b      	orrs	r3, r1
 8002e14:	4313      	orrs	r3, r2
 8002e16:	69a2      	ldr	r2, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8002e18:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e1a:	432b      	orrs	r3, r5
  hspi->State = HAL_SPI_STATE_BUSY;
 8002e1c:	2502      	movs	r5, #2
 8002e1e:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e22:	4333      	orrs	r3, r6
 8002e24:	f402 7500 	and.w	r5, r2, #512	; 0x200
  __HAL_SPI_DISABLE(hspi);
 8002e28:	680e      	ldr	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e2a:	432b      	orrs	r3, r5
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e2c:	0c12      	lsrs	r2, r2, #16
 8002e2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8002e30:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e34:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e36:	432a      	orrs	r2, r5
  __HAL_SPI_DISABLE(hspi);
 8002e38:	f026 0640 	bic.w	r6, r6, #64	; 0x40
 8002e3c:	600e      	str	r6, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e3e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002e40:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e42:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e44:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 8002e4a:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e4c:	61cb      	str	r3, [r1, #28]

  return HAL_OK;
 8002e4e:	4610      	mov	r0, r2
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e50:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e52:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
}
 8002e56:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8002e58:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002e5c:	f7fd fe0c 	bl	8000a78 <HAL_SPI_MspInit>
 8002e60:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002e62:	e7cd      	b.n	8002e00 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002e64:	2001      	movs	r0, #1
}
 8002e66:	4770      	bx	lr

08002e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e6a:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e6c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8002e6e:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e70:	4d14      	ldr	r5, [pc, #80]	; (8002ec4 <TIM_OC1_SetConfig+0x5c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e72:	f024 0401 	bic.w	r4, r4, #1
 8002e76:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002e78:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002e7a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002e7c:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8002e7e:	f023 0302 	bic.w	r3, r3, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e82:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e86:	42a8      	cmp	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8002e88:	ea43 0307 	orr.w	r3, r3, r7
  tmpccmrx |= OC_Config->OCMode;
 8002e8c:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e90:	d00a      	beq.n	8002ea8 <TIM_OC1_SetConfig+0x40>
 8002e92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002e96:	42a8      	cmp	r0, r5
 8002e98:	d006      	beq.n	8002ea8 <TIM_OC1_SetConfig+0x40>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e9a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002e9c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002e9e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002ea0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR1 = OC_Config->Pulse;
 8002ea2:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8002ea4:	6203      	str	r3, [r0, #32]
}
 8002ea6:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8002ea8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002eaa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002eae:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eb0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002eb4:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eb8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002eba:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ebe:	432c      	orrs	r4, r5
 8002ec0:	e7eb      	b.n	8002e9a <TIM_OC1_SetConfig+0x32>
 8002ec2:	bf00      	nop
 8002ec4:	40010000 	.word	0x40010000

08002ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ec8:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002eca:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ecc:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= OC_Config->OCMode;
 8002ece:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ed0:	4d15      	ldr	r5, [pc, #84]	; (8002f28 <TIM_OC3_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ed2:	f424 7480 	bic.w	r4, r4, #256	; 0x100
 8002ed6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002ed8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002eda:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002edc:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8002ede:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ee2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ee6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ee8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8002eec:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ef0:	d00a      	beq.n	8002f08 <TIM_OC3_SetConfig+0x40>
 8002ef2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002ef6:	42a8      	cmp	r0, r5
 8002ef8:	d006      	beq.n	8002f08 <TIM_OC3_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002efa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002efc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002efe:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002f00:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR3 = OC_Config->Pulse;
 8002f02:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8002f04:	6203      	str	r3, [r0, #32]
}
 8002f06:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f08:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f12:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f16:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f1a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f20:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8002f24:	e7e9      	b.n	8002efa <TIM_OC3_SetConfig+0x32>
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000

08002f2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f2c:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f2e:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f30:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f32:	680e      	ldr	r6, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f34:	4d10      	ldr	r5, [pc, #64]	; (8002f78 <TIM_OC4_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f36:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002f3a:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 8002f3c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002f3e:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8002f40:	69c2      	ldr	r2, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8002f42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f46:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f4a:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f4c:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f50:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f54:	d00a      	beq.n	8002f6c <TIM_OC4_SetConfig+0x40>
 8002f56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002f5a:	42a8      	cmp	r0, r5
 8002f5c:	d006      	beq.n	8002f6c <TIM_OC4_SetConfig+0x40>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f5e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002f60:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002f62:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8002f64:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR4 = OC_Config->Pulse;
 8002f66:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8002f68:	6203      	str	r3, [r0, #32]
}
 8002f6a:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f6c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f6e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002f72:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002f76:	e7f2      	b.n	8002f5e <TIM_OC4_SetConfig+0x32>
 8002f78:	40010000 	.word	0x40010000

08002f7c <TIM_Base_SetConfig>:
{
 8002f7c:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f7e:	4e36      	ldr	r6, [pc, #216]	; (8003058 <TIM_Base_SetConfig+0xdc>)
  tmpcr1 = TIMx->CR1;
 8002f80:	6803      	ldr	r3, [r0, #0]
 8002f82:	694d      	ldr	r5, [r1, #20]
 8002f84:	688c      	ldr	r4, [r1, #8]
 8002f86:	680a      	ldr	r2, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f88:	42b0      	cmp	r0, r6
 8002f8a:	d055      	beq.n	8003038 <TIM_Base_SetConfig+0xbc>
 8002f8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f90:	d029      	beq.n	8002fe6 <TIM_Base_SetConfig+0x6a>
 8002f92:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8002f96:	42b0      	cmp	r0, r6
 8002f98:	d037      	beq.n	800300a <TIM_Base_SetConfig+0x8e>
 8002f9a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002f9e:	42b0      	cmp	r0, r6
 8002fa0:	d033      	beq.n	800300a <TIM_Base_SetConfig+0x8e>
 8002fa2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fa6:	42b0      	cmp	r0, r6
 8002fa8:	d02f      	beq.n	800300a <TIM_Base_SetConfig+0x8e>
 8002faa:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8002fae:	42b0      	cmp	r0, r6
 8002fb0:	d02b      	beq.n	800300a <TIM_Base_SetConfig+0x8e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002fb6:	42b0      	cmp	r0, r6
 8002fb8:	d013      	beq.n	8002fe2 <TIM_Base_SetConfig+0x66>
 8002fba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fbe:	42b0      	cmp	r0, r6
 8002fc0:	d00f      	beq.n	8002fe2 <TIM_Base_SetConfig+0x66>
 8002fc2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fc6:	42b0      	cmp	r0, r6
 8002fc8:	d00b      	beq.n	8002fe2 <TIM_Base_SetConfig+0x66>
 8002fca:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 8002fce:	42b0      	cmp	r0, r6
 8002fd0:	d007      	beq.n	8002fe2 <TIM_Base_SetConfig+0x66>
 8002fd2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fd6:	42b0      	cmp	r0, r6
 8002fd8:	d003      	beq.n	8002fe2 <TIM_Base_SetConfig+0x66>
 8002fda:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002fde:	42b0      	cmp	r0, r6
 8002fe0:	d109      	bne.n	8002ff6 <TIM_Base_SetConfig+0x7a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe2:	68c9      	ldr	r1, [r1, #12]
 8002fe4:	e004      	b.n	8002ff0 <TIM_Base_SetConfig+0x74>
    tmpcr1 |= Structure->CounterMode;
 8002fe6:	684e      	ldr	r6, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe8:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fee:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffa:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002ffc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ffe:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003000:	6282      	str	r2, [r0, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003002:	2301      	movs	r3, #1
 8003004:	6143      	str	r3, [r0, #20]
}
 8003006:	bcf0      	pop	{r4, r5, r6, r7}
 8003008:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800300a:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800300c:	4f13      	ldr	r7, [pc, #76]	; (800305c <TIM_Base_SetConfig+0xe0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800300e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003012:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003014:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800301a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800301c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003020:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003022:	42b8      	cmp	r0, r7
  TIMx->CR1 = tmpcr1;
 8003024:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003026:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003028:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800302a:	d1ea      	bne.n	8003002 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 800302c:	690b      	ldr	r3, [r1, #16]
 800302e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8003030:	2301      	movs	r3, #1
 8003032:	6143      	str	r3, [r0, #20]
}
 8003034:	bcf0      	pop	{r4, r5, r6, r7}
 8003036:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003038:	684f      	ldr	r7, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800303a:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003040:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8003042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003046:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800304e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003050:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003052:	6282      	str	r2, [r0, #40]	; 0x28
 8003054:	e7ea      	b.n	800302c <TIM_Base_SetConfig+0xb0>
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40010400 	.word	0x40010400

08003060 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8003060:	b1b8      	cbz	r0, 8003092 <HAL_TIM_PWM_Init+0x32>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003062:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8003066:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003068:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800306c:	4604      	mov	r4, r0
 800306e:	b15b      	cbz	r3, 8003088 <HAL_TIM_PWM_Init+0x28>
  htim->State = HAL_TIM_STATE_BUSY;
 8003070:	2302      	movs	r3, #2
 8003072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003076:	6820      	ldr	r0, [r4, #0]
 8003078:	1d21      	adds	r1, r4, #4
 800307a:	f7ff ff7f 	bl	8002f7c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800307e:	2301      	movs	r3, #1
 8003080:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003084:	2000      	movs	r0, #0
}
 8003086:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003088:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800308c:	f7fd fd28 	bl	8000ae0 <HAL_TIM_PWM_MspInit>
 8003090:	e7ee      	b.n	8003070 <HAL_TIM_PWM_Init+0x10>
    return HAL_ERROR;
 8003092:	2001      	movs	r0, #1
}
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop

08003098 <TIM_OC2_SetConfig>:
{
 8003098:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800309a:	6a04      	ldr	r4, [r0, #32]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800309c:	688f      	ldr	r7, [r1, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800309e:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030a0:	4d15      	ldr	r5, [pc, #84]	; (80030f8 <TIM_OC2_SetConfig+0x60>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030a2:	f024 0410 	bic.w	r4, r4, #16
 80030a6:	6204      	str	r4, [r0, #32]
  tmpccer = TIMx->CCER;
 80030a8:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80030aa:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80030ac:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80030ae:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030b2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030b6:	42a8      	cmp	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030b8:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030bc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030c0:	d00a      	beq.n	80030d8 <TIM_OC2_SetConfig+0x40>
 80030c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80030c6:	42a8      	cmp	r0, r5
 80030c8:	d006      	beq.n	80030d8 <TIM_OC2_SetConfig+0x40>
  TIMx->CCR2 = OC_Config->Pulse;
 80030ca:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80030cc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80030ce:	6182      	str	r2, [r0, #24]
}
 80030d0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 80030d2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80030d4:	6203      	str	r3, [r0, #32]
}
 80030d6:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030d8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80030da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030de:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030e2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030e6:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030ea:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80030ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030f0:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80030f4:	e7e9      	b.n	80030ca <TIM_OC2_SetConfig+0x32>
 80030f6:	bf00      	nop
 80030f8:	40010000 	.word	0x40010000

080030fc <HAL_TIM_PWM_ConfigChannel>:
{
 80030fc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80030fe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d074      	beq.n	80031f0 <HAL_TIM_PWM_ConfigChannel+0xf4>
 8003106:	460d      	mov	r5, r1
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800310a:	2101      	movs	r1, #1
 800310c:	4604      	mov	r4, r0
 800310e:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8003112:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 8003116:	2a0c      	cmp	r2, #12
 8003118:	d819      	bhi.n	800314e <HAL_TIM_PWM_ConfigChannel+0x52>
 800311a:	e8df f002 	tbb	[pc, r2]
 800311e:	1807      	.short	0x1807
 8003120:	18381818 	.word	0x18381818
 8003124:	18511818 	.word	0x18511818
 8003128:	1818      	.short	0x1818
 800312a:	1f          	.byte	0x1f
 800312b:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800312c:	4629      	mov	r1, r5
 800312e:	6800      	ldr	r0, [r0, #0]
 8003130:	f7ff fe9a 	bl	8002e68 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003134:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003136:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003138:	6999      	ldr	r1, [r3, #24]
 800313a:	f041 0108 	orr.w	r1, r1, #8
 800313e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003140:	6999      	ldr	r1, [r3, #24]
 8003142:	f021 0104 	bic.w	r1, r1, #4
 8003146:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003148:	699a      	ldr	r2, [r3, #24]
 800314a:	4302      	orrs	r2, r0
 800314c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800314e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003150:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003152:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003156:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800315a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800315c:	4629      	mov	r1, r5
 800315e:	6800      	ldr	r0, [r0, #0]
 8003160:	f7ff fee4 	bl	8002f2c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003164:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003166:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003168:	69d9      	ldr	r1, [r3, #28]
 800316a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800316e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003170:	69d9      	ldr	r1, [r3, #28]
 8003172:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003176:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003178:	69da      	ldr	r2, [r3, #28]
 800317a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800317e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8003180:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003182:	2301      	movs	r3, #1
 8003184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003188:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800318c:	e7e5      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800318e:	4629      	mov	r1, r5
 8003190:	6800      	ldr	r0, [r0, #0]
 8003192:	f7ff ff81 	bl	8003098 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003196:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003198:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800319a:	6999      	ldr	r1, [r3, #24]
 800319c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80031a0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031a2:	6999      	ldr	r1, [r3, #24]
 80031a4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80031a8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80031b0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80031b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031b4:	2301      	movs	r3, #1
 80031b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031ba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80031be:	e7cc      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x5e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031c0:	4629      	mov	r1, r5
 80031c2:	6800      	ldr	r0, [r0, #0]
 80031c4:	f7ff fe80 	bl	8002ec8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031c8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031ca:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031cc:	69d9      	ldr	r1, [r3, #28]
 80031ce:	f041 0108 	orr.w	r1, r1, #8
 80031d2:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031d4:	69d9      	ldr	r1, [r3, #28]
 80031d6:	f021 0104 	bic.w	r1, r1, #4
 80031da:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	4302      	orrs	r2, r0
 80031e0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80031e2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80031ea:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 80031ee:	e7b4      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x5e>
  __HAL_LOCK(htim);
 80031f0:	2002      	movs	r0, #2
}
 80031f2:	bd38      	pop	{r3, r4, r5, pc}

080031f4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d03a      	beq.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031fc:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80031fe:	2202      	movs	r2, #2
{
 8003200:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8003202:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003206:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003208:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320a:	4d1b      	ldr	r5, [pc, #108]	; (8003278 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 800320c:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800320e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003212:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003214:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8003216:	f04f 0601 	mov.w	r6, #1
 800321a:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 800321e:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003220:	d019      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003226:	d016      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800322e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003232:	4293      	cmp	r3, r2
 8003234:	d00f      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800323a:	4293      	cmp	r3, r2
 800323c:	d00b      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800323e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003242:	4293      	cmp	r3, r2
 8003244:	d007      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8003246:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 800324a:	4293      	cmp	r3, r2
 800324c:	d003      	beq.n	8003256 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800324e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003252:	4293      	cmp	r3, r2
 8003254:	d104      	bne.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003256:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003258:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800325c:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800325e:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003260:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003262:	2201      	movs	r2, #1
 8003264:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003268:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800326c:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800326e:	4618      	mov	r0, r3
}
 8003270:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003272:	2002      	movs	r0, #2
}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	40010000 	.word	0x40010000
 800327c:	40000400 	.word	0x40000400

08003280 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003280:	6802      	ldr	r2, [r0, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003282:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003284:	6911      	ldr	r1, [r2, #16]
{
 8003286:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003288:	68c5      	ldr	r5, [r0, #12]
 800328a:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
{
 800328e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003290:	4329      	orrs	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003292:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003294:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003296:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003298:	6965      	ldr	r5, [r4, #20]
 800329a:	4303      	orrs	r3, r0
 800329c:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800329e:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a2:	432b      	orrs	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 80032a4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80032a8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80032aa:	430b      	orrs	r3, r1
 80032ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032ae:	6953      	ldr	r3, [r2, #20]
 80032b0:	69a1      	ldr	r1, [r4, #24]
 80032b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b6:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032bc:	6153      	str	r3, [r2, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <UART_SetConfig+0xe8>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c0:	d023      	beq.n	800330a <UART_SetConfig+0x8a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d01e      	beq.n	8003304 <UART_SetConfig+0x84>
 80032c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d01a      	beq.n	8003304 <UART_SetConfig+0x84>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032ce:	f7ff fc9b 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032d2:	6863      	ldr	r3, [r4, #4]
 80032d4:	2219      	movs	r2, #25
 80032d6:	fba0 0102 	umull	r0, r1, r0, r2
 80032da:	009a      	lsls	r2, r3, #2
 80032dc:	0f9b      	lsrs	r3, r3, #30
 80032de:	f7fc ff73 	bl	80001c8 <__aeabi_uldivmod>
 80032e2:	4922      	ldr	r1, [pc, #136]	; (800336c <UART_SetConfig+0xec>)
 80032e4:	6824      	ldr	r4, [r4, #0]
 80032e6:	fba1 3200 	umull	r3, r2, r1, r0
 80032ea:	0952      	lsrs	r2, r2, #5
 80032ec:	2364      	movs	r3, #100	; 0x64
 80032ee:	fb03 0312 	mls	r3, r3, r2, r0
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	3332      	adds	r3, #50	; 0x32
 80032f6:	fba1 1303 	umull	r1, r3, r1, r3
 80032fa:	0112      	lsls	r2, r2, #4
 80032fc:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 8003300:	60a3      	str	r3, [r4, #8]
    }
  }
}
 8003302:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003304:	f7ff fc90 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 8003308:	e7e3      	b.n	80032d2 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800330a:	429a      	cmp	r2, r3
 800330c:	d028      	beq.n	8003360 <UART_SetConfig+0xe0>
 800330e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003312:	429a      	cmp	r2, r3
 8003314:	d024      	beq.n	8003360 <UART_SetConfig+0xe0>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003316:	f7ff fc77 	bl	8002c08 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800331a:	6862      	ldr	r2, [r4, #4]
 800331c:	4d13      	ldr	r5, [pc, #76]	; (800336c <UART_SetConfig+0xec>)
 800331e:	1892      	adds	r2, r2, r2
 8003320:	f04f 0119 	mov.w	r1, #25
 8003324:	f04f 0600 	mov.w	r6, #0
 8003328:	eb46 0306 	adc.w	r3, r6, r6
 800332c:	fba0 0101 	umull	r0, r1, r0, r1
 8003330:	f7fc ff4a 	bl	80001c8 <__aeabi_uldivmod>
 8003334:	fba5 3200 	umull	r3, r2, r5, r0
 8003338:	0951      	lsrs	r1, r2, #5
 800333a:	2364      	movs	r3, #100	; 0x64
 800333c:	fb03 0311 	mls	r3, r3, r1, r0
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	3332      	adds	r3, #50	; 0x32
 8003344:	fba5 2303 	umull	r2, r3, r5, r3
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	f003 0207 	and.w	r2, r3, #7
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	6824      	ldr	r4, [r4, #0]
 8003352:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003356:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800335a:	4413      	add	r3, r2
 800335c:	60a3      	str	r3, [r4, #8]
}
 800335e:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003360:	f7ff fc62 	bl	8002c28 <HAL_RCC_GetPCLK2Freq>
 8003364:	e7d9      	b.n	800331a <UART_SetConfig+0x9a>
 8003366:	bf00      	nop
 8003368:	40011000 	.word	0x40011000
 800336c:	51eb851f 	.word	0x51eb851f

08003370 <HAL_UART_Init>:
  if (huart == NULL)
 8003370:	b360      	cbz	r0, 80033cc <HAL_UART_Init+0x5c>
{
 8003372:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003374:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003378:	4604      	mov	r4, r0
 800337a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800337e:	b303      	cbz	r3, 80033c2 <HAL_UART_Init+0x52>
  __HAL_UART_DISABLE(huart);
 8003380:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003382:	2324      	movs	r3, #36	; 0x24
 8003384:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003388:	68d3      	ldr	r3, [r2, #12]
 800338a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800338e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003390:	4620      	mov	r0, r4
 8003392:	f7ff ff75 	bl	8003280 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800339e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033a6:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80033a8:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033aa:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80033ac:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80033ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033b2:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80033b4:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033b6:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80033b8:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80033bc:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80033c0:	bd38      	pop	{r3, r4, r5, pc}
    huart->Lock = HAL_UNLOCKED;
 80033c2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80033c6:	f7fd fbcd 	bl	8000b64 <HAL_UART_MspInit>
 80033ca:	e7d9      	b.n	8003380 <HAL_UART_Init+0x10>
    return HAL_ERROR;
 80033cc:	2001      	movs	r0, #1
}
 80033ce:	4770      	bx	lr

080033d0 <HAL_UART_TxCpltCallback>:
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop

080033d4 <HAL_UART_RxCpltCallback>:
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop

080033d8 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80033d8:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033da:	6884      	ldr	r4, [r0, #8]
 80033dc:	6901      	ldr	r1, [r0, #16]
 80033de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80033e0:	6802      	ldr	r2, [r0, #0]
 80033e2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80033e6:	d020      	beq.n	800342a <UART_Receive_IT.part.1+0x52>
 80033e8:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ea:	6852      	ldr	r2, [r2, #4]
 80033ec:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033ee:	b9c9      	cbnz	r1, 8003424 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033f0:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80033f2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80033fa:	b98b      	cbnz	r3, 8003420 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033fc:	6802      	ldr	r2, [r0, #0]
 80033fe:	68d1      	ldr	r1, [r2, #12]
 8003400:	f021 0120 	bic.w	r1, r1, #32
 8003404:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003406:	68d1      	ldr	r1, [r2, #12]
 8003408:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800340c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800340e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003410:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003412:	f021 0101 	bic.w	r1, r1, #1
 8003416:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003418:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800341c:	f7ff ffda 	bl	80033d4 <HAL_UART_RxCpltCallback>
}
 8003420:	2000      	movs	r0, #0
 8003422:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003424:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003428:	e7e2      	b.n	80033f0 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800342a:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800342c:	b929      	cbnz	r1, 800343a <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800342e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003432:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8003436:	6283      	str	r3, [r0, #40]	; 0x28
 8003438:	e7db      	b.n	80033f2 <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8003440:	6283      	str	r3, [r0, #40]	; 0x28
 8003442:	e7d6      	b.n	80033f2 <UART_Receive_IT.part.1+0x1a>

08003444 <HAL_UART_ErrorCallback>:
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop

08003448 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003448:	6803      	ldr	r3, [r0, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
{
 800344c:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 800344e:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003450:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003452:	6959      	ldr	r1, [r3, #20]
{
 8003454:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003456:	d047      	beq.n	80034e8 <HAL_UART_IRQHandler+0xa0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003458:	f011 0101 	ands.w	r1, r1, #1
 800345c:	461e      	mov	r6, r3
 800345e:	d04c      	beq.n	80034fa <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003460:	07d3      	lsls	r3, r2, #31
 8003462:	d505      	bpl.n	8003470 <HAL_UART_IRQHandler+0x28>
 8003464:	05e8      	lsls	r0, r5, #23
 8003466:	d503      	bpl.n	8003470 <HAL_UART_IRQHandler+0x28>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003468:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003470:	0753      	lsls	r3, r2, #29
 8003472:	d574      	bpl.n	800355e <HAL_UART_IRQHandler+0x116>
 8003474:	b129      	cbz	r1, 8003482 <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003476:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003478:	0790      	lsls	r0, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800347a:	f043 0302 	orr.w	r3, r3, #2
 800347e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003480:	d471      	bmi.n	8003566 <HAL_UART_IRQHandler+0x11e>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003482:	0710      	lsls	r0, r2, #28
 8003484:	d503      	bpl.n	800348e <HAL_UART_IRQHandler+0x46>
 8003486:	06ab      	lsls	r3, r5, #26
 8003488:	d472      	bmi.n	8003570 <HAL_UART_IRQHandler+0x128>
 800348a:	2900      	cmp	r1, #0
 800348c:	d170      	bne.n	8003570 <HAL_UART_IRQHandler+0x128>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800348e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003490:	2b00      	cmp	r3, #0
 8003492:	d031      	beq.n	80034f8 <HAL_UART_IRQHandler+0xb0>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003494:	0690      	lsls	r0, r2, #26
 8003496:	d501      	bpl.n	800349c <HAL_UART_IRQHandler+0x54>
 8003498:	06a9      	lsls	r1, r5, #26
 800349a:	d472      	bmi.n	8003582 <HAL_UART_IRQHandler+0x13a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800349c:	6975      	ldr	r5, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800349e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80034a0:	0712      	lsls	r2, r2, #28
 80034a2:	d402      	bmi.n	80034aa <HAL_UART_IRQHandler+0x62>
 80034a4:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80034a8:	d078      	beq.n	800359c <HAL_UART_IRQHandler+0x154>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034aa:	68f3      	ldr	r3, [r6, #12]
 80034ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034b0:	60f3      	str	r3, [r6, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b2:	6973      	ldr	r3, [r6, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80034b4:	2220      	movs	r2, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	6173      	str	r3, [r6, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80034bc:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c0:	6973      	ldr	r3, [r6, #20]
 80034c2:	065b      	lsls	r3, r3, #25
 80034c4:	d559      	bpl.n	800357a <HAL_UART_IRQHandler+0x132>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034c6:	6973      	ldr	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 80034c8:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ce:	6173      	str	r3, [r6, #20]
          if (huart->hdmarx != NULL)
 80034d0:	2800      	cmp	r0, #0
 80034d2:	d052      	beq.n	800357a <HAL_UART_IRQHandler+0x132>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034d4:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <HAL_UART_IRQHandler+0x178>)
 80034d6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034d8:	f7fd fec4 	bl	8001264 <HAL_DMA_Abort_IT>
 80034dc:	b160      	cbz	r0, 80034f8 <HAL_UART_IRQHandler+0xb0>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034de:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80034e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034e4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80034e6:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034e8:	0696      	lsls	r6, r2, #26
 80034ea:	d509      	bpl.n	8003500 <HAL_UART_IRQHandler+0xb8>
 80034ec:	06a9      	lsls	r1, r5, #26
 80034ee:	d507      	bpl.n	8003500 <HAL_UART_IRQHandler+0xb8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80034f0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80034f4:	2b22      	cmp	r3, #34	; 0x22
 80034f6:	d04d      	beq.n	8003594 <HAL_UART_IRQHandler+0x14c>
}
 80034f8:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034fa:	f415 7f90 	tst.w	r5, #288	; 0x120
 80034fe:	d1af      	bne.n	8003460 <HAL_UART_IRQHandler+0x18>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003500:	0616      	lsls	r6, r2, #24
 8003502:	d40e      	bmi.n	8003522 <HAL_UART_IRQHandler+0xda>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003504:	0651      	lsls	r1, r2, #25
 8003506:	d5f7      	bpl.n	80034f8 <HAL_UART_IRQHandler+0xb0>
 8003508:	066a      	lsls	r2, r5, #25
 800350a:	d5f5      	bpl.n	80034f8 <HAL_UART_IRQHandler+0xb0>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800350c:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800350e:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003514:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003516:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003518:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 800351c:	f7ff ff58 	bl	80033d0 <HAL_UART_TxCpltCallback>
}
 8003520:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003522:	0628      	lsls	r0, r5, #24
 8003524:	d5ee      	bpl.n	8003504 <HAL_UART_IRQHandler+0xbc>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003526:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800352a:	2a21      	cmp	r2, #33	; 0x21
 800352c:	d1e4      	bne.n	80034f8 <HAL_UART_IRQHandler+0xb0>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800352e:	68a1      	ldr	r1, [r4, #8]
 8003530:	6a22      	ldr	r2, [r4, #32]
 8003532:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003536:	d036      	beq.n	80035a6 <HAL_UART_IRQHandler+0x15e>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003538:	1c51      	adds	r1, r2, #1
 800353a:	6221      	str	r1, [r4, #32]
 800353c:	7812      	ldrb	r2, [r2, #0]
 800353e:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003540:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8003542:	3a01      	subs	r2, #1
 8003544:	b292      	uxth	r2, r2
 8003546:	84e2      	strh	r2, [r4, #38]	; 0x26
 8003548:	2a00      	cmp	r2, #0
 800354a:	d1d5      	bne.n	80034f8 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003552:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800355a:	60da      	str	r2, [r3, #12]
}
 800355c:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800355e:	0793      	lsls	r3, r2, #30
 8003560:	d58f      	bpl.n	8003482 <HAL_UART_IRQHandler+0x3a>
 8003562:	2900      	cmp	r1, #0
 8003564:	d08d      	beq.n	8003482 <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003566:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003568:	f043 0304 	orr.w	r3, r3, #4
 800356c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800356e:	e788      	b.n	8003482 <HAL_UART_IRQHandler+0x3a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003570:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003572:	f043 0308 	orr.w	r3, r3, #8
 8003576:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003578:	e789      	b.n	800348e <HAL_UART_IRQHandler+0x46>
            HAL_UART_ErrorCallback(huart);
 800357a:	4620      	mov	r0, r4
 800357c:	f7ff ff62 	bl	8003444 <HAL_UART_ErrorCallback>
}
 8003580:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003582:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 8003586:	2b22      	cmp	r3, #34	; 0x22
 8003588:	d188      	bne.n	800349c <HAL_UART_IRQHandler+0x54>
 800358a:	4620      	mov	r0, r4
 800358c:	f7ff ff24 	bl	80033d8 <UART_Receive_IT.part.1>
 8003590:	6826      	ldr	r6, [r4, #0]
 8003592:	e783      	b.n	800349c <HAL_UART_IRQHandler+0x54>
}
 8003594:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003598:	f7ff bf1e 	b.w	80033d8 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 800359c:	4620      	mov	r0, r4
 800359e:	f7ff ff51 	bl	8003444 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a2:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 80035a4:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035a6:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035a8:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035aa:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80035ae:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035b0:	b910      	cbnz	r0, 80035b8 <HAL_UART_IRQHandler+0x170>
        huart->pTxBuffPtr += 2U;
 80035b2:	3202      	adds	r2, #2
 80035b4:	6222      	str	r2, [r4, #32]
 80035b6:	e7c3      	b.n	8003540 <HAL_UART_IRQHandler+0xf8>
        huart->pTxBuffPtr += 1U;
 80035b8:	3201      	adds	r2, #1
 80035ba:	6222      	str	r2, [r4, #32]
 80035bc:	e7c0      	b.n	8003540 <HAL_UART_IRQHandler+0xf8>
 80035be:	bf00      	nop
 80035c0:	080035c5 	.word	0x080035c5

080035c4 <UART_DMAAbortOnError>:
{
 80035c4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80035c8:	2200      	movs	r2, #0
 80035ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 80035cc:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 80035ce:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80035d0:	f7ff ff38 	bl	8003444 <HAL_UART_ErrorCallback>
}
 80035d4:	bd08      	pop	{r3, pc}
 80035d6:	bf00      	nop

080035d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80035d8:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <USB_CoreReset+0x30>)
 80035da:	e001      	b.n	80035e0 <USB_CoreReset+0x8>
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80035dc:	3b01      	subs	r3, #1
 80035de:	d010      	beq.n	8003602 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035e0:	6902      	ldr	r2, [r0, #16]
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	dafa      	bge.n	80035dc <USB_CoreReset+0x4>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80035e6:	6903      	ldr	r3, [r0, #16]
 80035e8:	4a07      	ldr	r2, [pc, #28]	; (8003608 <USB_CoreReset+0x30>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6103      	str	r3, [r0, #16]
 80035f0:	e001      	b.n	80035f6 <USB_CoreReset+0x1e>

  do
  {
    if (++count > 200000U)
 80035f2:	3a01      	subs	r2, #1
 80035f4:	d005      	beq.n	8003602 <USB_CoreReset+0x2a>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80035f6:	6903      	ldr	r3, [r0, #16]
 80035f8:	f013 0301 	ands.w	r3, r3, #1
 80035fc:	d1f9      	bne.n	80035f2 <USB_CoreReset+0x1a>

  return HAL_OK;
 80035fe:	4618      	mov	r0, r3
}
 8003600:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003602:	2003      	movs	r0, #3
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	00030d40 	.word	0x00030d40

0800360c <USB_CoreInit>:
{
 800360c:	b084      	sub	sp, #16
 800360e:	b538      	push	{r3, r4, r5, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003610:	9d0a      	ldr	r5, [sp, #40]	; 0x28
{
 8003612:	ac05      	add	r4, sp, #20
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003614:	2d01      	cmp	r5, #1
{
 8003616:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800361a:	4601      	mov	r1, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800361c:	d122      	bne.n	8003664 <USB_CoreInit+0x58>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800361e:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8003620:	9a11      	ldr	r2, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003628:	68c3      	ldr	r3, [r0, #12]
 800362a:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800362e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003632:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003634:	68c3      	ldr	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8003636:	2a01      	cmp	r2, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003638:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800363c:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800363e:	d023      	beq.n	8003688 <USB_CoreInit+0x7c>
    ret = USB_CoreReset(USBx);
 8003640:	4608      	mov	r0, r1
 8003642:	f7ff ffc9 	bl	80035d8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8003646:	9b08      	ldr	r3, [sp, #32]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <USB_CoreInit+0x50>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800364c:	688b      	ldr	r3, [r1, #8]
 800364e:	f043 0306 	orr.w	r3, r3, #6
 8003652:	608b      	str	r3, [r1, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003654:	688b      	ldr	r3, [r1, #8]
 8003656:	f043 0320 	orr.w	r3, r3, #32
 800365a:	608b      	str	r3, [r1, #8]
}
 800365c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003660:	b004      	add	sp, #16
 8003662:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003664:	68c3      	ldr	r3, [r0, #12]
 8003666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800366a:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 800366c:	f7ff ffb4 	bl	80035d8 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8003670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003672:	b923      	cbnz	r3, 800367e <USB_CoreInit+0x72>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003674:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8003676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800367a:	638b      	str	r3, [r1, #56]	; 0x38
 800367c:	e7e3      	b.n	8003646 <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800367e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	638b      	str	r3, [r1, #56]	; 0x38
 8003686:	e7de      	b.n	8003646 <USB_CoreInit+0x3a>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003688:	68c3      	ldr	r3, [r0, #12]
 800368a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800368e:	60c3      	str	r3, [r0, #12]
 8003690:	e7d6      	b.n	8003640 <USB_CoreInit+0x34>
 8003692:	bf00      	nop

08003694 <USB_EnableGlobalInt>:
{
 8003694:	4602      	mov	r2, r0
}
 8003696:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003698:	6893      	ldr	r3, [r2, #8]
 800369a:	f043 0301 	orr.w	r3, r3, #1
 800369e:	6093      	str	r3, [r2, #8]
}
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop

080036a4 <USB_DisableGlobalInt>:
{
 80036a4:	4602      	mov	r2, r0
}
 80036a6:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80036a8:	6893      	ldr	r3, [r2, #8]
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	6093      	str	r3, [r2, #8]
}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop

080036b4 <USB_SetCurrentMode>:
{
 80036b4:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036b6:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80036b8:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80036ba:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80036be:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80036c0:	d00b      	beq.n	80036da <USB_SetCurrentMode+0x26>
  else if (mode == USB_DEVICE_MODE)
 80036c2:	b941      	cbnz	r1, 80036d6 <USB_SetCurrentMode+0x22>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80036c4:	68c3      	ldr	r3, [r0, #12]
 80036c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036ca:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80036cc:	2032      	movs	r0, #50	; 0x32
 80036ce:	f7fd fb53 	bl	8000d78 <HAL_Delay>
  return HAL_OK;
 80036d2:	2000      	movs	r0, #0
}
 80036d4:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 80036d6:	2001      	movs	r0, #1
}
 80036d8:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80036da:	68c3      	ldr	r3, [r0, #12]
 80036dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036e0:	60c3      	str	r3, [r0, #12]
 80036e2:	e7f3      	b.n	80036cc <USB_SetCurrentMode+0x18>

080036e4 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80036e4:	3203      	adds	r2, #3
  for (i = 0U; i < count32b; i++)
 80036e6:	0892      	lsrs	r2, r2, #2
 80036e8:	d00c      	beq.n	8003704 <USB_ReadPacket+0x20>
{
 80036ea:	b410      	push	{r4}
 80036ec:	f500 5480 	add.w	r4, r0, #4096	; 0x1000
 80036f0:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	f841 3b04 	str.w	r3, [r1], #4
  for (i = 0U; i < count32b; i++)
 80036fa:	4281      	cmp	r1, r0
 80036fc:	d1fa      	bne.n	80036f4 <USB_ReadPacket+0x10>
}
 80036fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003702:	4770      	bx	lr
  uint32_t *pDest = (uint32_t *)dest;
 8003704:	4608      	mov	r0, r1
}
 8003706:	4770      	bx	lr

08003708 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003708:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 800370a:	6980      	ldr	r0, [r0, #24]
}
 800370c:	4010      	ands	r0, r2
 800370e:	4770      	bx	lr

08003710 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8003710:	6940      	ldr	r0, [r0, #20]
}
 8003712:	f000 0001 	and.w	r0, r0, #1
 8003716:	4770      	bx	lr

08003718 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003718:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 800371c:	f023 0303 	bic.w	r3, r3, #3
 8003720:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003724:	f8d0 2400 	ldr.w	r2, [r0, #1024]	; 0x400
 8003728:	f001 0303 	and.w	r3, r1, #3
 800372c:	4313      	orrs	r3, r2

  if (freq == HCFG_48_MHZ)
 800372e:	2901      	cmp	r1, #1
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8003730:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8003734:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  if (freq == HCFG_48_MHZ)
 8003738:	d006      	beq.n	8003748 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 800373a:	2902      	cmp	r1, #2
  {
    USBx_HOST->HFIR = 6000U;
 800373c:	bf04      	itt	eq
 800373e:	f241 7370 	movweq	r3, #6000	; 0x1770
 8003742:	6043      	streq	r3, [r0, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8003744:	2000      	movs	r0, #0
 8003746:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 8003748:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800374c:	6043      	str	r3, [r0, #4]
}
 800374e:	2000      	movs	r0, #0
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop

08003754 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8003754:	b530      	push	{r4, r5, lr}
 8003756:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8003758:	2500      	movs	r5, #0
 800375a:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 800375c:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003760:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003762:	9b01      	ldr	r3, [sp, #4]
 8003764:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003768:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800376a:	9b01      	ldr	r3, [sp, #4]
 800376c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003770:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003772:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8003776:	2064      	movs	r0, #100	; 0x64
 8003778:	f7fd fafe 	bl	8000d78 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800377c:	9b01      	ldr	r3, [sp, #4]
 800377e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003782:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8003786:	200a      	movs	r0, #10
 8003788:	f7fd faf6 	bl	8000d78 <HAL_Delay>

  return HAL_OK;
}
 800378c:	4628      	mov	r0, r5
 800378e:	b003      	add	sp, #12
 8003790:	bd30      	pop	{r4, r5, pc}
 8003792:	bf00      	nop

08003794 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8003794:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800379a:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800379e:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80037a0:	9b01      	ldr	r3, [sp, #4]
 80037a2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80037a6:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80037a8:	9b01      	ldr	r3, [sp, #4]
 80037aa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80037ae:	9b01      	ldr	r3, [sp, #4]
  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80037b0:	d101      	bne.n	80037b6 <USB_DriveVbus+0x22>
 80037b2:	2901      	cmp	r1, #1
 80037b4:	d00a      	beq.n	80037cc <USB_DriveVbus+0x38>
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80037b6:	04db      	lsls	r3, r3, #19
 80037b8:	d505      	bpl.n	80037c6 <USB_DriveVbus+0x32>
 80037ba:	b921      	cbnz	r1, 80037c6 <USB_DriveVbus+0x32>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80037bc:	9b01      	ldr	r3, [sp, #4]
 80037be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c2:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 80037c6:	2000      	movs	r0, #0
 80037c8:	b002      	add	sp, #8
 80037ca:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80037cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80037d0:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80037d4:	9b01      	ldr	r3, [sp, #4]
}
 80037d6:	2000      	movs	r0, #0
 80037d8:	b002      	add	sp, #8
 80037da:	4770      	bx	lr

080037dc <USB_HostInit>:
{
 80037dc:	b084      	sub	sp, #16
 80037de:	b538      	push	{r3, r4, r5, lr}
 80037e0:	4604      	mov	r4, r0
  USBx_PCGCCTL = 0U;
 80037e2:	2000      	movs	r0, #0
 80037e4:	f8c4 0e00 	str.w	r0, [r4, #3584]	; 0xe00
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80037e8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80037ea:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
 80037ee:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80037f0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80037f2:	f420 2000 	bic.w	r0, r0, #524288	; 0x80000
 80037f6:	63a0      	str	r0, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037f8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
{
 80037fa:	ad05      	add	r5, sp, #20
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80037fc:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
{
 8003800:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003804:	63a0      	str	r0, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003806:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003808:	9906      	ldr	r1, [sp, #24]
 800380a:	05dd      	lsls	r5, r3, #23
 800380c:	d557      	bpl.n	80038be <USB_HostInit+0xe2>
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800380e:	9b07      	ldr	r3, [sp, #28]
 8003810:	2b03      	cmp	r3, #3
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8003812:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8003816:	d055      	beq.n	80038c4 <USB_HostInit+0xe8>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8003818:	f023 0304 	bic.w	r3, r3, #4
 800381c:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003820:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8003824:	6123      	str	r3, [r4, #16]
 8003826:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <USB_HostInit+0xf4>)
 8003828:	e001      	b.n	800382e <USB_HostInit+0x52>
    if (++count > 200000U)
 800382a:	3b01      	subs	r3, #1
 800382c:	d002      	beq.n	8003834 <USB_HostInit+0x58>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800382e:	6922      	ldr	r2, [r4, #16]
 8003830:	0690      	lsls	r0, r2, #26
 8003832:	d4fa      	bmi.n	800382a <USB_HostInit+0x4e>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003834:	2310      	movs	r3, #16
 8003836:	6123      	str	r3, [r4, #16]
 8003838:	4b25      	ldr	r3, [pc, #148]	; (80038d0 <USB_HostInit+0xf4>)
 800383a:	e001      	b.n	8003840 <USB_HostInit+0x64>
    if (++count > 200000U)
 800383c:	3b01      	subs	r3, #1
 800383e:	d002      	beq.n	8003846 <USB_HostInit+0x6a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003840:	6922      	ldr	r2, [r4, #16]
 8003842:	06d2      	lsls	r2, r2, #27
 8003844:	d4fa      	bmi.n	800383c <USB_HostInit+0x60>
  for (i = 0U; i < cfg.Host_channels; i++)
 8003846:	b161      	cbz	r1, 8003862 <USB_HostInit+0x86>
 8003848:	2200      	movs	r2, #0
    USBx_HC(i)->HCINTMSK = 0U;
 800384a:	4615      	mov	r5, r2
 800384c:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
  for (i = 0U; i < cfg.Host_channels; i++)
 8003854:	3201      	adds	r2, #1
 8003856:	428a      	cmp	r2, r1
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003858:	6098      	str	r0, [r3, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800385a:	60dd      	str	r5, [r3, #12]
 800385c:	f103 0320 	add.w	r3, r3, #32
  for (i = 0U; i < cfg.Host_channels; i++)
 8003860:	d1f8      	bne.n	8003854 <USB_HostInit+0x78>
  (void)USB_DriveVbus(USBx, 1U);
 8003862:	2101      	movs	r1, #1
 8003864:	4620      	mov	r0, r4
 8003866:	f7ff ff95 	bl	8003794 <USB_DriveVbus>
  HAL_Delay(200U);
 800386a:	20c8      	movs	r0, #200	; 0xc8
 800386c:	f7fd fa84 	bl	8000d78 <HAL_Delay>
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003870:	f04f 33ff 	mov.w	r3, #4294967295
  USBx->GINTMSK = 0U;
 8003874:	2200      	movs	r2, #0
 8003876:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003878:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800387a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800387c:	05db      	lsls	r3, r3, #23
 800387e:	d516      	bpl.n	80038ae <USB_HostInit+0xd2>
    USBx->GRXFSIZ  = 0x200U;
 8003880:	f44f 7100 	mov.w	r1, #512	; 0x200
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003884:	4a13      	ldr	r2, [pc, #76]	; (80038d4 <USB_HostInit+0xf8>)
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8003886:	4b14      	ldr	r3, [pc, #80]	; (80038d8 <USB_HostInit+0xfc>)
    USBx->GRXFSIZ  = 0x200U;
 8003888:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800388a:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800388c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8003890:	9b08      	ldr	r3, [sp, #32]
 8003892:	b91b      	cbnz	r3, 800389c <USB_HostInit+0xc0>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003894:	69a3      	ldr	r3, [r4, #24]
 8003896:	f043 0310 	orr.w	r3, r3, #16
 800389a:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800389c:	69a2      	ldr	r2, [r4, #24]
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <USB_HostInit+0x100>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61a3      	str	r3, [r4, #24]
}
 80038a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a8:	2000      	movs	r0, #0
 80038aa:	b004      	add	sp, #16
 80038ac:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 80038ae:	2180      	movs	r1, #128	; 0x80
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80038b0:	4a0b      	ldr	r2, [pc, #44]	; (80038e0 <USB_HostInit+0x104>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <USB_HostInit+0x108>)
    USBx->GRXFSIZ  = 0x80U;
 80038b4:	6261      	str	r1, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80038b6:	62a2      	str	r2, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80038b8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80038bc:	e7e8      	b.n	8003890 <USB_HostInit+0xb4>
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80038be:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80038c2:	e7a9      	b.n	8003818 <USB_HostInit+0x3c>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80038cc:	e7a8      	b.n	8003820 <USB_HostInit+0x44>
 80038ce:	bf00      	nop
 80038d0:	00030d40 	.word	0x00030d40
 80038d4:	01000200 	.word	0x01000200
 80038d8:	00e00300 	.word	0x00e00300
 80038dc:	a3200008 	.word	0xa3200008
 80038e0:	00600080 	.word	0x00600080
 80038e4:	004000e0 	.word	0x004000e0

080038e8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80038e8:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 80038ea:	2300      	movs	r3, #0
 80038ec:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 80038ee:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80038f2:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80038f4:	9801      	ldr	r0, [sp, #4]
}
 80038f6:	f3c0 4041 	ubfx	r0, r0, #17, #2
 80038fa:	b002      	add	sp, #8
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop

08003900 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003900:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003904:	6880      	ldr	r0, [r0, #8]
}
 8003906:	b280      	uxth	r0, r0
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop

0800390c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800390c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003910:	eb00 1541 	add.w	r5, r0, r1, lsl #5
 8003914:	f505 6ca0 	add.w	ip, r5, #1280	; 0x500
{
 8003918:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800391c:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8003920:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8003924:	f04f 3eff 	mov.w	lr, #4294967295
 8003928:	f001 010f 	and.w	r1, r1, #15
 800392c:	f04f 0801 	mov.w	r8, #1
 8003930:	f8cc e008 	str.w	lr, [ip, #8]
 8003934:	fa08 f101 	lsl.w	r1, r8, r1
 8003938:	fa4f fe82 	sxtb.w	lr, r2
 800393c:	f500 6980 	add.w	r9, r0, #1024	; 0x400

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8003940:	2c03      	cmp	r4, #3
 8003942:	d85d      	bhi.n	8003a00 <USB_HC_Init+0xf4>
 8003944:	e8df f004 	tbb	[pc, r4]
 8003948:	02493b49 	.word	0x02493b49
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800394c:	f240 689d 	movw	r8, #1693	; 0x69d
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8003950:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003954:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003958:	db64      	blt.n	8003a24 <USB_HC_Init+0x118>
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800395a:	f8d9 8018 	ldr.w	r8, [r9, #24]
 800395e:	ea48 0101 	orr.w	r1, r8, r1
 8003962:	f8c9 1018 	str.w	r1, [r9, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003966:	f8d0 c018 	ldr.w	ip, [r0, #24]
 800396a:	2100      	movs	r1, #0
 800396c:	f04c 7c00 	orr.w	ip, ip, #33554432	; 0x2000000
 8003970:	f8c0 c018 	str.w	ip, [r0, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8003974:	4608      	mov	r0, r1
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003976:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003978:	f3c7 070a 	ubfx	r7, r7, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800397c:	02d2      	lsls	r2, r2, #11
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800397e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003982:	433b      	orrs	r3, r7
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003984:	f402 47f0 	and.w	r7, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003988:	04a2      	lsls	r2, r4, #18
 800398a:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800398e:	433b      	orrs	r3, r7
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8003990:	2e02      	cmp	r6, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8003992:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003996:	ea43 0300 	orr.w	r3, r3, r0
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800399a:	bf14      	ite	ne
 800399c:	2200      	movne	r2, #0
 800399e:	f44f 3200 	moveq.w	r2, #131072	; 0x20000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80039a2:	4313      	orrs	r3, r2

  if (ep_type == EP_TYPE_INTR)
 80039a4:	2c03      	cmp	r4, #3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80039a6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 80039aa:	d105      	bne.n	80039b8 <USB_HC_Init+0xac>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80039ac:	f8d5 3500 	ldr.w	r3, [r5, #1280]	; 0x500
 80039b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039b4:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
  }

  return ret;
}
 80039b8:	4608      	mov	r0, r1
 80039ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80039be:	f240 2825 	movw	r8, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 80039c2:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80039c6:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 80039ca:	dac6      	bge.n	800395a <USB_HC_Init+0x4e>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80039cc:	f8dc e00c 	ldr.w	lr, [ip, #12]
 80039d0:	f44e 7ec0 	orr.w	lr, lr, #384	; 0x180
 80039d4:	f8cc e00c 	str.w	lr, [ip, #12]
 80039d8:	e02a      	b.n	8003a30 <USB_HC_Init+0x124>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80039da:	f240 489d 	movw	r8, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 80039de:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80039e2:	f8cc 800c 	str.w	r8, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 80039e6:	db1d      	blt.n	8003a24 <USB_HC_Init+0x118>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80039e8:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 80039ec:	f41e 7f80 	tst.w	lr, #256	; 0x100
 80039f0:	d0b3      	beq.n	800395a <USB_HC_Init+0x4e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80039f2:	f8dc e00c 	ldr.w	lr, [ip, #12]
 80039f6:	f04e 0e60 	orr.w	lr, lr, #96	; 0x60
 80039fa:	f8cc e00c 	str.w	lr, [ip, #12]
 80039fe:	e7ac      	b.n	800395a <USB_HC_Init+0x4e>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003a00:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8003a04:	ea48 0101 	orr.w	r1, r8, r1
 8003a08:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003a0c:	6981      	ldr	r1, [r0, #24]
      ret = HAL_ERROR;
 8003a0e:	f1be 0f00 	cmp.w	lr, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003a12:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003a16:	6181      	str	r1, [r0, #24]
      ret = HAL_ERROR;
 8003a18:	bfac      	ite	ge
 8003a1a:	2000      	movge	r0, #0
 8003a1c:	f44f 4000 	movlt.w	r0, #32768	; 0x8000
 8003a20:	2101      	movs	r1, #1
 8003a22:	e7a8      	b.n	8003976 <USB_HC_Init+0x6a>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003a24:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8003a28:	f44e 7e80 	orr.w	lr, lr, #256	; 0x100
 8003a2c:	f8cc e00c 	str.w	lr, [ip, #12]
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8003a30:	f8d9 8018 	ldr.w	r8, [r9, #24]
 8003a34:	ea41 0108 	orr.w	r1, r1, r8
 8003a38:	f8c9 1018 	str.w	r1, [r9, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8003a3c:	6981      	ldr	r1, [r0, #24]
 8003a3e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003a42:	6181      	str	r1, [r0, #24]
 8003a44:	2100      	movs	r1, #0
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8003a46:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003a4a:	e794      	b.n	8003976 <USB_HC_Init+0x6a>

08003a4c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8003a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003a50:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8003a52:	784f      	ldrb	r7, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8003a54:	05db      	lsls	r3, r3, #23
 8003a56:	eb00 1447 	add.w	r4, r0, r7, lsl #5
 8003a5a:	f504 6ca0 	add.w	ip, r4, #1280	; 0x500
 8003a5e:	d50d      	bpl.n	8003a7c <USB_HC_StartXfer+0x30>
 8003a60:	790b      	ldrb	r3, [r1, #4]
 8003a62:	b95b      	cbnz	r3, 8003a7c <USB_HC_StartXfer+0x30>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003a64:	2a00      	cmp	r2, #0
 8003a66:	f000 808b 	beq.w	8003b80 <USB_HC_StartXfer+0x134>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
      return HAL_OK;
    }
    else if (dma == 1U)
 8003a6a:	2a01      	cmp	r2, #1
 8003a6c:	d106      	bne.n	8003a7c <USB_HC_StartXfer+0x30>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8003a6e:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8003a72:	f025 0560 	bic.w	r5, r5, #96	; 0x60
 8003a76:	f8cc 500c 	str.w	r5, [ip, #12]
      hc->do_ping = 0U;
 8003a7a:	714b      	strb	r3, [r1, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8003a7c:	690b      	ldr	r3, [r1, #16]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d14a      	bne.n	8003b18 <USB_HC_StartXfer+0xcc>
 8003a82:	f44f 2e00 	mov.w	lr, #524288	; 0x80000
 8003a86:	2501      	movs	r5, #1
  }
  else
  {
    num_packets = 1U;
  }
  if (hc->ep_is_in != 0U)
 8003a88:	78ce      	ldrb	r6, [r1, #3]
 8003a8a:	2e00      	cmp	r6, #0
 8003a8c:	d153      	bne.n	8003b36 <USB_HC_StartXfer+0xea>
 8003a8e:	690d      	ldr	r5, [r1, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003a90:	7a8b      	ldrb	r3, [r1, #10]
 8003a92:	075b      	lsls	r3, r3, #29
 8003a94:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003a98:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003a9c:	f3c5 0e12 	ubfx	lr, r5, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003aa0:	ea43 030e 	orr.w	r3, r3, lr
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8003aa4:	f8cc 3010 	str.w	r3, [ip, #16]

  if (dma != 0U)
 8003aa8:	b112      	cbz	r2, 8003ab0 <USB_HC_StartXfer+0x64>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8003aaa:	68cb      	ldr	r3, [r1, #12]
 8003aac:	f8cc 3014 	str.w	r3, [ip, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003ab0:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8003ab4:	f8de 3008 	ldr.w	r3, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003ab8:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003abc:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8003bfc <USB_HC_StartXfer+0x1b0>
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003ac0:	f028 5800 	bic.w	r8, r8, #536870912	; 0x20000000
 8003ac4:	f8c4 8500 	str.w	r8, [r4, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	f8d4 8500 	ldr.w	r8, [r4, #1280]	; 0x500
 8003ace:	075b      	lsls	r3, r3, #29
 8003ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad4:	ea43 0308 	orr.w	r3, r3, r8
 8003ad8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003adc:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
 8003ae0:	f8cc 3000 	str.w	r3, [ip]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ae4:	f8dc 3000 	ldr.w	r3, [ip]
 8003ae8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003aec:	f8cc 3000 	str.w	r3, [ip]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003af0:	f8dc 3000 	ldr.w	r3, [ip]
  if (hc->ep_is_in != 0U)
 8003af4:	b326      	cbz	r6, 8003b40 <USB_HC_StartXfer+0xf4>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8003af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afa:	f8cc 3000 	str.w	r3, [ip]
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003afe:	f8dc 3000 	ldr.w	r3, [ip]
 8003b02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b06:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8003b0e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
    }
  }

  return HAL_OK;
}
 8003b12:	2000      	movs	r0, #0
 8003b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8003b18:	890d      	ldrh	r5, [r1, #8]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	442b      	add	r3, r5
 8003b1e:	fbb3 f3f5 	udiv	r3, r3, r5
    if (num_packets > max_hc_pkt_count)
 8003b22:	b29e      	uxth	r6, r3
 8003b24:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8003b28:	d823      	bhi.n	8003b72 <USB_HC_StartXfer+0x126>
 8003b2a:	4635      	mov	r5, r6
  if (hc->ep_is_in != 0U)
 8003b2c:	78ce      	ldrb	r6, [r1, #3]
 8003b2e:	ea4f 4ec3 	mov.w	lr, r3, lsl #19
 8003b32:	2e00      	cmp	r6, #0
 8003b34:	d0ab      	beq.n	8003a8e <USB_HC_StartXfer+0x42>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003b36:	890b      	ldrh	r3, [r1, #8]
 8003b38:	fb05 f503 	mul.w	r5, r5, r3
 8003b3c:	610d      	str	r5, [r1, #16]
 8003b3e:	e7a7      	b.n	8003a90 <USB_HC_StartXfer+0x44>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8003b40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b44:	f8cc 3000 	str.w	r3, [ip]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b48:	f8dc 3000 	ldr.w	r3, [ip]
 8003b4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b50:	f8cc 3000 	str.w	r3, [ip]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b54:	f8dc 3000 	ldr.w	r3, [ip]
 8003b58:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d1d8      	bne.n	8003b12 <USB_HC_StartXfer+0xc6>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8003b60:	2d00      	cmp	r5, #0
 8003b62:	d0d6      	beq.n	8003b12 <USB_HC_StartXfer+0xc6>
      switch (hc->ep_type)
 8003b64:	79cb      	ldrb	r3, [r1, #7]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d822      	bhi.n	8003bb0 <USB_HC_StartXfer+0x164>
 8003b6a:	e8df f003 	tbb	[pc, r3]
 8003b6e:	1934      	.short	0x1934
 8003b70:	1934      	.short	0x1934
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8003b72:	022d      	lsls	r5, r5, #8
 8003b74:	610d      	str	r5, [r1, #16]
 8003b76:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
 8003b7a:	f44f 7580 	mov.w	r5, #256	; 0x100
 8003b7e:	e783      	b.n	8003a88 <USB_HC_StartXfer+0x3c>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8003b80:	794b      	ldrb	r3, [r1, #5]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	f47f af7a 	bne.w	8003a7c <USB_HC_StartXfer+0x30>
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003b88:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <USB_HC_StartXfer+0x1ac>)
 8003b8a:	f8cc 3010 	str.w	r3, [ip, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b8e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b92:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b9a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
      return HAL_OK;
 8003b9e:	e7b8      	b.n	8003b12 <USB_HC_StartXfer+0xc6>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003ba0:	f8de 2010 	ldr.w	r2, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003ba4:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8003ba6:	b292      	uxth	r2, r2
 8003ba8:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d31e      	bcc.n	8003bee <USB_HC_StartXfer+0x1a2>
    count32b = ((uint32_t)len + 3U) / 4U;
 8003bb0:	b2ab      	uxth	r3, r5
 8003bb2:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8003bb4:	089b      	lsrs	r3, r3, #2
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003bb6:	68ca      	ldr	r2, [r1, #12]
    for (i = 0U; i < count32b; i++)
 8003bb8:	d0ab      	beq.n	8003b12 <USB_HC_StartXfer+0xc6>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003bba:	eb00 3007 	add.w	r0, r0, r7, lsl #12
 8003bbe:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8003bc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8003bc6:	f852 1b04 	ldr.w	r1, [r2], #4
 8003bca:	6001      	str	r1, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d1fa      	bne.n	8003bc6 <USB_HC_StartXfer+0x17a>
}
 8003bd0:	2000      	movs	r0, #0
 8003bd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003bd6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003bd8:	1ceb      	adds	r3, r5, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8003bda:	b292      	uxth	r2, r2
 8003bdc:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d2e5      	bcs.n	8003bb0 <USB_HC_StartXfer+0x164>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8003be4:	6983      	ldr	r3, [r0, #24]
 8003be6:	f043 0320 	orr.w	r3, r3, #32
 8003bea:	6183      	str	r3, [r0, #24]
 8003bec:	e7e0      	b.n	8003bb0 <USB_HC_StartXfer+0x164>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003bee:	6983      	ldr	r3, [r0, #24]
 8003bf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bf4:	6183      	str	r3, [r0, #24]
 8003bf6:	e7db      	b.n	8003bb0 <USB_HC_StartXfer+0x164>
 8003bf8:	80080000 	.word	0x80080000
 8003bfc:	200000b0 	.word	0x200000b0

08003c00 <USB_HC_ReadInterrupt>:
  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8003c00:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8003c04:	6940      	ldr	r0, [r0, #20]
}
 8003c06:	b280      	uxth	r0, r0
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop

08003c0c <USB_HC_Halt>:
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003c0c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
{
 8003c10:	b410      	push	{r4}
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003c12:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003c16:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003c1a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003c1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8003c22:	f501 64a0 	add.w	r4, r1, #1280	; 0x500
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003c26:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8003c2a:	d022      	beq.n	8003c72 <USB_HC_Halt+0x66>
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003c2c:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8003c30:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003c34:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8003c38:	d13d      	bne.n	8003cb6 <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003c3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c3e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003c42:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003c46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c4a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003c4e:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003c52:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c56:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c5e:	e001      	b.n	8003c64 <USB_HC_Halt+0x58>
        if (++count > 1000U)
 8003c60:	3b01      	subs	r3, #1
 8003c62:	d002      	beq.n	8003c6a <USB_HC_Halt+0x5e>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003c64:	6822      	ldr	r2, [r4, #0]
 8003c66:	2a00      	cmp	r2, #0
 8003c68:	dbfa      	blt.n	8003c60 <USB_HC_Halt+0x54>
}
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c70:	4770      	bx	lr
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003c72:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003c74:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003c78:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8003c7c:	d11b      	bne.n	8003cb6 <USB_HC_Halt+0xaa>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c82:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003c86:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003c8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c8e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8003c92:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003c96:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c9a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8003c9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ca2:	e001      	b.n	8003ca8 <USB_HC_Halt+0x9c>
        if (++count > 1000U)
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	d0e0      	beq.n	8003c6a <USB_HC_Halt+0x5e>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003ca8:	6822      	ldr	r2, [r4, #0]
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	dbfa      	blt.n	8003ca4 <USB_HC_Halt+0x98>
}
 8003cae:	2000      	movs	r0, #0
 8003cb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cb4:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003cb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
}
 8003cba:	2000      	movs	r0, #0
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003cbc:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 8003cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop

08003cc8 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cc8:	6882      	ldr	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cca:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <USB_StopHost+0x8c>)
 8003ccc:	f44f 6184 	mov.w	r1, #1056	; 0x420
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd4:	b410      	push	{r4}
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cd6:	6082      	str	r2, [r0, #8]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cd8:	6101      	str	r1, [r0, #16]
 8003cda:	e001      	b.n	8003ce0 <USB_StopHost+0x18>
    if (++count > 200000U)
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <USB_StopHost+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ce0:	6902      	ldr	r2, [r0, #16]
 8003ce2:	0691      	lsls	r1, r2, #26
 8003ce4:	d4fa      	bmi.n	8003cdc <USB_StopHost+0x14>
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ce6:	2310      	movs	r3, #16
 8003ce8:	6103      	str	r3, [r0, #16]
 8003cea:	4b1a      	ldr	r3, [pc, #104]	; (8003d54 <USB_StopHost+0x8c>)
 8003cec:	e001      	b.n	8003cf2 <USB_StopHost+0x2a>
    if (++count > 200000U)
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	d002      	beq.n	8003cf8 <USB_StopHost+0x30>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003cf2:	6902      	ldr	r2, [r0, #16]
 8003cf4:	06d2      	lsls	r2, r2, #27
 8003cf6:	d4fa      	bmi.n	8003cee <USB_StopHost+0x26>
 8003cf8:	f500 61a0 	add.w	r1, r0, #1280	; 0x500
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	f500 62e0 	add.w	r2, r0, #1792	; 0x700
  (void)USB_FlushRxFifo(USBx);

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003d02:	6823      	ldr	r3, [r4, #0]
 8003d04:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003d08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8003d0c:	f844 3b20 	str.w	r3, [r4], #32
  for (i = 0U; i <= 15U; i++)
 8003d10:	4294      	cmp	r4, r2
 8003d12:	d1f6      	bne.n	8003d02 <USB_StopHost+0x3a>
  uint32_t count = 0U;
 8003d14:	2300      	movs	r3, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8003d16:	680a      	ldr	r2, [r1, #0]
 8003d18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003d1c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8003d20:	600a      	str	r2, [r1, #0]
 8003d22:	e002      	b.n	8003d2a <USB_StopHost+0x62>
      if (++count > 1000U)
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8003d24:	680a      	ldr	r2, [r1, #0]
 8003d26:	2a00      	cmp	r2, #0
 8003d28:	da03      	bge.n	8003d32 <USB_StopHost+0x6a>
      if (++count > 1000U)
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d30:	d9f8      	bls.n	8003d24 <USB_StopHost+0x5c>
 8003d32:	3120      	adds	r1, #32
  for (i = 0U; i <= 15U; i++)
 8003d34:	42a1      	cmp	r1, r4
 8003d36:	d1ee      	bne.n	8003d16 <USB_StopHost+0x4e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8003d38:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3c:	f8c0 3414 	str.w	r3, [r0, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003d40:	6143      	str	r3, [r0, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d42:	6883      	ldr	r3, [r0, #8]
  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8003d44:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6083      	str	r3, [r0, #8]
}
 8003d4e:	2000      	movs	r0, #0
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	00030d40 	.word	0x00030d40

08003d58 <USBH_CDC_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
  return USBH_OK;
}
 8003d58:	2000      	movs	r0, #0
 8003d5a:	4770      	bx	lr

08003d5c <USBH_CDC_ClassRequest>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003d5c:	f8d0 2378 	ldr.w	r2, [r0, #888]	; 0x378
{
 8003d60:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003d62:	69d1      	ldr	r1, [r2, #28]
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8003d64:	f242 13a1 	movw	r3, #8609	; 0x21a1
 8003d68:	6103      	str	r3, [r0, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
  phost->Control.setup.b.wValue.w = 0U;
 8003d6a:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
  phost->Control.setup.b.wIndex.w = 0U;
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003d6e:	3140      	adds	r1, #64	; 0x40
  phost->Control.setup.b.wValue.w = 0U;
 8003d70:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003d72:	2207      	movs	r2, #7
{
 8003d74:	4604      	mov	r4, r0
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003d76:	f000 fe7f 	bl	8004a78 <USBH_CtlReq>
  if(status == USBH_OK)
 8003d7a:	4605      	mov	r5, r0
 8003d7c:	b920      	cbnz	r0, 8003d88 <USBH_CDC_ClassRequest+0x2c>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003d7e:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 8003d82:	4620      	mov	r0, r4
 8003d84:	2102      	movs	r1, #2
 8003d86:	4798      	blx	r3
}
 8003d88:	4628      	mov	r0, r5
 8003d8a:	bd38      	pop	{r3, r4, r5, pc}

08003d8c <USBH_CDC_InterfaceDeInit>:
{
 8003d8c:	b538      	push	{r3, r4, r5, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003d8e:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8003d92:	69dc      	ldr	r4, [r3, #28]
  if ( CDC_Handle->CommItf.NotifPipe)
 8003d94:	7821      	ldrb	r1, [r4, #0]
{
 8003d96:	4605      	mov	r5, r0
  if ( CDC_Handle->CommItf.NotifPipe)
 8003d98:	b979      	cbnz	r1, 8003dba <USBH_CDC_InterfaceDeInit+0x2e>
  if ( CDC_Handle->DataItf.InPipe)
 8003d9a:	7b21      	ldrb	r1, [r4, #12]
 8003d9c:	b9c1      	cbnz	r1, 8003dd0 <USBH_CDC_InterfaceDeInit+0x44>
  if ( CDC_Handle->DataItf.OutPipe)
 8003d9e:	7b61      	ldrb	r1, [r4, #13]
 8003da0:	bb11      	cbnz	r1, 8003de8 <USBH_CDC_InterfaceDeInit+0x5c>
  if(phost->pActiveClass->pData)
 8003da2:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003da6:	69d8      	ldr	r0, [r3, #28]
 8003da8:	b128      	cbz	r0, 8003db6 <USBH_CDC_InterfaceDeInit+0x2a>
    USBH_free (phost->pActiveClass->pData);
 8003daa:	f001 f8b9 	bl	8004f20 <free>
    phost->pActiveClass->pData = 0U;
 8003dae:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 8003db2:	2200      	movs	r2, #0
 8003db4:	61da      	str	r2, [r3, #28]
}
 8003db6:	2000      	movs	r0, #0
 8003db8:	bd38      	pop	{r3, r4, r5, pc}
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003dba:	f000 fedf 	bl	8004b7c <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8003dbe:	7821      	ldrb	r1, [r4, #0]
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	f000 fef9 	bl	8004bb8 <USBH_FreePipe>
  if ( CDC_Handle->DataItf.InPipe)
 8003dc6:	7b21      	ldrb	r1, [r4, #12]
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8003dc8:	2300      	movs	r3, #0
 8003dca:	7023      	strb	r3, [r4, #0]
  if ( CDC_Handle->DataItf.InPipe)
 8003dcc:	2900      	cmp	r1, #0
 8003dce:	d0e6      	beq.n	8003d9e <USBH_CDC_InterfaceDeInit+0x12>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8003dd0:	4628      	mov	r0, r5
 8003dd2:	f000 fed3 	bl	8004b7c <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8003dd6:	7b21      	ldrb	r1, [r4, #12]
 8003dd8:	4628      	mov	r0, r5
 8003dda:	f000 feed 	bl	8004bb8 <USBH_FreePipe>
  if ( CDC_Handle->DataItf.OutPipe)
 8003dde:	7b61      	ldrb	r1, [r4, #13]
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8003de0:	2300      	movs	r3, #0
 8003de2:	7323      	strb	r3, [r4, #12]
  if ( CDC_Handle->DataItf.OutPipe)
 8003de4:	2900      	cmp	r1, #0
 8003de6:	d0dc      	beq.n	8003da2 <USBH_CDC_InterfaceDeInit+0x16>
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003de8:	4628      	mov	r0, r5
 8003dea:	f000 fec7 	bl	8004b7c <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8003dee:	7b61      	ldrb	r1, [r4, #13]
 8003df0:	4628      	mov	r0, r5
 8003df2:	f000 fee1 	bl	8004bb8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8003df6:	2300      	movs	r3, #0
 8003df8:	7363      	strb	r3, [r4, #13]
 8003dfa:	e7d2      	b.n	8003da2 <USBH_CDC_InterfaceDeInit+0x16>

08003dfc <USBH_CDC_InterfaceInit>:
{
 8003dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
  interface = USBH_FindInterface(phost,
 8003dfe:	2202      	movs	r2, #2
{
 8003e00:	b085      	sub	sp, #20
  interface = USBH_FindInterface(phost,
 8003e02:	4611      	mov	r1, r2
 8003e04:	2301      	movs	r3, #1
{
 8003e06:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost,
 8003e08:	f000 f9b2 	bl	8004170 <USBH_FindInterface>
  if(interface == 0xFFU) /* No Valid Interface */
 8003e0c:	28ff      	cmp	r0, #255	; 0xff
 8003e0e:	f000 8089 	beq.w	8003f24 <USBH_CDC_InterfaceInit+0x128>
    USBH_SelectInterface (phost, interface);
 8003e12:	4601      	mov	r1, r0
 8003e14:	4606      	mov	r6, r0
 8003e16:	4628      	mov	r0, r5
 8003e18:	f000 f9a0 	bl	800415c <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003e1c:	2050      	movs	r0, #80	; 0x50
 8003e1e:	f8d5 7378 	ldr.w	r7, [r5, #888]	; 0x378
 8003e22:	f001 f875 	bl	8004f10 <malloc>
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003e26:	231a      	movs	r3, #26
 8003e28:	fb03 5606 	mla	r6, r3, r6, r5
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003e2c:	61f8      	str	r0, [r7, #28]
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003e2e:	f896 134a 	ldrb.w	r1, [r6, #842]	; 0x34a
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 8003e32:	4604      	mov	r4, r0
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003e34:	0608      	lsls	r0, r1, #24
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003e36:	bf4a      	itet	mi
 8003e38:	f8b6 334c 	ldrhmi.w	r3, [r6, #844]	; 0x34c
 8003e3c:	7861      	ldrbpl	r1, [r4, #1]
 8003e3e:	8163      	strhmi	r3, [r4, #10]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8003e40:	4628      	mov	r0, r5
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003e42:	bf48      	it	mi
 8003e44:	7061      	strbmi	r1, [r4, #1]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8003e46:	f000 fe9f 	bl	8004b88 <USBH_AllocPipe>
    USBH_OpenPipe  (phost,
 8003e4a:	f895 131d 	ldrb.w	r1, [r5, #797]	; 0x31d
 8003e4e:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003e52:	7862      	ldrb	r2, [r4, #1]
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8003e54:	4606      	mov	r6, r0
    USBH_OpenPipe  (phost,
 8003e56:	8960      	ldrh	r0, [r4, #10]
 8003e58:	9002      	str	r0, [sp, #8]
 8003e5a:	2003      	movs	r0, #3
 8003e5c:	e9cd 1000 	strd	r1, r0, [sp]
 8003e60:	4631      	mov	r1, r6
 8003e62:	4628      	mov	r0, r5
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8003e64:	7026      	strb	r6, [r4, #0]
    USBH_OpenPipe  (phost,
 8003e66:	f000 fe79 	bl	8004b5c <USBH_OpenPipe>
    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	7821      	ldrb	r1, [r4, #0]
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f001 f806 	bl	8004e80 <USBH_LL_SetToggle>
    interface = USBH_FindInterface(phost,
 8003e74:	2300      	movs	r3, #0
 8003e76:	461a      	mov	r2, r3
 8003e78:	210a      	movs	r1, #10
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f000 f978 	bl	8004170 <USBH_FindInterface>
    if(interface == 0xFFU) /* No Valid Interface */
 8003e80:	28ff      	cmp	r0, #255	; 0xff
 8003e82:	d04f      	beq.n	8003f24 <USBH_CDC_InterfaceInit+0x128>
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8003e84:	231a      	movs	r3, #26
 8003e86:	fb03 5300 	mla	r3, r3, r0, r5
 8003e8a:	f893 234a 	ldrb.w	r2, [r3, #842]	; 0x34a
 8003e8e:	f8b3 334c 	ldrh.w	r3, [r3, #844]	; 0x34c
 8003e92:	0611      	lsls	r1, r2, #24
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003e94:	bf4c      	ite	mi
 8003e96:	8363      	strhmi	r3, [r4, #26]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003e98:	8323      	strhpl	r3, [r4, #24]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003e9a:	f04f 031a 	mov.w	r3, #26
 8003e9e:	fb03 5000 	mla	r0, r3, r0, r5
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003ea2:	bf48      	it	mi
 8003ea4:	73e2      	strbmi	r2, [r4, #15]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003ea6:	f890 1352 	ldrb.w	r1, [r0, #850]	; 0x352
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003eaa:	bf58      	it	pl
 8003eac:	73a2      	strbpl	r2, [r4, #14]
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8003eae:	060a      	lsls	r2, r1, #24
 8003eb0:	f8b0 3354 	ldrh.w	r3, [r0, #852]	; 0x354
 8003eb4:	d439      	bmi.n	8003f2a <USBH_CDC_InterfaceInit+0x12e>
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003eb6:	73a1      	strb	r1, [r4, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003eb8:	8323      	strh	r3, [r4, #24]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f000 fe64 	bl	8004b88 <USBH_AllocPipe>
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003ec0:	7be1      	ldrb	r1, [r4, #15]
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003ec2:	7360      	strb	r0, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003ec4:	4628      	mov	r0, r5
 8003ec6:	f000 fe5f 	bl	8004b88 <USBH_AllocPipe>
      USBH_OpenPipe  (phost,
 8003eca:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 8003ece:	f895 731d 	ldrb.w	r7, [r5, #797]	; 0x31d
 8003ed2:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003ed6:	7ba2      	ldrb	r2, [r4, #14]
 8003ed8:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003eda:	7320      	strb	r0, [r4, #12]
      USBH_OpenPipe  (phost,
 8003edc:	2602      	movs	r6, #2
 8003ede:	e9cd 6c01 	strd	r6, ip, [sp, #4]
 8003ee2:	9700      	str	r7, [sp, #0]
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f000 fe39 	bl	8004b5c <USBH_OpenPipe>
      USBH_OpenPipe  (phost,
 8003eea:	8b67      	ldrh	r7, [r4, #26]
 8003eec:	f895 031d 	ldrb.w	r0, [r5, #797]	; 0x31d
 8003ef0:	f895 331c 	ldrb.w	r3, [r5, #796]	; 0x31c
 8003ef4:	7be2      	ldrb	r2, [r4, #15]
 8003ef6:	7b21      	ldrb	r1, [r4, #12]
 8003ef8:	9000      	str	r0, [sp, #0]
 8003efa:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8003efe:	4628      	mov	r0, r5
      CDC_Handle->state = CDC_IDLE_STATE;
 8003f00:	2600      	movs	r6, #0
      USBH_OpenPipe  (phost,
 8003f02:	f000 fe2b 	bl	8004b5c <USBH_OpenPipe>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003f06:	4632      	mov	r2, r6
 8003f08:	7b61      	ldrb	r1, [r4, #13]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003f0a:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f000 ffb6 	bl	8004e80 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8003f14:	4632      	mov	r2, r6
 8003f16:	7b21      	ldrb	r1, [r4, #12]
 8003f18:	4628      	mov	r0, r5
 8003f1a:	f000 ffb1 	bl	8004e80 <USBH_LL_SetToggle>
      status = USBH_OK;
 8003f1e:	4630      	mov	r0, r6
}
 8003f20:	b005      	add	sp, #20
 8003f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  USBH_StatusTypeDef status = USBH_FAIL ;
 8003f24:	2002      	movs	r0, #2
}
 8003f26:	b005      	add	sp, #20
 8003f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003f2a:	73e1      	strb	r1, [r4, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003f2c:	8363      	strh	r3, [r4, #26]
 8003f2e:	7ba1      	ldrb	r1, [r4, #14]
 8003f30:	e7c3      	b.n	8003eba <USBH_CDC_InterfaceInit+0xbe>
 8003f32:	bf00      	nop

08003f34 <USBH_CDC_TransmitCallback>:
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop

08003f38 <USBH_CDC_ReceiveCallback>:
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop

08003f3c <USBH_CDC_LineCodingChanged>:
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{

}
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop

08003f40 <USBH_CDC_Process>:
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003f40:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
{
 8003f44:	b570      	push	{r4, r5, r6, lr}
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8003f46:	69dc      	ldr	r4, [r3, #28]
  switch(CDC_Handle->state)
 8003f48:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
{
 8003f4c:	b082      	sub	sp, #8
 8003f4e:	4605      	mov	r5, r0
  switch(CDC_Handle->state)
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d807      	bhi.n	8003f64 <USBH_CDC_Process+0x24>
 8003f54:	e8df f003 	tbb	[pc, r3]
 8003f58:	4a291509 	.word	0x4a291509
 8003f5c:	0c          	.byte	0x0c
 8003f5d:	00          	.byte	0x00
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8003f64:	2001      	movs	r0, #1
}
 8003f66:	b002      	add	sp, #8
 8003f68:	bd70      	pop	{r4, r5, r6, pc}
    status = USBH_OK;
 8003f6a:	2000      	movs	r0, #0
}
 8003f6c:	b002      	add	sp, #8
 8003f6e:	bd70      	pop	{r4, r5, r6, pc}
    req_status = USBH_ClrFeature(phost, 0x00U);
 8003f70:	2100      	movs	r1, #0
 8003f72:	f000 fd67 	bl	8004a44 <USBH_ClrFeature>
    if(req_status == USBH_OK )
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d1f4      	bne.n	8003f64 <USBH_CDC_Process+0x24>
      CDC_Handle->state = CDC_IDLE_STATE ;
 8003f7a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8003f7e:	2001      	movs	r0, #1
 8003f80:	e7f1      	b.n	8003f66 <USBH_CDC_Process+0x26>
  phost->Control.setup.b.wValue.w = 0U;
 8003f82:	f242 0221 	movw	r2, #8225	; 0x2021
 8003f86:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8003f8a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  phost->Control.setup.b.wValue.w = 0U;
 8003f8c:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003f90:	2207      	movs	r2, #7
 8003f92:	f000 fd71 	bl	8004a78 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d0e1      	beq.n	8003f5e <USBH_CDC_Process+0x1e>
      if(req_status != USBH_BUSY)
 8003f9a:	2801      	cmp	r0, #1
 8003f9c:	d0e2      	beq.n	8003f64 <USBH_CDC_Process+0x24>
        CDC_Handle->state = CDC_ERROR_STATE;
 8003f9e:	2304      	movs	r3, #4
  USBH_StatusTypeDef status = USBH_BUSY;
 8003fa0:	2001      	movs	r0, #1
        CDC_Handle->state = CDC_ERROR_STATE;
 8003fa2:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
}
 8003fa6:	b002      	add	sp, #8
 8003fa8:	bd70      	pop	{r4, r5, r6, pc}
  phost->Control.setup.b.wValue.w = 0U;
 8003faa:	f242 12a1 	movw	r2, #8609	; 0x21a1
 8003fae:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8003fb2:	e9c0 2304 	strd	r2, r3, [r0, #16]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8003fb6:	f104 0140 	add.w	r1, r4, #64	; 0x40
 8003fba:	2207      	movs	r2, #7
 8003fbc:	f000 fd5c 	bl	8004a78 <USBH_CtlReq>
    if(req_status == USBH_OK)
 8003fc0:	2800      	cmp	r0, #0
 8003fc2:	d1ea      	bne.n	8003f9a <USBH_CDC_Process+0x5a>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003fc4:	e9d4 2111 	ldrd	r2, r1, [r4, #68]	; 0x44
 8003fc8:	684b      	ldr	r3, [r1, #4]
      CDC_Handle->state = CDC_IDLE_STATE;
 8003fca:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003fce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003fd2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d1c4      	bne.n	8003f64 <USBH_CDC_Process+0x24>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003fda:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003fdc:	680b      	ldr	r3, [r1, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d1c0      	bne.n	8003f64 <USBH_CDC_Process+0x24>
        USBH_CDC_LineCodingChanged(phost);
 8003fe2:	4628      	mov	r0, r5
 8003fe4:	f7ff ffaa 	bl	8003f3c <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003fe8:	2001      	movs	r0, #1
 8003fea:	e7bc      	b.n	8003f66 <USBH_CDC_Process+0x26>
  switch (CDC_Handle->data_tx_state)
 8003fec:	f894 004d 	ldrb.w	r0, [r4, #77]	; 0x4d
 8003ff0:	2801      	cmp	r0, #1
 8003ff2:	d02f      	beq.n	8004054 <USBH_CDC_Process+0x114>
 8003ff4:	2802      	cmp	r0, #2
 8003ff6:	d10e      	bne.n	8004016 <USBH_CDC_Process+0xd6>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8003ff8:	7b61      	ldrb	r1, [r4, #13]
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f000 ff2a 	bl	8004e54 <USBH_LL_GetURBState>
    if (URB_Status == USBH_URB_DONE)
 8004000:	2801      	cmp	r0, #1
 8004002:	d044      	beq.n	800408e <USBH_CDC_Process+0x14e>
 8004004:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
      if (URB_Status == USBH_URB_NOTREADY)
 8004008:	2802      	cmp	r0, #2
 800400a:	69db      	ldr	r3, [r3, #28]
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800400c:	bf04      	itt	eq
 800400e:	2201      	moveq	r2, #1
 8004010:	f884 204d 	strbeq.w	r2, [r4, #77]	; 0x4d
      if (URB_Status == USBH_URB_NOTREADY)
 8004014:	461c      	mov	r4, r3
  switch(CDC_Handle->data_rx_state)
 8004016:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 800401a:	2b03      	cmp	r3, #3
 800401c:	d02c      	beq.n	8004078 <USBH_CDC_Process+0x138>
 800401e:	2b04      	cmp	r3, #4
 8004020:	d1a0      	bne.n	8003f64 <USBH_CDC_Process+0x24>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8004022:	7b21      	ldrb	r1, [r4, #12]
 8004024:	4628      	mov	r0, r5
 8004026:	f000 ff15 	bl	8004e54 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 800402a:	2801      	cmp	r0, #1
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800402c:	4606      	mov	r6, r0
    if(URB_Status == USBH_URB_DONE)
 800402e:	d199      	bne.n	8003f64 <USBH_CDC_Process+0x24>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8004030:	7b21      	ldrb	r1, [r4, #12]
 8004032:	4628      	mov	r0, r5
 8004034:	f000 feca 	bl	8004dcc <USBH_LL_GetLastXferSize>
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8004038:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800403a:	4298      	cmp	r0, r3
 800403c:	d002      	beq.n	8004044 <USBH_CDC_Process+0x104>
 800403e:	8b62      	ldrh	r2, [r4, #26]
 8004040:	4290      	cmp	r0, r2
 8004042:	d840      	bhi.n	80040c6 <USBH_CDC_Process+0x186>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8004044:	2300      	movs	r3, #0
        USBH_CDC_ReceiveCallback(phost);
 8004046:	4628      	mov	r0, r5
        CDC_Handle->data_rx_state = CDC_IDLE;
 8004048:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800404c:	f7ff ff74 	bl	8003f38 <USBH_CDC_ReceiveCallback>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004050:	2001      	movs	r0, #1
 8004052:	e788      	b.n	8003f66 <USBH_CDC_Process+0x26>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8004054:	8b22      	ldrh	r2, [r4, #24]
 8004056:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004058:	7b63      	ldrb	r3, [r4, #13]
 800405a:	69e1      	ldr	r1, [r4, #28]
      USBH_BulkSendData (phost,
 800405c:	9000      	str	r0, [sp, #0]
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800405e:	4296      	cmp	r6, r2
      USBH_BulkSendData (phost,
 8004060:	bf98      	it	ls
 8004062:	b2b2      	uxthls	r2, r6
 8004064:	4628      	mov	r0, r5
 8004066:	f000 fd53 	bl	8004b10 <USBH_BulkSendData>
 800406a:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800406e:	2202      	movs	r2, #2
 8004070:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
 8004074:	69dc      	ldr	r4, [r3, #28]
 8004076:	e7ce      	b.n	8004016 <USBH_CDC_Process+0xd6>
    USBH_BulkReceiveData (phost,
 8004078:	7b23      	ldrb	r3, [r4, #12]
 800407a:	8b62      	ldrh	r2, [r4, #26]
 800407c:	6a21      	ldr	r1, [r4, #32]
 800407e:	4628      	mov	r0, r5
 8004080:	f000 fd5c 	bl	8004b3c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8004084:	2304      	movs	r3, #4
 8004086:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
  USBH_StatusTypeDef status = USBH_BUSY;
 800408a:	2001      	movs	r0, #1
 800408c:	e76b      	b.n	8003f66 <USBH_CDC_Process+0x26>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800408e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004090:	8b22      	ldrh	r2, [r4, #24]
 8004092:	4293      	cmp	r3, r2
 8004094:	d90b      	bls.n	80040ae <USBH_CDC_Process+0x16e>
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8004096:	69e1      	ldr	r1, [r4, #28]
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8004098:	1a9b      	subs	r3, r3, r2
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800409a:	440a      	add	r2, r1
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800409c:	6263      	str	r3, [r4, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800409e:	61e2      	str	r2, [r4, #28]
      if (CDC_Handle->TxDataLength > 0U)
 80040a0:	b13b      	cbz	r3, 80040b2 <USBH_CDC_Process+0x172>
 80040a2:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80040a6:	f884 004d 	strb.w	r0, [r4, #77]	; 0x4d
 80040aa:	69dc      	ldr	r4, [r3, #28]
 80040ac:	e7b3      	b.n	8004016 <USBH_CDC_Process+0xd6>
        CDC_Handle->TxDataLength = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	6263      	str	r3, [r4, #36]	; 0x24
        CDC_Handle->data_tx_state = CDC_IDLE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 80040b8:	4628      	mov	r0, r5
 80040ba:	f7ff ff3b 	bl	8003f34 <USBH_CDC_TransmitCallback>
 80040be:	f8d5 3378 	ldr.w	r3, [r5, #888]	; 0x378
 80040c2:	69dc      	ldr	r4, [r3, #28]
 80040c4:	e7a7      	b.n	8004016 <USBH_CDC_Process+0xd6>
        CDC_Handle->pRxData += length;
 80040c6:	6a22      	ldr	r2, [r4, #32]
        CDC_Handle->RxDataLength -= length ;
 80040c8:	1a1b      	subs	r3, r3, r0
        CDC_Handle->pRxData += length;
 80040ca:	4402      	add	r2, r0
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80040cc:	2103      	movs	r1, #3
        CDC_Handle->RxDataLength -= length ;
 80040ce:	62a3      	str	r3, [r4, #40]	; 0x28
  USBH_StatusTypeDef status = USBH_BUSY;
 80040d0:	4630      	mov	r0, r6
        CDC_Handle->pRxData += length;
 80040d2:	6222      	str	r2, [r4, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80040d4:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
 80040d8:	e745      	b.n	8003f66 <USBH_CDC_Process+0x26>
 80040da:	bf00      	nop

080040dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 80040dc:	b370      	cbz	r0, 800413c <USBH_Init+0x60>
{
 80040de:	b538      	push	{r3, r4, r5, lr}

  /* Set DRiver ID */
  phost->id = id;

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80040e0:	2300      	movs	r3, #0
  phost->id = id;
 80040e2:	f880 23c0 	strb.w	r2, [r0, #960]	; 0x3c0
  phost->pActiveClass = NULL;
 80040e6:	f8c0 3378 	str.w	r3, [r0, #888]	; 0x378
  phost->ClassNumber = 0U;
 80040ea:	f8c0 337c 	str.w	r3, [r0, #892]	; 0x37c
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 80040ee:	461a      	mov	r2, r3
 80040f0:	f500 746e 	add.w	r4, r0, #952	; 0x3b8
 80040f4:	f500 735f 	add.w	r3, r0, #892	; 0x37c
 80040f8:	f843 2f04 	str.w	r2, [r3, #4]!
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d1fb      	bne.n	80040f8 <USBH_Init+0x1c>
 8004100:	f200 131b 	addw	r3, r0, #283	; 0x11b
 8004104:	f200 341b 	addw	r4, r0, #795	; 0x31b
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8004108:	2200      	movs	r2, #0
 800410a:	f803 2f01 	strb.w	r2, [r3, #1]!
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800410e:	429c      	cmp	r4, r3
 8004110:	d1fb      	bne.n	800410a <USBH_Init+0x2e>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8004112:	2301      	movs	r3, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004114:	2540      	movs	r5, #64	; 0x40
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004116:	f44f 7480 	mov.w	r4, #256	; 0x100
  phost->gState = HOST_IDLE;
 800411a:	7002      	strb	r2, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 800411c:	7042      	strb	r2, [r0, #1]
  phost->Timer = 0U;
 800411e:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  phost->Control.errorcount = 0U;
 8004122:	7642      	strb	r2, [r0, #25]
  phost->RequestState = CMD_SEND;
 8004124:	7083      	strb	r3, [r0, #2]
  phost->Control.state = CTRL_SETUP;
 8004126:	7603      	strb	r3, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004128:	7185      	strb	r5, [r0, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 800412a:	f8a0 431c 	strh.w	r4, [r0, #796]	; 0x31c
  if(pUsrFunc != NULL)
 800412e:	b109      	cbz	r1, 8004134 <USBH_Init+0x58>
    phost->pUser = pUsrFunc;
 8004130:	f8c0 13c8 	str.w	r1, [r0, #968]	; 0x3c8
  USBH_LL_Init(phost);
 8004134:	f000 fde8 	bl	8004d08 <USBH_LL_Init>
  return USBH_OK;
 8004138:	2000      	movs	r0, #0
}
 800413a:	bd38      	pop	{r3, r4, r5, pc}
    return USBH_FAIL;
 800413c:	2002      	movs	r0, #2
}
 800413e:	4770      	bx	lr

08004140 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(pclass != 0)
 8004140:	b149      	cbz	r1, 8004156 <USBH_RegisterClass+0x16>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8004142:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8004146:	b933      	cbnz	r3, 8004156 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8004148:	2201      	movs	r2, #1
 800414a:	f8c0 1374 	str.w	r1, [r0, #884]	; 0x374
 800414e:	f8c0 237c 	str.w	r2, [r0, #892]	; 0x37c
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
  }

  return status;
}
 8004152:	4618      	mov	r0, r3
 8004154:	4770      	bx	lr
    status = USBH_FAIL;
 8004156:	2302      	movs	r3, #2
}
 8004158:	4618      	mov	r0, r3
 800415a:	4770      	bx	lr

0800415c <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef   status = USBH_OK;

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800415c:	f890 3338 	ldrb.w	r3, [r0, #824]	; 0x338
 8004160:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8004162:	bf86      	itte	hi
 8004164:	f880 1320 	strbhi.w	r1, [r0, #800]	; 0x320
  USBH_StatusTypeDef   status = USBH_OK;
 8004168:	2000      	movhi	r0, #0
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800416a:	2002      	movls	r0, #2
  }
  return status;
}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop

08004170 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8004170:	b470      	push	{r4, r5, r6}
 8004172:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8004174:	f890 6343 	ldrb.w	r6, [r0, #835]	; 0x343
 8004178:	428e      	cmp	r6, r1
 800417a:	b2e5      	uxtb	r5, r4
 800417c:	d007      	beq.n	800418e <USBH_FindInterface+0x1e>
 800417e:	29ff      	cmp	r1, #255	; 0xff
 8004180:	d005      	beq.n	800418e <USBH_FindInterface+0x1e>
 8004182:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004184:	b194      	cbz	r4, 80041ac <USBH_FindInterface+0x3c>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 8004186:	25ff      	movs	r5, #255	; 0xff
}
 8004188:	4628      	mov	r0, r5
 800418a:	bc70      	pop	{r4, r5, r6}
 800418c:	4770      	bx	lr
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800418e:	f890 6344 	ldrb.w	r6, [r0, #836]	; 0x344
 8004192:	4296      	cmp	r6, r2
 8004194:	d001      	beq.n	800419a <USBH_FindInterface+0x2a>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8004196:	2aff      	cmp	r2, #255	; 0xff
 8004198:	d1f3      	bne.n	8004182 <USBH_FindInterface+0x12>
 800419a:	f890 6345 	ldrb.w	r6, [r0, #837]	; 0x345
 800419e:	429e      	cmp	r6, r3
 80041a0:	d0f2      	beq.n	8004188 <USBH_FindInterface+0x18>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80041a2:	2bff      	cmp	r3, #255	; 0xff
 80041a4:	d0f0      	beq.n	8004188 <USBH_FindInterface+0x18>
 80041a6:	301a      	adds	r0, #26
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80041a8:	2c00      	cmp	r4, #0
 80041aa:	d1ec      	bne.n	8004186 <USBH_FindInterface+0x16>
 80041ac:	2401      	movs	r4, #1
 80041ae:	e7e1      	b.n	8004174 <USBH_FindInterface+0x4>

080041b0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80041b0:	b510      	push	{r4, lr}
 80041b2:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80041b4:	f000 fdd2 	bl	8004d5c <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80041b8:	4620      	mov	r0, r4
 80041ba:	2101      	movs	r1, #1
 80041bc:	f000 fe4e 	bl	8004e5c <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 80041c0:	2000      	movs	r0, #0
 80041c2:	bd10      	pop	{r4, pc}

080041c4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80041c4:	b570      	push	{r4, r5, r6, lr}
 80041c6:	b086      	sub	sp, #24
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
  return(phost->device.PortEnabled);
 80041c8:	f890 331f 	ldrb.w	r3, [r0, #799]	; 0x31f
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80041cc:	2202      	movs	r2, #2
{
 80041ce:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80041d0:	f88d 2017 	strb.w	r2, [sp, #23]
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80041d4:	bb4b      	cbnz	r3, 800422a <USBH_Process+0x66>
 80041d6:	7803      	ldrb	r3, [r0, #0]
 80041d8:	b123      	cbz	r3, 80041e4 <USBH_Process+0x20>
    if(phost->gState != HOST_DEV_DISCONNECTED)
 80041da:	7803      	ldrb	r3, [r0, #0]
 80041dc:	2b03      	cmp	r3, #3
 80041de:	d001      	beq.n	80041e4 <USBH_Process+0x20>
      phost->gState = HOST_DEV_DISCONNECTED;
 80041e0:	2303      	movs	r3, #3
 80041e2:	7003      	strb	r3, [r0, #0]
  switch (phost->gState)
 80041e4:	7823      	ldrb	r3, [r4, #0]
 80041e6:	2b0b      	cmp	r3, #11
 80041e8:	d81c      	bhi.n	8004224 <USBH_Process+0x60>
 80041ea:	e8df f013 	tbh	[pc, r3, lsl #1]
 80041ee:	003d      	.short	0x003d
 80041f0:	0052001b 	.word	0x0052001b
 80041f4:	001b0082 	.word	0x001b0082
 80041f8:	00c500ad 	.word	0x00c500ad
 80041fc:	00e200d7 	.word	0x00e200d7
 8004200:	00f500ed 	.word	0x00f500ed
 8004204:	004a      	.short	0x004a
    if (phost->device.DevDesc.iSerialNumber != 0U)
 8004206:	f894 1332 	ldrb.w	r1, [r4, #818]	; 0x332
 800420a:	2900      	cmp	r1, #0
 800420c:	f040 8178 	bne.w	8004500 <USBH_Process+0x33c>
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8004210:	f894 3333 	ldrb.w	r3, [r4, #819]	; 0x333
      phost->device.current_interface = 0U;
 8004214:	2200      	movs	r2, #0
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8004216:	2b01      	cmp	r3, #1
      phost->device.current_interface = 0U;
 8004218:	f884 2320 	strb.w	r2, [r4, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800421c:	f000 80c6 	beq.w	80043ac <USBH_Process+0x1e8>
        phost->gState  = HOST_INPUT;
 8004220:	2307      	movs	r3, #7
 8004222:	7023      	strb	r3, [r4, #0]
}
 8004224:	2000      	movs	r0, #0
 8004226:	b006      	add	sp, #24
 8004228:	bd70      	pop	{r4, r5, r6, pc}
  switch (phost->gState)
 800422a:	7802      	ldrb	r2, [r0, #0]
 800422c:	2a0b      	cmp	r2, #11
 800422e:	d8f9      	bhi.n	8004224 <USBH_Process+0x60>
 8004230:	a101      	add	r1, pc, #4	; (adr r1, 8004238 <USBH_Process+0x74>)
 8004232:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004236:	bf00      	nop
 8004238:	08004269 	.word	0x08004269
 800423c:	08004415 	.word	0x08004415
 8004240:	08004293 	.word	0x08004293
 8004244:	080042f3 	.word	0x080042f3
 8004248:	08004225 	.word	0x08004225
 800424c:	08004349 	.word	0x08004349
 8004250:	08004379 	.word	0x08004379
 8004254:	0800439d 	.word	0x0800439d
 8004258:	080043b3 	.word	0x080043b3
 800425c:	080043c9 	.word	0x080043c9
 8004260:	080043d9 	.word	0x080043d9
 8004264:	08004283 	.word	0x08004283
    if (phost->device.is_connected)
 8004268:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 800426c:	2b00      	cmp	r3, #0
 800426e:	d0d9      	beq.n	8004224 <USBH_Process+0x60>
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8004270:	2301      	movs	r3, #1
 8004272:	7023      	strb	r3, [r4, #0]
      USBH_Delay(200U);
 8004274:	20c8      	movs	r0, #200	; 0xc8
 8004276:	f000 fe15 	bl	8004ea4 <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800427a:	4620      	mov	r0, r4
 800427c:	f000 fd98 	bl	8004db0 <USBH_LL_ResetPort>
 8004280:	e7d0      	b.n	8004224 <USBH_Process+0x60>
    if(phost->pActiveClass != NULL)
 8004282:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0cc      	beq.n	8004224 <USBH_Process+0x60>
      phost->pActiveClass->BgndProcess(phost);
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	4620      	mov	r0, r4
 800428e:	4798      	blx	r3
 8004290:	e7c8      	b.n	8004224 <USBH_Process+0x60>
    USBH_Delay(100U);
 8004292:	2064      	movs	r0, #100	; 0x64
 8004294:	f000 fe06 	bl	8004ea4 <USBH_Delay>
    phost->device.speed = USBH_LL_GetSpeed(phost);
 8004298:	4620      	mov	r0, r4
 800429a:	f000 fd7b 	bl	8004d94 <USBH_LL_GetSpeed>
    phost->gState = HOST_ENUMERATION;
 800429e:	2305      	movs	r3, #5
 80042a0:	7023      	strb	r3, [r4, #0]
    phost->device.speed = USBH_LL_GetSpeed(phost);
 80042a2:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80042a6:	2100      	movs	r1, #0
 80042a8:	4620      	mov	r0, r4
 80042aa:	f000 fc6d 	bl	8004b88 <USBH_AllocPipe>
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80042ae:	2180      	movs	r1, #128	; 0x80
    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80042b0:	7160      	strb	r0, [r4, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80042b2:	4620      	mov	r0, r4
 80042b4:	f000 fc68 	bl	8004b88 <USBH_AllocPipe>
 80042b8:	4601      	mov	r1, r0
    USBH_OpenPipe (phost,
 80042ba:	79a0      	ldrb	r0, [r4, #6]
 80042bc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80042c0:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80042c4:	7121      	strb	r1, [r4, #4]
    USBH_OpenPipe (phost,
 80042c6:	2500      	movs	r5, #0
 80042c8:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80042cc:	9200      	str	r2, [sp, #0]
      USBH_OpenPipe (phost,
 80042ce:	2280      	movs	r2, #128	; 0x80
 80042d0:	4620      	mov	r0, r4
 80042d2:	f000 fc43 	bl	8004b5c <USBH_OpenPipe>
      USBH_OpenPipe (phost,
 80042d6:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 80042da:	79a6      	ldrb	r6, [r4, #6]
 80042dc:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 80042e0:	7961      	ldrb	r1, [r4, #5]
 80042e2:	9000      	str	r0, [sp, #0]
 80042e4:	9501      	str	r5, [sp, #4]
 80042e6:	462a      	mov	r2, r5
 80042e8:	9602      	str	r6, [sp, #8]
 80042ea:	4620      	mov	r0, r4
 80042ec:	f000 fc36 	bl	8004b5c <USBH_OpenPipe>
 80042f0:	e798      	b.n	8004224 <USBH_Process+0x60>
 80042f2:	f504 735f 	add.w	r3, r4, #892	; 0x37c
 80042f6:	f504 716e 	add.w	r1, r4, #952	; 0x3b8
    phost->Pipes[i] = 0U;
 80042fa:	2200      	movs	r2, #0
 80042fc:	f843 2f04 	str.w	r2, [r3, #4]!
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8004300:	428b      	cmp	r3, r1
 8004302:	d1fb      	bne.n	80042fc <USBH_Process+0x138>
 8004304:	f204 131b 	addw	r3, r4, #283	; 0x11b
 8004308:	f204 321b 	addw	r2, r4, #795	; 0x31b
    phost->device.Data[i] = 0U;
 800430c:	2500      	movs	r5, #0
 800430e:	f803 5f01 	strb.w	r5, [r3, #1]!
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8004312:	429a      	cmp	r2, r3
 8004314:	d1fb      	bne.n	800430e <USBH_Process+0x14a>
    if(phost->pActiveClass != NULL)
 8004316:	f8d4 2378 	ldr.w	r2, [r4, #888]	; 0x378
  phost->gState = HOST_IDLE;
 800431a:	7025      	strb	r5, [r4, #0]
  phost->RequestState = CMD_SEND;
 800431c:	2301      	movs	r3, #1
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800431e:	2040      	movs	r0, #64	; 0x40
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004320:	f44f 7180 	mov.w	r1, #256	; 0x100
  phost->EnumState = ENUM_IDLE;
 8004324:	7065      	strb	r5, [r4, #1]
  phost->Timer = 0U;
 8004326:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
  phost->Control.errorcount = 0U;
 800432a:	7665      	strb	r5, [r4, #25]
  phost->RequestState = CMD_SEND;
 800432c:	70a3      	strb	r3, [r4, #2]
  phost->Control.state = CTRL_SETUP;
 800432e:	7623      	strb	r3, [r4, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8004330:	71a0      	strb	r0, [r4, #6]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8004332:	f8a4 131c 	strh.w	r1, [r4, #796]	; 0x31c
    if(phost->pActiveClass != NULL)
 8004336:	2a00      	cmp	r2, #0
 8004338:	f43f af74 	beq.w	8004224 <USBH_Process+0x60>
      phost->pActiveClass->DeInit(phost);
 800433c:	68d3      	ldr	r3, [r2, #12]
 800433e:	4620      	mov	r0, r4
 8004340:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8004342:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
 8004346:	e76d      	b.n	8004224 <USBH_Process+0x60>
  switch (phost->EnumState)
 8004348:	7863      	ldrb	r3, [r4, #1]
 800434a:	2b07      	cmp	r3, #7
 800434c:	f63f af6a 	bhi.w	8004224 <USBH_Process+0x60>
 8004350:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <USBH_Process+0x194>)
 8004352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004356:	bf00      	nop
 8004358:	08004467 	.word	0x08004467
 800435c:	0800442f 	.word	0x0800442f
 8004360:	080044a7 	.word	0x080044a7
 8004364:	08004493 	.word	0x08004493
 8004368:	08004451 	.word	0x08004451
 800436c:	08004443 	.word	0x08004443
 8004370:	08004421 	.word	0x08004421
 8004374:	08004207 	.word	0x08004207
    if(phost->pActiveClass != NULL)
 8004378:	f8d4 3378 	ldr.w	r3, [r4, #888]	; 0x378
 800437c:	2b00      	cmp	r3, #0
 800437e:	f000 80b2 	beq.w	80044e6 <USBH_Process+0x322>
      status = phost->pActiveClass->Requests(phost);
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	4620      	mov	r0, r4
 8004386:	4798      	blx	r3
 8004388:	f88d 0017 	strb.w	r0, [sp, #23]
      if(status == USBH_OK)
 800438c:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f47f af47 	bne.w	8004224 <USBH_Process+0x60>
        phost->gState  = HOST_CLASS;
 8004396:	230b      	movs	r3, #11
 8004398:	7023      	strb	r3, [r4, #0]
 800439a:	e743      	b.n	8004224 <USBH_Process+0x60>
      if(phost->pUser != NULL)
 800439c:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f43f af3f 	beq.w	8004224 <USBH_Process+0x60>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80043a6:	2101      	movs	r1, #1
 80043a8:	4620      	mov	r0, r4
 80043aa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80043ac:	2308      	movs	r3, #8
 80043ae:	7023      	strb	r3, [r4, #0]
 80043b0:	e738      	b.n	8004224 <USBH_Process+0x60>
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80043b2:	f894 1339 	ldrb.w	r1, [r4, #825]	; 0x339
 80043b6:	4620      	mov	r0, r4
 80043b8:	f000 fb10 	bl	80049dc <USBH_SetCfg>
 80043bc:	2800      	cmp	r0, #0
 80043be:	f47f af31 	bne.w	8004224 <USBH_Process+0x60>
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 80043c2:	2309      	movs	r3, #9
 80043c4:	7023      	strb	r3, [r4, #0]
 80043c6:	e72d      	b.n	8004224 <USBH_Process+0x60>
    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80043c8:	f894 333b 	ldrb.w	r3, [r4, #827]	; 0x33b
 80043cc:	069b      	lsls	r3, r3, #26
 80043ce:	f100 8082 	bmi.w	80044d6 <USBH_Process+0x312>
      phost->gState  = HOST_CHECK_CLASS;
 80043d2:	230a      	movs	r3, #10
 80043d4:	7023      	strb	r3, [r4, #0]
 80043d6:	e725      	b.n	8004224 <USBH_Process+0x60>
    if(phost->ClassNumber == 0U)
 80043d8:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f43f af21 	beq.w	8004224 <USBH_Process+0x60>
      phost->pActiveClass = NULL;
 80043e2:	2200      	movs	r2, #0
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80043e4:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
      phost->pActiveClass = NULL;
 80043e8:	f8c4 2378 	str.w	r2, [r4, #888]	; 0x378
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80043ec:	7919      	ldrb	r1, [r3, #4]
 80043ee:	f894 2343 	ldrb.w	r2, [r4, #835]	; 0x343
 80043f2:	4291      	cmp	r1, r2
 80043f4:	d177      	bne.n	80044e6 <USBH_Process+0x322>
          phost->pActiveClass = phost->pClass[idx];
 80043f6:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80043fa:	4620      	mov	r0, r4
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	4798      	blx	r3
 8004400:	2800      	cmp	r0, #0
 8004402:	d170      	bne.n	80044e6 <USBH_Process+0x322>
          phost->gState  = HOST_CLASS_REQUEST;
 8004404:	2306      	movs	r3, #6
 8004406:	7023      	strb	r3, [r4, #0]
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8004408:	4620      	mov	r0, r4
 800440a:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 800440e:	2103      	movs	r1, #3
 8004410:	4798      	blx	r3
 8004412:	e707      	b.n	8004224 <USBH_Process+0x60>
    if (phost->device.PortEnabled == 1U)
 8004414:	2b01      	cmp	r3, #1
 8004416:	f47f af05 	bne.w	8004224 <USBH_Process+0x60>
      phost->gState = HOST_DEV_ATTACHED;
 800441a:	2302      	movs	r3, #2
 800441c:	7003      	strb	r3, [r0, #0]
 800441e:	e701      	b.n	8004224 <USBH_Process+0x60>
    if (phost->device.DevDesc.iProduct != 0U)
 8004420:	f894 1331 	ldrb.w	r1, [r4, #817]	; 0x331
 8004424:	2900      	cmp	r1, #0
 8004426:	d161      	bne.n	80044ec <USBH_Process+0x328>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004428:	2307      	movs	r3, #7
 800442a:	7063      	strb	r3, [r4, #1]
 800442c:	e6fa      	b.n	8004224 <USBH_Process+0x60>
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800442e:	2112      	movs	r1, #18
 8004430:	4620      	mov	r0, r4
 8004432:	f000 f9af 	bl	8004794 <USBH_Get_DevDesc>
 8004436:	2800      	cmp	r0, #0
 8004438:	f47f aef4 	bne.w	8004224 <USBH_Process+0x60>
      phost->EnumState = ENUM_SET_ADDR;
 800443c:	2302      	movs	r3, #2
 800443e:	7063      	strb	r3, [r4, #1]
 8004440:	e6f0      	b.n	8004224 <USBH_Process+0x60>
    if (phost->device.DevDesc.iManufacturer != 0U)
 8004442:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 8004446:	2900      	cmp	r1, #0
 8004448:	d164      	bne.n	8004514 <USBH_Process+0x350>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800444a:	2306      	movs	r3, #6
 800444c:	7063      	strb	r3, [r4, #1]
 800444e:	e6e9      	b.n	8004224 <USBH_Process+0x60>
    if (USBH_Get_CfgDesc(phost,
 8004450:	f8b4 1336 	ldrh.w	r1, [r4, #822]	; 0x336
 8004454:	4620      	mov	r0, r4
 8004456:	f000 f9e9 	bl	800482c <USBH_Get_CfgDesc>
 800445a:	2800      	cmp	r0, #0
 800445c:	f47f aee2 	bne.w	8004224 <USBH_Process+0x60>
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8004460:	2305      	movs	r3, #5
 8004462:	7063      	strb	r3, [r4, #1]
 8004464:	e6de      	b.n	8004224 <USBH_Process+0x60>
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8004466:	2108      	movs	r1, #8
 8004468:	4620      	mov	r0, r4
 800446a:	f000 f993 	bl	8004794 <USBH_Get_DevDesc>
 800446e:	4605      	mov	r5, r0
 8004470:	2800      	cmp	r0, #0
 8004472:	f47f aed7 	bne.w	8004224 <USBH_Process+0x60>
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004476:	f894 2329 	ldrb.w	r2, [r4, #809]	; 0x329
      USBH_OpenPipe (phost,
 800447a:	f894 031d 	ldrb.w	r0, [r4, #797]	; 0x31d
 800447e:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004482:	7921      	ldrb	r1, [r4, #4]
 8004484:	9501      	str	r5, [sp, #4]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8004486:	2601      	movs	r6, #1
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8004488:	71a2      	strb	r2, [r4, #6]
      USBH_OpenPipe (phost,
 800448a:	9202      	str	r2, [sp, #8]
      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800448c:	7066      	strb	r6, [r4, #1]
      USBH_OpenPipe (phost,
 800448e:	9000      	str	r0, [sp, #0]
 8004490:	e71d      	b.n	80042ce <USBH_Process+0x10a>
    if ( USBH_Get_CfgDesc(phost,
 8004492:	2109      	movs	r1, #9
 8004494:	4620      	mov	r0, r4
 8004496:	f000 f9c9 	bl	800482c <USBH_Get_CfgDesc>
 800449a:	2800      	cmp	r0, #0
 800449c:	f47f aec2 	bne.w	8004224 <USBH_Process+0x60>
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80044a0:	2304      	movs	r3, #4
 80044a2:	7063      	strb	r3, [r4, #1]
 80044a4:	e6be      	b.n	8004224 <USBH_Process+0x60>
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80044a6:	2101      	movs	r1, #1
 80044a8:	4620      	mov	r0, r4
 80044aa:	f000 fa7d 	bl	80049a8 <USBH_SetAddress>
 80044ae:	4605      	mov	r5, r0
 80044b0:	2800      	cmp	r0, #0
 80044b2:	f47f aeb7 	bne.w	8004224 <USBH_Process+0x60>
      USBH_Delay(2U);
 80044b6:	2002      	movs	r0, #2
 80044b8:	f000 fcf4 	bl	8004ea4 <USBH_Delay>
      phost->EnumState = ENUM_GET_CFG_DESC;
 80044bc:	2603      	movs	r6, #3
      USBH_OpenPipe (phost,
 80044be:	79a0      	ldrb	r0, [r4, #6]
 80044c0:	f894 231d 	ldrb.w	r2, [r4, #797]	; 0x31d
 80044c4:	7921      	ldrb	r1, [r4, #4]
 80044c6:	9501      	str	r5, [sp, #4]
      phost->device.address = USBH_DEVICE_ADDRESS;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
      phost->EnumState = ENUM_GET_CFG_DESC;
 80044ce:	7066      	strb	r6, [r4, #1]
      USBH_OpenPipe (phost,
 80044d0:	9002      	str	r0, [sp, #8]
 80044d2:	9200      	str	r2, [sp, #0]
 80044d4:	e6fb      	b.n	80042ce <USBH_Process+0x10a>
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80044d6:	2101      	movs	r1, #1
 80044d8:	4620      	mov	r0, r4
 80044da:	f000 fa99 	bl	8004a10 <USBH_SetFeature>
 80044de:	2800      	cmp	r0, #0
 80044e0:	f47f aea0 	bne.w	8004224 <USBH_Process+0x60>
 80044e4:	e775      	b.n	80043d2 <USBH_Process+0x20e>
      phost->gState  = HOST_ABORT_STATE;
 80044e6:	230d      	movs	r3, #13
 80044e8:	7023      	strb	r3, [r4, #0]
 80044ea:	e69b      	b.n	8004224 <USBH_Process+0x60>
      if ( USBH_Get_StringDesc(phost,
 80044ec:	23ff      	movs	r3, #255	; 0xff
 80044ee:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 80044f2:	4620      	mov	r0, r4
 80044f4:	f000 fa2e 	bl	8004954 <USBH_Get_StringDesc>
 80044f8:	2800      	cmp	r0, #0
 80044fa:	f47f ae93 	bne.w	8004224 <USBH_Process+0x60>
 80044fe:	e793      	b.n	8004428 <USBH_Process+0x264>
      if ( USBH_Get_StringDesc(phost,
 8004500:	23ff      	movs	r3, #255	; 0xff
 8004502:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 8004506:	4620      	mov	r0, r4
 8004508:	f000 fa24 	bl	8004954 <USBH_Get_StringDesc>
 800450c:	2800      	cmp	r0, #0
 800450e:	f43f ae7f 	beq.w	8004210 <USBH_Process+0x4c>
 8004512:	e687      	b.n	8004224 <USBH_Process+0x60>
      if ( USBH_Get_StringDesc(phost,
 8004514:	23ff      	movs	r3, #255	; 0xff
 8004516:	f504 728e 	add.w	r2, r4, #284	; 0x11c
 800451a:	4620      	mov	r0, r4
 800451c:	f000 fa1a 	bl	8004954 <USBH_Get_StringDesc>
 8004520:	2800      	cmp	r0, #0
 8004522:	f47f ae7f 	bne.w	8004224 <USBH_Process+0x60>
 8004526:	e790      	b.n	800444a <USBH_Process+0x286>

08004528 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8004528:	f8c0 13bc 	str.w	r1, [r0, #956]	; 0x3bc
}
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop

08004530 <USBH_LL_IncTimer>:
  phost->Timer ++;
 8004530:	f8d0 23bc 	ldr.w	r2, [r0, #956]	; 0x3bc
 8004534:	3201      	adds	r2, #1
 8004536:	f8c0 23bc 	str.w	r2, [r0, #956]	; 0x3bc
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800453a:	7802      	ldrb	r2, [r0, #0]
 800453c:	2a0b      	cmp	r2, #11
 800453e:	d000      	beq.n	8004542 <USBH_LL_IncTimer+0x12>
}
 8004540:	4770      	bx	lr
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8004542:	f8d0 3378 	ldr.w	r3, [r0, #888]	; 0x378
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0fa      	beq.n	8004540 <USBH_LL_IncTimer+0x10>
    phost->pActiveClass->SOFProcess(phost);
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	4718      	bx	r3
 800454e:	bf00      	nop

08004550 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8004550:	2301      	movs	r3, #1
 8004552:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 8004556:	4770      	bx	lr

08004558 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	f880 331f 	strb.w	r3, [r0, #799]	; 0x31f
}
 800455e:	4770      	bx	lr

08004560 <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
  if(phost->gState == HOST_IDLE )
 8004560:	7802      	ldrb	r2, [r0, #0]
{
 8004562:	b508      	push	{r3, lr}
  if(phost->gState == HOST_IDLE )
 8004564:	b94a      	cbnz	r2, 800457a <USBH_LL_Connect+0x1a>
  {
    phost->device.is_connected = 1U;

    if(phost->pUser != NULL)
 8004566:	f8d0 23c8 	ldr.w	r2, [r0, #968]	; 0x3c8
    phost->device.is_connected = 1U;
 800456a:	2101      	movs	r1, #1
 800456c:	f880 131e 	strb.w	r1, [r0, #798]	; 0x31e
    if(phost->pUser != NULL)
 8004570:	b10a      	cbz	r2, 8004576 <USBH_LL_Connect+0x16>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8004572:	2104      	movs	r1, #4
 8004574:	4790      	blx	r2
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 8004576:	2000      	movs	r0, #0
 8004578:	bd08      	pop	{r3, pc}
    if (phost->device.PortEnabled == 1U)
 800457a:	f890 231f 	ldrb.w	r2, [r0, #799]	; 0x31f
 800457e:	2a01      	cmp	r2, #1
      phost->gState = HOST_DEV_ATTACHED;
 8004580:	bf04      	itt	eq
 8004582:	2202      	moveq	r2, #2
 8004584:	7002      	strbeq	r2, [r0, #0]
}
 8004586:	2000      	movs	r0, #0
 8004588:	bd08      	pop	{r3, pc}
 800458a:	bf00      	nop

0800458c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800458c:	b510      	push	{r4, lr}
 800458e:	4604      	mov	r4, r0
  /*Stop Host */
  USBH_LL_Stop(phost);
 8004590:	f000 fbf2 	bl	8004d78 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8004594:	7921      	ldrb	r1, [r4, #4]
 8004596:	4620      	mov	r0, r4
 8004598:	f000 fb0e 	bl	8004bb8 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800459c:	7961      	ldrb	r1, [r4, #5]
 800459e:	4620      	mov	r0, r4
 80045a0:	f000 fb0a 	bl	8004bb8 <USBH_FreePipe>

  phost->device.is_connected = 0U;

  if(phost->pUser != NULL)
 80045a4:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
  phost->device.is_connected = 0U;
 80045a8:	2200      	movs	r2, #0
 80045aa:	f884 231e 	strb.w	r2, [r4, #798]	; 0x31e
  if(phost->pUser != NULL)
 80045ae:	b113      	cbz	r3, 80045b6 <USBH_LL_Disconnect+0x2a>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80045b0:	2105      	movs	r1, #5
 80045b2:	4620      	mov	r0, r4
 80045b4:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80045b6:	4620      	mov	r0, r4
 80045b8:	f000 fbd0 	bl	8004d5c <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80045bc:	2303      	movs	r3, #3
 80045be:	7023      	strb	r3, [r4, #0]
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
}
 80045c0:	2000      	movs	r0, #0
 80045c2:	bd10      	pop	{r4, pc}

080045c4 <USBH_CtlReq.part.0>:
  * @param  req: Setup Request Structure
  * @param  buff: data buffer address to store the response
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
 80045c4:	b530      	push	{r4, r5, lr}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80045c6:	7e03      	ldrb	r3, [r0, #24]
 80045c8:	3b01      	subs	r3, #1
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
 80045ca:	b083      	sub	sp, #12
 80045cc:	4604      	mov	r4, r0
  switch (phost->Control.state)
 80045ce:	2b0a      	cmp	r3, #10
 80045d0:	d812      	bhi.n	80045f8 <USBH_CtlReq.part.0+0x34>
 80045d2:	e8df f003 	tbb	[pc, r3]
 80045d6:	8a81      	.short	0x8a81
 80045d8:	2e200667 	.word	0x2e200667
 80045dc:	4c733c14 	.word	0x4c733c14
 80045e0:	57          	.byte	0x57
 80045e1:	00          	.byte	0x00
    phost->Control.state = CTRL_DATA_IN_WAIT;
    break;

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 80045e2:	7901      	ldrb	r1, [r0, #4]
 80045e4:	f000 fc36 	bl	8004e54 <USBH_LL_GetURBState>

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 80045e8:	2801      	cmp	r0, #1
 80045ea:	d047      	beq.n	800467c <USBH_CtlReq.part.0+0xb8>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 80045ec:	2805      	cmp	r0, #5
 80045ee:	d037      	beq.n	8004660 <USBH_CtlReq.part.0+0x9c>
#endif
#endif
    }
    else
    {
      if (URB_Status == USBH_URB_ERROR)
 80045f0:	2804      	cmp	r0, #4
 80045f2:	d101      	bne.n	80045f8 <USBH_CtlReq.part.0+0x34>
        phost->Control.state = CTRL_ERROR;
 80045f4:	230b      	movs	r3, #11
 80045f6:	7623      	strb	r3, [r4, #24]
 80045f8:	2001      	movs	r0, #1
}
 80045fa:	b003      	add	sp, #12
 80045fc:	bd30      	pop	{r4, r5, pc}
    USBH_CtlReceiveData (phost,
 80045fe:	2200      	movs	r2, #0
 8004600:	7903      	ldrb	r3, [r0, #4]
 8004602:	4611      	mov	r1, r2
 8004604:	f000 fa74 	bl	8004af0 <USBH_CtlReceiveData>
    phost->Control.timer = (uint16_t)phost->Timer;
 8004608:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 800460c:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800460e:	2308      	movs	r3, #8
 8004610:	7623      	strb	r3, [r4, #24]
 8004612:	2001      	movs	r0, #1
 8004614:	e7f1      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
    USBH_CtlSendData (phost,
 8004616:	2501      	movs	r5, #1
 8004618:	7943      	ldrb	r3, [r0, #5]
 800461a:	8982      	ldrh	r2, [r0, #12]
 800461c:	6881      	ldr	r1, [r0, #8]
 800461e:	9500      	str	r5, [sp, #0]
 8004620:	f000 fa4e 	bl	8004ac0 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 8004624:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 8004628:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800462a:	2306      	movs	r3, #6
 800462c:	4628      	mov	r0, r5
 800462e:	7623      	strb	r3, [r4, #24]
 8004630:	e7e3      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8004632:	7941      	ldrb	r1, [r0, #5]
 8004634:	f000 fc0e 	bl	8004e54 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004638:	2801      	cmp	r0, #1
 800463a:	d06a      	beq.n	8004712 <USBH_CtlReq.part.0+0x14e>
    else if  (URB_Status == USBH_URB_STALL)
 800463c:	2805      	cmp	r0, #5
 800463e:	d00f      	beq.n	8004660 <USBH_CtlReq.part.0+0x9c>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004640:	2802      	cmp	r0, #2
 8004642:	d071      	beq.n	8004728 <USBH_CtlReq.part.0+0x164>
      if (URB_Status == USBH_URB_ERROR)
 8004644:	2804      	cmp	r0, #4
 8004646:	d1d7      	bne.n	80045f8 <USBH_CtlReq.part.0+0x34>
        phost->Control.state = CTRL_ERROR;
 8004648:	230b      	movs	r3, #11
 800464a:	7623      	strb	r3, [r4, #24]
 800464c:	e026      	b.n	800469c <USBH_CtlReq.part.0+0xd8>
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800464e:	7901      	ldrb	r1, [r0, #4]
 8004650:	f000 fc00 	bl	8004e54 <USBH_LL_GetURBState>
    if  ( URB_Status == USBH_URB_DONE)
 8004654:	2801      	cmp	r0, #1
 8004656:	d054      	beq.n	8004702 <USBH_CtlReq.part.0+0x13e>
    else if (URB_Status == USBH_URB_ERROR)
 8004658:	2804      	cmp	r0, #4
 800465a:	d0cb      	beq.n	80045f4 <USBH_CtlReq.part.0+0x30>
      if(URB_Status == USBH_URB_STALL)
 800465c:	2805      	cmp	r0, #5
 800465e:	d1cb      	bne.n	80045f8 <USBH_CtlReq.part.0+0x34>
      phost->RequestState = CMD_SEND;
 8004660:	2201      	movs	r2, #1
      phost->Control.state = CTRL_IDLE;
 8004662:	2300      	movs	r3, #0
      status = USBH_NOT_SUPPORTED;
 8004664:	2003      	movs	r0, #3
      phost->RequestState = CMD_SEND;
 8004666:	70a2      	strb	r2, [r4, #2]
      phost->Control.state = CTRL_IDLE;
 8004668:	7623      	strb	r3, [r4, #24]
}
 800466a:	b003      	add	sp, #12
 800466c:	bd30      	pop	{r4, r5, pc}
    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800466e:	7941      	ldrb	r1, [r0, #5]
 8004670:	f000 fbf0 	bl	8004e54 <USBH_LL_GetURBState>
    if  (URB_Status == USBH_URB_DONE)
 8004674:	2801      	cmp	r0, #1
 8004676:	d044      	beq.n	8004702 <USBH_CtlReq.part.0+0x13e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8004678:	2802      	cmp	r0, #2
 800467a:	d1b9      	bne.n	80045f0 <USBH_CtlReq.part.0+0x2c>
          phost->Control.state = CTRL_STATUS_OUT;
 800467c:	2309      	movs	r3, #9
 800467e:	7623      	strb	r3, [r4, #24]
 8004680:	2001      	movs	r0, #1
 8004682:	e7ba      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004684:	7e43      	ldrb	r3, [r0, #25]
 8004686:	3301      	adds	r3, #1
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	7643      	strb	r3, [r0, #25]
 800468e:	d94f      	bls.n	8004730 <USBH_CtlReq.part.0+0x16c>
      phost->Control.state = CTRL_SETUP;
      phost->RequestState = CMD_SEND;
    }
    else
    {
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8004690:	f8d0 33c8 	ldr.w	r3, [r0, #968]	; 0x3c8
 8004694:	2106      	movs	r1, #6
 8004696:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	7663      	strb	r3, [r4, #25]
        phost->RequestState = CMD_SEND;
 800469c:	2301      	movs	r3, #1
 800469e:	70a3      	strb	r3, [r4, #2]
        status = USBH_FAIL;
 80046a0:	2002      	movs	r0, #2
 80046a2:	e7aa      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
    phost->Control.timer = (uint16_t)phost->Timer;
 80046a4:	f8d0 33bc 	ldr.w	r3, [r0, #956]	; 0x3bc
 80046a8:	81c3      	strh	r3, [r0, #14]
    USBH_CtlReceiveData(phost,
 80046aa:	8982      	ldrh	r2, [r0, #12]
 80046ac:	7903      	ldrb	r3, [r0, #4]
 80046ae:	6881      	ldr	r1, [r0, #8]
 80046b0:	f000 fa1e 	bl	8004af0 <USBH_CtlReceiveData>
    phost->Control.state = CTRL_DATA_IN_WAIT;
 80046b4:	2304      	movs	r3, #4
 80046b6:	7623      	strb	r3, [r4, #24]
 80046b8:	2001      	movs	r0, #1
 80046ba:	e79e      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
    USBH_CtlSendData (phost,
 80046bc:	2501      	movs	r5, #1
 80046be:	2200      	movs	r2, #0
 80046c0:	7943      	ldrb	r3, [r0, #5]
 80046c2:	9500      	str	r5, [sp, #0]
 80046c4:	4611      	mov	r1, r2
 80046c6:	f000 f9fb 	bl	8004ac0 <USBH_CtlSendData>
     phost->Control.timer = (uint16_t)phost->Timer;
 80046ca:	f8d4 33bc 	ldr.w	r3, [r4, #956]	; 0x3bc
 80046ce:	81e3      	strh	r3, [r4, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80046d0:	230a      	movs	r3, #10
 80046d2:	4628      	mov	r0, r5
 80046d4:	7623      	strb	r3, [r4, #24]
 80046d6:	e790      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80046d8:	7942      	ldrb	r2, [r0, #5]
 80046da:	f100 0110 	add.w	r1, r0, #16
 80046de:	f000 f9df 	bl	8004aa0 <USBH_CtlSendSetup>
    phost->Control.state = CTRL_SETUP_WAIT;
 80046e2:	2302      	movs	r3, #2
 80046e4:	7623      	strb	r3, [r4, #24]
 80046e6:	2001      	movs	r0, #1
 80046e8:	e787      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80046ea:	7941      	ldrb	r1, [r0, #5]
 80046ec:	f000 fbb2 	bl	8004e54 <USBH_LL_GetURBState>
    if(URB_Status == USBH_URB_DONE)
 80046f0:	2801      	cmp	r0, #1
 80046f2:	d012      	beq.n	800471a <USBH_CtlReq.part.0+0x156>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80046f4:	2804      	cmp	r0, #4
 80046f6:	f43f af7d 	beq.w	80045f4 <USBH_CtlReq.part.0+0x30>
 80046fa:	2802      	cmp	r0, #2
 80046fc:	f47f af7c 	bne.w	80045f8 <USBH_CtlReq.part.0+0x34>
 8004700:	e778      	b.n	80045f4 <USBH_CtlReq.part.0+0x30>
      phost->Control.state =CTRL_IDLE;
 8004702:	2000      	movs	r0, #0
      phost->RequestState = CMD_SEND;
 8004704:	2301      	movs	r3, #1
 8004706:	70a3      	strb	r3, [r4, #2]
      phost->Control.state =CTRL_IDLE;
 8004708:	7620      	strb	r0, [r4, #24]
}
 800470a:	b003      	add	sp, #12
 800470c:	bd30      	pop	{r4, r5, pc}
        if (direction == USB_D2H)
 800470e:	2b00      	cmp	r3, #0
 8004710:	dbb4      	blt.n	800467c <USBH_CtlReq.part.0+0xb8>
          phost->Control.state = CTRL_STATUS_IN;
 8004712:	2307      	movs	r3, #7
 8004714:	7623      	strb	r3, [r4, #24]
 8004716:	2001      	movs	r0, #1
 8004718:	e76f      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
      if (phost->Control.setup.b.wLength.w != 0U)
 800471a:	8ae2      	ldrh	r2, [r4, #22]
 800471c:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8004720:	2a00      	cmp	r2, #0
 8004722:	d0f4      	beq.n	800470e <USBH_CtlReq.part.0+0x14a>
        if (direction == USB_D2H)
 8004724:	2b00      	cmp	r3, #0
 8004726:	db09      	blt.n	800473c <USBH_CtlReq.part.0+0x178>
          phost->Control.state = CTRL_DATA_OUT;
 8004728:	2305      	movs	r3, #5
 800472a:	7623      	strb	r3, [r4, #24]
 800472c:	2001      	movs	r0, #1
 800472e:	e764      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
      USBH_LL_Stop(phost);
 8004730:	f000 fb22 	bl	8004d78 <USBH_LL_Stop>
      phost->Control.state = CTRL_SETUP;
 8004734:	2001      	movs	r0, #1
 8004736:	7620      	strb	r0, [r4, #24]
      phost->RequestState = CMD_SEND;
 8004738:	70a0      	strb	r0, [r4, #2]
 800473a:	e75e      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
          phost->Control.state = CTRL_DATA_IN;
 800473c:	2303      	movs	r3, #3
 800473e:	7623      	strb	r3, [r4, #24]
 8004740:	e75b      	b.n	80045fa <USBH_CtlReq.part.0+0x36>
 8004742:	bf00      	nop

08004744 <USBH_GetDescriptor>:
{
 8004744:	b470      	push	{r4, r5, r6}
  if(phost->RequestState == CMD_SEND)
 8004746:	7885      	ldrb	r5, [r0, #2]
{
 8004748:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  if(phost->RequestState == CMD_SEND)
 800474c:	2d01      	cmp	r5, #1
 800474e:	d004      	beq.n	800475a <USBH_GetDescriptor+0x16>
  switch (phost->RequestState)
 8004750:	2d02      	cmp	r5, #2
 8004752:	d11b      	bne.n	800478c <USBH_GetDescriptor+0x48>
}
 8004754:	bc70      	pop	{r4, r5, r6}
 8004756:	f7ff bf35 	b.w	80045c4 <USBH_CtlReq.part.0>
 800475a:	4604      	mov	r4, r0
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800475c:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004760:	f061 017f 	orn	r1, r1, #127	; 0x7f
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8004764:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
    phost->Control.setup.b.wValue.w = value_idx;
 8004768:	8262      	strh	r2, [r4, #18]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800476a:	7421      	strb	r1, [r4, #16]
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800476c:	bf08      	it	eq
 800476e:	f240 4209 	movweq	r2, #1033	; 0x409
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8004772:	f04f 0106 	mov.w	r1, #6
      phost->Control.setup.b.wIndex.w = 0U;
 8004776:	bf18      	it	ne
 8004778:	2200      	movne	r2, #0
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800477a:	7461      	strb	r1, [r4, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 800477c:	82a2      	strh	r2, [r4, #20]
    phost->Control.state = CTRL_SETUP;
 800477e:	2101      	movs	r1, #1
    phost->RequestState = CMD_WAIT;
 8004780:	2202      	movs	r2, #2
    phost->Control.setup.b.wLength.w = length;
 8004782:	82e6      	strh	r6, [r4, #22]
    phost->Control.buff = buff;
 8004784:	60a3      	str	r3, [r4, #8]
    phost->Control.length = length;
 8004786:	81a6      	strh	r6, [r4, #12]
    phost->Control.state = CTRL_SETUP;
 8004788:	7621      	strb	r1, [r4, #24]
    phost->RequestState = CMD_WAIT;
 800478a:	70a2      	strb	r2, [r4, #2]
}
 800478c:	2001      	movs	r0, #1
 800478e:	bc70      	pop	{r4, r5, r6}
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop

08004794 <USBH_Get_DevDesc>:
{
 8004794:	b530      	push	{r4, r5, lr}
 8004796:	b083      	sub	sp, #12
  if((status = USBH_GetDescriptor(phost,
 8004798:	460d      	mov	r5, r1
 800479a:	9100      	str	r1, [sp, #0]
 800479c:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 80047a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047a4:	2100      	movs	r1, #0
{
 80047a6:	4604      	mov	r4, r0
  if((status = USBH_GetDescriptor(phost,
 80047a8:	f7ff ffcc 	bl	8004744 <USBH_GetDescriptor>
 80047ac:	b108      	cbz	r0, 80047b2 <USBH_Get_DevDesc+0x1e>
}
 80047ae:	b003      	add	sp, #12
 80047b0:	bd30      	pop	{r4, r5, pc}
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80047b2:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80047b6:	f894 111d 	ldrb.w	r1, [r4, #285]	; 0x11d
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80047ba:	f8b4 211e 	ldrh.w	r2, [r4, #286]	; 0x11e
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80047be:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80047c2:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80047c6:	f884 1323 	strb.w	r1, [r4, #803]	; 0x323
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80047ca:	f8a4 2324 	strh.w	r2, [r4, #804]	; 0x324
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80047ce:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80047d2:	f894 2122 	ldrb.w	r2, [r4, #290]	; 0x122
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 80047d6:	f884 3326 	strb.w	r3, [r4, #806]	; 0x326
  if (length > 8U)
 80047da:	2d08      	cmp	r5, #8
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80047dc:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 80047e0:	f884 1327 	strb.w	r1, [r4, #807]	; 0x327
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 80047e4:	f884 2328 	strb.w	r2, [r4, #808]	; 0x328
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 80047e8:	f884 3329 	strb.w	r3, [r4, #809]	; 0x329
  if (length > 8U)
 80047ec:	d9df      	bls.n	80047ae <USBH_Get_DevDesc+0x1a>
    dev_desc->idVendor           = LE16 (buf +  8);
 80047ee:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    dev_desc->idProduct          = LE16 (buf + 10);
 80047f2:	f8b4 2126 	ldrh.w	r2, [r4, #294]	; 0x126
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80047f6:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80047fa:	f894 512a 	ldrb.w	r5, [r4, #298]	; 0x12a
    dev_desc->idVendor           = LE16 (buf +  8);
 80047fe:	f8a4 132a 	strh.w	r1, [r4, #810]	; 0x32a
    dev_desc->idProduct          = LE16 (buf + 10);
 8004802:	f8a4 232c 	strh.w	r2, [r4, #812]	; 0x32c
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8004806:	f894 112b 	ldrb.w	r1, [r4, #299]	; 0x12b
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800480a:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800480e:	f8a4 332e 	strh.w	r3, [r4, #814]	; 0x32e
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8004812:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8004816:	f884 5330 	strb.w	r5, [r4, #816]	; 0x330
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800481a:	f884 1331 	strb.w	r1, [r4, #817]	; 0x331
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800481e:	f884 2332 	strb.w	r2, [r4, #818]	; 0x332
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8004822:	f884 3333 	strb.w	r3, [r4, #819]	; 0x333
}
 8004826:	b003      	add	sp, #12
 8004828:	bd30      	pop	{r4, r5, pc}
 800482a:	bf00      	nop

0800482c <USBH_Get_CfgDesc>:
{
 800482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	b082      	sub	sp, #8
  pData = phost->device.CfgDesc_Raw;
 8004832:	f100 041c 	add.w	r4, r0, #28
{
 8004836:	460e      	mov	r6, r1
  if((status = USBH_GetDescriptor(phost,
 8004838:	9100      	str	r1, [sp, #0]
 800483a:	4623      	mov	r3, r4
 800483c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004840:	2100      	movs	r1, #0
{
 8004842:	4605      	mov	r5, r0
  if((status = USBH_GetDescriptor(phost,
 8004844:	f7ff ff7e 	bl	8004744 <USBH_GetDescriptor>
 8004848:	b110      	cbz	r0, 8004850 <USBH_Get_CfgDesc+0x24>
}
 800484a:	b002      	add	sp, #8
 800484c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004850:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8004852:	7f6a      	ldrb	r2, [r5, #29]
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8004854:	f885 3334 	strb.w	r3, [r5, #820]	; 0x334
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8004858:	f895 3020 	ldrb.w	r3, [r5, #32]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800485c:	f885 2335 	strb.w	r2, [r5, #821]	; 0x335
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8004860:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8004864:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004868:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800486c:	8be9      	ldrh	r1, [r5, #30]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800486e:	f885 2339 	strb.w	r2, [r5, #825]	; 0x339
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8004872:	f885 333a 	strb.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004876:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800487a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800487e:	f8a5 1336 	strh.w	r1, [r5, #822]	; 0x336
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004882:	2e09      	cmp	r6, #9
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8004884:	f885 233b 	strb.w	r2, [r5, #827]	; 0x33b
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8004888:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800488c:	d9dd      	bls.n	800484a <USBH_Get_CfgDesc+0x1e>
 800488e:	462f      	mov	r7, r5
 8004890:	4684      	mov	ip, r0
    ptr = USB_LEN_CFG_DESC;
 8004892:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004894:	f04f 0e1a 	mov.w	lr, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004898:	4291      	cmp	r1, r2
 800489a:	d9d6      	bls.n	800484a <USBH_Get_CfgDesc+0x1e>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800489c:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800489e:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80048a0:	4413      	add	r3, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80048a2:	7866      	ldrb	r6, [r4, #1]
 80048a4:	2e04      	cmp	r6, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80048a6:	b29a      	uxth	r2, r3
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80048a8:	d1f6      	bne.n	8004898 <USBH_Get_CfgDesc+0x6c>
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80048aa:	7823      	ldrb	r3, [r4, #0]
 80048ac:	f887 333e 	strb.w	r3, [r7, #830]	; 0x33e
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80048b0:	7863      	ldrb	r3, [r4, #1]
 80048b2:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 80048b6:	78a3      	ldrb	r3, [r4, #2]
 80048b8:	f887 3340 	strb.w	r3, [r7, #832]	; 0x340
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 80048bc:	78e3      	ldrb	r3, [r4, #3]
 80048be:	f887 3341 	strb.w	r3, [r7, #833]	; 0x341
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 80048c2:	f894 9004 	ldrb.w	r9, [r4, #4]
 80048c6:	f887 9342 	strb.w	r9, [r7, #834]	; 0x342
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 80048ca:	7963      	ldrb	r3, [r4, #5]
 80048cc:	f887 3343 	strb.w	r3, [r7, #835]	; 0x343
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 80048d0:	79a3      	ldrb	r3, [r4, #6]
 80048d2:	f887 3344 	strb.w	r3, [r7, #836]	; 0x344
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 80048d6:	79e3      	ldrb	r3, [r4, #7]
 80048d8:	f887 3345 	strb.w	r3, [r7, #837]	; 0x345
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 80048dc:	7a23      	ldrb	r3, [r4, #8]
 80048de:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
        ep_ix = 0U;
 80048e2:	2600      	movs	r6, #0
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80048e4:	fb0e f80c 	mul.w	r8, lr, ip
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80048e8:	454e      	cmp	r6, r9
 80048ea:	d22a      	bcs.n	8004942 <USBH_Get_CfgDesc+0x116>
 80048ec:	4291      	cmp	r1, r2
 80048ee:	d928      	bls.n	8004942 <USBH_Get_CfgDesc+0x116>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80048f0:	7823      	ldrb	r3, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80048f2:	441c      	add	r4, r3
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80048f4:	4413      	add	r3, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80048f6:	f894 a001 	ldrb.w	sl, [r4, #1]
 80048fa:	f1ba 0f05 	cmp.w	sl, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80048fe:	b29a      	uxth	r2, r3
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004900:	d1f2      	bne.n	80048e8 <USBH_Get_CfgDesc+0xbc>
  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8004902:	3601      	adds	r6, #1
 8004904:	eb08 03c6 	add.w	r3, r8, r6, lsl #3
 8004908:	442b      	add	r3, r5
 800490a:	f894 9000 	ldrb.w	r9, [r4]
 800490e:	f883 9340 	strb.w	r9, [r3, #832]	; 0x340
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8004912:	f894 9001 	ldrb.w	r9, [r4, #1]
 8004916:	f883 9341 	strb.w	r9, [r3, #833]	; 0x341
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800491a:	f894 9002 	ldrb.w	r9, [r4, #2]
 800491e:	f883 9342 	strb.w	r9, [r3, #834]	; 0x342
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8004922:	f894 9003 	ldrb.w	r9, [r4, #3]
 8004926:	f883 9343 	strb.w	r9, [r3, #835]	; 0x343
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800492a:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 800492e:	f8a3 9344 	strh.w	r9, [r3, #836]	; 0x344
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8004932:	f894 9006 	ldrb.w	r9, [r4, #6]
 8004936:	f883 9346 	strb.w	r9, [r3, #838]	; 0x346
 800493a:	f897 9342 	ldrb.w	r9, [r7, #834]	; 0x342
            ep_ix++;
 800493e:	b2f6      	uxtb	r6, r6
 8004940:	e7d2      	b.n	80048e8 <USBH_Get_CfgDesc+0xbc>
 8004942:	371a      	adds	r7, #26
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004944:	f1bc 0f00 	cmp.w	ip, #0
 8004948:	f47f af7f 	bne.w	800484a <USBH_Get_CfgDesc+0x1e>
 800494c:	f04f 0c01 	mov.w	ip, #1
 8004950:	e7a2      	b.n	8004898 <USBH_Get_CfgDesc+0x6c>
 8004952:	bf00      	nop

08004954 <USBH_Get_StringDesc>:
{
 8004954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004956:	b083      	sub	sp, #12
                                  phost->device.Data,
 8004958:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 800495c:	461f      	mov	r7, r3
 800495e:	4614      	mov	r4, r2
  if((status = USBH_GetDescriptor(phost,
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004966:	462b      	mov	r3, r5
 8004968:	2100      	movs	r1, #0
{
 800496a:	4606      	mov	r6, r0
  if((status = USBH_GetDescriptor(phost,
 800496c:	f7ff feea 	bl	8004744 <USBH_GetDescriptor>
 8004970:	b918      	cbnz	r0, 800497a <USBH_Get_StringDesc+0x26>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8004972:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 8004976:	2b03      	cmp	r3, #3
 8004978:	d001      	beq.n	800497e <USBH_Get_StringDesc+0x2a>
}
 800497a:	b003      	add	sp, #12
 800497c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800497e:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 8004982:	3b02      	subs	r3, #2
 8004984:	429f      	cmp	r7, r3
 8004986:	bf28      	it	cs
 8004988:	461f      	movcs	r7, r3
 800498a:	b2b9      	uxth	r1, r7
    for (idx = 0U; idx < strlength; idx += 2U)
 800498c:	b147      	cbz	r7, 80049a0 <USBH_Get_StringDesc+0x4c>
 800498e:	4603      	mov	r3, r0
      *pdest =  psrc[idx];
 8004990:	18ea      	adds	r2, r5, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 8004992:	3302      	adds	r3, #2
 8004994:	b29b      	uxth	r3, r3
      *pdest =  psrc[idx];
 8004996:	7892      	ldrb	r2, [r2, #2]
 8004998:	f804 2b01 	strb.w	r2, [r4], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 800499c:	4299      	cmp	r1, r3
 800499e:	d8f7      	bhi.n	8004990 <USBH_Get_StringDesc+0x3c>
    *pdest = 0U; /* mark end of string */
 80049a0:	2300      	movs	r3, #0
 80049a2:	7023      	strb	r3, [r4, #0]
}
 80049a4:	b003      	add	sp, #12
 80049a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080049a8 <USBH_SetAddress>:
  if(phost->RequestState == CMD_SEND)
 80049a8:	7882      	ldrb	r2, [r0, #2]
 80049aa:	2a01      	cmp	r2, #1
 80049ac:	d005      	beq.n	80049ba <USBH_SetAddress+0x12>
  switch (phost->RequestState)
 80049ae:	2a02      	cmp	r2, #2
 80049b0:	d101      	bne.n	80049b6 <USBH_SetAddress+0xe>
 80049b2:	f7ff be07 	b.w	80045c4 <USBH_CtlReq.part.0>
}
 80049b6:	2001      	movs	r0, #1
 80049b8:	4770      	bx	lr
{
 80049ba:	b430      	push	{r4, r5}
 80049bc:	4603      	mov	r3, r0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80049be:	f44f 65a0 	mov.w	r5, #1280	; 0x500
    phost->Control.setup.b.wIndex.w = 0U;
 80049c2:	2000      	movs	r0, #0
    phost->RequestState = CMD_WAIT;
 80049c4:	2402      	movs	r4, #2
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80049c6:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80049c8:	6158      	str	r0, [r3, #20]
    phost->Control.buff = buff;
 80049ca:	6098      	str	r0, [r3, #8]
    phost->Control.length = length;
 80049cc:	8198      	strh	r0, [r3, #12]
    phost->RequestState = CMD_WAIT;
 80049ce:	709c      	strb	r4, [r3, #2]
}
 80049d0:	2001      	movs	r0, #1
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80049d2:	8259      	strh	r1, [r3, #18]
    phost->Control.state = CTRL_SETUP;
 80049d4:	761a      	strb	r2, [r3, #24]
}
 80049d6:	bc30      	pop	{r4, r5}
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop

080049dc <USBH_SetCfg>:
  if(phost->RequestState == CMD_SEND)
 80049dc:	7882      	ldrb	r2, [r0, #2]
 80049de:	2a01      	cmp	r2, #1
 80049e0:	d005      	beq.n	80049ee <USBH_SetCfg+0x12>
  switch (phost->RequestState)
 80049e2:	2a02      	cmp	r2, #2
 80049e4:	d101      	bne.n	80049ea <USBH_SetCfg+0xe>
 80049e6:	f7ff bded 	b.w	80045c4 <USBH_CtlReq.part.0>
}
 80049ea:	2001      	movs	r0, #1
 80049ec:	4770      	bx	lr
{
 80049ee:	b430      	push	{r4, r5}
 80049f0:	4603      	mov	r3, r0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80049f2:	f44f 6510 	mov.w	r5, #2304	; 0x900
    phost->Control.setup.b.wIndex.w = 0U;
 80049f6:	2000      	movs	r0, #0
    phost->RequestState = CMD_WAIT;
 80049f8:	2402      	movs	r4, #2
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80049fa:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80049fc:	6158      	str	r0, [r3, #20]
    phost->Control.buff = buff;
 80049fe:	6098      	str	r0, [r3, #8]
    phost->Control.length = length;
 8004a00:	8198      	strh	r0, [r3, #12]
    phost->RequestState = CMD_WAIT;
 8004a02:	709c      	strb	r4, [r3, #2]
}
 8004a04:	2001      	movs	r0, #1
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004a06:	8259      	strh	r1, [r3, #18]
    phost->Control.state = CTRL_SETUP;
 8004a08:	761a      	strb	r2, [r3, #24]
}
 8004a0a:	bc30      	pop	{r4, r5}
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop

08004a10 <USBH_SetFeature>:
  if(phost->RequestState == CMD_SEND)
 8004a10:	7882      	ldrb	r2, [r0, #2]
 8004a12:	2a01      	cmp	r2, #1
 8004a14:	d005      	beq.n	8004a22 <USBH_SetFeature+0x12>
  switch (phost->RequestState)
 8004a16:	2a02      	cmp	r2, #2
 8004a18:	d101      	bne.n	8004a1e <USBH_SetFeature+0xe>
 8004a1a:	f7ff bdd3 	b.w	80045c4 <USBH_CtlReq.part.0>
}
 8004a1e:	2001      	movs	r0, #1
 8004a20:	4770      	bx	lr
{
 8004a22:	b430      	push	{r4, r5}
 8004a24:	4603      	mov	r3, r0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004a26:	f44f 7540 	mov.w	r5, #768	; 0x300
    phost->Control.setup.b.wIndex.w = 0U;
 8004a2a:	2000      	movs	r0, #0
    phost->RequestState = CMD_WAIT;
 8004a2c:	2402      	movs	r4, #2
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004a2e:	821d      	strh	r5, [r3, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8004a30:	6158      	str	r0, [r3, #20]
    phost->Control.buff = buff;
 8004a32:	6098      	str	r0, [r3, #8]
    phost->Control.length = length;
 8004a34:	8198      	strh	r0, [r3, #12]
    phost->RequestState = CMD_WAIT;
 8004a36:	709c      	strb	r4, [r3, #2]
}
 8004a38:	2001      	movs	r0, #1
    phost->Control.setup.b.wValue.w = wValue;
 8004a3a:	8259      	strh	r1, [r3, #18]
    phost->Control.state = CTRL_SETUP;
 8004a3c:	761a      	strb	r2, [r3, #24]
}
 8004a3e:	bc30      	pop	{r4, r5}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop

08004a44 <USBH_ClrFeature>:
  if(phost->RequestState == CMD_SEND)
 8004a44:	7882      	ldrb	r2, [r0, #2]
 8004a46:	2a01      	cmp	r2, #1
 8004a48:	d005      	beq.n	8004a56 <USBH_ClrFeature+0x12>
  switch (phost->RequestState)
 8004a4a:	2a02      	cmp	r2, #2
 8004a4c:	d101      	bne.n	8004a52 <USBH_ClrFeature+0xe>
 8004a4e:	f7ff bdb9 	b.w	80045c4 <USBH_CtlReq.part.0>
}
 8004a52:	2001      	movs	r0, #1
 8004a54:	4770      	bx	lr
{
 8004a56:	b430      	push	{r4, r5}
 8004a58:	4603      	mov	r3, r0
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004a5a:	f44f 7581 	mov.w	r5, #258	; 0x102
    phost->Control.setup.b.wLength.w = 0U;
 8004a5e:	2000      	movs	r0, #0
    phost->RequestState = CMD_WAIT;
 8004a60:	2402      	movs	r4, #2
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004a62:	611d      	str	r5, [r3, #16]
    phost->Control.setup.b.wLength.w = 0U;
 8004a64:	82d8      	strh	r0, [r3, #22]
    phost->Control.buff = buff;
 8004a66:	6098      	str	r0, [r3, #8]
    phost->Control.length = length;
 8004a68:	8198      	strh	r0, [r3, #12]
    phost->RequestState = CMD_WAIT;
 8004a6a:	709c      	strb	r4, [r3, #2]
}
 8004a6c:	2001      	movs	r0, #1
    phost->Control.setup.b.wIndex.w = ep_num;
 8004a6e:	8299      	strh	r1, [r3, #20]
    phost->Control.state = CTRL_SETUP;
 8004a70:	761a      	strb	r2, [r3, #24]
}
 8004a72:	bc30      	pop	{r4, r5}
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop

08004a78 <USBH_CtlReq>:
{
 8004a78:	b410      	push	{r4}
  switch (phost->RequestState)
 8004a7a:	7884      	ldrb	r4, [r0, #2]
 8004a7c:	2c01      	cmp	r4, #1
 8004a7e:	d005      	beq.n	8004a8c <USBH_CtlReq+0x14>
 8004a80:	2c02      	cmp	r4, #2
 8004a82:	d109      	bne.n	8004a98 <USBH_CtlReq+0x20>
}
 8004a84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a88:	f7ff bd9c 	b.w	80045c4 <USBH_CtlReq.part.0>
 8004a8c:	4603      	mov	r3, r0
    phost->RequestState = CMD_WAIT;
 8004a8e:	2002      	movs	r0, #2
    phost->Control.buff = buff;
 8004a90:	6099      	str	r1, [r3, #8]
    phost->Control.length = length;
 8004a92:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8004a94:	761c      	strb	r4, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8004a96:	7098      	strb	r0, [r3, #2]
}
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8004aa0:	b530      	push	{r4, r5, lr}
 8004aa2:	b085      	sub	sp, #20

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004aa4:	2400      	movs	r4, #0
 8004aa6:	2508      	movs	r5, #8
 8004aa8:	9101      	str	r1, [sp, #4]
 8004aaa:	9403      	str	r4, [sp, #12]
 8004aac:	4611      	mov	r1, r2
 8004aae:	9400      	str	r4, [sp, #0]
 8004ab0:	4623      	mov	r3, r4
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	9502      	str	r5, [sp, #8]
 8004ab6:	f000 f9b3 	bl	8004e20 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004aba:	4620      	mov	r0, r4
 8004abc:	b005      	add	sp, #20
 8004abe:	bd30      	pop	{r4, r5, pc}

08004ac0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8004ac0:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004ac2:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004ac6:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004ac8:	2d00      	cmp	r5, #0
{
 8004aca:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ace:	9202      	str	r2, [sp, #8]
{
 8004ad0:	461d      	mov	r5, r3
    do_ping = 0U;
 8004ad2:	bf18      	it	ne
 8004ad4:	2400      	movne	r4, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	2201      	movs	r2, #1
 8004ada:	9101      	str	r1, [sp, #4]
 8004adc:	9200      	str	r2, [sp, #0]
 8004ade:	9403      	str	r4, [sp, #12]
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f000 f99c 	bl	8004e20 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004ae8:	2000      	movs	r0, #0
 8004aea:	b005      	add	sp, #20
 8004aec:	bd30      	pop	{r4, r5, pc}
 8004aee:	bf00      	nop

08004af0 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004af0:	b530      	push	{r4, r5, lr}
 8004af2:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004af4:	2400      	movs	r4, #0
 8004af6:	2501      	movs	r5, #1
 8004af8:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8004afc:	9403      	str	r4, [sp, #12]
 8004afe:	4619      	mov	r1, r3
 8004b00:	9500      	str	r5, [sp, #0]
 8004b02:	4623      	mov	r3, r4
 8004b04:	462a      	mov	r2, r5
 8004b06:	f000 f98b 	bl	8004e20 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	b005      	add	sp, #20
 8004b0e:	bd30      	pop	{r4, r5, pc}

08004b10 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8004b10:	b530      	push	{r4, r5, lr}
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004b12:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
{
 8004b16:	b085      	sub	sp, #20
  if(phost->device.speed != USBH_SPEED_HIGH)
 8004b18:	2d00      	cmp	r5, #0
{
 8004b1a:	f89d 4020 	ldrb.w	r4, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b1e:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 8004b20:	bf18      	it	ne
 8004b22:	2400      	movne	r4, #0
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b24:	2201      	movs	r2, #1
 8004b26:	9101      	str	r1, [sp, #4]
 8004b28:	9200      	str	r2, [sp, #0]
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	9403      	str	r4, [sp, #12]
 8004b2e:	2302      	movs	r3, #2
 8004b30:	2200      	movs	r2, #0
 8004b32:	f000 f975 	bl	8004e20 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004b36:	2000      	movs	r0, #0
 8004b38:	b005      	add	sp, #20
 8004b3a:	bd30      	pop	{r4, r5, pc}

08004b3c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8004b3c:	b530      	push	{r4, r5, lr}
 8004b3e:	b085      	sub	sp, #20
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8004b40:	2400      	movs	r4, #0
 8004b42:	2501      	movs	r5, #1
 8004b44:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8004b48:	9403      	str	r4, [sp, #12]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	9500      	str	r5, [sp, #0]
 8004b4e:	462a      	mov	r2, r5
 8004b50:	2302      	movs	r3, #2
 8004b52:	f000 f965 	bl	8004e20 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8004b56:	4620      	mov	r0, r4
 8004b58:	b005      	add	sp, #20
 8004b5a:	bd30      	pop	{r4, r5, pc}

08004b5c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8004b5c:	b530      	push	{r4, r5, lr}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8004b64:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24

  USBH_LL_OpenPipe(phost,
 8004b68:	9400      	str	r4, [sp, #0]
{
 8004b6a:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  USBH_LL_OpenPipe(phost,
 8004b6e:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8004b72:	f000 f92f 	bl	8004dd4 <USBH_LL_OpenPipe>
                        ep_type,
                        mps);

  return USBH_OK;

}
 8004b76:	2000      	movs	r0, #0
 8004b78:	b005      	add	sp, #20
 8004b7a:	bd30      	pop	{r4, r5, pc}

08004b7c <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8004b7c:	b508      	push	{r3, lr}

  USBH_LL_ClosePipe(phost, pipe_num);
 8004b7e:	f000 f941 	bl	8004e04 <USBH_LL_ClosePipe>

  return USBH_OK;

}
 8004b82:	2000      	movs	r0, #0
 8004b84:	bd08      	pop	{r3, pc}
 8004b86:	bf00      	nop

08004b88 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8004b88:	b430      	push	{r4, r5}
 8004b8a:	f500 725f 	add.w	r2, r0, #892	; 0x37c
 8004b8e:	4605      	mov	r5, r0
 8004b90:	2300      	movs	r3, #0
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004b92:	f852 4f04 	ldr.w	r4, [r2, #4]!
 8004b96:	0424      	lsls	r4, r4, #16
 8004b98:	b2d8      	uxtb	r0, r3
 8004b9a:	d505      	bpl.n	8004ba8 <USBH_AllocPipe+0x20>
 8004b9c:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8004b9e:	2b0b      	cmp	r3, #11
 8004ba0:	d1f7      	bne.n	8004b92 <USBH_AllocPipe+0xa>
 8004ba2:	20ff      	movs	r0, #255	; 0xff
}
 8004ba4:	bc30      	pop	{r4, r5}
 8004ba6:	4770      	bx	lr
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8004ba8:	33e0      	adds	r3, #224	; 0xe0
 8004baa:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8004bae:	f845 1023 	str.w	r1, [r5, r3, lsl #2]
}
 8004bb2:	bc30      	pop	{r4, r5}
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop

08004bb8 <USBH_FreePipe>:
   if(idx < 11U)
 8004bb8:	290a      	cmp	r1, #10
 8004bba:	d807      	bhi.n	8004bcc <USBH_FreePipe+0x14>
 8004bbc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
	 phost->Pipes[idx] &= 0x7FFFU;
 8004bc0:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 8004bc4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004bc8:	f8c0 3380 	str.w	r3, [r0, #896]	; 0x380
}
 8004bcc:	2000      	movs	r0, #0
 8004bce:	4770      	bx	lr

08004bd0 <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004bd0:	2904      	cmp	r1, #4
 8004bd2:	d00b      	beq.n	8004bec <USBH_UserProcess+0x1c>
 8004bd4:	2905      	cmp	r1, #5
 8004bd6:	d005      	beq.n	8004be4 <USBH_UserProcess+0x14>
 8004bd8:	2902      	cmp	r1, #2
 8004bda:	d000      	beq.n	8004bde <USBH_UserProcess+0xe>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8004bdc:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8004bde:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <USBH_UserProcess+0x24>)
 8004be0:	7019      	strb	r1, [r3, #0]
  break;
 8004be2:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8004be4:	4b03      	ldr	r3, [pc, #12]	; (8004bf4 <USBH_UserProcess+0x24>)
 8004be6:	2203      	movs	r2, #3
 8004be8:	701a      	strb	r2, [r3, #0]
  break;
 8004bea:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8004bec:	4b01      	ldr	r3, [pc, #4]	; (8004bf4 <USBH_UserProcess+0x24>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	701a      	strb	r2, [r3, #0]
}
 8004bf2:	4770      	bx	lr
 8004bf4:	200000b4 	.word	0x200000b4

08004bf8 <MX_USB_HOST_Init>:
{
 8004bf8:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	490c      	ldr	r1, [pc, #48]	; (8004c30 <MX_USB_HOST_Init+0x38>)
 8004bfe:	480d      	ldr	r0, [pc, #52]	; (8004c34 <MX_USB_HOST_Init+0x3c>)
 8004c00:	f7ff fa6c 	bl	80040dc <USBH_Init>
 8004c04:	b980      	cbnz	r0, 8004c28 <MX_USB_HOST_Init+0x30>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8004c06:	490c      	ldr	r1, [pc, #48]	; (8004c38 <MX_USB_HOST_Init+0x40>)
 8004c08:	480a      	ldr	r0, [pc, #40]	; (8004c34 <MX_USB_HOST_Init+0x3c>)
 8004c0a:	f7ff fa99 	bl	8004140 <USBH_RegisterClass>
 8004c0e:	b940      	cbnz	r0, 8004c22 <MX_USB_HOST_Init+0x2a>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8004c10:	4808      	ldr	r0, [pc, #32]	; (8004c34 <MX_USB_HOST_Init+0x3c>)
 8004c12:	f7ff facd 	bl	80041b0 <USBH_Start>
 8004c16:	b900      	cbnz	r0, 8004c1a <MX_USB_HOST_Init+0x22>
}
 8004c18:	bd08      	pop	{r3, pc}
 8004c1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8004c1e:	f7fb be37 	b.w	8000890 <Error_Handler>
    Error_Handler();
 8004c22:	f7fb fe35 	bl	8000890 <Error_Handler>
 8004c26:	e7f3      	b.n	8004c10 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8004c28:	f7fb fe32 	bl	8000890 <Error_Handler>
 8004c2c:	e7eb      	b.n	8004c06 <MX_USB_HOST_Init+0xe>
 8004c2e:	bf00      	nop
 8004c30:	08004bd1 	.word	0x08004bd1
 8004c34:	200002e0 	.word	0x200002e0
 8004c38:	2000000c 	.word	0x2000000c

08004c3c <MX_USB_HOST_Process>:
  USBH_Process(&hUsbHostFS);
 8004c3c:	4801      	ldr	r0, [pc, #4]	; (8004c44 <MX_USB_HOST_Process+0x8>)
 8004c3e:	f7ff bac1 	b.w	80041c4 <USBH_Process>
 8004c42:	bf00      	nop
 8004c44:	200002e0 	.word	0x200002e0

08004c48 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004c48:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcdHandle->Instance==USB_OTG_FS)
 8004c4a:	6803      	ldr	r3, [r0, #0]
{
 8004c4c:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4e:	2400      	movs	r4, #0
  if(hcdHandle->Instance==USB_OTG_FS)
 8004c50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c54:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8004c58:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8004c5c:	9407      	str	r4, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004c5e:	d001      	beq.n	8004c64 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004c60:	b009      	add	sp, #36	; 0x24
 8004c62:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c64:	4d1b      	ldr	r5, [pc, #108]	; (8004cd4 <HAL_HCD_MspInit+0x8c>)
 8004c66:	9401      	str	r4, [sp, #4]
 8004c68:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004c6a:	481b      	ldr	r0, [pc, #108]	; (8004cd8 <HAL_HCD_MspInit+0x90>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	632b      	str	r3, [r5, #48]	; 0x30
 8004c72:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004c7a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004c7c:	f44f 7300 	mov.w	r3, #512	; 0x200
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c80:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004c82:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004c84:	f7fc fbd6 	bl	8001434 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004c88:	f44f 50e0 	mov.w	r0, #7168	; 0x1c00
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c8e:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004c90:	230a      	movs	r3, #10
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004c92:	9003      	str	r0, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c94:	4810      	ldr	r0, [pc, #64]	; (8004cd8 <HAL_HCD_MspInit+0x90>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c96:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004c98:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c9e:	f7fc fbc9 	bl	8001434 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004ca2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ca8:	636b      	str	r3, [r5, #52]	; 0x34
 8004caa:	9402      	str	r4, [sp, #8]
 8004cac:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb2:	646b      	str	r3, [r5, #68]	; 0x44
 8004cb4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8004cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cba:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004cbc:	4622      	mov	r2, r4
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004cc2:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004cc4:	f7fc f9d6 	bl	8001074 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004cc8:	2043      	movs	r0, #67	; 0x43
 8004cca:	f7fc fa09 	bl	80010e0 <HAL_NVIC_EnableIRQ>
}
 8004cce:	b009      	add	sp, #36	; 0x24
 8004cd0:	bd30      	pop	{r4, r5, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	40020000 	.word	0x40020000

08004cdc <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 8004cdc:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ce0:	f7ff bc26 	b.w	8004530 <USBH_LL_IncTimer>

08004ce4 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 8004ce4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004ce8:	f7ff bc3a 	b.w	8004560 <USBH_LL_Connect>

08004cec <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 8004cec:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004cf0:	f7ff bc4c 	b.w	800458c <USBH_LL_Disconnect>

08004cf4 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop

08004cf8 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 8004cf8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004cfc:	f7ff bc28 	b.w	8004550 <USBH_LL_PortEnabled>

08004d00 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 8004d00:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 8004d04:	f7ff bc28 	b.w	8004558 <USBH_LL_PortDisabled>

08004d08 <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004d08:	f890 23c0 	ldrb.w	r2, [r0, #960]	; 0x3c0
 8004d0c:	2a01      	cmp	r2, #1
 8004d0e:	d001      	beq.n	8004d14 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 8004d10:	2000      	movs	r0, #0
 8004d12:	4770      	bx	lr
  hhcd_USB_OTG_FS.pData = phost;
 8004d14:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <USBH_LL_Init+0x50>)
{
 8004d16:	b570      	push	{r4, r5, r6, lr}
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004d18:	2102      	movs	r1, #2
 8004d1a:	4604      	mov	r4, r0
  phost->pData = &hhcd_USB_OTG_FS;
 8004d1c:	f8c0 33c4 	str.w	r3, [r0, #964]	; 0x3c4
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004d20:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004d24:	2508      	movs	r5, #8
  hhcd_USB_OTG_FS.pData = phost;
 8004d26:	f8c3 02c0 	str.w	r0, [r3, #704]	; 0x2c0
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004d2a:	60da      	str	r2, [r3, #12]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004d2c:	4618      	mov	r0, r3
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004d2e:	2200      	movs	r2, #0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004d30:	601e      	str	r6, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004d32:	609d      	str	r5, [r3, #8]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004d34:	6199      	str	r1, [r3, #24]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004d36:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004d38:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004d3a:	f7fc fcd3 	bl	80016e4 <HAL_HCD_Init>
 8004d3e:	b940      	cbnz	r0, 8004d52 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004d40:	4805      	ldr	r0, [pc, #20]	; (8004d58 <USBH_LL_Init+0x50>)
 8004d42:	f7fd f985 	bl	8002050 <HAL_HCD_GetCurrentFrame>
 8004d46:	4601      	mov	r1, r0
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f7ff fbed 	bl	8004528 <USBH_LL_SetTimer>
}
 8004d4e:	2000      	movs	r0, #0
 8004d50:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8004d52:	f7fb fd9d 	bl	8000890 <Error_Handler>
 8004d56:	e7f3      	b.n	8004d40 <USBH_LL_Init+0x38>
 8004d58:	200006ac 	.word	0x200006ac

08004d5c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8004d5c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 8004d5e:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004d62:	f7fd f93b 	bl	8001fdc <HAL_HCD_Start>
 8004d66:	2803      	cmp	r0, #3
 8004d68:	bf96      	itet	ls
 8004d6a:	4b02      	ldrls	r3, [pc, #8]	; (8004d74 <USBH_LL_Start+0x18>)
 8004d6c:	2002      	movhi	r0, #2
 8004d6e:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004d70:	bd08      	pop	{r3, pc}
 8004d72:	bf00      	nop
 8004d74:	080050e4 	.word	0x080050e4

08004d78 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8004d78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8004d7a:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004d7e:	f7fd f943 	bl	8002008 <HAL_HCD_Stop>
 8004d82:	2803      	cmp	r0, #3
 8004d84:	bf96      	itet	ls
 8004d86:	4b02      	ldrls	r3, [pc, #8]	; (8004d90 <USBH_LL_Stop+0x18>)
 8004d88:	2002      	movhi	r0, #2
 8004d8a:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8004d8c:	bd08      	pop	{r3, pc}
 8004d8e:	bf00      	nop
 8004d90:	080050e4 	.word	0x080050e4

08004d94 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004d94:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004d96:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004d9a:	f7fd f95d 	bl	8002058 <HAL_HCD_GetCurrentSpeed>
 8004d9e:	2802      	cmp	r0, #2
 8004da0:	bf96      	itet	ls
 8004da2:	4b02      	ldrls	r3, [pc, #8]	; (8004dac <USBH_LL_GetSpeed+0x18>)
 8004da4:	2001      	movhi	r0, #1
 8004da6:	5c18      	ldrbls	r0, [r3, r0]
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8004da8:	bd08      	pop	{r3, pc}
 8004daa:	bf00      	nop
 8004dac:	080050e0 	.word	0x080050e0

08004db0 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8004db0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004db2:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004db6:	f7fd f939 	bl	800202c <HAL_HCD_ResetPort>
 8004dba:	2803      	cmp	r0, #3
 8004dbc:	bf96      	itet	ls
 8004dbe:	4b02      	ldrls	r3, [pc, #8]	; (8004dc8 <USBH_LL_ResetPort+0x18>)
 8004dc0:	2002      	movhi	r0, #2
 8004dc2:	5c18      	ldrbls	r0, [r3, r0]
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004dc4:	bd08      	pop	{r3, pc}
 8004dc6:	bf00      	nop
 8004dc8:	080050e4 	.word	0x080050e4

08004dcc <USBH_LL_GetLastXferSize>:
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004dcc:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004dd0:	f7fd b938 	b.w	8002044 <HAL_HCD_HC_GetXferCount>

08004dd4 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004dd4:	b530      	push	{r4, r5, lr}
 8004dd6:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004dd8:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
{
 8004ddc:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8004de0:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004de4:	9400      	str	r4, [sp, #0]
{
 8004de6:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004dea:	e9cd 5401 	strd	r5, r4, [sp, #4]
 8004dee:	f7fc fc29 	bl	8001644 <HAL_HCD_HC_Init>
 8004df2:	2803      	cmp	r0, #3
 8004df4:	bf9a      	itte	ls
 8004df6:	4b02      	ldrls	r3, [pc, #8]	; (8004e00 <USBH_LL_OpenPipe+0x2c>)
 8004df8:	5c18      	ldrbls	r0, [r3, r0]
 8004dfa:	2002      	movhi	r0, #2
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004dfc:	b005      	add	sp, #20
 8004dfe:	bd30      	pop	{r4, r5, pc}
 8004e00:	080050e4 	.word	0x080050e4

08004e04 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004e04:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004e06:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004e0a:	f7fc fc59 	bl	80016c0 <HAL_HCD_HC_Halt>
 8004e0e:	2803      	cmp	r0, #3
 8004e10:	bf96      	itet	ls
 8004e12:	4b02      	ldrls	r3, [pc, #8]	; (8004e1c <USBH_LL_ClosePipe+0x18>)
 8004e14:	2002      	movhi	r0, #2
 8004e16:	5c18      	ldrbls	r0, [r3, r0]

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004e18:	bd08      	pop	{r3, pc}
 8004e1a:	bf00      	nop
 8004e1c:	080050e4 	.word	0x080050e4

08004e20 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8004e20:	b530      	push	{r4, r5, lr}
 8004e22:	b085      	sub	sp, #20
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004e24:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
{
 8004e28:	f89d 5020 	ldrb.w	r5, [sp, #32]
 8004e2c:	9c09      	ldr	r4, [sp, #36]	; 0x24
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004e2e:	9500      	str	r5, [sp, #0]
 8004e30:	9401      	str	r4, [sp, #4]
{
 8004e32:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8004e36:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004e3a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8004e3e:	f7fc fca1 	bl	8001784 <HAL_HCD_HC_SubmitRequest>
 8004e42:	2803      	cmp	r0, #3
 8004e44:	bf9a      	itte	ls
 8004e46:	4b02      	ldrls	r3, [pc, #8]	; (8004e50 <USBH_LL_SubmitURB+0x30>)
 8004e48:	5c18      	ldrbls	r0, [r3, r0]
 8004e4a:	2002      	movhi	r0, #2
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 8004e4c:	b005      	add	sp, #20
 8004e4e:	bd30      	pop	{r4, r5, pc}
 8004e50:	080050e4 	.word	0x080050e4

08004e54 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004e54:	f8d0 03c4 	ldr.w	r0, [r0, #964]	; 0x3c4
 8004e58:	f7fd b8ec 	b.w	8002034 <HAL_HCD_HC_GetURBState>

08004e5c <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004e5c:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8004e5e:	f890 33c0 	ldrb.w	r3, [r0, #960]	; 0x3c0
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d004      	beq.n	8004e70 <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004e66:	20c8      	movs	r0, #200	; 0xc8
 8004e68:	f7fb ff86 	bl	8000d78 <HAL_Delay>
  return USBH_OK;
}
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8004e70:	4608      	mov	r0, r1
 8004e72:	f000 f819 	bl	8004ea8 <MX_DriverVbusFS>
  HAL_Delay(200);
 8004e76:	20c8      	movs	r0, #200	; 0xc8
 8004e78:	f7fb ff7e 	bl	8000d78 <HAL_Delay>
}
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	bd08      	pop	{r3, pc}

08004e80 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004e80:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4

  if(pHandle->hc[pipe].ep_is_in)
 8004e84:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004e88:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004e8c:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 8004e90:	b91b      	cbnz	r3, 8004e9a <USBH_LL_SetToggle+0x1a>
  {
    pHandle->hc[pipe].toggle_in = toggle;
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8004e92:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
  }

  return USBH_OK;
}
 8004e96:	2000      	movs	r0, #0
 8004e98:	4770      	bx	lr
    pHandle->hc[pipe].toggle_in = toggle;
 8004e9a:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
}
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop

08004ea4 <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004ea4:	f7fb bf68 	b.w	8000d78 <HAL_Delay>

08004ea8 <MX_DriverVbusFS>:
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8004ea8:	fab0 f280 	clz	r2, r0
 8004eac:	0952      	lsrs	r2, r2, #5
 8004eae:	2101      	movs	r1, #1
 8004eb0:	4801      	ldr	r0, [pc, #4]	; (8004eb8 <MX_DriverVbusFS+0x10>)
 8004eb2:	f7fc bbc3 	b.w	800163c <HAL_GPIO_WritePin>
 8004eb6:	bf00      	nop
 8004eb8:	40020800 	.word	0x40020800

08004ebc <__errno>:
 8004ebc:	4b01      	ldr	r3, [pc, #4]	; (8004ec4 <__errno+0x8>)
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	2000002c 	.word	0x2000002c

08004ec8 <__libc_init_array>:
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	4e0d      	ldr	r6, [pc, #52]	; (8004f00 <__libc_init_array+0x38>)
 8004ecc:	4c0d      	ldr	r4, [pc, #52]	; (8004f04 <__libc_init_array+0x3c>)
 8004ece:	1ba4      	subs	r4, r4, r6
 8004ed0:	10a4      	asrs	r4, r4, #2
 8004ed2:	2500      	movs	r5, #0
 8004ed4:	42a5      	cmp	r5, r4
 8004ed6:	d109      	bne.n	8004eec <__libc_init_array+0x24>
 8004ed8:	4e0b      	ldr	r6, [pc, #44]	; (8004f08 <__libc_init_array+0x40>)
 8004eda:	4c0c      	ldr	r4, [pc, #48]	; (8004f0c <__libc_init_array+0x44>)
 8004edc:	f000 f8e2 	bl	80050a4 <_init>
 8004ee0:	1ba4      	subs	r4, r4, r6
 8004ee2:	10a4      	asrs	r4, r4, #2
 8004ee4:	2500      	movs	r5, #0
 8004ee6:	42a5      	cmp	r5, r4
 8004ee8:	d105      	bne.n	8004ef6 <__libc_init_array+0x2e>
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ef0:	4798      	blx	r3
 8004ef2:	3501      	adds	r5, #1
 8004ef4:	e7ee      	b.n	8004ed4 <__libc_init_array+0xc>
 8004ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004efa:	4798      	blx	r3
 8004efc:	3501      	adds	r5, #1
 8004efe:	e7f2      	b.n	8004ee6 <__libc_init_array+0x1e>
 8004f00:	080050f0 	.word	0x080050f0
 8004f04:	080050f0 	.word	0x080050f0
 8004f08:	080050f0 	.word	0x080050f0
 8004f0c:	080050f4 	.word	0x080050f4

08004f10 <malloc>:
 8004f10:	4b02      	ldr	r3, [pc, #8]	; (8004f1c <malloc+0xc>)
 8004f12:	4601      	mov	r1, r0
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	f000 b859 	b.w	8004fcc <_malloc_r>
 8004f1a:	bf00      	nop
 8004f1c:	2000002c 	.word	0x2000002c

08004f20 <free>:
 8004f20:	4b02      	ldr	r3, [pc, #8]	; (8004f2c <free+0xc>)
 8004f22:	4601      	mov	r1, r0
 8004f24:	6818      	ldr	r0, [r3, #0]
 8004f26:	f000 b803 	b.w	8004f30 <_free_r>
 8004f2a:	bf00      	nop
 8004f2c:	2000002c 	.word	0x2000002c

08004f30 <_free_r>:
 8004f30:	b538      	push	{r3, r4, r5, lr}
 8004f32:	4605      	mov	r5, r0
 8004f34:	2900      	cmp	r1, #0
 8004f36:	d045      	beq.n	8004fc4 <_free_r+0x94>
 8004f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f3c:	1f0c      	subs	r4, r1, #4
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bfb8      	it	lt
 8004f42:	18e4      	addlt	r4, r4, r3
 8004f44:	f000 f8ac 	bl	80050a0 <__malloc_lock>
 8004f48:	4a1f      	ldr	r2, [pc, #124]	; (8004fc8 <_free_r+0x98>)
 8004f4a:	6813      	ldr	r3, [r2, #0]
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	b933      	cbnz	r3, 8004f5e <_free_r+0x2e>
 8004f50:	6063      	str	r3, [r4, #4]
 8004f52:	6014      	str	r4, [r2, #0]
 8004f54:	4628      	mov	r0, r5
 8004f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f5a:	f000 b8a2 	b.w	80050a2 <__malloc_unlock>
 8004f5e:	42a3      	cmp	r3, r4
 8004f60:	d90c      	bls.n	8004f7c <_free_r+0x4c>
 8004f62:	6821      	ldr	r1, [r4, #0]
 8004f64:	1862      	adds	r2, r4, r1
 8004f66:	4293      	cmp	r3, r2
 8004f68:	bf04      	itt	eq
 8004f6a:	681a      	ldreq	r2, [r3, #0]
 8004f6c:	685b      	ldreq	r3, [r3, #4]
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	bf04      	itt	eq
 8004f72:	1852      	addeq	r2, r2, r1
 8004f74:	6022      	streq	r2, [r4, #0]
 8004f76:	6004      	str	r4, [r0, #0]
 8004f78:	e7ec      	b.n	8004f54 <_free_r+0x24>
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	b10a      	cbz	r2, 8004f84 <_free_r+0x54>
 8004f80:	42a2      	cmp	r2, r4
 8004f82:	d9fa      	bls.n	8004f7a <_free_r+0x4a>
 8004f84:	6819      	ldr	r1, [r3, #0]
 8004f86:	1858      	adds	r0, r3, r1
 8004f88:	42a0      	cmp	r0, r4
 8004f8a:	d10b      	bne.n	8004fa4 <_free_r+0x74>
 8004f8c:	6820      	ldr	r0, [r4, #0]
 8004f8e:	4401      	add	r1, r0
 8004f90:	1858      	adds	r0, r3, r1
 8004f92:	4282      	cmp	r2, r0
 8004f94:	6019      	str	r1, [r3, #0]
 8004f96:	d1dd      	bne.n	8004f54 <_free_r+0x24>
 8004f98:	6810      	ldr	r0, [r2, #0]
 8004f9a:	6852      	ldr	r2, [r2, #4]
 8004f9c:	605a      	str	r2, [r3, #4]
 8004f9e:	4401      	add	r1, r0
 8004fa0:	6019      	str	r1, [r3, #0]
 8004fa2:	e7d7      	b.n	8004f54 <_free_r+0x24>
 8004fa4:	d902      	bls.n	8004fac <_free_r+0x7c>
 8004fa6:	230c      	movs	r3, #12
 8004fa8:	602b      	str	r3, [r5, #0]
 8004faa:	e7d3      	b.n	8004f54 <_free_r+0x24>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	1821      	adds	r1, r4, r0
 8004fb0:	428a      	cmp	r2, r1
 8004fb2:	bf04      	itt	eq
 8004fb4:	6811      	ldreq	r1, [r2, #0]
 8004fb6:	6852      	ldreq	r2, [r2, #4]
 8004fb8:	6062      	str	r2, [r4, #4]
 8004fba:	bf04      	itt	eq
 8004fbc:	1809      	addeq	r1, r1, r0
 8004fbe:	6021      	streq	r1, [r4, #0]
 8004fc0:	605c      	str	r4, [r3, #4]
 8004fc2:	e7c7      	b.n	8004f54 <_free_r+0x24>
 8004fc4:	bd38      	pop	{r3, r4, r5, pc}
 8004fc6:	bf00      	nop
 8004fc8:	200000b8 	.word	0x200000b8

08004fcc <_malloc_r>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	1ccd      	adds	r5, r1, #3
 8004fd0:	f025 0503 	bic.w	r5, r5, #3
 8004fd4:	3508      	adds	r5, #8
 8004fd6:	2d0c      	cmp	r5, #12
 8004fd8:	bf38      	it	cc
 8004fda:	250c      	movcc	r5, #12
 8004fdc:	2d00      	cmp	r5, #0
 8004fde:	4606      	mov	r6, r0
 8004fe0:	db01      	blt.n	8004fe6 <_malloc_r+0x1a>
 8004fe2:	42a9      	cmp	r1, r5
 8004fe4:	d903      	bls.n	8004fee <_malloc_r+0x22>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	6033      	str	r3, [r6, #0]
 8004fea:	2000      	movs	r0, #0
 8004fec:	bd70      	pop	{r4, r5, r6, pc}
 8004fee:	f000 f857 	bl	80050a0 <__malloc_lock>
 8004ff2:	4a21      	ldr	r2, [pc, #132]	; (8005078 <_malloc_r+0xac>)
 8004ff4:	6814      	ldr	r4, [r2, #0]
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	b991      	cbnz	r1, 8005020 <_malloc_r+0x54>
 8004ffa:	4c20      	ldr	r4, [pc, #128]	; (800507c <_malloc_r+0xb0>)
 8004ffc:	6823      	ldr	r3, [r4, #0]
 8004ffe:	b91b      	cbnz	r3, 8005008 <_malloc_r+0x3c>
 8005000:	4630      	mov	r0, r6
 8005002:	f000 f83d 	bl	8005080 <_sbrk_r>
 8005006:	6020      	str	r0, [r4, #0]
 8005008:	4629      	mov	r1, r5
 800500a:	4630      	mov	r0, r6
 800500c:	f000 f838 	bl	8005080 <_sbrk_r>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d124      	bne.n	800505e <_malloc_r+0x92>
 8005014:	230c      	movs	r3, #12
 8005016:	6033      	str	r3, [r6, #0]
 8005018:	4630      	mov	r0, r6
 800501a:	f000 f842 	bl	80050a2 <__malloc_unlock>
 800501e:	e7e4      	b.n	8004fea <_malloc_r+0x1e>
 8005020:	680b      	ldr	r3, [r1, #0]
 8005022:	1b5b      	subs	r3, r3, r5
 8005024:	d418      	bmi.n	8005058 <_malloc_r+0x8c>
 8005026:	2b0b      	cmp	r3, #11
 8005028:	d90f      	bls.n	800504a <_malloc_r+0x7e>
 800502a:	600b      	str	r3, [r1, #0]
 800502c:	50cd      	str	r5, [r1, r3]
 800502e:	18cc      	adds	r4, r1, r3
 8005030:	4630      	mov	r0, r6
 8005032:	f000 f836 	bl	80050a2 <__malloc_unlock>
 8005036:	f104 000b 	add.w	r0, r4, #11
 800503a:	1d23      	adds	r3, r4, #4
 800503c:	f020 0007 	bic.w	r0, r0, #7
 8005040:	1ac3      	subs	r3, r0, r3
 8005042:	d0d3      	beq.n	8004fec <_malloc_r+0x20>
 8005044:	425a      	negs	r2, r3
 8005046:	50e2      	str	r2, [r4, r3]
 8005048:	e7d0      	b.n	8004fec <_malloc_r+0x20>
 800504a:	428c      	cmp	r4, r1
 800504c:	684b      	ldr	r3, [r1, #4]
 800504e:	bf16      	itet	ne
 8005050:	6063      	strne	r3, [r4, #4]
 8005052:	6013      	streq	r3, [r2, #0]
 8005054:	460c      	movne	r4, r1
 8005056:	e7eb      	b.n	8005030 <_malloc_r+0x64>
 8005058:	460c      	mov	r4, r1
 800505a:	6849      	ldr	r1, [r1, #4]
 800505c:	e7cc      	b.n	8004ff8 <_malloc_r+0x2c>
 800505e:	1cc4      	adds	r4, r0, #3
 8005060:	f024 0403 	bic.w	r4, r4, #3
 8005064:	42a0      	cmp	r0, r4
 8005066:	d005      	beq.n	8005074 <_malloc_r+0xa8>
 8005068:	1a21      	subs	r1, r4, r0
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f808 	bl	8005080 <_sbrk_r>
 8005070:	3001      	adds	r0, #1
 8005072:	d0cf      	beq.n	8005014 <_malloc_r+0x48>
 8005074:	6025      	str	r5, [r4, #0]
 8005076:	e7db      	b.n	8005030 <_malloc_r+0x64>
 8005078:	200000b8 	.word	0x200000b8
 800507c:	200000bc 	.word	0x200000bc

08005080 <_sbrk_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	4c06      	ldr	r4, [pc, #24]	; (800509c <_sbrk_r+0x1c>)
 8005084:	2300      	movs	r3, #0
 8005086:	4605      	mov	r5, r0
 8005088:	4608      	mov	r0, r1
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	f7fb fdce 	bl	8000c2c <_sbrk>
 8005090:	1c43      	adds	r3, r0, #1
 8005092:	d102      	bne.n	800509a <_sbrk_r+0x1a>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	b103      	cbz	r3, 800509a <_sbrk_r+0x1a>
 8005098:	602b      	str	r3, [r5, #0]
 800509a:	bd38      	pop	{r3, r4, r5, pc}
 800509c:	20000970 	.word	0x20000970

080050a0 <__malloc_lock>:
 80050a0:	4770      	bx	lr

080050a2 <__malloc_unlock>:
 80050a2:	4770      	bx	lr

080050a4 <_init>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr

080050b0 <_fini>:
 80050b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050b2:	bf00      	nop
 80050b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050b6:	bc08      	pop	{r3}
 80050b8:	469e      	mov	lr, r3
 80050ba:	4770      	bx	lr
